:MathematicalThing     a owl:Class;
	rdfs:subClassOf owl:Class;
	rdfs:comment "Instances of this class are Algorithms, Data Structures, Abstract Data Types, or Algorithmic Techniques.".

:Algorithm     a owl:Class;
	rdfs:subClassOf :MathematicalThing;
	rdfs:comment "This class represents computable sets of steps to achieve desired results.";
	rdfs:label "Algorithm".

:DataStructure     a owl:Class;
	rdfs:subClassOf :MathematicalThing;
	rdfs:comment "This class represents organizations of information, usually in memory, for better algorithm efficiency, such as queue, stack, linked list, heap, dictionary, and tree, or conceptual unity, such as the name and address of a person. It may include redundant information, such as length of the list or number of nodes in a subtree.";
	rdfs:label "Data Structure".
     
:AbstractDataType     a owl:Class;
	rdfs:subClassOf :MathematicalThing;
	rdfs:comment "This class represents sets of data values and associated algorithm that are precisely specified independent of any particular implementation. Abstract Data Types can be components of either Algorithms or Data Structures.";
	rdfs:label "Abstract Data Type".

:AlgorithmicTechnique     a owl:Class;
	rdfs:subClassOf :MathematicalThing;
	rdfs:comment "This class represents general computational techniques.  An Algorithmic Technique is NOT an Algorithm; rather, Algorithms use Algorithmic Techniques.";
	rdfs:label "Algorithmic Technique". 

:Definition     a owl:Class;
	rdfs:subClassOf owl:Class;
	rdfs:comment "This class is at present simply a placeholder that occupies the superclass position for Definitions.  Definitions are atomic elements, like vertex, or adjectives, like root or stable (sort).";
	rdfs:label "Definition".

:Program     a owl:Class;
	rdfs:comment "An instance of this class is a program that executes an algorithm.";
	rdfs:label "Program".

:computedBy     a owl:ObjectProperty;
	rdfs:comment "This property relates an instance of Algorithmic Technique with an instance of Algorithm.  It says that the Algorithmic Technique can be performed by the Algorithm.";
	rdfs:label "Computed By";
	rdfs:domain :AlgorithmicTechnique;
	rdfs:range :Algorithm.

:aggregateChild     a owl:ObjectProperty;
	rdfs:comment "The property says that an Algorithm or Data Structure uses another Algorithm or Data Structure in its computation.  For example, an aggregate child of Heap Sort is Heap.";
	rdfs:label "Aggregate Child";
	rdfs:domain :MathematicalThing;
	rdfs:range :MathematicalThing.

:complexity_Worst     a owl:DatatypeProperty;
	rdfs:comment "For now, this property relates an instance of algorithm with a string conveying its complexity in the worst case, e.g., O(n^2).";
	rdfs:label "Worst Case Complexity";
	rdfs:domain :Algorithm;
	rdfs:range <http://www.w3.org/2001/XMLSchema#string> .

:complexity_Average     a owl:DatatypeProperty;
	rdfs:comment "For now, this property relates an instance of algorithm with a string conveying its complexity in the typical case, e.g., O(n log n).";
	rdfs:label "Average Case Complexity";
	rdfs:domain :Algorithm;
	rdfs:range <http://www.w3.org/2001/XMLSchema#string> .

:implements       a owl:ObjectProperty;
	rdfs:comment "This property relates an instances of Program with instances of Algorithm or Data Structure.  It means that the Program is executable code for the Algorithm or Data Structure."; 
	rdfs:label "Implements";
	rdfs:domain :Program;
	rdfs:range :MathematicalThing.

:implementationLanguage      a owl:DatatypeProperty;
	rdfs:comment "This property relates an instance of Program with a string indicating the programming language in which it was coded.";
	rdfs:label "Implementation Language";
	rdfs:domain :Program;
	rdfs:range <http://www.w3.org/2001/XMLSchema#string>.

:implementationURL      a owl:DatatypeProperty;
	rdfs:comment "This property relates an instance of Program with a URL at which the program can be found.";
	rdfs:label "Implementation URL";
	rdfs:domain :Program;
	rdfs:range <http://www.w3.org/2001/XMLSchema#anyURI>.



:ComplexityMeasure a owl:Class;
	rdfs:subClassOf :Definition;
	rdfs:comment "Complexity Measure".

:Omega			a :ComplexityMeasure;
	rdfs:comment "A theoretical measure of the execution of an algorithm, usually the time or memory needed, given the problem size $n$, which is usually the number of items.  Informally, saying some equation $f(n) = \\omega (g(n))$ means $g(n)$ becomes insignificant relative to $f(n)$ as $n$ goes to infinity.  ";
	rdfs:label "Omega".

:Sim			a :ComplexityMeasure;
	rdfs:comment "(1) Proportional to.  (2) Asymptotically equal to.  A theoretical measure of the execution of an algorithm, usually the time or memory needed, given the problem size $n$, which is usually the number of items.  Informally, saying some equation $f(n) \\sim g(n)$ means it grows at the same rate as $g(n)$. More formally, it means  $lim<sub>x \\rightarrow \\infty</sub>f(x)/g(x) = 1$.";
	rdfs:label "Sim".

:Theta			a :ComplexityMeasure;
	rdfs:comment "A theoretical measure of the execution of an algorithm, usually the time or memory needed, given the problem size $n$, which is usually the number of items.  Informally, saying some equation $f(n) = \\Theta (g(n))$ means it is within a constant multiple of g(n).  The equation is read, \"f of n is theta g of n\".";
	rdfs:label "Theta".

