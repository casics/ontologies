**Grit is no longer maintained. Check out libgit2/rugged.** Grit gives you object oriented read/write access to Git repositories via Ruby. b'Grit\n====\n\n**Grit is no longer maintained. Check out [rugged](https://github.com/libgit2/rugged).**\n\nGrit gives you object oriented read/write access to Git repositories via Ruby.\nThe main goals are stability and performance. To this end, some of the\ninteractions with Git repositories are done by shelling out to the system\'s\n`git` command, and other interactions are done with pure Ruby\nreimplementations of core Git functionality. This choice, however, is\ntransparent to end users, and you need not know which method is being used.\n\nThis software was developed to power GitHub, and should be considered\nproduction ready. An extensive test suite is provided to verify its\ncorrectness.\n\nGrit is maintained by Tom Preston-Werner, Scott Chacon, Chris Wanstrath, and\nPJ Hyett.\n\nThis documentation is accurate as of Grit 2.3.\n\n\n## Requirements\n\n* git (http://git-scm.com) tested with 1.7.2.1\n\n\n## Install\n\nEasiest install is via RubyGems:\n\n    $ gem install grit\n\n\n## Source\n\nGrit\'s Git repo is available on GitHub, which can be browsed at:\n\n    http://github.com/mojombo/grit\n\nand cloned with:\n\n    git clone git://github.com/mojombo/grit.git\n\n\n### Development\n\nYou will need these gems to get tests to pass:\n\n* mocha\n\n\n### Contributing\n\nIf you\'d like to hack on Grit, follow these instructions. To get all of the dependencies, install the gem first.\n\n1. Fork the project to your own account\n1. Clone down your fork\n1. Create a thoughtfully named topic branch to contain your change\n1. Hack away\n1. Add tests and make sure everything still passes by running `rake`\n1. If you are adding new functionality, document it in README.md\n1. Do not change the version number, I will do that on my end\n1. If necessary, rebase your commits into logical chunks, without errors\n1. Push the branch up to GitHub\n1. Send a pull request for your branch\n\n\n## Usage\n\nGrit gives you object model access to your Git repositories. Once you have\ncreated a `Repo` object, you can traverse it to find parent commits,\ntrees, blobs, etc.\n\n\n### Initialize a Repo object\n\nThe first step is to create a `Grit::Repo` object to represent your repo. In\nthis documentation I include the `Grit` module to reduce typing.\n\n    require \'grit\'\n    repo = Grit::Repo.new("/Users/tom/dev/grit")\n\nIn the above example, the directory `/Users/tom/dev/grit` is my working\ndirectory and contains the `.git` directory. You can also initialize Grit with\na bare repo.\n\n    repo = Repo.new("/var/git/grit.git")\n\n\n### Getting a list of commits\n\nFrom the `Repo` object, you can get a list of commits as an array of `Commit`\nobjects.\n\n    repo.commits\n    # => [#<Grit::Commit "e80bbd2ce67651aa18e57fb0b43618ad4baf7750">,\n          #<Grit::Commit "91169e1f5fa4de2eaea3f176461f5dc784796769">,\n          #<Grit::Commit "038af8c329ef7c1bae4568b98bd5c58510465493">,\n          #<Grit::Commit "40d3057d09a7a4d61059bca9dca5ae698de58cbe">,\n          #<Grit::Commit "4ea50f4754937bf19461af58ce3b3d24c77311d9">]\n\nCalled without arguments, `Repo#commits` returns a list of up to ten commits\nreachable by the **master** branch (starting at the latest commit). You can\nask for commits beginning at a different branch, commit, tag, etc.\n\n    repo.commits(\'mybranch\')\n    repo.commits(\'40d3057d09a7a4d61059bca9dca5ae698de58cbe\')\n    repo.commits(\'v0.1\')\n\nYou can specify the maximum number of commits to return.\n\n    repo.commits(\'master\', 100)\n\nIf you need paging, you can specify a number of commits to skip.\n\n    repo.commits(\'master\', 10, 20)\n\nThe above will return commits 21-30 from the commit list.\n\n\n### The Commit object\n\n`Commit` objects contain information about that commit.\n\n    head = repo.commits.first\n\n    head.id\n    # => "e80bbd2ce67651aa18e57fb0b43618ad4baf7750"\n\n    head.parents\n    # => [#<Grit::Commit "91169e1f5fa4de2eaea3f176461f5dc784796769">]\n\n    head.tree\n    # => #<Grit::Tree "3536eb9abac69c3e4db583ad38f3d30f8db4771f">\n\n    head.author\n    # => #<Grit::Actor "Tom Preston-Werner <tom@mojombo.com>">\n\n    head.authored_date\n    # => Wed Oct 24 22:02:31 -0700 2007\n\n    head.committer\n    # => #<Grit::Actor "Tom Preston-Werner <tom@mojombo.com>">\n\n    head.committed_date\n    # => Wed Oct 24 22:02:31 -0700 2007\n\n    head.message\n    # => "add Actor inspect"\n\nYou can traverse a commit\'s ancestry by chaining calls to `#parents`.\n\n    repo.commits.first.parents[0].parents[0].parents[0]\n\nThe above corresponds to **master^^^** or **master~3** in Git parlance.\n\n\n### The Tree object\n\nA tree records pointers to the contents of a directory. Let\'s say you want\nthe root tree of the latest commit on the **master** branch.\n\n    tree = repo.commits.first.tree\n    # => #<Grit::Tree "3536eb9abac69c3e4db583ad38f3d30f8db4771f">\n\n    tree.id\n    # => "3536eb9abac69c3e4db583ad38f3d30f8db4771f"\n\nOnce you have a tree, you can get the contents.\n\n    contents = tree.contents\n    # => [#<Grit::Blob "4ebc8aea50e0a67e000ba29a30809d0a7b9b2666">,\n          #<Grit::Blob "81d2c27608b352814cbe979a6acd678d30219678">,\n          #<Grit::Tree "c3d07b0083f01a6e1ac969a0f32b8d06f20c62e5">,\n          #<Grit::Tree "4d00fe177a8407dbbc64a24dbfc564762c0922d8">]\n\nThis tree contains two `Blob` objects and two `Tree` objects. The trees are\nsubdirectories and the blobs are files. Trees below the root have additional\nattributes.\n\n    contents.last.name\n    # => "lib"\n\n    contents.last.mode\n    # => "040000"\n\nThere is a convenience method that allows you to get a named sub-object\nfrom a tree.\n\n    tree / "lib"\n    # => #<Grit::Tree "e74893a3d8a25cbb1367cf241cc741bfd503c4b2">\n\nYou can also get a tree directly from the repo if you know its name.\n\n    repo.tree\n    # => #<Grit::Tree "master">\n\n    repo.tree("91169e1f5fa4de2eaea3f176461f5dc784796769")\n    # => #<Grit::Tree "91169e1f5fa4de2eaea3f176461f5dc784796769">\n\n\n### The Blob object\n\nA blob represents a file. Trees often contain blobs.\n\n    blob = tree.contents.first\n    # => #<Grit::Blob "4ebc8aea50e0a67e000ba29a30809d0a7b9b2666">\n\nA blob has certain attributes.\n\n    blob.id\n    # => "4ebc8aea50e0a67e000ba29a30809d0a7b9b2666"\n\n    blob.name\n    # => "README.txt"\n\n    blob.mode\n    # => "100644"\n\n    blob.size\n    # => 7726\n\nYou can get the data of a blob as a string.\n\n    blob.data\n    # => "Grit is a library to ..."\n\nYou can also get a blob directly from the repo if you know its name.\n\n    repo.blob("4ebc8aea50e0a67e000ba29a30809d0a7b9b2666")\n    # => #<Grit::Blob "4ebc8aea50e0a67e000ba29a30809d0a7b9b2666">\n\n\n### Other\n\nThere are many more API methods available that are not documented here. Please\nreference the code for more functionality.\n\n\nCopyright\n---------\n\nCopyright (c) 2010 Tom Preston-Werner. See LICENSE for details.\n'
Merb Core: All you need. None you don't. b'merb-core and merb-more have been merged into http://github.com/wycats/merb'
The Rubinius Language Platform b'[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/rubinius/rubinius?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) [![Build Status](https://travis-ci.org/rubinius/rubinius.svg?branch=master)](https://travis-ci.org/rubinius/rubinius)\n\n## The Rubinius Language Platform\n\nRubinius is a modern language platform that supports a number of programming languages.\n\nRubinius includes a bytecode virtual machine, generational garbage collector, and just-in-time (JIT) native machine code compiler. Rubinius provides concurrency support via native OS threads with no global interpreter lock.\n\nRubinius runs on Mac OS X and many Unix/Linux operating systems.  Microsoft Windows is not yet supported.\n\n\n### The Ruby Programming Language\n\nMany popular Ruby applications, like Rails, run on Rubinius, which aims to be\ncompatible with Ruby version 2.1.\n\nRubinius includes a Ruby parser, Ruby bytecode compiler, Ruby core library,\nand C-API compatibility for native C extensions. The Ruby core library is\nwritten almost entirely in Ruby. The Ruby bytecode compiler and other tools,\nsuch as the debugger, are also written in Ruby.  Rubinius provides the\nstandard Ruby libraries, with the following exceptions:\n\n* Continuation\n* Ripper\n* TracePoint\n* Tracer\n\nThe following Ruby features are not supported on Rubinius:\n\n* Refinements\n* $SAFE levels\n\n\n### License\n\nRubinius uses the BSD license. See LICENSE for details.\n\n\n### Installing Rubinius from Source\n\nTo install Rubinius, use the following steps:\n\n1. Ensure that MRI 2.0+, rubygems, rake, git and LLVM are installed\n1. git clone git://github.com/rubinius/rubinius.git\n1. cd rubinius\n1. bundle\n1. ./configure --prefix=/path/to/install/dir\n1. rake\n\nWhen the install process finishes, follow the directions printed to the terminal to add the Rubinius executable (bin) directory to your PATH. For more information see the documentation for [Build Requirements](http://rubini.us/doc/en/getting-started/requirements/) and [Building Rubinius](http://rubini.us/doc/en/getting-started/building/).\n\n\n### Using RubyGems\n\nRubinius comes with RubyGems built-in. To install a gem, run the following:\n\n    $ rbx -S gem install <gem_name>\n\n\n### Documentation\n\nThe Rubinius documentation is available at the [Rubinius website](http://rubini.us).\n\n\n### Issues & Support\n\nPlease [file tickets](http://github.com/rubinius/rubinius/issues) for bugs or problems.\n\nFor additional help, visit the [Rubinius Gitter chat room](https://gitter.im/rubinius/rubinius).\n\n\n### Contributing\n\nThe Rubinius team welcomes contributions. For more information, read the\n[CONTRIBUTING](https://github.com/rubinius/rubinius/blob/master/CONTRIBUTING.md) file and see the documentation [about contributing](http://rubini.us/doc/en/contributing/).\n'
Ruby process monitor b'God: The Ruby Framework for Process Management\n==============================================\n\n* Authors: Tom Preston-Werner, Kevin Clark, Eric Lindvall\n* Website: http://godrb.com\n\nDescription\n-----------\n\nGod is an easy to configure, easy to extend monitoring framework written in\nRuby.\n\nKeeping your server processes and tasks running should be a simple part of\nyour deployment process. God aims to be the simplest, most powerful monitoring\napplication available.\n\nDocumentation\n-------------\n\nSee in-repo documentation at `REPO_ROOT/doc`.\nSee online documentation at http://godrb.com.\n\nCommunity\n---------\n\nSign up for the god mailing list at http://groups.google.com/group/god-rb\n\nLicense\n-------\n\nSee LICENSE file.\n'
Awesome JSON b'Jsawesome\n\nDescription:\n    JSAwesome provides a powerful JSON based DSL for creating interactive forms.\n\nExample:\n    new JSAwesome(\'rad\', [[\'cool\',\'neat\'], [\'^neat\',true]], {\'cool\':{label:\'Cool man\', validation:\'cool\'}).to_html()\n    =>\n      <label for="rad_cool">Cool man</label>\n      <input type="text" name="rad_cool" value="neat"/>\n      <label for="rad_neat"><input type="checkbox" name="rad_neat" checked="checked"/> Neat</label>\n    \n    A detailed overview of the library is now available at\n      http://vandev.com/2008/4/22/jsawesome\n      \n    Also see the functional tests for more examples of what is possible\n\nMore information:\n    http://github.com/vanpelt/jsawesome/tree/master\n    \nAuthor:\n    Chris Van Pelt, vanpelt@doloreslabs.com'
A JavaScript BDD Testing Library 
Unmaintained. Sorry. b'ExceptionLogger\n===============\n\nThe Exception Logger (forgive the horrible name) logs your Rails exceptions in the database and provides a funky web interface to manage them.\n\nFirst you need to generate the migration:\n\n  ./script/generate exception_migration\n\nNext, you\'ll need to include the ExceptionLoggable module into ApplicationController.  Once that\'s done you might want to modify key methods to customize the logging:\n\n  render_404(exception) - Shows the 404 template.\n  \n  render_500(exception) - Shows the 500 template.\n  \n  log_exception(exception) - Logs the actual exception in the database.\n  \n  rescue_action_in_public(exception) - Does not log these exceptions: ActiveRecord::RecordNotFound, ActionController::UnknownController, ActionController::UnknownAction\n\nNow add a new route to your routes.rb:\n\n  map.connect "logged_exceptions/:action/:id", :controller => "logged_exceptions"\n\nAfter that, visit /logged_exceptions in your application to manage the exceptions.\n\nOnce you have done that, open up the vendor/plugins/init.rb file and choose your pagination,\nsupported options are will_paginate, paginating_find, and simple mysql based pagination (Uses LIMIT)\nThe current default is none. To use the other options you need to uncomment the $PAGINATION_TYPE line\nand the require for that pagination, you should comment out what you won\'t use etc...\n\nIt\'s understandable that you may want to require authentication.  Add this to your config/environments/production.rb:\n\n  # config/environments/production.rb\n  config.after_initialize do\n    require \'application\' unless Object.const_defined?(:ApplicationController)\n    LoggedExceptionsController.class_eval do\n      # set the same session key as the app\n      session :session_key => \'_beast_session_id\'\n      \n      # include any custom auth modules you need\n      include AuthenticationSystem\n      \n      before_filter :login_required\n      \n      # optional, sets the application name for the rss feeds\n      self.application_name = "Beast"\n      \n      protected\n        # only allow admins\n        # this obviously depends on how your auth system works\n        def authorized?\n          current_user.is_a?(Admin)\n        end\n        \n        # assume app\'s login required doesn\'t use http basic\n        def login_required_with_basic\n          respond_to do |accepts|\n            # alias_method_chain will alias the app\'s login_required to login_required_without_basic\n            accepts.html { login_required_without_basic }\n            \n            # access_denied_with_basic_auth is defined in LoggedExceptionsController\n            # get_auth_data returns back the user/password pair\n            accepts.rss do\n              access_denied_with_basic_auth unless self.current_user = User.authenticate(*get_auth_data)\n            end\n          end\n        end\n        \n        alias_method_chain :login_required, :basic\n    end\n  end\n\nThe exact code of course depends on the specific needs of your application.\n\nCREDITS\n\nJamis Buck  - original exception_notification plugin\nRick Olson  - model/controller code\nJosh Goebel - design\nJason Knight - Pagination support, built on/inspired by Ryanb\'s willpaginate support.\n'
include Enumerable — Unmaintained b'= Ambition\n\n\n== Get it\n\n\n\n$ git clone git://github.com/defunkt/ambition.git\n\n== Resources\n\n * http://ambition.rubyforge.org/\n * http://groups.google.com/group/ambition-rb/\n * http://errtheblog.com/posts/63-full-of-ambition\n * http://errtheblog.com/posts/82-adapting-ambitiously\n * http://errtheblog.com/posts/86-sugary-adapters\n * http://errtheblog.com/posts/64-even-more-ambitious\n\n\n\n== Author\n\nChris Wanstrath\nchris@ozmm.org\n'
Generates common user authentication code for Rails/Merb, with a full test/unit and rspec suite and optional Acts as State Machine support built-in. b'# "Restful Authentication Generator":http://github.com/technoweenie/restful-authentication\n\nThis widely-used plugin provides a foundation for securely managing user\nauthentication:\n* Login / logout\n* Secure password handling\n* Account activation by validating email\n* Account approval / disabling by admin\n* Rudimentary hooks for authorization and access control.\n\nSeveral features were updated in May, 2008.\n* "Stable newer version":http://github.com/technoweenie/restful-authentication/tree/master\n* "\'Classic\' (backward-compatible) version":http://github.com/technoweenie/restful-authentication/tree/classic\n* "Experimental version":http://github.com/technoweenie/restful-authentication/tree/modular (Much more modular, needs testing & review)\n\n> IMPORTANT: if you upgrade your site, existing user account\n> passwords will stop working unless you use --old-passwords\n\n***************************************************************************\n\n## Issue Tracker\n\nPlease submit any bugs or annoyances on the lighthouse tracker at\n* "http://rails_security.lighthouseapp.com/projects/15332-restful_authentication/overview":http://rails_security.lighthouseapp.com/projects/15332-restful_authentication/overview\n\nFor anything simple enough, please github message both maintainers: Rick Olson\n("technoweenie":http://github.com/technoweenie) and Flip Kromer\n("mrflip":http://github.com/mrflip).\n\n***************************************************************************\n\n## Documentation\n\nThis page has notes on\n* "Installation":#INSTALL\n* "New Features":#AWESOME\n* "After installing":#POST-INSTALL\n\nSee the "wiki":http://github.com/technoweenie/restful-authentication/wikis/home\n(or the notes/ directory) if you want to learn more about:\n\n* "Extensions, Addons and Alternatives":addons such as HAML templates\n* "Security Design Patterns":security-patterns with "snazzy diagram":http://github.com/technoweenie/restful-authentication/tree/master/notes/SecurityFramework.png\n* Authentication -- Lets a visitor identify herself (and lay  claim to her corresponding Roles and measure of Trust)\n* "Trust Metrics":Trustification -- Confidence we can rely on the outcomes of this visitor\'s actions.\n* Authorization and Policy -- Based on trust and identity, what actions may this visitor perform?\n* Access Control -- How the Authorization policy is actually enforced in your code (A: hopefully without turning it into  a spaghetti of if thens)\n* Rails Plugins for Authentication, Trust,  Authorization and Access Control\n* Tradeoffs -- for the paranoid or the curious, a rundown of tradeoffs made in the code\n* CHANGELOG -- Summary of changes to internals\n* TODO -- Ideas for how you can help\n\nThese best version of the release notes are in the notes/ directory in the\n"source code":http://github.com/technoweenie/restful-authentication/tree/master\n-- look there for the latest version.  The wiki versions are taken (manually)\nfrom there.\n\n***************************************************************************\n\n<a id="AWESOME"/> </a>\n\n## Exciting new features\n\n### Stories\n\nThere are now "Cucumber":http://wiki.github.com/aslakhellesoy/cucumber/home features that allow expressive, enjoyable tests for the\nauthentication code. The flexible code for resource testing in stories was\nextended from "Ben Mabey\'s.":http://www.benmabey.com/2008/02/04/rspec-plain-text-stories-webrat-chunky-bacon/\n\n### Modularize to match security design patterns:\n\n* Authentication (currently: password, browser cookie token, HTTP basic)\n* Trust metric (email validation)\n* Authorization (stateful roles)\n* Leave a flexible framework that will play nicely with other access control / policy definition / trust metric plugins\n\n### Other\n\n* Added a few helper methods for linking to user pages\n* Uniform handling of logout, remember_token\n* Stricter email, login field validation\n* Minor security fixes -- see CHANGELOG\n\n***************************************************************************\n\n## Non-backwards compatible Changes\n\nHere are a few changes in the May 2008 release that increase "Defense in Depth"\nbut may require changes to existing accounts\n\n* If you have an existing site, none of these changes are compelling enough to\n  warrant migrating your userbase.\n* If you are generating for a new site, all of these changes are low-impact.\n  You should apply them.\n\n### Passwords\n\nThe new password encryption (using a site key salt and stretching) will break\nexisting user accounts\' passwords.  We recommend you use the --old-passwords\noption or write a migration tool and submit it as a patch.  See the\n[[Tradeoffs]] note for more information.\n\n### Validations\n\nBy default, email and usernames are validated against a somewhat strict pattern; your users\' values may be now illegal.  Adjust to suit.\n\n***************************************************************************\n\n<a id="INSTALLATION"/> </a>\n\n## Installation\n\nThis is a basic restful authentication generator for rails, taken from\nacts as authenticated.  Currently it requires Rails 1.2.6 or above.\n\n**IMPORTANT FOR RAILS > 2.1 USERS** To avoid a @NameError@ exception ("lighthouse tracker ticket":http://rails_security.lighthouseapp.com/projects/15332-restful_authentication/tickets/2-not-a-valid-constant-name-errors#ticket-2-2), check out the code to have an _underscore_ and not _dash_ in its name:\n* either use <code>git clone git://github.com/technoweenie/restful-authentication.git restful_authentication</code>\n* or rename the plugin\'s directory to be <code>restful_authentication</code> after fetching it.\n\nTo use the generator:\n\n  ./script/generate authenticated user sessions \\\n    --include-activation \\\n    --stateful \\\n    --rspec \\\n    --skip-migration \\\n    --skip-routes \\\n    --old-passwords\n\n* The first parameter specifies the model that gets created in signup (typically\n  a user or account model).  A model with migration is created, as well as a\n  basic controller with the create method. You probably want to say "User" here.\n\n* The second parameter specifies the session controller name.  This is the\n  controller that handles the actual login/logout function on the site.\n  (probably: "Session").\n\n* --include-activation: Generates the code for a ActionMailer and its respective\n  Activation Code through email.\n\n* --stateful: Builds in support for acts_as_state_machine and generates\n  activation code.  (@--stateful@ implies @--include-activation@). Based on the\n  idea at [[http://www.vaporbase.com/postings/stateful_authentication]]. Passing\n  @--skip-migration@ will skip the user migration, and @--skip-routes@ will skip\n  resource generation -- both useful if you\'ve already run this generator.\n  (Needs the "acts_as_state_machine plugin":http://elitists.textdriven.com/svn/plugins/acts_as_state_machine/,\n  but new installs should probably run with @--aasm@ instead.)\n\n* --aasm: Works the same as stateful but uses the "updated aasm gem":http://github.com/rubyist/aasm/tree/master\n\n* --rspec: Generate RSpec tests and Stories in place of standard rails tests.\n  This requires the\n    "RSpec and Rspec-on-rails plugins":http://rspec.info/\n  (make sure you "./script/generate rspec" after installing RSpec.)  The rspec\n  and story suite are much more thorough than the rails tests, and changes are\n  unlikely to be backported.\n\n* --old-passwords: Use the older password scheme (see [[#COMPATIBILITY]], above)\n\n* --skip-migration: Don\'t generate a migration file for this model\n\n* --skip-routes: Don\'t generate a resource line in @config/routes.rb@\n\n***************************************************************************\n<a id="POST-INSTALL"/> </a>\n\n## After installing\n\nThe below assumes a Model named \'User\' and a Controller named \'Session\'; please\nalter to suit. There are additional security minutae in @notes/README-Tradeoffs@\n-- only the paranoid or the curious need bother, though.\n\n* Add these familiar login URLs to your @config/routes.rb@ if you like:\n\n    <pre><code>\n    map.signup  \'/signup\', :controller => \'users\',   :action => \'new\'\n    map.login  \'/login\',  :controller => \'session\', :action => \'new\'\n    map.logout \'/logout\', :controller => \'session\', :action => \'destroy\'\n    </code></pre>\n\n* With @--include-activation@, also add to your @config/routes.rb@:\n\n    <pre><code>\n    map.activate \'/activate/:activation_code\', :controller => \'users\', :action => \'activate\', :activation_code => nil\n    </code></pre>\n\n  and add an observer to @config/environment.rb@:\n\n    <pre><code>\n    config.active_record.observers = :user_observer\n    </code></pre>\n\n  Pay attention, may be this is not an issue for everybody, but if you should\n  have problems, that the sent activation_code does match with that in the\n  database stored, reload your user object before sending its data through email\n  something like:\n\n    <pre><code>\n    class UserObserver < ActiveRecord::Observer\n      def after_create(user)\n        user.reload\n        UserMailer.deliver_signup_notification(user)\n      end\n      def after_save(user)\n        user.reload\n        UserMailer.deliver_activation(user) if user.recently_activated?\n      end\n    end\n    </code></pre>\n\n\n* With @--stateful@, add an observer to config/environment.rb:\n\n    <pre><code>\n    config.active_record.observers = :user_observer\n    </code></pre>\n\n  and modify the users resource line to read\n\n    map.resources :users, :member => { :suspend   => :put,\n                                       :unsuspend => :put,\n                                       :purge     => :delete }\n\n* If you use a public repository for your code (such as github, rubyforge,\n  gitorious, etc.) make sure to NOT post your site_keys.rb (add a line like\n  \'/config/initializers/site_keys.rb\' to your .gitignore or do the svn ignore\n  dance), but make sure you DO keep it backed up somewhere safe.\n'
Treat an ActiveRecord model as a file attachment, storing its patch, size, content type, etc. b'attachment-fu\n=============\n\nattachment_fu is a plugin by Rick Olson (aka technoweenie <http://techno-weenie.net>) and is the successor to acts_as_attachment.  To get a basic run-through of its capabilities, check out Mike Clark\'s tutorial <http://clarkware.com/cgi/blosxom/2007/02/24#FileUploadFu>.\n\n\nattachment_fu functionality\n===========================\n\nattachment_fu facilitates file uploads in Ruby on Rails.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are four storage options for files uploaded through attachment_fu:\n  File system\n  Database file\n  Amazon S3\n  Rackspace (Mosso) Cloud Files\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml, the Rackspace Cloud Files storage requires you to modify config/rackspace_cloudfiles.yml, and the Database file storage requires an extra table.\n\n\nattachment_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the \'meta\') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # Path to store the uploaded files in.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 and Cloud Files backend.  \n                      # Setting this sets the :storage to :file_system.\n    :partition        # Whether to partiton files in directories like /0000/0001/image.jpg. Default is true. Only applicable to the :file_system backend.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, :s3, and :cloud_files.\n    :cloudfront       # If using S3 for storage, this option allows for serving the files via Amazon CloudFront.\n                      # Defaults to false.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    :uuid_primary_key # If your model\'s primary key is a 128-bit UUID in hexadecimal format, then set this to true.\n    :association_options  # attachment_fu automatically defines associations with thumbnails with has_many and belongs_to. If there are any additional options that you want to pass to these methods, then specify them here.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => \'application/pdf\'\n    has_attachment :content_type => [\'application/pdf\', \'application/msword\', \'text/plain\']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => [\'application/pdf\', :image], :resize_to => \'x50\'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\'\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\', \n                   :content_type => :image, :resize_to => [50,50], :partition => false\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\',\n                   :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :s3\n    has_attachment :store => :s3, :cloudfront => true\n    has_attachment :storage => :cloud_files\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachment_fu migrations\n========================\n\nFields for attachment_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the \'type\' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model \'Avatar\' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => \'320x200>\',\n                            #                  :thumbnails => { :small => \'10x10>\',\n                            #                                   :thumb => \'100x100>\' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> \'small\'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachment_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachment_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachment_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include \':multipart => true\' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => "create" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system, s3, and Cloud Files storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachment_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachment_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file \'/path/to/readme.txt\', :type => \'plain/text\', :disposition => \'inline\'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = \'Attachment was successfully created.\'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n\nattachement_fu scripting\n====================================\n\nYou may wish to import a large number of images or attachments. \nThe following example shows how to upload a file from a script. \n\n#!/usr/bin/env ./script/runner\n\n# required to use ActionController::TestUploadedFile \nrequire \'action_controller\'\nrequire \'action_controller/test_process.rb\'\n\npath = "./public/images/x.jpg"\n\n# mimetype is a string like "image/jpeg". One way to get the mimetype for a given file on a UNIX system\n# mimetype = `file -ib #{path}`.gsub(/\\n/,"")\n\nmimetype = "image/jpeg"\n\n# This will "upload" the file at path and create the new model.\n@attachable = AttachmentMetadataModel.new(:uploaded_data => ActionController::TestUploadedFile.new(path, mimetype))\n@attachable.save\n'
A benchmarking helper for httperf. b'bong\n    by Geoffrey Grosenbach\n    boss@topfunky.com\n    http://topfunky.com\n\n== DESCRIPTION:\n  \nHit your website with bong. Uses httperf to run a suite of benchmarking tests against specified urls on your site. \n\nGraphical output and multi-test comparisons are planned. Apache ab support may be added in the future.\n\n== USAGE\n\nSee all options with:\n\n  % bong --help\n\nGenerate a config file (writes to config/httperf.yml by default):\n\n  % bong --generate \n\nEdit the config file with a list of servers, urls, and your preferred sample size. NOTE: Don\'t run this against servers you don\'t own!\n\n  --- \n  uris: \n  - /\n  - /pages/about\n  samples: 2\n  servers: \n  - localhost:3000\n\nRun the benchmarking suite, label it \'baseline\', and output the raw data to a file (writes output to log/httperf-report.yml by default):\n\n  % bong baseline\n\nA report will be printed to the screen and the raw data will be saved to log/httperf-report.yml (change with the --out option). It\'s a good idea to use a label for each test so you can compare them later and find out what the fastest implementation was. Examples: \'baseline\', \'memcached-optimization\', \'sql-queries\', etc.\n\n  baseline\n    localhost\n      /               37-56 req/sec\n      /products.rss   395-403 req/sec\n    example.com\n      /               35-58 req/sec\n      /products.rss   400-407 req/sec\n\nView the saved report again with:\n\n  % bong baseline -r log/httperf-report.yml\n\nLather, rinse, repeat.\n\n== LIMITATIONS\n\n* Can\'t access pages that require login.\n* HTTP GET only.\n\n== REQUIREMENTS\n\nThe httperf command-line tool must be installed. Get it here: \n\n  http://www.hpl.hp.com/research/linux/httperf/download.php\n\nYou must start a webserver (or just Mongrel). Ideally, this would be on a different machine over a fast network. You can also run bong against the local machine or (less ideally) against a remote machine over a slow network, but these will give different performance numbers and may not be accurate.\n\nInternally, bong will\n\n* Run a short series of 5 hits against a URL.\n* Calculate the number of hits needed to run for 10 seconds, or 2 samples. You can change this in the config file, but 2 is the minimum for getting a meaningful standard deviation out of the report.\n* A test will be run again.\n* A short report will be displayed and the raw data will be saved for later comparison.\n\nSee http://peepcode.com/products/benchmarking-with-httperf for a full tutorial on httperf (produced by Geoffrey Grosenbach, technical editing by Zed Shaw).\n\n== INSTALL:\n\n* sudo gem install bong\n\n== EXPERIMENTAL GRAPHS\n\nAfter running bong a number of times, provide a visual output with time on the x axis and req/second on the y axis. Intended to show the change in performance throughout the development of a project.\n\nAssumptions\n\n* Each run will be named "benchmark-1216122887" where the second part can be converted to a Time class using Time.at(..)\n* Runs will be displayed at equal intervals along the x axis regardless of if the time between them is uniform\n* Several URLs may be incldued. rps for each one will be of a similar order of magnitude, so it makes sense to graph them together\n* Not all URLs will have data in all runs. However once a url is added it will be in ALL subsequent runs\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 Topfunky Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
SUPER OLD STUFF 
psuedo s3 protocol for mozilla browsers b'S3:// is a "psuedo protocol" for Amazon\'s S3 service.\n\nInteract with S3 in the same way you do with HTTP, through your URL bar.\n\n* TODO:\n\n** 0.1 release [1/4]\n  - [ ] fix copyright/contributors info\n  - [ ] s3 logo\n  - [ ] help/about section\n  - [X] allow mixed case bucket names s3://\n\n* BUGS/IDEAS:\n\n** s3://twitter_production/profile_background_images/1001042/ -- cannot click the contained thing\n** s3://twitter_production/profile_background_images/ -- css breaks (the background stops) about 2/3 down\n** s3://what/ -- acts weird\n** setup credentials only works once due to blockUI\n\nFUTURE/IDEAS:\n\n** right click -> "Save As" is broken\n** exception/feedback tool\n** setting ACL for a bucket\n** recursive deletion of a folder\n** setting ACL on a key\n** have a progress meter for uploads\n** Tools -> Page Info should have accurate information (s3 specific?)\n** cache the key listing info at the channel layer\n** support logging\n** right click handler for copy url/torrent\n** create time limited url for key\n** support renaming/copying keys\n** deal with undetected mime-types (ask user?)\n** linkify key directories/paths (ala initial designs for awesome bar)\n** a good date format on key list\n** support adding people to buckets via email addresses\n** specify if bucket should be created in US or Europe\n** transfer over SSL?\n** Handle uploading of folders via DND\n** emulate "create folder" system that others use?\n'
The solution for tabitus of the browser  b"* Before release 0.20 [0/8]\n  - [ ] null titles break taboo\n  - [ ] make sure re-clicking the taboo button doesn't overwrite data?\n  - [ ] inplace editor doesn't handle escape key correctly:\n    click to edit, save changes, then click escape again to change\n  - [ ] inplace editor breaks if you change textarea while it is in edit mode\n  - [ ] deleting from grid mode doesn't show the undelete box\n  - [ ] undelete / delete all isn't show correctly on trash.js\n  - [ ] use humanized messages on deletion/undelete?\n  - [ ] use favicons on dropdown menu?\n  - [ ] tooltips on grid.js?\n  - [ ] tooltips on calendar.js\n"
firefox trac integration 
Flash photo widget prototype - hacked at last SHDH of 2007 
A realtime, OpenGL graphing library for Ruby b"glowstick\n    by FIX (your name)\n    FIX (url)\n\n== DESCRIPTION:\n  \nFIX (describe your package)\n\n== FEATURES/PROBLEMS:\n  \n* FIX (list of features or problems)\n\n== SYNOPSIS:\n\n  FIX (code sample of usage)\n\n== REQUIREMENTS:\n\n* FIX (list of requirements)\n\n== INSTALL:\n\n* FIX (sudo gem install, anything else)\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
 b'= Name\n\nStarling - a light weight server for reliable distributed message passing.\n\n= Description\n\nStarling is a powerful but simple messaging server that enables reliable\ndistributed queuing with an absolutely minimal overhead. It speaks the\nMemCache protocol for maximum cross-platform compatibility. Any language\nthat speaks MemCache can take advantage of Starling\'s queue facilities.\n\n= Installation\n\n  This fork of the Starling source is hosted at GitHub and can be found at:\n\n  http://github.com/starling/starling/tree/master\n\n  The original source was to be found at RubyForge but no longer exists there.\n\n  GitHub serves gems prefixed by a username to differentiate different forks.\n  This project can be installed with:\n\n  # THIS COMMAND ONE TIME ONLY\n  gem sources -a http://gems.github.com/\n\n  # As often as you like\n  sudo gem install starling-starling\n\n  See http://gems.github.com/ if you want more info about GitHub and gems.\n\n= Quick Start Usage\n\n  # View the Starling help and usage message\n  starling --help\n\n  # In a console window start the Starling server.  By default\n  # it runs verbosely in the foreground, listening on 127.0.0.1:22122\n  # and stores its files under /tmp/starling:\n  starling\n\n  # In a new console test the put and get of messages on a queue:\n\n  irb\n  >> require \'starling\'\n  => true\n  >> starling = Starling.new(\'127.0.0.1:22122\')\n  => MemCache: 1 servers, 1 buckets, ns: nil, ro: false\n  >> starling.set(\'my_queue\', 12345)\n  => nil\n  >> starling.get(\'my_queue\')\n  => 12345\n\n  # You can do a simple loop over a queue with something like:\n  >> loop { puts starling.get(\'my_queue\'); sleep 1 }\n  12345\n  nil\n  nil\n  ...\n\n  For more information run the following in a new console:\n  \n  \'gem server\'\n\n  This will start a gem server on http://localhost:8808/ which you can view in your\n  browser to see the RDocs for the gem. Or generate rdocs by running the following\n  in a new console:\n\t\n  \'rdoc\'\n\n= Using fiveruns memcache-client\n\n\tmemcache-client from fiveruns has a couple of fixed added like supporting failover and retry on failure.\n\t\n\tThis fork of the memcache-client source is hosted at GitHub and can be found at:\n\n\thttp://github.com/fiveruns/memcache-client/tree/master\n\n\tIt can be installed using:\n\n\t# THIS COMMAND ONE TIME ONLY\n\tgem sources -a http://gems.github.com/\n\n\t# As often as you like\n\tsudo gem install fiveruns-memcache-client\n\n= Known Issues\n\n* Starling is "slow" as far as messaging systems are concerned. In practice,\n  it\'s fast enough.\n\n== TODO\n\n* Implement memcached instead of memcache as a client interface (to make it faster)\n\n= Authors\n\n* Blaine Cook <romeda@gmail.com>\n* Chris Wanstrath <chris@ozmm.org>\n* AnotherBritt <?>\n* Glenn Rempe <?>\n* Abdul-Rahman Advany <abdulrahman@advany.com>\n\n= Copyright\n\nStarling - a light-weight server for reliable distributed message passing.\nCopyright 2007-2008 Blaine Cook <blaine@twitter.com>, Twitter Inc.\n'
Merb More: The Full Stack. Take what you need; leave what you don't. b'merb-core and merb-more have been merged into http://github.com/wycats/merb'
A very fast & simple Ruby web server b"Thin\n====\n\nTiny, fast & funny HTTP server\n\nThin is a Ruby web server that glues together 3 of the best Ruby libraries in web history:\n\n  * The Mongrel parser: the root of Mongrel speed and security\n  * Event Machine: a network I/O library with extremely high scalability, performance and stability\n  * Rack: a minimal interface between webservers and Ruby frameworks\n\nWhich makes it, with all humility, the most secure, stable, fast and extensible Ruby web server\nbundled in an easy to use gem for your own pleasure.\n\n    Site:  http://code.macournoyer.com/thin/\n    Group: http://groups.google.com/group/thin-ruby/topics\n    Bugs:  http://github.com/macournoyer/thin/issues\n    Code:  http://github.com/macournoyer/thin\n    IRC:   #thin on freenode\n\n## Installation\n\nFor the latest stable version:\n\n`gem install thin`\n\nOr from source:\n\n```\ngit clone git://github.com/macournoyer/thin.git\ncd thin\nrake install\n```\n\n## Usage\n\nA +thin+ script offers an easy way to start your Rack application:\n\n```\ncd to/your/app\nthin start\n```\n\nWhen using with Rails and Bundler, make sure to add `gem 'thin'`\nto your Gemfile.\n\nSee example directory for samples.\n\n### Command Line Examples\n\nUse a rackup file and bind to localhost port 8080:\n\n```\nthin -R config.ru -a 127.0.0.1 -p 8080 start\n```\n\nStore the server process ID, log to a file and daemonize:\n\n```\nthin -p 9292 -P tmp/pids/thin.pid -l logs/thin.log -d start\n```\n\nThin is quite flexible in that many options can be specified at the command line (see below for usage).\n\n### Configuration files\n\nYou can create configuration files in yaml format and feed them to thin using `thin -C config.yml`.  Here is an example config file:\n\n```yaml\n--- \nuser: www-data\ngroup: www-data\npid: tmp/pids/thin.pid\ntimeout: 30\nwait: 30\nlog: log/thin.log\nmax_conns: 1024\nrequire: []\nenvironment: production\nmax_persistent_conns: 512\nservers: 1\nthreaded: true\nno-epoll: true\ndaemonize: true\nsocket: tmp/sockets/thin.sock\nchdir: /path/to/your/apps/root\ntag: a-name-to-show-up-in-ps aux\n```\n\n### Command Line Options\n\nThis is the usage for the thin command which can be obtained by running `thin -h` at the command line.\n\n```sh\nUsage: thin [options] start|stop|restart|config|install\n\nServer options:\n    -a, --address HOST               bind to HOST address (default: 0.0.0.0)\n    -p, --port PORT                  use PORT (default: 3000)\n    -S, --socket FILE                bind to unix domain socket\n    -y, --swiftiply [KEY]            Run using swiftiply\n    -A, --adapter NAME               Rack adapter to use (default: autodetect)\n                                     (rack, rails, ramaze, merb, file)\n    -R, --rackup FILE                Load a Rack config file instead of Rack adapter\n    -c, --chdir DIR                  Change to dir before starting\n        --stats PATH                 Mount the Stats adapter under PATH\n\nSSL options:\n        --ssl                        Enables SSL\n        --ssl-key-file PATH          Path to private key\n        --ssl-cert-file PATH         Path to certificate\n        --ssl-disable-verify         Disables (optional) client cert requests\n\nAdapter options:\n    -e, --environment ENV            Framework environment (default: development)\n        --prefix PATH                Mount the app under PATH (start with /)\n\nDaemon options:\n    -d, --daemonize                  Run daemonized in the background\n    -l, --log FILE                   File to redirect output (default: /home/robert/log/thin.log)\n    -P, --pid FILE                   File to store PID (default: tmp/pids/thin.pid)\n    -u, --user NAME                  User to run daemon as (use with -g)\n    -g, --group NAME                 Group to run daemon as (use with -u)\n        --tag NAME                   Additional text to display in process listing\n\nCluster options:\n    -s, --servers NUM                Number of servers to start\n    -o, --only NUM                   Send command to only one server of the cluster\n    -C, --config FILE                Load options from config file\n        --all [DIR]                  Send command to each config files in DIR\n    -O, --onebyone                   Restart the cluster one by one (only works with restart command)\n    -w, --wait NUM                   Maximum wait time for server to be started in seconds (use with -O)\n\nTuning options:\n    -b, --backend CLASS              Backend to use, full classname\n    -t, --timeout SEC                Request or command timeout in sec (default: 30)\n    -f, --force                      Force the execution of the command\n        --max-conns NUM              Maximum number of open file descriptors (default: 1024)\n                                     Might require sudo to set higher than 1024\n        --max-persistent-conns NUM   Maximum number of persistent connections\n                                     (default: 100)\n        --threaded                   Call the Rack application in threads [experimental]\n        --threadpool-size NUM        Sets the size of the EventMachine threadpool.\n                                     (default: 20)\n        --no-epoll                   Disable the use of epoll\n\nCommon options:\n    -r, --require FILE               require the library\n    -q, --quiet                      Silence all logging\n    -D, --debug                      Enable debug logging\n    -V, --trace                      Set tracing on (log raw request/response)\n    -h, --help                       Show this message\n    -v, --version                    Show version\n```\n\n## License\n\nRuby License, http://www.ruby-lang.org/en/LICENSE.txt.\n\n## Credits\n\nThe parser was stolen from Mongrel http://mongrel.rubyforge.org by Zed Shaw.\nMongrel is copyright 2007 Zed A. Shaw and contributors. It is licensed under\nthe Ruby license and the GPL2.\n\nThin is copyright Marc-Andre Cournoyer <macournoyer@gmail.com>\n\nGet help at http://groups.google.com/group/thin-ruby/\nReport bugs at https://github.com/macournoyer/thin/issues\nand major security issues directly to me macournoyer@gmail.com.\n"
Rails RESTful controller abstraction plugin. b'= Resource Controller\n\nresource_controller makes RESTful controllers easier, more maintainable, and super readable.  With the RESTful controller pattern hidden away, you can focus on what makes your controller special.\n\n== Get It\n\nInstall it as a plugin:\n\n  script/plugin install git://github.com/giraffesoft/resource_controller.git\n  \nOr grab the source\n  \n  git clone git://github.com/giraffesoft/resource_controller.git\n\n= Usage\n\nCreating a basic RESTful controller is as easy as...\n\n  class PostsController < ResourceController::Base\n  end\n  \n...or if you prefer, you can use the method-call syntax.  If you need to inherit from some other class, this syntax is definitely for you:\n\n  class PostsController < ApplicationController\n    resource_controller\n  end\n\nBoth syntaxes are identical in their behavior.  Just make sure you call resource_controller before you use any other r_c functionality in your controller.\n  \n  \nNobody just uses the default RESTful controller, though.  resource_controller provides a simple API for customizations.\n\n== Action Lifecycle\n\nIt\'s really easy to make changes to the lifecycle of your actions.\n\n  Note: We had to call the new accessor "new_action", since new is somewhat reserved in ruby.\n\n=== Before and After\n\n  class ProjectsController < ResourceController::Base\n    \n    new_action.before do\n      3.times { object.tasks.build }\n    end\n    \n    create.after do\n      object.creator = current_user\n    end\n    \n  end\n  \n=== Flash\n\n  class ProjectsController < ResourceController::Base\n    create.flash "Can you believe how easy it is to use resource_controller?  Neither could I!"\n  end\n\n=== respond_to\n\nYou can add to what\'s already there...\n  \n  class ProjectsController < ResourceController::Base      \n    create.wants.js { render :template => "show.rjs" }\n  end\n  \nOr you can create a whole new block.  This syntax destroys everything that\'s there, and starts again...\n\n  class ProjectsController < ResourceController::Base      \n    create.response do |wants|\n      wants.html\n      wants.js { render :template => "show.rjs" }\n    end\n  end\n\nIf you have a nested resource and want to redirect to the parent after create/update and destroy you can do this in the object controller\n\n class CommentsController < ResourceController::Base\n    belongs_to :post\n    \n    create.wants.html { redirect_to smart_url(parent_url_options) } \n    update.wants.html { redirect_to smart_url(parent_url_options) } \n    destroy.wants.html { redirect_to smart_url(parent_url_options) }\n  end\n  \n=== Scoping\n\nBecause sometimes you want to make a bunch of customizations at once, most of the helpers accept blocks that make grouping calls really easy.  Is it a DSL?  Maybe; maybe not.  But, it\'s definitely awesome.\n\nWith actions that can fail, the scoping defaults to success.  That means that create.flash == create.success.flash.\n\n  class ProjectsController < ResourceController::Base\n    \n    create do\n      flash "Object successfully created!"\n      wants.js { render :template => "show.rjs" }\n      \n      failure.wants.js { render :template => "display_errors.rjs" }\n    end\n    \n    destroy do\n      flash "You destroyed your project.  Good work."\n      \n      failure do\n        flash "You cannot destroy that project.  Stop trying!"\n        wants.js { render :template => "display_errors.rjs" }\n      end\n    end\n    \n  end\n  \n== Singleton Resource\n\nIf you want to create a singleton RESTful controller inherit from ResourceController::Singleton.\n\n  class AccountsController < ResourceController::Singleton\n  end\n\n...or if need to inherit from some other class:\n\n  class AccountsController < ApplicationController\n    resource_controller :singleton\n  end\n\n*Note:* This type of controllers handle a single resource only so the index action and all the collection helpers (collection_url, collection_path...) are not available for them.\n\nLoading objects in singletons is similar to plural controllers with one exception. For non-nested singleton controllers you should override the object method as it defaults to nil for them.\n\n  class AccountsController < ResourceController::Singleton\n    private\n      def object\n        @object ||= Account.find(session[:account_id])\n      end\n   end\n\nIn other cases you can use the default logic and override it only if you use permalinks or anything special. \n\nSingleton nesting with both :has_many and :has_one associations is provided...\n\n  map.resource :account, :has_many => :options  # /account/options, account is a singleton parent\n  map.resources :users, :has_one => :image  # /users/1/image, image is a singleton child\n\nIf you have the :has_many association with a singleton parent remember to override parent_object for your :has_many controller as it returns nil by default in this case.\n\n  class OptionsController < ResourceController::Base\n    belongs_to :account\n\n    protected\n    def parent_object\n      Account.find(session[:account_id])\n    end\n  end\n\n== Helpers (ResourceController::Helpers)\n\n=== Loading objects\n\nYou want to add something like pagination to your controller...\n\n  class PostsController < ResourceController::Base\n    private\n      def collection\n        @collection ||= end_of_association_chain.find(:all, :page => {:size => 10, :current => params[:page]})\n      end\n  end\n  \nOr maybe you used a permalink...\n\n  class PostsController < ResourceController::Base\n    private\n      def object\n        @object ||= end_of_association_chain.find_by_permalink(param)\n      end\n  end\n\n=== Building objects\n\nMaybe you have some alternative way of building objects...\n\n  class PostsController < ResourceController::Base\n    private\n      def build_object\n        @object ||= end_of_association_chain.build_my_object_some_funky_way object_params\n      end\n  end\n  \n...and there are tons more helpers in the ResourceController::Helpers\n\n== Nested Resources\n\nNested controllers can be a pain, especially if routing is such that you may or may not have a parent.  Not so with Resource Controller.\n\n  class CommentsController < ResourceController::Base\n    belongs_to :post\n  end\n  \nAll of the finding, and creation, and everything will be done at the scope of the post automatically.\n\n== Namespaced Resources\n\n...are handled automatically, and any namespaces are always available, symbolized, in array form @ ResourceController::Helpers#namespaces\n\n== Polymorphic Resources\n\nEverything, including url generation is handled completely automatically.  Take this example...\n  \n  ## comment.rb\n  class Comment\n    belongs_to :commentable, :polymorphic => true\n  end\n  \n  ## comments_controller.rb\n  class CommentsController < ResourceController::Base\n    belongs_to :post, :product, :user\n  end\n  *Note:* Your model doesn\'t have to be polymorphic in the ActiveRecord sense.  It can be associated in whichever way you want.\n  \n  ## routes.rb\n  map.resources :posts, :has_many => :comments\n  map.resources :products, :has_many => :comments\n  map.resources :users, :has_many => :comments\n\nAll you have to do is that, and r_c will infer whichever relationship is present, and perform all the actions at the scope of the parent object.\n\n=== Parent Helpers\n\nYou also get some helpers for reflecting on your parent.\n\n  parent?       # => true/false is there a parent present?\n  parent_type   # => :post\n  parent_model  # => Post\n  parent_object # => @post\n\n=== Non-standard resource names\n\nresource_controller supports overrides for every non-standard configuration of resources.\n\nThe most common example is where the resource has a different name than the associated model.  Simply overriding the model_name helper will get resource_controller working with your model.\n\n  map.resources :tags\n  ...\n  class PhotoTag < ActiveRecord::Base\n  ...\n  class TagsController < ResourceController::Base\n    private\n      def model_name\n        \'photo_tag\'\n      end\n  end\n  \nIn the above example, the variable, and params will be set to @tag, @tags, and params[:tag].  If you\'d like to change that, override object_name.\n\n  def object_name\n    \'photo_tag\'\n  end\n\nIf you\'re using a non-standard controller name, but everything else is standard, overriding resource_name will propagate through all of the other helpers.\n\n  map.resources :tags, :controller => "somethings"\n  ...\n  class Tag < ActiveRecord::Base\n  ...\n  class SomethingsController < ResourceController::Base\n    private\n      def resource_name\n        \'tag\'\n      end\n  end\n  \nFinally, the route_name helper is used by Urligence to determine which url helper to call, so if you have non-standard route names, override it.\n\n  map.resources :tags, :controller => "taggings"\n  ...\n  class Taggings < ActiveRecord::Base\n  ...\n  class TaggingsController < ResourceController::Base\n    private\n      def route_name\n        \'tag\'\n      end\n  end\n\n== Url Helpers\n\nThanks to Urligence, you also get some free url helpers.\n\nNo matter what your controller looks like...\n\n  [edit_|new_]object_url # is the equivalent of saying [edit_|new_]post_url(@post)\n  [edit_|new_]object_url(some_other_object) # allows you to specify an object, but still maintain any paths or namespaces that are present\n  \n  collection_url # is like saying posts_url\n\nUrl helpers are especially useful when working with polymorphic controllers.\n\n  # /posts/1/comments\n  object_url          # => /posts/1/comments/#{@comment.to_param}\n  object_url(comment) # => /posts/1/comments/#{comment.to_param}\n  edit_object_url     # => /posts/1/comments/#{@comment.to_param}/edit\n  collection_url      # => /posts/1/comments\n    \n  # /products/1/comments\n  object_url          # => /products/1/comments/#{@comment.to_param}\n  object_url(comment) # => /products/1/comments/#{comment.to_param}\n  edit_object_url     # => /products/1/comments/#{@comment.to_param}/edit\n  collection_url      # => /products/1/comments\n  \n  # /comments\n  object_url          # => /comments/#{@comment.to_param}\n  object_url(comment) # => /comments/#{comment.to_param}\n  edit_object_url     # => /comments/#{@comment.to_param}/edit\n  collection_url      # => /comments\n  \nOr with namespaced, nested controllers...\n\n  # /admin/products/1/options\n  object_url          # => /admin/products/1/options/#{@option.to_param}\n  object_url(option)  # => /admin/products/1/options/#{option.to_param}\n  edit_object_url     # => /admin/products/1/options/#{@option.to_param}/edit\n  collection_url      # => /admin/products/1/options\n  \nYou get the idea.  Everything is automagical!  All parameters are inferred.\n\n== Credits\n\nresource_controller was created, and is maintained by {James Golick}[http://jamesgolick.com].\n\n== License\n\nresource_controller is available under the {MIT License}[http://en.wikipedia.org/wiki/MIT_License]\n'
Markaby patched to run on rails 2.0.2 b'= Markaby (Markup as Ruby)\n\nMarkaby is a very short bit of code for writing HTML pages in pure Ruby.\nIt is an alternative to ERb which weaves the two languages together.\nAlso a replacement for templating languages which use primitive languages\nthat blend with HTML.\n\n== Using Markaby as a Rails plugin\n\nWrite Rails templates in pure Ruby.  Example layout:\n\n  html do\n    head do\n      title \'Products: \' + action_name\n      stylesheet_link_tag \'scaffold\'\n    end\n  \n    body do\n      p flash[:notice], :style => "color: green"\n  \n      self << content_for_layout\n    end\n  end\n\n== Using Markaby as a Ruby class\n\nMarkaby is flaming easy to call from your Ruby classes.\n\n  require \'markaby\'\n\n  mab = Markaby::Builder.new\n  mab.html do\n    head { title "Boats.com" }\n    body do\n      h1 "Boats.com has great deals"\n      ul do\n        li "$49 for a canoe"\n        li "$39 for a raft"\n        li "$29 for a huge boot that floats and can fit 5 people"\n      end\n    end\n  end\n  puts mab.to_s\n\nMarkaby::Builder.new does take two arguments for passing in variables and\na helper object.  You can also affix the block right on to the class.\n\nSee Markaby::Builder for all of that.\n\n= A Note About <tt>instance_eval</tt>\n\nThe Markaby::Builder class is different from the normal Builder class,\nsince it uses <tt>instance_eval</tt> when running blocks.  This cleans\nup the appearance of the Markaby code you write.  If <tt>instance_eval</tt>\nwas not used, the code would look like this:\n\n  mab = Markaby::Builder.new\n  mab.html do\n    mab.head { mab.title "Boats.com" }\n    mab.body do\n      mab.h1 "Boats.com has great deals"\n    end\n  end\n  puts mab.to_s\n\nSo, the advantage is the cleanliness of your code.  The disadvantage is that\nthe block will run inside the Markaby::Builder object\'s scope.  This means\nthat inside these blocks, <tt>self</tt> will be your Markaby::Builder object.\nWhen you use instance variables in these blocks, they will be instance variables\nof the Markaby::Builder object.\n\nThis doesn\'t affect Rails users, but when used in regular Ruby code, it can\nbe a bit disorienting.  You are recommended to put your Markaby code in a\nmodule where it won\'t mix with anything.\n\n= The Six Steps of Markaby\n\nIf you dive right into Markaby, it\'ll probably make good sense, but you\'re\nlikely to run into a few kinks.  Why not review these six steps and commit\nthem memory so you can really *know* what you\'re doing?\n\n== 1. Element Classes\n\nElement classes may be added by hooking methods onto container elements:\n\n  div.entry do\n    h2.entryTitle \'Son of WebPage\'\n    div.entrySection %{by Anthony}\n    div.entryContent \'Okay, once again, the idea here is ...\'\n  end\n\nWhich results in:\n\n  <div class="entry">\n    <h2 class="entryTitle">Son of WebPage</h2>\n    <div class="entrySection">by Anthony</div>\n    <div class="entryContent">Okay, once again, the idea here is ...</div>\n  </div>\n\n== 2. Element IDs\n\nIDs may be added by the use of bang methods:\n\n  div.page! {\n    div.content! {\n      h1 "A Short Short Saintly Dog"\n    }\n  }\n\nWhich results in:\n\n  <div id="page">\n    <div id="content">\n      <h1>A Short Short Saintly Dog</h1>\n    </div>\n  </div>\n\n== 3. Validate Your XHTML 1.0 Output \n\nIf you\'d like Markaby to help you assemble valid XHTML documents,\nyou can use the <tt>xhtml_transitional</tt> or <tt>xhtml_strict</tt>\nmethods in place of the normal <tt>html</tt> tag.\n\n  xhtml_strict do\n    head { ... }\n    body { ... }\n  end\n\nThis will add the XML instruction and the doctype tag to your document.\nAlso, a character set meta tag will be placed inside your <tt>head</tt>\ntag.\n\nNow, since Markaby knows which doctype you\'re using, it checks a big\nlist of valid tags and attributes before printing anything.\n\n  >> div :styl => "padding: 10px" do\n  >>   img :src => "samorost.jpg"\n  >> end\n  InvalidHtmlError: no such attribute `styl\'\n\nMarkaby will also make sure you don\'t use the same element ID twice!\n\n== 4. Escape or No Escape?\n\nMarkaby uses a simple convention for escaping stuff: if a string\nis an argument, it gets escaped.  If the string is in a block, it\ndoesn\'t.\n\nThis is handy if you\'re using something like RedCloth or\nRDoc inside an element.  Pass the string back through the block\nand it\'ll skip out of escaping.\n\n  div.comment { RedCloth.new(str).to_html }\n\nBut, if we have some raw text that needs escaping, pass it in\nas an argument:\n\n  div.comment raw_str\n\nOne caveat: if you have other tags inside a block, the string\npassed back will be ignored.\n\n  div.comment {\n    div.author "_why"\n    div.says "Torpedoooooes!"\n    "<div>Silence.</div>"\n  }\n\nThe final div above won\'t appear in the output.  You can\'t mix\ntag modes like that, friend.\n\n== 5. Auto-stringification\n\nIf you end up using any of your Markaby "tags" as a string, the\ntag won\'t be output.  It\'ll be up to you to add the new string\nback into the HTML output.\n\nThis means if you call <tt>to_s</tt>, you\'ll get a string back.\n\n  div.title { "Rock Bottom" + span(" by Robert Wyatt").to_s }\n\nBut, when you\'re adding strings in Ruby, <tt>to_s</tt> happens automatically.\n\n  div.title { "Rock Bottom" + span(" by Robert Wyatt") }\n\nInterpolation works fine.\n\n  div.title { "Rock Bottom #{span(" by Robert Wyatt")}" }\n\nAnd any other operation you might perform on a string.\n\n  div.menu! \\\n    [\'5.gets\', \'bits\', \'cult\', \'inspect\', \'-h\'].map do |category|\n      link_to category\n    end.\n    join( " | " )\n\n== 6. The <tt>tag!</tt> Method\n\nIf you need to force a tag at any time, call <tt>tag!</tt> with the\ntag name followed by the possible arguments and block.  The CssProxy\nwon\'t work with this technique.\n\n  tag! :select, :id => "country_list" do\n    countries.each do |country|\n      tag! :option, country\n    end\n  end\n\n= A Note About Rails Helpers\n\nWhen used in Rails templates, the Rails helper object is passed into \nMarkaby::Builder.  When you call helper methods inside Markaby, the output\nfrom those methods will be output to the stream.  This is incredibly\nhandy, since most Rails helpers output HTML tags.\n\n  head do\n    javascript_include_tag \'prototype\'\n    autodiscovery_link_tag\n  end\n\nHowever, some methods are designed to give back a String which you can use\nelsewhere.  That\'s okay!  Every method returns a Fragment object, which can\nbe used as a string.\n\n  p { "Total is: #{number_to_human_size @file_bytes}" }\n\nAlso see the Quick Tour above, specifically the stuff about auto-stringification.\n\nIf for any reason you have trouble with fragments, you can just\ncall the <tt>@helpers</tt> object with the method and you\'ll get\nthe String back and nothing will be output.\n\n  p { "Total is: #{@helpers.number_to_human_size @file_bytes}" }\n\nConversely, you may call instance variables from your controller by using\na method and its value will be returned, nothing will be output.\n\n  # Inside imaginary ProductController\n  def list\n    @products = Product.find :all\n  end\n\n  # Inside app/views/product/list.mab\n  products.each do |product|\n    p product.title\n  end\n\n= Credits\n\nMarkaby is a work of immense hope by Tim Fletcher and why the lucky stiff.\nThankyou for giving it a whirl.\n\nMarkaby is inspired by the HTML library within cgi.rb.  Hopefully it will\nturn around and take some cues.\n\n'
 b'= EnumField\n\nMacro to emulate a MySQL enum_field type thing.\n\n== Usage\n\nThis plugin encapsulates a validates_inclusion_of and automatically gives you a \nfew more goodies automatically. That\'s it!\n\n    class Computer < ActiveRecord:Base\n      enum_field :status, [\'on\', \'off\', \'standby\', \'sleep\', \'out of this world\']\n\n      # Optionally with a message to replace the default one\n      # enum_field :status, [\'on\', \'off\', \'standby\', \'sleep\', \'out of this world\'], :message => "incorrect status"\n\n      #...\n    end\n\nThis will give you a few things:\n\n- add a validates_inclusion_of with a simple error message ("invalid #{field}") or your custom message\n- define the following query methods, in the name of expressive code:\n  - on?\n  - off?\n  - standby?\n  - sleep?\n  - out_of_this_world?\n- define the STATUSES constant, which contains the acceptable values\n\n= License\n\nCopyright (c) 2008 James Golick, released under the MIT license\n'
Subtlety: SVN => RSS, hAtom => Atom 
Zippy lil’ zipcode lib. b'Zippy!\n------\n\nhttp://github.com/defunkt/zippy\n\nBy Chris "Zippy" Wanstrath\n'
Ghost from Christmas past. Unmaintained. b"== cache_fu\n\nA rewrite of acts_as_cached.\n\n== Changes from acts_as_cached 1\n\n- You can no longer set a 'ttl' method on a class.  Instead,\n  pass :ttl to acts_as_cached:\n    >> acts_as_cached :ttl => 15.minutes\n\n- The is_cached? method is aliased as cached?\n\n- set_cache on an instance can take a ttl\n    >> @story.set_cache(15.days)\n\n\nChris Wanstrath [ chris[at]ozmm[dot]org ]\n"
 A ruby library to inexpensively emit runtime events via Dtrace 
(offically at github.com/sinatra/sinatra) Classy web-development dressed in a DSL b'= Sinatra\n\nSinatra is a DSL for quickly creating web applications in Ruby with minimal\neffort:\n\n  # myapp.rb\n  require \'sinatra\'\n\n  get \'/\' do\n    \'Hello world!\'\n  end\n\nInstall the gem and run with:\n\n  gem install sinatra\n  ruby -rubygems myapp.rb\n\nView at: http://localhost:4567\n\nIt is recommended to also run <tt>gem install thin</tt>, which Sinatra will\npick up if available.\n\n== Routes\n\nIn Sinatra, a route is an HTTP method paired with a URL-matching pattern.\nEach route is associated with a block:\n\n  get \'/\' do\n    .. show something ..\n  end\n\n  post \'/\' do\n    .. create something ..\n  end\n\n  put \'/\' do\n    .. replace something ..\n  end\n\n  patch \'/\' do\n    .. modify something ..\n  end\n\n  delete \'/\' do\n    .. annihilate something ..\n  end\n\n  options \'/\' do\n    .. appease something ..\n  end\n\nRoutes are matched in the order they are defined. The first route that\nmatches the request is invoked.\n\nRoute patterns may include named parameters, accessible via the\n<tt>params</tt> hash:\n\n  get \'/hello/:name\' do\n    # matches "GET /hello/foo" and "GET /hello/bar"\n    # params[:name] is \'foo\' or \'bar\'\n    "Hello #{params[:name]}!"\n  end\n\nYou can also access named parameters via block parameters:\n\n  get \'/hello/:name\' do |n|\n    "Hello #{n}!"\n  end\n\nRoute patterns may also include splat (or wildcard) parameters, accessible\nvia the <tt>params[:splat]</tt> array:\n\n  get \'/say/*/to/*\' do\n    # matches /say/hello/to/world\n    params[:splat] # => ["hello", "world"]\n  end\n\n  get \'/download/*.*\' do\n    # matches /download/path/to/file.xml\n    params[:splat] # => ["path/to/file", "xml"]\n  end\n\nOr with block parameters:\n\n  get \'/download/*.*\' do |path, ext|\n    [path, ext] # => ["path/to/file", "xml"]\n  end\n\nRoute matching with Regular Expressions:\n\n  get %r{/hello/([\\w]+)} do\n    "Hello, #{params[:captures].first}!"\n  end\n\nOr with a block parameter:\n\n  get %r{/hello/([\\w]+)} do |c|\n    "Hello, #{c}!"\n  end\n\nRoute patterns may have optional parameters:\n\n  get \'/posts.?:format?\' do\n    # matches "GET /posts" and any extension "GET /posts.json", "GET /posts.xml" etc.\n  end\n\nBy the way, unless you disable the path traversal attack protection (see below),\nthe request path might be modified before matching against your routes.\n\n=== Conditions\n\nRoutes may include a variety of matching conditions, such as the user agent:\n\n  get \'/foo\', :agent => /Songbird (\\d\\.\\d)[\\d\\/]*?/ do\n    "You\'re using Songbird version #{params[:agent][0]}"\n  end\n\n  get \'/foo\' do\n    # Matches non-songbird browsers\n  end\n\nOther available conditions are +host_name+ and +provides+:\n\n  get \'/\', :host_name => /^admin\\./ do\n    "Admin Area, Access denied!"\n  end\n\n  get \'/\', :provides => \'html\' do\n    haml :index\n  end\n\n  get \'/\', :provides => [\'rss\', \'atom\', \'xml\'] do\n    builder :feed\n  end\n\nYou can easily define your own conditions:\n\n  set(:probability) { |value| condition { rand <= value } }\n\n  get \'/win_a_car\', :probability => 0.1 do\n    "You won!"\n  end\n\n  get \'/win_a_car\' do\n    "Sorry, you lost."\n  end\n\nFor a condition that takes multiple values use a splat:\n\n  set(:auth) do |*roles|   # <- notice the splat here\n    condition do\n      unless logged_in? && roles.any? {|role| current_user.in_role? role }\n        redirect "/login/", 303\n      end\n    end\n  end\n\n  get "/my/account/", :auth => [:user, :admin] do\n    "Your Account Details"\n  end\n\n  get "/only/admin/", :auth => :admin do\n    "Only admins are allowed here!"\n  end\n\n=== Return Values\n\nThe return value of a route block determines at least the response body passed\non to the HTTP client, or at least the next middleware in the Rack stack.\nMost commonly, this is a string, as in the above examples. But other values are\nalso accepted.\n\nYou can return any object that would either be a valid Rack response, Rack\nbody object or HTTP status code:\n\n* An Array with three elements: <tt>[status (Fixnum), headers (Hash), response\n  body (responds to #each)]</tt>\n* An Array with two elements: <tt>[status (Fixnum), response body (responds to\n  #each)]</tt>\n* An object that responds to <tt>#each</tt> and passes nothing but strings to\n  the given block\n* A Fixnum representing the status code\n\nThat way we can, for instance, easily implement a streaming example:\n\n    class Stream\n      def each\n        100.times { |i| yield "#{i}\\n" }\n      end\n    end\n\n    get(\'/\') { Stream.new }\n\nYou can also use the +stream+ helper method (described below) to reduce boiler\nplate and embed the streaming logic in the route.\n\n=== Custom Route Matchers\n\nAs shown above, Sinatra ships with built-in support for using String patterns\nand regular expressions as route matches. However, it does not stop there. You\ncan easily define your own matchers:\n\n  class AllButPattern\n    Match = Struct.new(:captures)\n\n    def initialize(except)\n      @except   = except\n      @captures = Match.new([])\n    end\n\n    def match(str)\n      @captures unless @except === str\n    end\n  end\n\n  def all_but(pattern)\n    AllButPattern.new(pattern)\n  end\n\n  get all_but("/index") do\n    # ...\n  end\n\nNote that the above example might be over-engineered, as it can also be\nexpressed as:\n\n  get // do\n    pass if request.path_info == "/index"\n    # ...\n  end\n\nOr, using negative look ahead:\n\n  get %r{^(?!/index$)} do\n    # ...\n  end\n\n== Static Files\n\nStatic files are served from the <tt>./public</tt> directory. You can specify\na different location by setting the <tt>:public_folder</tt> option:\n\n  set :public_folder, File.dirname(__FILE__) + \'/static\'\n\nNote that the public directory name is not included in the URL. A file\n<tt>./public/css/style.css</tt> is made available as\n<tt>http://example.com/css/style.css</tt>.\n\nUse the <tt>:static_cache_control</tt> setting (see below) to add\n<tt>Cache-Control</tt> header info.\n\n== Views / Templates\n\nEach template language is exposed as via its own rendering method. These\nmethods simply return a string:\n\n  get \'/\' do\n    erb :index\n  end\n\nThis renders <tt>views/index.erb</tt>.\n\nInstead of a template name, you can also just pass in the template content\ndirectly:\n\n  get \'/\' do\n    code = "<%= Time.now %>"\n    erb code\n  end\n\nTemplates take a second argument, the options hash:\n\n  get \'/\' do\n    erb :index, :layout => :post\n  end\n\nThis will render <tt>views/index.erb</tt> embedded in the\n<tt>views/post.erb</tt> (default is <tt>views/layout.erb</tt>, if it exists).\n\nAny options not understood by Sinatra will be passed on to the template\nengine:\n\n  get \'/\' do\n    haml :index, :format => :html5\n  end\n\nYou can also set options per template language in general:\n\n  set :haml, :format => :html5\n\n  get \'/\' do\n    haml :index\n  end\n\nOptions passed to the render method override options set via +set+.\n\nAvailable Options:\n\n[locals]\n  List of locals passed to the document. Handy with partials.\n  Example: <tt>erb "<%= foo %>", :locals => {:foo => "bar"}</tt>\n\n[default_encoding]\n  String encoding to use if uncertain. Defaults to\n  <tt>settings.default_encoding</tt>.\n\n[views]\n  Views folder to load templates from. Defaults to <tt>settings.views</tt>.\n\n[layout]\n  Whether to use a layout (+true+ or +false+), if it\'s a Symbol, specifies\n  what template to use. Example: <tt>erb :index, :layout => !request.xhr?</tt>\n\n[content_type]\n  Content-Type the template produces, default depends on template language.\n\n[scope]\n  Scope to render template under. Defaults to the application instance. If you\n  change this, instance variables and helper methods will not be available.\n\n[layout_engine]\n  Template engine to use for rendering the layout. Useful for languages that\n  do not support layouts otherwise. Defaults to the engine used for the\n  template. Example: <tt>set :rdoc, :layout_engine => :erb</tt>\n\nTemplates are assumed to be located directly under the <tt>./views</tt>\ndirectory. To use a different views directory:\n\n  set :views, settings.root + \'/templates\'\n\nOne important thing to remember is that you always have to reference\ntemplates with symbols, even if they\'re in a subdirectory (in this\ncase, use <tt>:\'subdir/template\'</tt>). You must use a symbol because\notherwise rendering methods will render any strings passed to them\ndirectly.\n\n=== Available Template Languages\n\nSome languages have multiple implementations. To specify what implementation\nto use (and to be thread-safe), you should simply require it first:\n\n  require \'rdiscount\' # or require \'bluecloth\'\n  get(\'/\') { markdown :index }\n\n=== Haml Templates\n\nDependency::        {haml}[http://haml.info/]\nFile Extensions::   <tt>.haml</tt>\nExample::           <tt>haml :index, :format => :html5</tt>\n\n=== Erb Templates\n\nDependency::        {erubis}[http://www.kuwata-lab.com/erubis/] or\n                    erb (included in Ruby)\nFile Extensions::   <tt>.erb</tt>, <tt>.rhtml</tt> or <tt>.erubis</tt> (Erubis\n                    only)\nExample::           <tt>erb :index</tt>\n\n=== Builder Templates\n\nDependency::        {builder}[http://builder.rubyforge.org/]\nFile Extensions::   <tt>.builder</tt>\nExample::           <tt>builder { |xml| xml.em "hi" }</tt>\n\nIt also takes a block for inline templates (see example).\n\n=== Nokogiri Templates\n\nDependency::        {nokogiri}[http://nokogiri.org/]\nFile Extensions::   <tt>.nokogiri</tt>\nExample::           <tt>nokogiri { |xml| xml.em "hi" }</tt>\n\nIt also takes a block for inline templates (see example).\n\n=== Sass Templates\n\nDependency::        {sass}[http://sass-lang.com/]\nFile Extensions::   <tt>.sass</tt>\nExample::           <tt>sass :stylesheet, :style => :expanded</tt>\n\n=== SCSS Templates\n\nDependency::        {sass}[http://sass-lang.com/]\nFile Extensions::   <tt>.scss</tt>\nExample::           <tt>scss :stylesheet, :style => :expanded</tt>\n\n=== Less Templates\n\nDependency::        {less}[http://www.lesscss.org/]\nFile Extensions::   <tt>.less</tt>\nExample::           <tt>less :stylesheet</tt>\n\n=== Liquid Templates\n\nDependency::        {liquid}[http://www.liquidmarkup.org/]\nFile Extensions::   <tt>.liquid</tt>\nExample::           <tt>liquid :index, :locals => { :key => \'value\' }</tt>\n\nSince you cannot call Ruby methods (except for +yield+) from a Liquid\ntemplate, you almost always want to pass locals to it.\n\n=== Markdown Templates\n\nDependency::        {rdiscount}[https://github.com/rtomayko/rdiscount],\n                    {redcarpet}[https://github.com/tanoku/redcarpet],\n                    {bluecloth}[http://deveiate.org/projects/BlueCloth],\n                    {kramdown}[http://kramdown.rubyforge.org/] *or*\n                    {maruku}[http://maruku.rubyforge.org/]\nFile Extensions::   <tt>.markdown</tt>, <tt>.mkd</tt> and <tt>.md</tt>\nExample::           <tt>markdown :index, :layout_engine => :erb</tt>\n\nIt is not possible to call methods from markdown, nor to pass locals to it.\nYou therefore will usually use it in combination with another rendering\nengine:\n\n  erb :overview, :locals => { :text => markdown(:introduction) }\n\nNote that you may also call the +markdown+ method from within other templates:\n\n  %h1 Hello From Haml!\n  %p= markdown(:greetings)\n\nSince you cannot call Ruby from Markdown, you cannot use layouts written in\nMarkdown. However, it is possible to use another rendering engine for the\ntemplate than for the layout by passing the <tt>:layout_engine</tt> option.\n\n=== Textile Templates\n\nDependency::        {RedCloth}[http://redcloth.org/]\nFile Extensions::   <tt>.textile</tt>\nExample::           <tt>textile :index, :layout_engine => :erb</tt>\n\nIt is not possible to call methods from textile, nor to pass locals to it. You\ntherefore will usually use it in combination with another rendering engine:\n\n  erb :overview, :locals => { :text => textile(:introduction) }\n\nNote that you may also call the +textile+ method from within other templates:\n\n  %h1 Hello From Haml!\n  %p= textile(:greetings)\n\nSince you cannot call Ruby from Textile, you cannot use layouts written in\nTextile. However, it is possible to use another rendering engine for the\ntemplate than for the layout by passing the <tt>:layout_engine</tt> option.\n\n=== RDoc Templates\n\nDependency::        {rdoc}[http://rdoc.rubyforge.org/]\nFile Extensions::   <tt>.rdoc</tt>\nExample::           <tt>rdoc :README, :layout_engine => :erb</tt>\n\nIt is not possible to call methods from rdoc, nor to pass locals to it. You\ntherefore will usually use it in combination with another rendering engine:\n\n  erb :overview, :locals => { :text => rdoc(:introduction) }\n\nNote that you may also call the +rdoc+ method from within other templates:\n\n  %h1 Hello From Haml!\n  %p= rdoc(:greetings)\n\nSince you cannot call Ruby from RDoc, you cannot use layouts written in\nRDoc. However, it is possible to use another rendering engine for the\ntemplate than for the layout by passing the <tt>:layout_engine</tt> option.\n\n=== Radius Templates\n\nDependency::        {radius}[http://radius.rubyforge.org/]\nFile Extensions::   <tt>.radius</tt>\nExample::           <tt>radius :index, :locals => { :key => \'value\' }</tt>\n\nSince you cannot call Ruby methods directly from a Radius template, you almost\nalways want to pass locals to it.\n\n=== Markaby Templates\n\nDependency::        {markaby}[http://markaby.github.com/]\nFile Extensions::   <tt>.mab</tt>\nExample::           <tt>markaby { h1 "Welcome!" }</tt>\n\nIt also takes a block for inline templates (see example).\n\n=== Slim Templates\n\nDependency::        {slim}[http://slim-lang.com/]\nFile Extensions::   <tt>.slim</tt>\nExample::           <tt>slim :index</tt>\n\n=== Creole Templates\n\nDependency::        {creole}[https://github.com/minad/creole]\nFile Extensions::   <tt>.creole</tt>\nExample::           <tt>creole :wiki, :layout_engine => :erb</tt>\n\nIt is not possible to call methods from creole, nor to pass locals to it. You\ntherefore will usually use it in combination with another rendering engine:\n\n  erb :overview, :locals => { :text => creole(:introduction) }\n\nNote that you may also call the +creole+ method from within other templates:\n\n  %h1 Hello From Haml!\n  %p= creole(:greetings)\n\nSince you cannot call Ruby from Creole, you cannot use layouts written in\nCreole. However, it is possible to use another rendering engine for the\ntemplate than for the layout by passing the <tt>:layout_engine</tt> option.\n\n=== CoffeeScript Templates\n\nDependency::        {coffee-script}[https://github.com/josh/ruby-coffee-script]\n                    and a {way to execute javascript}[https://github.com/sstephenson/execjs/blob/master/README.md#readme]\nFile Extensions::   <tt>.coffee</tt>\nExample::           <tt>coffee :index</tt>\n\n=== Yajl Templates\n\nDependency::        {yajl-ruby}[https://github.com/brianmario/yajl-ruby]\nFile Extensions::   <tt>.yajl</tt>\nExample::           <tt>yajl :index, :locals => { :key => \'qux\' }, :callback => \'present\', :variable => \'resource\' </tt>\n\nThe template source is evaluated as a Ruby string, and the resulting json variable is converted #to_json.\n\n  json = { :foo => \'bar\' }\n  json[:baz] = key\n\nThe <tt>:callback</tt> and <tt>:variable</tt> options can be used to decorate the rendered object.\n\n  var resource = {"foo":"bar","baz":"qux"}; present(resource);\n\n=== WLang Templates\n\nDependency::        {wlang}[https://github.com/blambeau/wlang/]\nFile Extensions::   <tt>.wlang</tt>\nExample::           <tt>wlang :index, :locals => { :key => \'value\' }</tt>\n\nSince calling ruby methods is not idiomatic in wlang, you almost always want to pass locals\nto it. Layouts written in wlang and +yield+ are supported, though.\n\n=== Embedded Templates\n\n  get \'/\' do\n    haml \'%div.title Hello World\'\n  end\n\nRenders the embedded template string.\n\n=== Accessing Variables in Templates\n\nTemplates are evaluated within the same context as route handlers. Instance\nvariables set in route handlers are directly accessible by templates:\n\n  get \'/:id\' do\n    @foo = Foo.find(params[:id])\n    haml \'%h1= @foo.name\'\n  end\n\nOr, specify an explicit Hash of local variables:\n\n  get \'/:id\' do\n    foo = Foo.find(params[:id])\n    haml \'%h1= bar.name\', :locals => { :bar => foo }\n  end\n\nThis is typically used when rendering templates as partials from within\nother templates.\n\n=== Inline Templates\n\nTemplates may be defined at the end of the source file:\n\n  require \'sinatra\'\n\n  get \'/\' do\n    haml :index\n  end\n\n  __END__\n\n  @@ layout\n  %html\n    = yield\n\n  @@ index\n  %div.title Hello world.\n\nNOTE: Inline templates defined in the source file that requires sinatra are\nautomatically loaded. Call <tt>enable :inline_templates</tt> explicitly if you\nhave inline templates in other source files.\n\n=== Named Templates\n\nTemplates may also be defined using the top-level <tt>template</tt> method:\n\n  template :layout do\n    "%html\\n  =yield\\n"\n  end\n\n  template :index do\n    \'%div.title Hello World!\'\n  end\n\n  get \'/\' do\n    haml :index\n  end\n\nIf a template named "layout" exists, it will be used each time a template\nis rendered. You can individually disable layouts by passing\n<tt>:layout => false</tt> or disable them by default via\n<tt>set :haml, :layout => false</tt>:\n\n  get \'/\' do\n    haml :index, :layout => !request.xhr?\n  end\n\n=== Associating File Extensions\n\nTo associate a file extension with a template engine, use\n<tt>Tilt.register</tt>. For instance, if you like to use the file extension\n+tt+ for Textile templates, you can do the following:\n\n  Tilt.register :tt, Tilt[:textile]\n\n=== Adding Your Own Template Engine\n\nFirst, register your engine with Tilt, then create a rendering method:\n\n  Tilt.register :myat, MyAwesomeTemplateEngine\n\n  helpers do\n    def myat(*args) render(:myat, *args) end\n  end\n\n  get \'/\' do\n    myat :index\n  end\n\nRenders <tt>./views/index.myat</tt>. See https://github.com/rtomayko/tilt to\nlearn more about Tilt.\n\n== Filters\n\nBefore filters are evaluated before each request within the same\ncontext as the routes will be and can modify the request and response. Instance\nvariables set in filters are accessible by routes and templates:\n\n  before do\n    @note = \'Hi!\'\n    request.path_info = \'/foo/bar/baz\'\n  end\n\n  get \'/foo/*\' do\n    @note #=> \'Hi!\'\n    params[:splat] #=> \'bar/baz\'\n  end\n\nAfter filters are evaluated after each request within the same context and can\nalso modify the request and response. Instance variables set in before filters\nand routes are accessible by after filters:\n\n  after do\n    puts response.status\n  end\n\nNote: Unless you use the +body+ method rather than just returning a String from\nthe routes, the body will not yet be available in the after filter, since it is\ngenerated later on.\n\nFilters optionally take a pattern, causing them to be evaluated only if the\nrequest path matches that pattern:\n\n  before \'/protected/*\' do\n    authenticate!\n  end\n\n  after \'/create/:slug\' do |slug|\n    session[:last_slug] = slug\n  end\n\nLike routes, filters also take conditions:\n\n  before :agent => /Songbird/ do\n    # ...\n  end\n\n  after \'/blog/*\', :host_name => \'example.com\' do\n    # ...\n  end\n\n== Helpers\n\nUse the top-level <tt>helpers</tt> method to define helper methods for use in\nroute handlers and templates:\n\n  helpers do\n    def bar(name)\n      "#{name}bar"\n    end\n  end\n\n  get \'/:name\' do\n    bar(params[:name])\n  end\n\nAlternatively, helper methods can be separately defined in a module:\n\n  module FooUtils\n    def foo(name) "#{name}foo" end\n  end\n\n  module BarUtils\n    def bar(name) "#{name}bar" end\n  end\n\n  helpers FooUtils, BarUtils\n\nThe effect is the same as including the modules in the application class.\n\n=== Using Sessions\n\nA session is used to keep state during requests. If activated, you have one\nsession hash per user session:\n\n  enable :sessions\n\n  get \'/\' do\n    "value = " << session[:value].inspect\n  end\n\n  get \'/:value\' do\n    session[:value] = params[:value]\n  end\n\nNote that <tt>enable :sessions</tt> actually stores all data in a cookie. This\nmight not always be what you want (storing lots of data will increase your\ntraffic, for instance). You can use any Rack session middleware: in order to\ndo so, do *not* call <tt>enable :sessions</tt>, but instead pull in your\nmiddleware of choice as you would any other middleware:\n\n  use Rack::Session::Pool, :expire_after => 2592000\n\n  get \'/\' do\n    "value = " << session[:value].inspect\n  end\n\n  get \'/:value\' do\n    session[:value] = params[:value]\n  end\n\nTo improve security, the session data in the cookie is signed with a session\nsecret. A random secret is generate for you by Sinatra. However, since this\nsecret will change with every start of your application, you might want to\nset the secret yourself, so all your application instances share it:\n\n  set :session_secret, \'super secret\'\n\nIf you want to configure it further, you may also store a hash with options in\nthe +sessions+ setting:\n\n  set :sessions, :domain => \'foo.com\'\n\n=== Halting\n\nTo immediately stop a request within a filter or route use:\n\n  halt\n\nYou can also specify the status when halting:\n\n  halt 410\n\nOr the body:\n\n  halt \'this will be the body\'\n\nOr both:\n\n  halt 401, \'go away!\'\n\nWith headers:\n\n  halt 402, {\'Content-Type\' => \'text/plain\'}, \'revenge\'\n\nIt is of course possible to combine a template with +halt+:\n\n  halt erb(:error)\n\n=== Passing\n\nA route can punt processing to the next matching route using <tt>pass</tt>:\n\n  get \'/guess/:who\' do\n    pass unless params[:who] == \'Frank\'\n    \'You got me!\'\n  end\n\n  get \'/guess/*\' do\n    \'You missed!\'\n  end\n\nThe route block is immediately exited and control continues with the next\nmatching route. If no matching route is found, a 404 is returned.\n\n=== Triggering Another Route\n\nSometimes +pass+ is not what you want, instead you would like to get the result\nof calling another route. Simply use +call+ to achieve this:\n\n  get \'/foo\' do\n    status, headers, body = call env.merge("PATH_INFO" => \'/bar\')\n    [status, headers, body.map(&:upcase)]\n  end\n\n  get \'/bar\' do\n    "bar"\n  end\n\nNote that in the example above, you would ease testing and increase performance\nby simply moving <tt>"bar"</tt> into a helper used by both <tt>/foo</tt>\nand <tt>/bar</tt>.\n\nIf you want the request to be sent to the same application instance rather than\na duplicate, use <tt>call!</tt> instead of <tt>call</tt>.\n\nCheck out the Rack specification if you want to learn more about <tt>call</tt>.\n\n=== Setting Body, Status Code and Headers\n\nIt is possible and recommended to set the status code and response body with the\nreturn value of the route block. However, in some scenarios you might want to\nset the body at an arbitrary point in the execution flow. You can do so with the\n+body+ helper method. If you do so, you can use that method from there on to\naccess the body:\n\n  get \'/foo\' do\n    body "bar"\n  end\n\n  after do\n    puts body\n  end\n\nIt is also possible to pass a block to +body+, which will be executed by the\nRack handler (this can be used to implement streaming, see "Return Values").\n\nSimilar to the body, you can also set the status code and headers:\n\n  get \'/foo\' do\n    status 418\n    headers \\\n      "Allow"   => "BREW, POST, GET, PROPFIND, WHEN",\n      "Refresh" => "Refresh: 20; http://www.ietf.org/rfc/rfc2324.txt"\n    body "I\'m a tea pot!"\n  end\n\nLike +body+, +headers+ and +status+ with no arguments can be used to access\ntheir current values.\n\n=== Streaming Responses\n\nSometimes you want to start sending out data while still generating parts of\nthe response body. In extreme examples, you want to keep sending data until\nthe client closes the connection. You can use the +stream+ helper to avoid\ncreating your own wrapper:\n\n  get \'/\' do\n    stream do |out|\n      out << "It\'s gonna be legen -\\n"\n      sleep 0.5\n      out << " (wait for it) \\n"\n      sleep 1\n      out << "- dary!\\n"\n    end\n  end\n\nThis allows you to implement streaming APIs,\n{Server Sent Events}[http://dev.w3.org/html5/eventsource/] and can be used as\nbasis for {WebSockets}[http://en.wikipedia.org/wiki/WebSocket]. It can also be\nused to increase throughput if some but not all content depends on a slow\nresource.\n\nNote that the streaming behavior, especially the number of concurrent request,\nhighly depends on the web server used to serve the application. Some servers,\nlike WEBRick, might not even support streaming at all. If the server does not\nsupport streaming, the body will be sent all at once after the block passed to\n+stream+ finished executing. Streaming does not work at all with Shotgun.\n\nIf the optional parameter is set to +keep_open+, it will not call +close+ on\nthe stream object, allowing you to close it at any later point in the\nexecution flow. This only works on evented servers, like Thin and Rainbows.\nOther servers will still close the stream:\n\n  set :server, :thin\n  connections = []\n\n  get \'/\' do\n    # keep stream open\n    stream(:keep_open) { |out| connections << out }\n  end\n\n  post \'/\' do\n    # write to all open streams\n    connections.each { |out| out << params[:message] << "\\n" }\n    "message sent"\n  end\n\n=== Logging\n\nIn the request scope, the +logger+ helper exposes a +Logger+ instance:\n\n  get \'/\' do\n    logger.info "loading data"\n    # ...\n  end\n\nThis logger will automatically take your Rack handler\'s logging settings into\naccount. If logging is disabled, this method will return a dummy object, so\nyou do not have to worry in your routes and filters about it.\n\nNote that logging is only enabled for <tt>Sinatra::Application</tt> by\ndefault, so if you inherit from <tt>Sinatra::Base</tt>, you probably want to\nenable it yourself:\n\n  class MyApp < Sinatra::Base\n    configure :production, :development do\n      enable :logging\n    end\n  end\n\nTo avoid any logging middleware to be set up, set the +logging+ setting to\n+nil+. However, keep in mind that +logger+ will in that case return +nil+. A\ncommon use case is when you want to set your own logger. Sinatra will use\nwhatever it will find in <tt>env[\'rack.logger\']</tt>.\n\n=== Mime Types\n\nWhen using <tt>send_file</tt> or static files you may have mime types Sinatra\ndoesn\'t understand. Use +mime_type+ to register them by file extension:\n\n  configure do\n    mime_type :foo, \'text/foo\'\n  end\n\nYou can also use it with the +content_type+ helper:\n\n  get \'/\' do\n    content_type :foo\n    "foo foo foo"\n  end\n\n=== Generating URLs\n\nFor generating URLs you should use the +url+ helper method, for instance, in\nHaml:\n\n  %a{:href => url(\'/foo\')} foo\n\nIt takes reverse proxies and Rack routers into account, if present.\n\nThis method is also aliased to +to+ (see below for an example).\n\n=== Browser Redirect\n\nYou can trigger a browser redirect with the +redirect+ helper method:\n\n  get \'/foo\' do\n    redirect to(\'/bar\')\n  end\n\nAny additional parameters are handled like arguments passed to +halt+:\n\n  redirect to(\'/bar\'), 303\n  redirect \'http://google.com\', \'wrong place, buddy\'\n\nYou can also easily redirect back to the page the user came from with\n<tt>redirect back</tt>:\n\n  get \'/foo\' do\n    "<a href=\'/bar\'>do something</a>"\n  end\n\n  get \'/bar\' do\n    do_something\n    redirect back\n  end\n\nTo pass arguments with a redirect, either add them to the query:\n\n  redirect to(\'/bar?sum=42\')\n\nOr use a session:\n\n  enable :sessions\n\n  get \'/foo\' do\n    session[:secret] = \'foo\'\n    redirect to(\'/bar\')\n  end\n\n  get \'/bar\' do\n    session[:secret]\n  end\n\n=== Cache Control\n\nSetting your headers correctly is the foundation for proper HTTP caching.\n\nYou can easily set the Cache-Control header with like this:\n\n  get \'/\' do\n    cache_control :public\n    "cache it!"\n  end\n\nPro tip: Set up caching in a before filter:\n\n  before do\n    cache_control :public, :must_revalidate, :max_age => 60\n  end\n\nIf you are using the +expires+ helper to set the corresponding header,\n<tt>Cache-Control</tt> will be set automatically for you:\n\n  before do\n    expires 500, :public, :must_revalidate\n  end\n\nTo properly use caches, you should consider using +etag+ or +last_modified+.\nIt is recommended to call those helpers *before* doing heavy lifting, as they\nwill immediately flush a response if the client already has the current\nversion in its cache:\n\n  get \'/article/:id\' do\n    @article = Article.find params[:id]\n    last_modified @article.updated_at\n    etag @article.sha1\n    erb :article\n  end\n\nIt is also possible to use a\n{weak ETag}[http://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation]:\n\n  etag @article.sha1, :weak\n\nThese helpers will not do any caching for you, but rather feed the necessary\ninformation to your cache. If you are looking for a quick reverse-proxy caching\nsolution, try {rack-cache}[http://rtomayko.github.com/rack-cache/]:\n\n  require "rack/cache"\n  require "sinatra"\n\n  use Rack::Cache\n\n  get \'/\' do\n    cache_control :public, :max_age => 36000\n    sleep 5\n    "hello"\n  end\n\nUse the <tt>:static_cache_control</tt> setting (see below) to add\n<tt>Cache-Control</tt> header info to static files.\n\nAccording to RFC 2616 your application should behave differently if the If-Match\nor If-None-Match header is set to <tt>*</tt> depending on whether the resource\nrequested is already in existence. Sinatra assumes resources for safe (like get)\nand idempotent (like put) requests are already in existence, whereas other\nresources (for instance for post requests), are treated as new resources. You\ncan change this behavior by passing in a <tt>:new_resource</tt> option:\n\n  get \'/create\' do\n    etag \'\', :new_resource => true\n    Article.create\n    erb :new_article\n  end\n\nIf you still want to use a weak ETag, pass in a <tt>:kind</tt> option:\n\n  etag \'\', :new_resource => true, :kind => :weak\n\n=== Sending Files\n\nFor sending files, you can use the <tt>send_file</tt> helper method:\n\n  get \'/\' do\n    send_file \'foo.png\'\n  end\n\nIt also takes a couple of options:\n\n  send_file \'foo.png\', :type => :jpg\n\nThe options are:\n\n[filename]\n  file name, in response, defaults to the real file name.\n\n[last_modified]\n  value for Last-Modified header, defaults to the file\'s mtime.\n\n[type]\n  content type to use, guessed from the file extension if missing.\n\n[disposition]\n  used for Content-Disposition, possible values: +nil+ (default),\n  <tt>:attachment</tt> and <tt>:inline</tt>\n\n[length]\n  Content-Length header, defaults to file size.\n\n[status]\n  Status code to be send. Useful when sending a static file as an error page.\n\nIf supported by the Rack handler, other means than streaming from the Ruby\nprocess will be used. If you use this helper method, Sinatra will automatically\nhandle range requests.\n\n=== Accessing the Request Object\n\nThe incoming request object can be accessed from request level (filter, routes,\nerror handlers) through the <tt>request</tt> method:\n\n  # app running on http://example.com/example\n  get \'/foo\' do\n    t = %w[text/css text/html application/javascript]\n    request.accept              # [\'text/html\', \'*/*\']\n    request.accept? \'text/xml\'  # true\n    request.preferred_type(t)   # \'text/html\'\n    request.body                # request body sent by the client (see below)\n    request.scheme              # "http"\n    request.script_name         # "/example"\n    request.path_info           # "/foo"\n    request.port                # 80\n    request.request_method      # "GET"\n    request.query_string        # ""\n    request.content_length      # length of request.body\n    request.media_type          # media type of request.body\n    request.host                # "example.com"\n    request.get?                # true (similar methods for other verbs)\n    request.form_data?          # false\n    request["SOME_HEADER"]      # value of SOME_HEADER header\n    request.referrer            # the referrer of the client or \'/\'\n    request.user_agent          # user agent (used by :agent condition)\n    request.cookies             # hash of browser cookies\n    request.xhr?                # is this an ajax request?\n    request.url                 # "http://example.com/example/foo"\n    request.path                # "/example/foo"\n    request.ip                  # client IP address\n    request.secure?             # false (would be true over ssl)\n    request.forwarded?          # true (if running behind a reverse proxy)\n    request.env                 # raw env hash handed in by Rack\n  end\n\nSome options, like <tt>script_name</tt> or <tt>path_info</tt>, can also be\nwritten:\n\n  before { request.path_info = "/" }\n\n  get "/" do\n    "all requests end up here"\n  end\n\nThe <tt>request.body</tt> is an IO or StringIO object:\n\n  post "/api" do\n    request.body.rewind  # in case someone already read it\n    data = JSON.parse request.body.read\n    "Hello #{data[\'name\']}!"\n  end\n\n=== Attachments\n\nYou can use the +attachment+ helper to tell the browser the response should be\nstored on disk rather than displayed in the browser:\n\n  get \'/\' do\n    attachment\n    "store it!"\n  end\n\nYou can also pass it a file name:\n\n  get \'/\' do\n    attachment "info.txt"\n    "store it!"\n  end\n\n=== Dealing with Date and Time\n\nSinatra offers a +time_for+ helper method, which, from the given value\ngenerates a Time object. It is also able to convert +DateTime+, +Date+ and\nsimilar classes:\n\n  get \'/\' do\n    pass if Time.now > time_for(\'Dec 23, 2012\')\n    "still time"\n  end\n\nThis method is used internally by +expires+, +last_modified+ and akin. You can\ntherefore easily extend the behavior of those methods by overriding +time_for+\nin your application:\n\n  helpers do\n    def time_for(value)\n      case value\n      when :yesterday then Time.now - 24*60*60\n      when :tomorrow  then Time.now + 24*60*60\n      else super\n      end\n    end\n  end\n\n  get \'/\' do\n    last_modified :yesterday\n    expires :tomorrow\n    "hello"\n  end\n\n=== Looking Up Template Files\n\nThe <tt>find_template</tt> helper is used to find template files for rendering:\n\n  find_template settings.views, \'foo\', Tilt[:haml] do |file|\n    puts "could be #{file}"\n  end\n\nThis is not really useful. But it is useful that you can actually override this\nmethod to hook in your own lookup mechanism. For instance, if you want to be\nable to use more than one view directory:\n\n  set :views, [\'views\', \'templates\']\n\n  helpers do\n    def find_template(views, name, engine, &block)\n      Array(views).each { |v| super(v, name, engine, &block) }\n    end\n  end\n\nAnother example would be using different directories for different engines:\n\n  set :views, :sass => \'views/sass\', :haml => \'templates\', :default => \'views\'\n\n  helpers do\n    def find_template(views, name, engine, &block)\n      _, folder = views.detect { |k,v| engine == Tilt[k] }\n      folder ||= views[:default]\n      super(folder, name, engine, &block)\n    end\n  end\n\nYou can also easily wrap this up in an extension and share with others!\n\nNote that <tt>find_template</tt> does not check if the file really exists but\nrather calls the given block for all possible paths. This is not a performance\nissue, since +render+ will use +break+ as soon as a file is found. Also,\ntemplate locations (and content) will be cached if you are not running in\ndevelopment mode. You should keep that in mind if you write a really crazy\nmethod.\n\n== Configuration\n\nRun once, at startup, in any environment:\n\n  configure do\n    # setting one option\n    set :option, \'value\'\n\n    # setting multiple options\n    set :a => 1, :b => 2\n\n    # same as `set :option, true`\n    enable :option\n\n    # same as `set :option, false`\n    disable :option\n\n    # you can also have dynamic settings with blocks\n    set(:css_dir) { File.join(views, \'css\') }\n  end\n\nRun only when the environment (RACK_ENV environment variable) is set to\n<tt>:production</tt>:\n\n  configure :production do\n    ...\n  end\n\nRun when the environment is set to either <tt>:production</tt> or\n<tt>:test</tt>:\n\n  configure :production, :test do\n    ...\n  end\n\nYou can access those options via <tt>settings</tt>:\n\n  configure do\n    set :foo, \'bar\'\n  end\n\n  get \'/\' do\n    settings.foo? # => true\n    settings.foo  # => \'bar\'\n    ...\n  end\n\n=== Configuring attack protection\n\nSinatra is using\n{Rack::Protection}[https://github.com/rkh/rack-protection#readme] to defend\nyou application against common, opportunistic attacks. You can easily disable\nthis behavior (which will open your application to tons of common\nvulnerabilities):\n\n  disable :protection\n\nTo skip a single defense layer, set +protection+ to an options hash:\n\n  set :protection, :except => :path_traversal\n\nYou can also hand in an array in order to disable a list of protections:\n\n  set :protection, :except => [:path_traversal, :session_hijacking]\n\n=== Available Settings\n\n[absolute_redirects]   If disabled, Sinatra will allow relative redirects,\n                       however, Sinatra will no longer conform with RFC 2616\n                       (HTTP 1.1), which only allows absolute redirects.\n\n                       Enable if your app is running behind a reverse proxy that\n                       has not been set up properly. Note that the +url+ helper\n                       will still produce absolute URLs, unless you pass in\n                       +false+ as second parameter.\n\n                       Disabled per default.\n\n[add_charsets]         mime types the <tt>content_type</tt> helper will\n                       automatically add the charset info to.\n\n                       You should add to it rather than overriding this option:\n\n                         settings.add_charsets << "application/foobar"\n\n[app_file]             Path to the main application file, used to detect project\n                       root, views and public folder and inline templates.\n\n[bind]                 IP address to bind to (default: 0.0.0.0).\n                       Only used for built-in server.\n\n[default_encoding]     encoding to assume if unknown\n                       (defaults to <tt>"utf-8"</tt>).\n\n[dump_errors]          display errors in the log.\n\n[environment]          current environment, defaults to <tt>ENV[\'RACK_ENV\']</tt>,\n                       or <tt>"development"</tt> if not available.\n\n[logging]              use the logger.\n\n[lock]                 Places a lock around every request, only running\n                       processing on request per Ruby process concurrently.\n\n                       Enabled if your app is not thread-safe.\n                       Disabled per default.\n\n[method_override]      use <tt>_method</tt> magic to allow put/delete forms in\n                       browsers that don\'t support it.\n\n[port]                 Port to listen on. Only used for built-in server.\n\n[prefixed_redirects]   Whether or not to insert <tt>request.script_name</tt>\n                       into redirects if no absolute path is given. That way\n                       <tt>redirect \'/foo\'</tt> would behave like\n                       <tt>redirect to(\'/foo\')</tt>. Disabled per default.\n\n[protection]           Whether or not to enable web attack protections. See\n                       protection section above.\n\n[public_dir]           Alias for <tt>public_folder</tt>. See below.\n\n[public_folder]        Path to the folder public files are served from. Only\n                       used if static file serving is enabled (see\n                       <tt>static</tt> setting below). Inferred from\n                       <tt>app_file</tt> setting if not set.\n\n[reload_templates]     whether or not to reload templates between requests.\n                       Enabled in development mode.\n\n[root]                 Path to project root folder. Inferred from +app_file+\n                       setting if not set.\n\n[raise_errors]         raise exceptions (will stop application). Enabled\n                       by default when <tt>environment</tt> is set to\n                       <tt>"test"</tt>, disabled otherwise.\n\n[run]                  if enabled, Sinatra will handle starting the web server,\n                       do not enable if using rackup or other means.\n\n[running]              is the built-in server running now?\n                       do not change this setting!\n\n[server]               server or list of servers to use for built-in server.\n                       defaults to [\'thin\', \'mongrel\', \'webrick\'], order\n                       indicates priority.\n\n[sessions]             enable cookie based sessions support using\n                       <tt>Rack::Session::Cookie</tt>. See \'Using Sessions\'\n                       section for more information.\n\n[show_exceptions]      show a stack trace in the browser when an exception\n                       happens. Enabled by default when <tt>environment</tt>\n                       is set to <tt>"development"</tt>, disabled otherwise.\n\n[static]               Whether Sinatra should handle serving static files.\n                       Disable when using a Server able to do this on its own.\n                       Disabling will boost performance.\n                       Enabled per default in classic style, disabled for\n                       modular apps.\n\n[static_cache_control] When Sinatra is serving static files, set this to add\n                       <tt>Cache-Control</tt> headers to the responses. Uses the\n                       +cache_control+ helper. Disabled by default.\n                       Use an explicit array when setting multiple values:\n                       <tt>set :static_cache_control, [:public, :max_age => 300]</tt>\n\n[threaded]             If set to +true+, will tell Thin to use\n                       <tt>EventMachine.defer</tt> for processing the request.\n\n[views]                Path to the views folder. Inferred from <tt>app_file</tt>\n                       setting if not set.\n\n== Environments\n\nThere are three predefined +environments+: <tt>"development"</tt>,\n<tt>"production"</tt> and <tt>"test"</tt>. Environments can be set\nthrough the +RACK_ENV+ environment variable. The default value is\n<tt>"development"</tt>. In this mode, all templates are reloaded between\nrequests. Special <tt>not_found</tt> and <tt>error</tt> handlers are installed\nfor this environment so you will see a stack trace in your browser.\nIn <tt>"production"</tt> and <tt>"test"</tt> templates are cached by default.\n\nTo run different environments use the <tt>-e</tt> option:\n\n  ruby my_app.rb -e [ENVIRONMENT]\n\nYou can use predefined methods: +development?+, +test?+ and +production?+ to\ncheck which enviroment is currently set.\n\n== Error Handling\n\nError handlers run within the same context as routes and before filters, which\nmeans you get all the goodies it has to offer, like <tt>haml</tt>,\n<tt>erb</tt>, <tt>halt</tt>, etc.\n\n=== Not Found\n\nWhen a <tt>Sinatra::NotFound</tt> exception is raised, or the response\'s status\ncode is 404, the <tt>not_found</tt> handler is invoked:\n\n  not_found do\n    \'This is nowhere to be found.\'\n  end\n\n=== Error\n\nThe +error+ handler is invoked any time an exception is raised from a route\nblock or a filter. The exception object can be obtained from the\n<tt>sinatra.error</tt> Rack variable:\n\n  error do\n    \'Sorry there was a nasty error - \' + env[\'sinatra.error\'].name\n  end\n\nCustom errors:\n\n  error MyCustomError do\n    \'So what happened was...\' + env[\'sinatra.error\'].message\n  end\n\nThen, if this happens:\n\n  get \'/\' do\n    raise MyCustomError, \'something bad\'\n  end\n\nYou get this:\n\n  So what happened was... something bad\n\nAlternatively, you can install an error handler for a status code:\n\n  error 403 do\n    \'Access forbidden\'\n  end\n\n  get \'/secret\' do\n    403\n  end\n\nOr a range:\n\n  error 400..510 do\n    \'Boom\'\n  end\n\nSinatra installs special <tt>not_found</tt> and <tt>error</tt> handlers when\nrunning under the development environment.\n\n== Rack Middleware\n\nSinatra rides on Rack[http://rack.rubyforge.org/], a minimal standard\ninterface for Ruby web frameworks. One of Rack\'s most interesting capabilities\nfor application developers is support for "middleware" -- components that sit\nbetween the server and your application monitoring and/or manipulating the\nHTTP request/response to provide various types of common functionality.\n\nSinatra makes building Rack middleware pipelines a cinch via a top-level\n+use+ method:\n\n  require \'sinatra\'\n  require \'my_custom_middleware\'\n\n  use Rack::Lint\n  use MyCustomMiddleware\n\n  get \'/hello\' do\n    \'Hello World\'\n  end\n\nThe semantics of +use+ are identical to those defined for the\nRack::Builder[http://rack.rubyforge.org/doc/classes/Rack/Builder.html] DSL\n(most frequently used from rackup files). For example, the +use+ method\naccepts multiple/variable args as well as blocks:\n\n  use Rack::Auth::Basic do |username, password|\n    username == \'admin\' && password == \'secret\'\n  end\n\nRack is distributed with a variety of standard middleware for logging,\ndebugging, URL routing, authentication, and session handling. Sinatra uses\nmany of these components automatically based on configuration so you\ntypically don\'t have to +use+ them explicitly.\n\nYou can find useful middleware in\n{rack}[https://github.com/rack/rack/tree/master/lib/rack],\n{rack-contrib}[https://github.com/rack/rack-contrib#readme],\nwith {CodeRack}[http://coderack.org/] or in the\n{Rack wiki}[https://github.com/rack/rack/wiki/List-of-Middleware].\n\n== Testing\n\nSinatra tests can be written using any Rack-based testing library or framework.\n{Rack::Test}[http://rdoc.info/github/brynary/rack-test/master/frames]\nis recommended:\n\n  require \'my_sinatra_app\'\n  require \'test/unit\'\n  require \'rack/test\'\n\n  class MyAppTest < Test::Unit::TestCase\n    include Rack::Test::Methods\n\n    def app\n      Sinatra::Application\n    end\n\n    def test_my_default\n      get \'/\'\n      assert_equal \'Hello World!\', last_response.body\n    end\n\n    def test_with_params\n      get \'/meet\', :name => \'Frank\'\n      assert_equal \'Hello Frank!\', last_response.body\n    end\n\n    def test_with_rack_env\n      get \'/\', {}, \'HTTP_USER_AGENT\' => \'Songbird\'\n      assert_equal "You\'re using Songbird!", last_response.body\n    end\n  end\n\n== Sinatra::Base - Middleware, Libraries, and Modular Apps\n\nDefining your app at the top-level works well for micro-apps but has\nconsiderable drawbacks when building reusable components such as Rack\nmiddleware, Rails metal, simple libraries with a server component, or even\nSinatra extensions. The top-level assumes a micro-app style configuration\n(e.g., a single application file, <tt>./public</tt> and <tt>./views</tt>\ndirectories, logging, exception detail page, etc.). That\'s where\n<tt>Sinatra::Base</tt> comes into play:\n\n  require \'sinatra/base\'\n\n  class MyApp < Sinatra::Base\n    set :sessions, true\n    set :foo, \'bar\'\n\n    get \'/\' do\n      \'Hello world!\'\n    end\n  end\n\nThe methods available to <tt>Sinatra::Base</tt> subclasses are exactly as those\navailable via the top-level DSL. Most top-level apps can be converted to\n<tt>Sinatra::Base</tt> components with two modifications:\n\n* Your file should require <tt>sinatra/base</tt> instead of +sinatra+;\n  otherwise, all of Sinatra\'s DSL methods are imported into the main\n  namespace.\n* Put your app\'s routes, error handlers, filters, and options in a subclass\n  of <tt>Sinatra::Base</tt>.\n\n<tt>Sinatra::Base</tt> is a blank slate. Most options are disabled by default,\nincluding the built-in server. See\n{Options and Configuration}[http://sinatra.github.com/configuration.html]\nfor details on available options and their behavior.\n\n=== Modular vs. Classic Style\n\nContrary to common belief, there is nothing wrong with classic style. If it\nsuits your application, you do not have to switch to a modular application.\n\nThe main downsides of using classic style rather than modular style is that\nyou may only have one Sinatra application per Ruby process. If you plan to use\nmore than one, switch to modular style. There is no reason you cannot mix\nmodular and classic style.\n\nIf switching from one style to the other, you should be aware of slightly\ndifferent default settings:\n\n  Setting             Classic                 Modular\n\n  app_file            file loading sinatra    file subclassing Sinatra::Base\n  run                 $0 == app_file          false\n  logging             true                    false\n  method_override     true                    false\n  inline_templates    true                    false\n  static              true                    false\n\n\n=== Serving a Modular Application\n\nThere are two common options for starting a modular app, actively starting with\n<tt>run!</tt>:\n\n  # my_app.rb\n  require \'sinatra/base\'\n\n  class MyApp < Sinatra::Base\n    # ... app code here ...\n\n    # start the server if ruby file executed directly\n    run! if app_file == $0\n  end\n\nStart with:\n\n  ruby my_app.rb\n\nOr with a <tt>config.ru</tt>, which allows using any Rack handler:\n\n  # config.ru\n  require \'./my_app\'\n  run MyApp\n\nRun:\n\n  rackup -p 4567\n\n=== Using a Classic Style Application with a config.ru\n\nWrite your app file:\n\n  # app.rb\n  require \'sinatra\'\n\n  get \'/\' do\n    \'Hello world!\'\n  end\n\nAnd a corresponding <tt>config.ru</tt>:\n\n  require \'./app\'\n  run Sinatra::Application\n\n=== When to use a config.ru?\n\nGood signs you probably want to use a <tt>config.ru</tt>:\n\n* You want to deploy with a different Rack handler (Passenger, Unicorn,\n  Heroku, ...).\n* You want to use more than one subclass of <tt>Sinatra::Base</tt>.\n* You want to use Sinatra only for middleware, but not as endpoint.\n\n<b>There is no need to switch to a <tt>config.ru</tt> only because you\nswitched to modular style, and you don\'t have to use modular style for running\nwith a <tt>config.ru</tt>.</b>\n\n=== Using Sinatra as Middleware\n\nNot only is Sinatra able to use other Rack middleware, any Sinatra application\ncan in turn be added in front of any Rack endpoint as middleware itself. This\nendpoint could be another Sinatra application, or any other Rack-based\napplication (Rails/Ramaze/Camping/...):\n\n  require \'sinatra/base\'\n\n  class LoginScreen < Sinatra::Base\n    enable :sessions\n\n    get(\'/login\') { haml :login }\n\n    post(\'/login\') do\n      if params[:name] == \'admin\' && params[:password] == \'admin\'\n        session[\'user_name\'] = params[:name]\n      else\n        redirect \'/login\'\n      end\n    end\n  end\n\n  class MyApp < Sinatra::Base\n    # middleware will run before filters\n    use LoginScreen\n\n    before do\n      unless session[\'user_name\']\n        halt "Access denied, please <a href=\'/login\'>login</a>."\n      end\n    end\n\n    get(\'/\') { "Hello #{session[\'user_name\']}." }\n  end\n\n=== Dynamic Application Creation\n\nSometimes you want to create new applications at runtime without having to\nassign them to a constant, you can do this with <tt>Sinatra.new</tt>:\n\n  require \'sinatra/base\'\n  my_app = Sinatra.new { get(\'/\') { "hi" } }\n  my_app.run!\n\nIt takes the application to inherit from as optional argument:\n\n  # config.ru\n  require \'sinatra/base\'\n\n  controller = Sinatra.new do\n    enable :logging\n    helpers MyHelpers\n  end\n\n  map(\'/a\') do\n    run Sinatra.new(controller) { get(\'/\') { \'a\' } }\n  end\n\n  map(\'/b\') do\n    run Sinatra.new(controller) { get(\'/\') { \'b\' } }\n  end\n\nThis is especially useful for testing Sinatra extensions or using Sinatra in\nyour own library.\n\nThis also makes using Sinatra as middleware extremely easy:\n\n  require \'sinatra/base\'\n\n  use Sinatra do\n    get(\'/\') { ... }\n  end\n\n  run RailsProject::Application\n\n== Scopes and Binding\n\nThe scope you are currently in determines what methods and variables are\navailable.\n\n=== Application/Class Scope\n\nEvery Sinatra application corresponds to a subclass of <tt>Sinatra::Base</tt>.\nIf you are using the top-level DSL (<tt>require \'sinatra\'</tt>), then this\nclass is <tt>Sinatra::Application</tt>, otherwise it is the subclass you\ncreated explicitly. At class level you have methods like +get+ or +before+, but\nyou cannot access the +request+ object or the +session+, as there only is a\nsingle application class for all requests.\n\nOptions created via +set+ are methods at class level:\n\n    class MyApp < Sinatra::Base\n      # Hey, I\'m in the application scope!\n      set :foo, 42\n      foo # => 42\n\n      get \'/foo\' do\n        # Hey, I\'m no longer in the application scope!\n      end\n    end\n\nYou have the application scope binding inside:\n\n* Your application class body\n* Methods defined by extensions\n* The block passed to +helpers+\n* Procs/blocks used as value for +set+\n* The block passed to <tt>Sinatra.new</tt>\n\nYou can reach the scope object (the class) like this:\n\n* Via the object passed to configure blocks (<tt>configure { |c| ... }</tt>)\n* +settings+ from within request scope\n\n=== Request/Instance Scope\n\nFor every incoming request, a new instance of your application class is\ncreated and all handler blocks run in that scope. From within this scope you\ncan access the +request+ and +session+ object or call rendering methods like\n+erb+ or +haml+. You can access the application scope from within the request\nscope via the +settings+ helper:\n\n  class MyApp < Sinatra::Base\n    # Hey, I\'m in the application scope!\n    get \'/define_route/:name\' do\n      # Request scope for \'/define_route/:name\'\n      @value = 42\n\n      settings.get("/#{params[:name]}") do\n        # Request scope for "/#{params[:name]}"\n        @value # => nil (not the same request)\n      end\n\n      "Route defined!"\n    end\n  end\n\nYou have the request scope binding inside:\n\n* get/head/post/put/delete/options blocks\n* before/after filters\n* helper methods\n* templates/views\n\n=== Delegation Scope\n\nThe delegation scope just forwards methods to the class scope. However, it\ndoes not behave 100% like the class scope, as you do not have the class\nbinding. Only methods explicitly marked for delegation are available and you\ndo not share variables/state with the class scope (read: you have a different\n+self+). You can explicitly add method delegations by calling\n<tt>Sinatra::Delegator.delegate :method_name</tt>.\n\nYou have the delegate scope binding inside:\n\n* The top level binding, if you did <tt>require "sinatra"</tt>\n* An object extended with the <tt>Sinatra::Delegator</tt> mixin\n\nHave a look at the code for yourself: here\'s the\n{Sinatra::Delegator mixin}[https://github.com/sinatra/sinatra/blob/ca06364/lib/sinatra/base.rb#L1609-1633]\nbeing {extending the main object}[https://github.com/sinatra/sinatra/blob/ca06364/lib/sinatra/main.rb#L28-30].\n\n== Command Line\n\nSinatra applications can be run directly:\n\n  ruby myapp.rb [-h] [-x] [-e ENVIRONMENT] [-p PORT] [-o HOST] [-s HANDLER]\n\nOptions are:\n\n  -h # help\n  -p # set the port (default is 4567)\n  -o # set the host (default is 0.0.0.0)\n  -e # set the environment (default is development)\n  -s # specify rack server/handler (default is thin)\n  -x # turn on the mutex lock (default is off)\n\n== Requirement\n\nThe following Ruby versions are officially supported:\n\n[ Ruby 1.8.7 ]\n  1.8.7 is fully supported, however, if nothing is keeping you from it, we\n  recommend upgrading to 1.9.2 or switching to JRuby or Rubinius. Support for\n  1.8.7 will not be dropped before Sinatra 2.0 and Ruby 2.0 except maybe for\n  the unlikely event of 1.8.8 being released. Even then, we might continue\n  supporting it. <b>Ruby 1.8.6 is no longer supported.</b> If you want to run\n  with 1.8.6, downgrade to Sinatra 1.2, which will receive bug fixes until\n  Sinatra 1.4.0 is released.\n\n[ Ruby 1.9.2 ]\n  1.9.2 is fully supported and recommended. Do not use 1.9.2p0, it is known to\n  cause segmentation faults when running Sinatra. Support will continue at least\n  until the release of Ruby 1.9.4/2.0 and support for the latest 1.9 release\n  will continue as long as it is still supported by the Ruby core team.\n\n[ Ruby 1.9.3 ]\n  1.9.3 is fully supported and recommended. Please note that switching to 1.9.3\n  from an earlier version will invalidate all sessions.\n\n[ Rubinius ]\n  Rubinius is officially supported (Rubinius >= 1.2.4), everything, including\n  all template languages, works. The upcoming 2.0 release is supported as\n  well, including 1.9 mode.\n\n[ JRuby ]\n  JRuby is officially supported (JRuby >= 1.6.7). No issues with third party\n  template libraries are known, however, if you choose to use JRuby, please\n  look into JRuby rack handlers, as the Thin web server is not fully supported\n  on JRuby. JRuby\'s support for C extensions is still experimental, which only\n  affects RDiscount, Redcarpet, RedCloth and Yajl templates as well as Thin\n  and Mongrel at the moment.\n\nWe also keep an eye on upcoming Ruby versions.\n\nThe following Ruby implementations are not officially supported but still are\nknown to run Sinatra:\n\n* Older versions of JRuby and Rubinius\n* Ruby Enterprise Edition\n* MacRuby, Maglev, IronRuby\n* Ruby 1.9.0 and 1.9.1 (but we do recommend against using those)\n\nNot being officially supported means if things only break there and not on a\nsupported platform, we assume it\'s not our issue but theirs.\n\nWe also run our CI against ruby-head (the upcoming 2.0.0) and the 1.9.4\nbranch, but we can\'t guarantee anything, since it is constantly moving. Expect\nboth 1.9.4p0 and 2.0.0p0 to be supported.\n\nSinatra should work on any operating system supported by the chosen Ruby\nimplementation.\n\nYou will not be able to run Sinatra on Cardinal, SmallRuby, BlueRuby or any\nRuby version prior to 1.8.7 as of the time being.\n\n== The Bleeding Edge\n\nIf you would like to use Sinatra\'s latest bleeding code, feel free to run your\napplication against the master branch, it should be rather stable.\n\nWe also push out prerelease gems from time to time, so you can do a\n\n  gem install sinatra --pre\n\nTo get some of the latest features.\n\n=== With Bundler\n\nIf you want to run your application with the latest Sinatra, using\n{Bundler}[http://gembundler.com/] is the recommended way.\n\nFirst, install bundler, if you haven\'t:\n\n  gem install bundler\n\nThen, in your project directory, create a +Gemfile+:\n\n  source :rubygems\n  gem \'sinatra\', :git => "git://github.com/sinatra/sinatra.git"\n\n  # other dependencies\n  gem \'haml\'                    # for instance, if you use haml\n  gem \'activerecord\', \'~> 3.0\'  # maybe you also need ActiveRecord 3.x\n\nNote that you will have to list all your applications dependencies in there.\nSinatra\'s direct dependencies (Rack and Tilt) will, however, be automatically\nfetched and added by Bundler.\n\nNow you can run your app like this:\n\n  bundle exec ruby myapp.rb\n\n=== Roll Your Own\n\nCreate a local clone and run your app with the <tt>sinatra/lib</tt> directory\non the <tt>$LOAD_PATH</tt>:\n\n  cd myapp\n  git clone git://github.com/sinatra/sinatra.git\n  ruby -Isinatra/lib myapp.rb\n\nTo update the Sinatra sources in the future:\n\n  cd myapp/sinatra\n  git pull\n\n=== Install Globally\n\nYou can build the gem on your own:\n\n  git clone git://github.com/sinatra/sinatra.git\n  cd sinatra\n  rake sinatra.gemspec\n  rake install\n\nIf you install gems as root, the last step should be\n\n  sudo rake install\n\n== Versioning\n\nSinatra follows {Semantic Versioning}[http://semver.org/], both SemVer and\nSemVerTag.\n\n== Further Reading\n\n* {Project Website}[http://www.sinatrarb.com/] - Additional documentation,\n  news, and links to other resources.\n* {Contributing}[http://www.sinatrarb.com/contributing] - Find a bug? Need\n  help? Have a patch?\n* {Issue tracker}[http://github.com/sinatra/sinatra/issues]\n* {Twitter}[http://twitter.com/sinatra]\n* {Mailing List}[http://groups.google.com/group/sinatrarb/topics]\n* {IRC: #sinatra}[irc://chat.freenode.net/#sinatra] on http://freenode.net\n* {Sinatra Book}[http://sinatra-book.gittr.com] Cookbook Tutorial\n* {Sinatra Recipes}[http://recipes.sinatrarb.com/] Community\n  contributed recipes\n* API documentation for the {latest release}[http://rubydoc.info/gems/sinatra]\n  or the {current HEAD}[http://rubydoc.info/github/sinatra/sinatra] on\n  http://rubydoc.info\n* {CI server}[http://ci.rkh.im/view/Sinatra/]\n'
Prototype/Javascript wrapper for the Google Search Appliance Search Protocol. Fancy cross-domain JSON support included. b'gsa-prototype\n=============\n\nPrototype/Javascript wrapper for the Google Search Appliance Search Protocol. Fancy cross-domain JSON support included.\n\nInstall\n=======\n\ngsa-prototype requires a custom XSL be installed on your Google Search Appliance\n\n* Login to the GSA Admin Console\n* Click \'Serving\' on the sidebar\n* Create a new frontend named \'json\'\n* Click \'Edit\' beside the newly created frontend\n* Click \'Edit underlying XSLT code\'\n* Select \'Import Stylesheet\'\n* Import the template at xsl/json.xsl\n* Done!\n\nUsage\n=====\n\n>>> var gsa = new Gsa(\'foo.com\')\n>>> gsa.search(\'jesse newland\')\ntrue\n>>> gsa.results.first().get(\'title\')\n"LexBlog IT Director talks about today&#39;s platform upgrade : Real <b>...</b>"\n>>> gsa.results.first().get(\'url\')\n"http://kevin.lexblog.com/2007/07/articles/cool-stuff/lexblog-it-director-talks-about-todays-platform-upgrade/"\n\nSee inline documentation in gsa.js for more details.'
Syncs one directory to another (example: a git project to an svn repo) b"duplikate\n=========\n\n# process the differences between the two directories:\n\ndupe = Duplikate.process 'my-git-repo', 'my-svn-repo'\ndupe.added_files         #=> [..., ...]\ndupe.added_directories   #=> [..., ...]\ndupe.deleted_files       #=> [..., ...]\ndupe.deleted_directories #=> [..., ...]\ndupe.existing_files      #=> [..., ...]\n\ndupe.report\n\n# Or actually make the changes and commit in svn:\n\nDuplikate.execute 'my-git-repo', 'my-svn-repo'\n\nTODO: Actual real-world usage!\n"
Proof of concept Lazy-Loading for ActiveRecord. Inspired by the 'kickers' of Ambition. b'LazyRecord\n==========\n\nProof of concept Lazy-Loading for ActiveRecord. Inspired by the \'kickers\' of Ambition.\n  \n  >> b = Buzz.lazy_find(:first)\n  => #<ActiveRecord::Lazy::Promise computation=#<Proc:0x025d1e50@...>>\n  -------------No SQL query is run until a method is called on this \'Promise\' \n  >> b.to_s\n  -------------Buzz Load (0.000578)   SELECT * FROM buzz LIMIT 1\n  => "Inaugural Buzz"\n  \nUse the +lazy_record+ class method to make this the default for a certain class:\n  \n  class Buzz << ActiveRecord::Base\n    lazy_record\n  end\n  \n  >> b = Buzz.find(:first)\n  => #<ActiveRecord::Lazy::Promise computation=#<Proc:0x025d1e50@...>>\n  -------------No SQL query is run until a method is called on this \'Promise\' \n  >> b.to_s\n  -------------Buzz Load (0.000578)   SELECT * FROM buzz LIMIT 1\n  => "Inaugural Buzz"\n\n\nWhy you might want to use this\n===========\n\nSay you\'ve got some kick-ass cache_fu going on in your views - huge blocks of HTML being cached with a TTL of 30 mins or so.\nBut, each hit on your controller still fires off the \'spensive DB queries to fetch your tag cloud. With lazy loading, these\nqueries aren\'t run until absolutely necessary - giving your DB a rest til your cache expires, and boosting your reqs/sec.\n\n\nWhy you might not want to use this\n===========\n\n  >> b = Buzz.lazy_find(123023424)\n  => #<ActiveRecord::Lazy::Promise computation=#<Proc:0x025d1e50@...>>\n  >> puts "booleans are screwed" if b\n  booleans are screwed\n\n\nPromise code from here: http://moonbase.rydia.net/software/lazy.rb/\n\nContact\n=======\nJesse Newland\njnewland@gmail.com'
A Ruby wrapper for the Google Search Appliance Feeds Protocol b'GSA Feeds\n=========\n\nA Ruby wrapper for the Google Search Appliance Feeds Protocol. This protocol exists to push content and metadata to the search appliance for processing, indexing, and serving as search results. Feeds are available in GSA software versions 4.2 and later.'
Ruby API wrapper for the TiVoToGo protocol. Use it to access a list of recorded shows and programs on your Tivo. b'README for votigoto\n===================\n\n>> require \'votigoto\'\n=> true\n>> tivo = Votigoto::Base.new("10.0.0.148","SEKRET_MEDIA_ACCESS_KEY")\n=> #<Votigoto::Base:0x14095d8 @mak="SEKRET_MEDIA_ACCESS_KEY", @ip="10.0.0.148">\n>> tivo.shows.first.to_s\n=> "The Daily Show With Jon Stewart - Senator Joe Biden (D-Del.)."'
Mofo was a fast and simple microformat parser, based on a concise DSL and Hpricot. No longer maintained. b'  mofo.          \n- a ruby microformat parser -\n                     engine\n                     dsl\n                     helper\n                     toy\n\n= First, a word\n\nHpricot, while still great, seems destined for deprecation.\n\nIf you\'re into Nokogiri try Prism for your Microformatic needs:\n\nhttp://github.com/mwunsch/prism\n\n= Get Started Immediately\n\n  $ irb -rubygems \n  >> require \'mofo\'\n  => true\n\n  >> fireball = HCard.find \'http://flickr.com/people/gruber/\'\n  => #<HCard:0x6db898 ... >\n\n  >> fireball.nickname\n  => "gruber"\n\n  >> fireball.url\n  => "http://daringfireball.net/"\n\n  >> fireball.n.family_name\n  => "Gruber"\n\n  >> fireball.title\n  => "Raconteur"\n\n  >> fireball.adr.locality\n  => "Philadelphia"\n\n  >> fireball.logo\n  => "http://static.flickr.com/9/buddyicons/44621776@N00.jpg?1117572751"\n\n= Grab It\n\n  $ git clone git://github.com/defunkt/mofo.git\n  $ open http://github.com/defunkt/mofo\n\n= Microwhozit?\n\n  Microformats are tiny little markup definitions built on top of, usually, \n  HTML or XHTML.  \n\n  You have a blog.  You have recent posts on your blog\'s index page.  You have\n  an Atom feed.  You have recent posts on your blog\'s Atom feed.  See where I\'m\n  going with this?\n\n  The hAtom microformat (or uformat) can be embedded in your existing HTML by\n  setting CSS classes with semantic meaning inside of your posts.  A class to signify\n  a post is contained within this div, a class to signify the contents of this\n  h3 are the post\'s title, a class to signify the contents of this span is the\n  blog post\'s author, etc.\n\n  You can then use a microformat parser (like, say, mofo) to extract this information\n  as you would from an Atom feed.  Hell, you can even convert hAtom to Atom.  It\'s an\n  insta-feed!  No extra code required!\n\n  You\'re already doing the work, you see.  Microformats are everywhere.  We just need\n  to set them free.\n\n  Check it:\n\n    <div class="post">\n      <h3>Megadeth Show Last Night</h3>\n      <span class="subtitle">Posted by Chris on June 4th</span>\n      <div class="content">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  Right?  Normal.  Here\'s the same post marked up with hAtom:\n\n    <div class="post hentry">\n      <h3 class="entry-title">Megadeth Show Last Night</h3>\n      <span class="subtitle">Posted by <span class="author vcard fn">Chris</span> on \n      <abbr class="updated" title="2006-06-04T10:32:10Z">June 4th</abbr></span>\n      <div class="content entry-content">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  All I did was add the hentry, entry-title, and entry-content classes to existing containers.  Then I\n  went ahead and wrapped the date in an <abbr> tag giving it a title in the microformat-standard way.  Finally\n  I put a div around Chris signifying it as the author field of the hEntry and making it a valid hCard by\n  including the vcard and fn classes.  It\'s really not all that hard.  Did I mess it up?  Maybe, but I\'m sure I got\n  close.  And I didn\'t even use a reference.  Practice.\n\n  How\'d we parse this, tho?\n\n    $ irb -rubygems\n    >> require \'mofo\'\n    => true\n\n    >> post = HEntry.find \'http://milesofstyle.org/posts/351-megadeth-show-last-night.html\'\n    => #<HEntry:0x6db898 ... > \n\n    >> post.entry_title\n    => "Megadeth Show Last Night"\n\n    >> post.properties\n    => ["entry_content", "updated", "author", "entry_title"]\n\n    >> post.updated\n    => Sun Jun 04 10:32:10 UTC 2006\n\n    >> post.updated.class\n    => Time\n\n    >> post.author\n    => #<HCard:0x6e7b98 @properties=["fn"], @fn="Chris">\n\n    >> post.author.fn\n    => "Chris"\n\n    >> post.entry_content\n    => "Went to a show last night.  Megadeth.  It was alright."\n\n  That\'s, like, stupid easy.  If HEntry.find gets back more than one hEntry, you\'ll get an array.\n\n= Mofo#find\n\n  Everything revolves around the #find method.  Sound familiar?  Yeah.\n\n    >> Microformat.find "http://valid-url.com"\n    >> Microformat.find "/path/to/existing/file"\n    >> Microformat.find :text => "microformat text"\n   \n  Also, #find can be told explicitly to find all (returning an array on failure) or only find\n  the first (returning nil on failure).\n\n    >> Microformat.find :all => "/existing/file"\n    => [ array of microformat objects ] \n\n    >> Microformat.find :first => "/existing/file"\n    => microformat object\n\n    >> Microformat.find "/existing/file"\n    => either an array of objects or just one object\n\n  :all and :first go outside of :text.\n\n    >> Microformat.find :all => { :text => \'mfin text\' } \n\n  That\'s it.  Some microformats take specific options.\n\n= Microformats\n\n  Here are the currently implemented microformats, along with a site you\n  can use them on today.  We want more, better, faster, stat.\n\n  formats:\n  - hCard     [ flickr profiles    ]\n  - hCalendar [ upcoming.org       ]\n  - hReview   [ cork\'d reviews     ] \n  - hEntry    [ err the blog posts ]\n  - hResume   [ linkedin.com       ]\n  - xoxo      [ chowhound.com      ]\n  - geo       [ upcoming.org       ]\n  - adr       [ upcoming.org       ]\n  - xfn       [ linkedin.com       ]\n\n  patterns:\n  - rel-tag \n  - rel-bookmark\n  - include-pattern\n\n= Ruby on Rails\n\nmofo doubles as a Rails plugin.  Just drop it into vendor/plugins and you are good to go, with all the \navailable microformat parsers loaded into your application.\n\nmofo classes are YAML and Marshal approved.  This means you can cache them with DRb or memcached, or store\nthem in a session.\n\n= More Info\n\n  >> http://microformats.org/ \n  => "The homepage, check"\n  >> http://microformats.org/wiki/\n  => "The wiki, check"\n  >> http://blog.labnotes.org/category/microformats/\n  => "Assaf Arkin knows his MFin\' stuff"\n  >> http://allinthehead.com/\n  => "Drew McClellan, Microformat wizard"\n  >> http://mofo.rubyforge.org/\n  => "mofo HQ"\n\n= Other Parsers\n\n  >> Scrapi\n  => http://rubyforge.org/projects/scrapi/\n  >> uformats\n  => http://rubyforge.org/projects/uformats\n\n= Contributors\n\n  >> Steve Ivy\n  >> Olle Jonsson\n  >> Christian Carter\n  >> Grant Rodgers\n  >> Denis Defreyne\n  >> Andrew Turner\n  >> Mark Murphy\n\n= Author\n\n  >> Chris Wanstrath\n  => chris[at]ozmm[dot]org\n'
Rails helper to XHTML-ize chunks of user submitted HTML. For the standardista in all of us b'xhtmlize\n==========\n\nRails helper to XHTML-ize chunks of user submitted HTML. For the standardista in all of us.\n\n>> html = "<div><p>foo</p><a href=\'http://foo.com\'>foo"\n=> "<div><p>foo</p><a href=\'http://foo.com\'>foo"\n>> xhtmlize(html)\n=> "<div><p>foo</p><a href=\\"http://foo.com\\">foo</a></div>"\n\nAlso comes with an ActiveRecord class method to automatically xhtmlize attributes in an after_save callback.\n\nclass Comment < ActiveRecord::Base\n  xhtmlize :title, :content\nend'
Ruby/Git is a Ruby library that can be used to create, read and manipulate Git repositories by wrapping system calls to the git binary. b'# Git Library for Ruby\n\nLibrary for using Git in Ruby.\n\n## Homepage\n\nGit public hosting of the project source code is at:\n\nhttp://github.com/schacon/ruby-git\n\n## Install\n\nYou can install Ruby/Git like this:\n\n    $ sudo gem install git\n    \n## Code Status\n\n* [![Build Status](https://api.travis-ci.org/schacon/ruby-git.png)](https://travis-ci.org/schacon/ruby-git)\n* [![Code Climate](https://codeclimate.com/github/schacon/ruby-git.png)](https://codeclimate.com/github/schacon/ruby-git)\n* [![Gem Version](https://badge.fury.io/rb/git.png)](http://badge.fury.io/rb/git)\n* [![Dependencies](https://gemnasium.com/schacon/ruby-git.png?travis)](https://gemnasium.com/schacon/ruby-git)\n\n## Major Objects\n\n**Git::Base** - The object returned from a `Git.open` or `Git.clone`. Most major actions are called from this object.\n\n**Git::Object** - The base object for your tree, blob and commit objects, returned from `@git.gtree` or `@git.object` calls.  the `Git::AbstractObject` will have most of the calls in common for all those objects.\n\n**Git::Diff** - returns from a `@git.diff` command.  It is an Enumerable that returns `Git::Diff:DiffFile` objects from which you can get per file patches and insertion/deletion statistics.  You can also get total statistics from the Git::Diff object directly.\n\n**Git::Status** - returns from a `@git.status` command.  It is an Enumerable that returns\n`Git:Status::StatusFile` objects for each object in git, which includes files in the working\ndirectory, in the index and in the repository.  Similar to running \'git status\' on the command line to determine untracked and changed files.\n\n**Git::Branches** - Enumerable object that holds `Git::Branch objects`.  You can call .local or .remote on it to filter to just your local or remote branches.\n\n**Git::Remote**- A reference to a remote repository that is tracked by this repository.\n\n**Git::Log** - An Enumerable object that references all the `Git::Object::Commit` objects that encompass your log query, which can be constructed through methods on the `Git::Log object`,\nlike:\n\n `@git.log(20).object("some_file").since("2 weeks ago").between(\'v2.6\', \'v2.7\').each { |commit| [block] }`\n\n## Examples\n\nHere are a bunch of examples of how to use the Ruby/Git package.\n\nRuby < 1.9 will require rubygems to be loaded. \n\n```ruby\n    require \'rubygems\'\n```\n\nRequire the \'git\' gem.\n```ruby\n    require \'git\'\n```\n\nGit env config\n\n```ruby\n  Git.configure do |config|\n    # If you want to use a custom git binary\n    config.binary_path = \'/git/bin/path\'\n\n    # If you need to use a custom SSH script\n    config.git_ssh = \'/path/to/ssh/script\'\n  end\n\n```\n\n\nHere are the operations that need read permission only.\n\n```ruby\n    g = Git.open(working_dir, :log => Logger.new(STDOUT))\n\n    g.index\n    g.index.readable?\n    g.index.writable?\n    g.repo\n    g.dir\n\n    g.log   # returns array of Git::Commit objects\n    g.log.since(\'2 weeks ago\')\n    g.log.between(\'v2.5\', \'v2.6\')\n    g.log.each {|l| puts l.sha }\n    g.gblob(\'v2.5:Makefile\').log.since(\'2 weeks ago\')\n\n    g.object(\'HEAD^\').to_s  # git show / git rev-parse\n    g.object(\'HEAD^\').contents\n    g.object(\'v2.5:Makefile\').size\n    g.object(\'v2.5:Makefile\').sha\n\n    g.gtree(treeish)\n    g.gblob(treeish)\n    g.gcommit(treeish)\n\n\n    commit = g.gcommit(\'1cc8667014381\')\n\n    commit.gtree\n    commit.parent.sha\n    commit.parents.size\n    commit.author.name\n    commit.author.email\n    commit.author.date.strftime("%m-%d-%y")\n    commit.committer.name\n    commit.date.strftime("%m-%d-%y")\n    commit.message\n\n    tree = g.gtree("HEAD^{tree}")\n\n    tree.blobs\n    tree.subtrees\n    tree.children # blobs and subtrees\n\n    g.revparse(\'v2.5:Makefile\')\n\n    g.branches # returns Git::Branch objects\n    g.branches.local\n    g.branches.remote\n    g.branches[:master].gcommit\n    g.branches[\'origin/master\'].gcommit\n\n    g.grep(\'hello\')  # implies HEAD\n    g.blob(\'v2.5:Makefile\').grep(\'hello\')\n    g.tag(\'v2.5\').grep(\'hello\', \'docs/\')\n    g.describe() \n    g.describe(\'0djf2aa\')\n    g.describe(\'HEAD\', {:all => true, :tags => true})\n  \n    g.diff(commit1, commit2).size\n    g.diff(commit1, commit2).stats\n    g.gtree(\'v2.5\').diff(\'v2.6\').insertions\n    g.diff(\'gitsearch1\', \'v2.5\').path(\'lib/\')\n    g.diff(\'gitsearch1\', @git.gtree(\'v2.5\'))\n    g.diff(\'gitsearch1\', \'v2.5\').path(\'docs/\').patch\n    g.gtree(\'v2.5\').diff(\'v2.6\').patch\n\n    g.gtree(\'v2.5\').diff(\'v2.6\').each do |file_diff|\n       puts file_diff.path\n       puts file_diff.patch\n       puts file_diff.blob(:src).contents\n    end\n\n    g.config(\'user.name\')  # returns \'Scott Chacon\'\n    g.config # returns whole config hash\n\n    g.tags # returns array of Git::Tag objects\n    \n    g.show()\n    g.show(\'HEAD\')\n    g.show(\'v2.8\', \'README.md\')\n\n    Git.ls_remote(\'https://github.com/schacon/ruby-git.git\') # returns a hash containing the available references of the repo.\n    Git.ls_remote(\'/path/to/local/repo\')\n    Git.ls_remote() # same as Git.ls_remote(\'.\')\n\n```\n\nAnd here are the operations that will need to write to your git repository.\n\n```ruby\n      g = Git.init\n       Git.init(\'project\')\n       Git.init(\'/home/schacon/proj\',\n        { :repository => \'/opt/git/proj.git\',\n           :index => \'/tmp/index\'} )\n\n     g = Git.clone(URI, NAME, :path => \'/tmp/checkout\')\n     g.config(\'user.name\', \'Scott Chacon\')\n     g.config(\'user.email\', \'email@email.com\')\n\n     g.add                                   # git add -- "."\n     g.add(:all=>true)                       # git add --all -- "."\n     g.add(\'file_path\')                      # git add -- "file_path"\n     g.add([\'file_path_1\', \'file_path_2\'])   # git add -- "file_path_1" "file_path_2"\n\n\n     g.remove(\'file.txt\')\n     g.remove([\'file.txt\', \'file2.txt\'])\n\n     g.commit(\'message\')\n     g.commit_all(\'message\')\n\n     g = Git.clone(repo, \'myrepo\')\n     g.chdir do\n      new_file(\'test-file\', \'blahblahblah\')\n      g.status.changed.each do |file|\n       puts file.blob(:index).contents\n      end\n     end\n\n     g.reset # defaults to HEAD\n     g.reset_hard(Git::Commit)\n\n     g.branch(\'new_branch\') # creates new or fetches existing\n     g.branch(\'new_branch\').checkout\n     g.branch(\'new_branch\').delete\n     g.branch(\'existing_branch\').checkout\n\n     g.checkout(\'new_branch\')\n     g.checkout(g.branch(\'new_branch\'))\n\n     g.branch(name).merge(branch2)\n     g.branch(branch2).merge  # merges HEAD with branch2\n\n     g.branch(name).in_branch(message) { # add files }  # auto-commits\n     g.merge(\'new_branch\')\n     g.merge(\'origin/remote_branch\')\n     g.merge(g.branch(\'master\'))\n     g.merge([branch1, branch2])\n\n     r = g.add_remote(name, uri)  # Git::Remote\n     r = g.add_remote(name, Git::Base)  # Git::Remote\n\n     g.remotes  # array of Git::Remotes\n     g.remote(name).fetch\n     g.remote(name).remove\n     g.remote(name).merge\n     g.remote(name).merge(branch)\n\n     g.fetch\n     g.fetch(g.remotes.first)\n\n     g.pull\n     g.pull(Git::Repo, Git::Branch) # fetch and a merge\n\n     g.add_tag(\'tag_name\') # returns Git::Tag\n     g.add_tag(\'tag_name\', \'object_reference\')\n     g.add_tag(\'tag_name\', \'object_reference\', {:options => \'here\'})\n     g.add_tag(\'tag_name\', {:options => \'here\'})\n\n     Options:\n       :a | :annotate\n       :d\n       :f\n       :m | :message\n       :s\n\n     g.delete_tag(\'tag_name\')\n\n     g.repack\n\n     g.push\n     g.push(g.remote(\'name\'))\n```\n\nSome examples of more low-level index and tree operations\n\n```ruby\n     g.with_temp_index do\n\n       g.read_tree(tree3) # calls self.index.read_tree\n       g.read_tree(tree1, :prefix => \'hi/\')\n\n       c = g.commit_tree(\'message\')\n       # or #\n       t = g.write_tree\n       c = g.commit_tree(t, :message => \'message\', :parents => [sha1, sha2])\n\n       g.branch(\'branch_name\').update_ref(c)\n       g.update_ref(branch, c)\n\n       g.with_temp_working do # new blank working directory\n         g.checkout\n         g.checkout(another_index)\n         g.commit # commits to temp_index\n       end\n     end\n\n     g.set_index(\'/path/to/index\')\n\n\n     g.with_index(path) do\n       # calls set_index, then switches back after\n     end\n\n     g.with_working(dir) do\n     # calls set_working, then switches back after\n     end\n\n     g.with_temp_working(dir) do\n       g.checkout_index(:prefix => dir, :path_limiter => path)\n       # do file work\n       g.commit # commits to index\n     end\n```\n\n## License\n\nlicensed under MIT License Copyright (c) 2008  Scott Chacon. See LICENSE for further details.\n'
Fast string searcher, useful for multi-part post parsing b"bmhsearch\n    by Zed Shaw\n\n== DESCRIPTION:\n  \nBMHSearch is a fast mime carver.\n\n== FEATURES/PROBLEMS:\n  \n* FIX (list of features or problems)\n\n== SYNOPSYS:\n\n  FIX (code sample of usage)\n\n== REQUIREMENTS:\n\n* FIX (list of requirements)\n\xc3\x9f\n== INSTALL:\n\n* FIX (sudo gem install, anything else)\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
Mofo is a fast and simple microformat parser, based on a concise DSL and Hpricot. b'  mofo.          \n- a ruby microformat parser -\n                     engine\n                     dsl\n                     helper\n                     toy\n\n= Get Started Immediately\n\n  $ irb -rubygems \n  >> require \'mofo\'\n  => true\n\n  >> fireball = HCard.find \'http://flickr.com/people/gruber/\'\n  => #<HCard:0x6db898 ... >\n\n  >> fireball.nickname\n  => "gruber"\n\n  >> fireball.url\n  => "http://daringfireball.net/"\n\n  >> fireball.n.family_name\n  => "Gruber"\n\n  >> fireball.title\n  => "Raconteur"\n\n  >> fireball.adr.locality\n  => "Philadelphia"\n\n  >> fireball.logo\n  => "http://static.flickr.com/9/buddyicons/44621776@N00.jpg?1117572751"\n\n= Grab It\n\n  $ git clone git://github.com/defunkt/mofo.git\n  $ open http://github.com/defunkt/mofo\n\n= Microwhozit?\n\n  Microformats are tiny little markup definitions built on top of, usually, \n  HTML or XHTML.  \n\n  You have a blog.  You have recent posts on your blog\'s index page.  You have\n  an Atom feed.  You have recent posts on your blog\'s Atom feed.  See where I\'m\n  going with this?\n\n  The hAtom microformat (or uformat) can be embedded in your existing HTML by\n  setting CSS classes with semantic meaning inside of your posts.  A class to signify\n  a post is contained within this div, a class to signify the contents of this\n  h3 are the post\'s title, a class to signify the contents of this span is the\n  blog post\'s author, etc.\n\n  You can then use a microformat parser (like, say, mofo) to extract this information\n  as you would from an Atom feed.  Hell, you can even convert hAtom to Atom.  It\'s an\n  insta-feed!  No extra code required!\n\n  You\'re already doing the work, you see.  Microformats are everywhere.  We just need\n  to set them free.\n\n  Check it:\n\n    <div class="post">\n      <h3>Megadeth Show Last Night</h3>\n      <span class="subtitle">Posted by Chris on June 4th</span>\n      <div class="content">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  Right?  Normal.  Here\'s the same post marked up with hAtom:\n\n    <div class="post hentry">\n      <h3 class="entry-title">Megadeth Show Last Night</h3>\n      <span class="subtitle">Posted by <span class="author vcard fn">Chris</span> on \n      <abbr class="updated" title="2006-06-04T10:32:10Z">June 4th</abbr></span>\n      <div class="content entry-content">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  All I did was add the hentry, entry-title, and entry-content classes to existing containers.  Then I\n  went ahead and wrapped the date in an <abbr> tag giving it a title in the microformat-standard way.  Finally\n  I put a div around Chris signifying it as the author field of the hEntry and making it a valid hCard by\n  including the vcard and fn classes.  It\'s really not all that hard.  Did I mess it up?  Maybe, but I\'m sure I got\n  close.  And I didn\'t even use a reference.  Practice.\n\n  How\'d we parse this, tho?\n\n    $ irb -rubygems\n    >> require \'mofo\'\n    => true\n\n    >> post = HEntry.find \'http://milesofstyle.org/posts/351-megadeth-show-last-night.html\'\n    => #<HEntry:0x6db898 ... > \n\n    >> post.entry_title\n    => "Megadeth Show Last Night"\n\n    >> post.properties\n    => ["entry_content", "updated", "author", "entry_title"]\n\n    >> post.updated\n    => Sun Jun 04 10:32:10 UTC 2006\n\n    >> post.updated.class\n    => Time\n\n    >> post.author\n    => #<HCard:0x6e7b98 @properties=["fn"], @fn="Chris">\n\n    >> post.author.fn\n    => "Chris"\n\n    >> post.entry_content\n    => "Went to a show last night.  Megadeth.  It was alright."\n\n  That\'s, like, stupid easy.  If HEntry.find gets back more than one hEntry, you\'ll get an array.\n\n= Mofo#find\n\n  Everything revolves around the #find method.  Sound familiar?  Yeah.\n\n    >> Microformat.find "http://valid-url.com"\n    >> Microformat.find "/path/to/existing/file"\n    >> Microformat.find :text => "microformat text"\n   \n  Also, #find can be told explicitly to find all (returning an array on failure) or only find\n  the first (returning nil on failure).\n\n    >> Microformat.find :all => "/existing/file"\n    => [ array of microformat objects ] \n\n    >> Microformat.find :first => "/existing/file"\n    => microformat object\n\n    >> Microformat.find "/existing/file"\n    => either an array of objects or just one object\n\n  :all and :first go outside of :text.\n\n    >> Microformat.find :all => { :text => \'mfin text\' } \n\n  That\'s it.  Some microformats take specific options.\n\n= Microformats\n\n  Here are the currently implemented microformats, along with a site you\n  can use them on today.  We want more, better, faster, stat.\n\n  formats:\n  - hCard     [ flickr profiles    ]\n  - hCalendar [ upcoming.org       ]\n  - hReview   [ cork\'d reviews     ] \n  - hEntry    [ err the blog posts ]\n  - hResume   [ linkedin.com       ]\n  - xoxo      [ chowhound.com      ]\n  - geo       [ upcoming.org       ]\n  - adr       [ upcoming.org       ]\n  - xfn       [ linkedin.com       ]\n\n  patterns:\n  - rel-tag \n  - rel-bookmark\n  - include-pattern\n\n= Ruby on Rails\n\nmofo doubles as a Rails plugin.  Just drop it into vendor/plugins and you are good to go, with all the \navailable microformat parsers loaded into your application.\n\nmofo classes are YAML and Marshal approved.  This means you can cache them with DRb or memcached, or store\nthem in a session.\n\n= More Info\n\n  >> http://microformats.org/ \n  => "The homepage, check"\n  >> http://microformats.org/wiki/\n  => "The wiki, check"\n  >> http://blog.labnotes.org/category/microformats/\n  => "Assaf Arkin knows his MFin\' stuff"\n  >> http://allinthehead.com/\n  => "Drew McClellan, Microformat wizard"\n  >> http://mofo.rubyforge.org/\n  => "mofo HQ"\n\n= Other Parsers\n\n  >> Scrapi\n  => http://rubyforge.org/projects/scrapi/\n  >> uformats\n  => http://rubyforge.org/projects/uformats\n\n= Contributors\n\n  >> Steve Ivy\n  >> Olle Jonsson\n  >> Christian Carter\n  >> Grant Rodgers\n  >> Denis Defreyne\n  >> Andrew Turner\n  >> Mark Murphy\n\n= Author\n\n  >> Chris Wanstrath\n  => chris[at]ozmm[dot]org\n'
A simple, non-invasive, approach to versioning ActiveRecord models b'SimplyVersioned\n===============\n\nRelease:\t1.0.0\nDate:\t\t\t28-01-2008\nAuthor:\t\tMatt Mower <self@mattmower.com>\n\nSimplyVersioned is a simple, non-invasive, approach to versioning ActiveRecord models.\n\nSimplyVersioned does not require any structural change to the models to be versioned and requires only one versions table to be created (a migration generator is supplied with the plugin) for the application, regardless of the number of models being versioned.\n\nThe plugin introduces a \'Version\' ActiveRecord model (that reflects changes to model attributes) to which versioned models are polymorphically associated. Version records store the model information as a YAML hash.\n\t\nSimplyVersioned meets a simple need for model versioning. If your needs are more complex maybe try Rick Olsen\'s acts_as_versioned (http://svn.techno-weenie.net/projects/plugins/acts_as_versioned/).\n\t\nSimplyVersioned is (so far) actively tested with Rails 2.0.2 and Ruby 1.8.6\n\t\nUsage\n=====\n\n1. Install the plugin\n\n  ./script/plugin install http://rubymatt.rubyforge.org/svn/simply_versioned\n\n2. Generate the migration\n\n  ./script/generate simply_versioned_migration\n\n\tNote that the migration defaults to storing the version info in a TEXT field. On MySQL this will default to a\n\tlimit of 64K. If you are versioning particularly large models you will want to modify the migration to include\n\ta :limit => n condition to promote the yaml column to a MEDIUMTEXT or (god forbid) a LONGTEXT.\n\n3. Create the versions table\n\n  rake db:migrate\n\n4. Annotate the models you want to version specifying how many versions to keep\n\n\tclass Thing < ActiveRecord::Base\n\t  simply_versioned :keep => 10\n\tend\n\t\n\tIf you do not specify a limit then old versions are never automatically deleted. You can\n\tmanually delete them like this:\n\t\n\tthing.versions.purge( 10 )\n\t\n\twhich would delete all the but the last ten versions.\n\t\n\tIf you want fine-grained control over when versions are created you can use:\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :automatic => false\n\tend\n\t\n\tand new versions will no longer be created by default. You will then need to use\n\tthe with_versioning method to create a version.\n\t\n\tLastly you can control which columns will be versioned by specifying an exclude parameter.\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => :awkward_column\n\tend\n\t\t\n\tor\t\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => [:first_awkward_column,:second_awkward_column,...]\n\tend\n\t\n\tThis may be helpful if you run into conflicts with other plugins which try to manage columns.\n\n5. Create versions\n\n\tthing = Thing.create!( :foo => bar ) # creates v1\n\tthing.foo = baz\n\tthing.save! # creates v2\n\t\n\tIf you need to control whether a version is created or not, use #with_versioning. For example:\n\t\n\tthing.with_versioning( false ) do |t|\n\t\tt.save!\n\tend\n\t\n\tor, using the "magic pen" (http://dablog.rubypal.com/2007/2/18/the-magic-pens-of-ruby thanks hmj):\n\t\n\tthing.with_versioning( false, &:save! )\n\n6. Find versions\n\n\tthing.versions.each do |version| ... end\n\trender :partial => \'thing_version\', :collection => thing.versions\n\tthing.versions.current\n\tthing.versions.first\n\tthing.versions.get( 3 )\n\t\n\tTo find a version number:\n\t\n\tthing.version_number\n\n7. Revert to a previous version\n\n\tthing.revert_to_version( 5 )\n\t\n\tIf a specific reversion needs to avoid overwriting some column values pass\n\tan :except option, e.g.\n\t\n\tthing.revert_to_version( 1, :except => [:name,:age] )\n\t\n\tThe revert_to_version method also takes an existing Version instance, e.g.\n\t\n\tversion = thing.versions.find( ... )\n\tthing.revert_to_version( version )\n\n8. Traverse versions\n\n\tthing.versions.current.previous\n\tthing.versions.first.next\n\n9. Obtain a copy of a previous versioned model\n\n\tthing.versions.first.model # => Instantiated Thing with versioned values\n\t\nThanks to:\n\n\tChris Wanstrath (http://ozmm.org/) for useful feedback and GitHub\n\tJosh Susser (http://blog.hasmanythrough.com/) for useful suggestions and feedback\n\tRick Olson (http://techno-weenie.net/) for all the many plugins whose code i\'ve read\n\t\nCopyright (c) 2007 Matt Mower <self@mattmower.com> and released under the MIT license\n'
GChart exposes the Google Chart API (http://code.google.com/apis/chart) via a friendly Ruby interface. It can generate the URL for a given chart (for webpage use), or download the generated PNG (for offline use). b'= GChart\n\n== DESCRIPTION\n  \nGChart exposes the Google Chart API (http://code.google.com/apis/chart) via\na friendly Ruby interface. It can generate the URL for a given chart\n(for webpage use), or download the generated PNG (for offline use).\n\n== PROBLEMS/TODO\n\n* Add support fills (area or background), grid lines, shape markers, range markers \n* Support shorthand colors and color names\n* Make venn data specification friendlier\n\nThere are lots of missing features. Until they\'re implemented, you can directly specify\nquery parameters using the :extras key, e.g.,\n\n  # provides a legend for each data set\n  g = GChart.line(:data => [[1, 2], [3, 4]], :extras => { "chdl" => "First|Second"})\n\n== SYNOPSIS\n\n  # line chart\n  g = GChart.line(:data => [0, 10, 100])\n  \n  # bar chart\n  g = GChart.bar(:data => [100, 1000, 10000])\n  \n  # pie chart (pie3d for a fancier look)\n  g = GChart.pie(:data => [33, 33, 34])\n  \n  # venn diagram (asize, bsize, csize, ab%, bc%, ca%, abc%)\n  g = GChart.venn(:data => [100, 80, 60, 30, 30, 30, 10])\n  \n  # scatter plot (x coords, y coords [, sizes])\n  g = GChart.scatter(:data => [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5]])\n\n  # map chart\n  g = GChart.map(:area => \'usa\', :data => {\'NY\'=>1,\'VA\'=>3,\'CA\'=>2})\n  \n  # meter\n  g = GChart.meter(:data => 70, :label => "70%")\n  \n  # chart title\n  g = GChart.line(:title => "Awesomeness over Time", :data => [0, 10, 100])\n\n  # data set legend\n  g = GChart.line(:data => [[1, 2], [3, 4]], :legend => ["Monkeys", "Ferrets"])\n\n  # data set colors\n  g = GChart.line(:data => [[0, 10, 100], [100, 10, 0]], :colors => ["ff0000", "0000ff"])\n  \n  g.to_url            # generate the chart\'s URL, or\n  g.fetch             # get the bytes, or\n  g.write("foo.png")  # write to a file (defaults to "chart.png")\n  g.write(stream)     # write to anything that quacks like IO\n\n== LICENSE\n\n(The MIT License)\n\nCopyright 2007-2008 John Barnette (jbarnette@rubyforge.org)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
A DSL for creating schema documents in ruby b'Github for the win!\n'
A Ruby interface to the Open Calais API (http://opencalais.com) b'# Calais #\nA Ruby interface to the [Open Calais Web Service](http://opencalais.com)\n\n## Features ##\n* Accepts documents in text/plain, text/xml and text/html format.\n* Basic access to the Open Calais API\'s Enlighten action.\n    * Output is RDF representation of input document.\n* Single function ability to extract names, entities and geographies from given text.\n  \n## Synopsis ##\n\nThis is a very basic wrapper to the Open Calais API. It uses the POST endpoint and currently supports the Enlighten action. Here\'s a simple call:\n\n    Calais.enlighten(\n        :content => "The government of the United Kingdom has given corporations like fast food chain McDonald\'s the right to award high school qualifications to employees who complete a company training program.",\n        :content_type => :raw,\n        :license_id => \'your license id\'\n    )\n\nThis is the easiest way to get the RDF-formated response from the OpenCalais service.\n\nIf you want to do something more fun like getting all sorts of fun information about a document, you can try this:\n\n    Calais.process_document(\n        :content => "The government of the United Kingdom has given corporations like fast food chain McDonald\'s the right to award high school qualifications to employees who complete a company training program.",\n        :content_type => :raw,\n        :license_id => \'your license id\'\n    )\n\nThis will return an object containing information extracted from the RDF response.\n\n## Requirements ##\n\n* [Ruby 1.8.5 or better](http://ruby-lang.org)\n* [nokogiri](http://nokogiri.rubyforge.org/nokogiri/), [libxml2](http://xmlsoft.org/), [libxslt](http://xmlsoft.org/xslt/)\n* [curb](http://curb.rubyforge.org/), [libcurl](http://curl.haxx.se/)\n* [json](http://json.rubyforge.org/)\n\n## Install ##\n\nYou can install the Calais gem via Rubygems (`gem install calais`) or by building from source.\n\n## Authors ##\n\n* [Abhay Kumar](http://opensynapse.net) \n\n## Acknowledgements ##\n\n* [Paul Legato](http://www.economaton.com/): Help all around with the new response processor and implementation of the 3.1 API.\n* [Ryan Ong](http://www.ryanong.net/)\n* [Juan Antonio Chavez](https://github.com/TheNaoX): Geographies relevance\n'
Chronic is a pure Ruby natural language date parser. b'Chronic\n=======\n\nChronic is a natural language date/time parser written in pure Ruby. See below\nfor the wide variety of formats Chronic will parse.\n\n## Installation\n\n```\n$ gem install chronic\n```\n\n## Usage\n\n```ruby\nrequire \'chronic\'\n\nTime.now   #=> Sun Aug 27 23:18:25 PDT 2006\n\nChronic.parse(\'tomorrow\')\n  #=> Mon Aug 28 12:00:00 PDT 2006\n\nChronic.parse(\'monday\', :context => :past)\n  #=> Mon Aug 21 12:00:00 PDT 2006\n\nChronic.parse(\'this tuesday 5:00\')\n  #=> Tue Aug 29 17:00:00 PDT 2006\n\nChronic.parse(\'this tuesday 5:00\', :ambiguous_time_range => :none)\n  #=> Tue Aug 29 05:00:00 PDT 2006\n\nChronic.parse(\'may 27th\', :now => Time.local(2000, 1, 1))\n  #=> Sat May 27 12:00:00 PDT 2000\n\nChronic.parse(\'may 27th\', :guess => false)\n  #=> Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007\n\nChronic.parse(\'6/4/2012\', :endian_precedence => :little)\n  #=> Fri Apr 06 00:00:00 PDT 2012\n\nChronic.parse(\'INVALID DATE\')\n  #=> nil\n```\n\nIf the parser can find a date or time, either a Time or Chronic::Span\nwill be returned (depending on the value of `:guess`). If no\ndate or time can be found, `nil` will be returned.\n\nSee `Chronic.parse` for detailed usage instructions.\n\n## Examples\n\nChronic can parse a huge variety of date and time formats. Following is a\nsmall sample of strings that will be properly parsed. Parsing is case\ninsensitive and will handle common abbreviations and misspellings.\n\nSimple\n\n* thursday\n* november\n* summer\n* friday 13:00\n* mon 2:35\n* 4pm\n* 10 to 8\n* 10 past 2\n* half past 2\n* 6 in the morning\n* friday 1pm\n* sat 7 in the evening\n* yesterday\n* today\n* tomorrow\n* last week\n* next week\n* this tuesday\n* next month\n* last winter\n* this morning\n* last night\n* this second\n* yesterday at 4:00\n* last friday at 20:00\n* last week tuesday\n* tomorrow at 6:45pm\n* afternoon yesterday\n* thursday last week\n\nComplex\n\n* 3 years ago\n* a year ago\n* 5 months before now\n* 7 hours ago\n* 7 days from now\n* 1 week hence\n* in 3 hours\n* 1 year ago tomorrow\n* 3 months ago saturday at 5:00 pm\n* 7 hours before tomorrow at noon\n* 3rd wednesday in november\n* 3rd month next year\n* 3rd thursday this september\n* 4th day last week\n* fourteenth of june 2010 at eleven o\'clock in the evening\n* may seventh \'97 at three in the morning\n\nSpecific Dates\n\n* January 5\n* 22nd of june\n* 5th may 2017\n* February twenty first\n* dec 25\n* may 27th\n* October 2006\n* oct 06\n* jan 3 2010\n* february 14, 2004\n* february 14th, 2004\n* 3 jan 2000\n* 17 april 85\n* 5/27/1979\n* 27/5/1979\n* 05/06\n* 1979-05-27\n* Friday\n* 5\n* 4:00\n* 17:00\n* 0800\n\nSpecific Times (many of the above with an added time)\n\n* January 5 at 7pm\n* 22nd of june at 8am\n* 1979-05-27 05:00:00\n* 03/01/2012 07:25:09.234567\n* etc\n\n\n## Time Zones\n\nChronic allows you to set which Time class to use when constructing times. By\ndefault, the built in Ruby time class creates times in your system\'s local\ntime zone. You can set this to something like ActiveSupport\'s\n[TimeZone](http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html)\nclass to get full time zone support.\n\n```\n>> Time.zone = "UTC"\n>> Chronic.time_class = Time.zone\n>> Chronic.parse("June 15 2006 at 5:45 AM")\n=> Thu, 15 Jun 2006 05:45:00 UTC +00:00\n```\n\n## Limitations\n\nChronic uses Ruby\'s built in Time class for all time storage and computation.\nBecause of this, only times that the Time class can handle will be properly\nparsed. Parsing for times outside of this range will simply return nil.\nSupport for a wider range of times is planned for a future release.\n\n\n## Contribute\n\nIf you\'d like to hack on Chronic, start by forking the repo on GitHub:\n\nhttps://github.com/mojombo/chronic\n\nThe best way to get your changes merged back into core is as follows:\n\n1. Clone down your fork\n1. Create a thoughtfully named topic branch to contain your change\n1. Install the development dependencies by running `bundle install`\n1. Hack away\n1. Add tests and make sure everything still passes by running `bundle exec rake`\n1. Ensure your tests pass in multiple timezones. ie `TZ=utc bundle exec rake` `TZ=BST bundle exec rake`\n1. If you are adding new functionality, document it in the README\n1. Do not change the version number, we will do that on our end\n1. If necessary, rebase your commits into logical chunks, without errors\n1. Push the branch up to GitHub\n1. Send a pull request for your branch\n'
A quick & dirty git-powered Sinatra wiki b'git-wiki: because who needs cool names when you use git?\n========================================================\n\ngit-wiki is a wiki that relies on git to keep pages\' history\nand [Sinatra][] to serve them.\n\nI wrote git-wiki as a quick and dirty hack, mostly to play with Sinatra.\nIt turned out that Sinatra is an awesome little web framework and that this\nhack isn\'t as useless as I first though since I now use it daily.\n\nHowever, it is definitely not feature rich and will probably never be because\nI mostly use it as a web frontend for `git`, `ls` and `vim`.\n\nIf you want history, search, etc. you should look at other people\'s [forks][],\nespecially [al3x][]\'s one.\n\nInstall\n-------\n\nThe fellowing [gems][] are required to run git-wiki:\n\n- [Sinatra][]\n- [mojombo-grit][]\n- [HAML][]\n- [RDiscount][]\n\nRun with `mkdir ~/wiki && (cd ~/wiki && git init) && ./run.ru -sthin -p4567`\nand point your browser at <http://0.0.0.0:4567/>. Enjoy!\n\nSee also\n--------\n\n- [How to use vim to edit &lt;textarea&gt; in lynx][tip]\n- [WiGit][] think git-wiki except implemented in PHP\n- [ikiwiki][] is a wiki compiler supporting git\n\n\n  [Sinatra]: http://www.sinatrarb.com\n  [GitHub]: http://github.com/sr/git-wiki\n  [forks]: http://github.com/sr/git-wiki/network\n  [al3x]: http://github.com/al3x/gitwiki\n  [gems]: http://www.rubygems.org/\n  [mojombo-grit]: http://github.com/mojombo/grit\n  [HAML]: http://haml.hamptoncatlin.com\n  [RDiscount]: http://github.com/rtomayko/rdiscount\n  [tip]: http://wiki.infogami.com/using_lynx_&_vim_with_infogami\n  [WiGit]: http://el-tramo.be/software/wigit\n  [ikiwiki]: http://ikiwiki.info\n\nQuotes\n------\n\n<blockquote>\n<p>[...] the first wiki engine I\'d consider worth using for my own projects.</p>\n<p><cite>\n<a href="http://www.dekorte.com/blog/blog.cgi?do=item&amp;id=3319">\nSteve Dekorte</a>\n</cite></p>\n</blockquote>\n\n<blockquote>\n<p>Oh, it looks like <a href="http://atonie.org/2008/02/git-wiki">Git Wiki</a>\nmay be the starting point for what I need...</p>\n<p><cite><a href="http://tommorris.org/blog/2008/03/09#pid2761430">\nTom Morris on "How to build the perfect wiki"</a></cite></p>\n</blockquote>\n\n<blockquote>\n<p>What makes git-wiki so cool is because it is backed by a git store,\nyou can clone your wiki just like you could any other git repository.\nI\xe2\x80\x99ve always wanted a wiki that I could a.) pull offline when I didn\xe2\x80\x99t\nhave access to the Internets and b.) edit (perhaps in bulk)\nin my favorite text editor. git-wiki allows both.</p>\n<p><cite><a href="http://github.com/willcodeforfoo/git-wiki/wikis">\nCloning your wiki</a></cite></p>\n</blockquote>\n\n<blockquote>\n<p>Numerous people have written diff and merge systems for wikis;\nTWiki even uses RCS. If they used git instead, the repository would be tiny, and\nyou could make a personal copy of the entire wiki to take on the plane with you,\nthen sync your changes back when you\'re done.</p>\n<p><cite><a href="http://www.advogato.org/person/apenwarr/diary/371.html">\nGit is the next Unix</a></cite></p>\n</blockquote>\n\nLicence\n-------\n               DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                       Version 2, December 2004\n\n    Copyright (C) 2008 Simon Rozet <simon@rozet.name>\n    Everyone is permitted to copy and distribute verbatim or modified\n    copies of this license document, and changing it is allowed as long\n    as the name is changed.\n\n               DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n      TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n     0. You just DO WHAT THE FUCK YOU WANT TO.\n'
The easy to use rails wiki b'=====  Signal Wiki\n\nSignal Wiki is an easy to use wiki that was built with standards in mind.  It uses some of the more common rails plugins and practises to make sure it is easy to integrate this wiki into your suite of site offerings.  We wanted something we could tie into a shared user table so multiple apps (beast was the app at the time) could have the same login, so we used restful auth.  We had several clients asking for this, so we decided it must be a big need.  With our clients agreement, we extracted the basic wiki parts and cleaned it up and the result is this code.  \n\nEnjoy :)\n\n=====  Installation instructions\n\n#FIXME: Detail these instructions more\n1. Download app\n2. Copy config/database.yml.example to config/database.yml\n3. Run "rake db:migrate" from the root of the app\n4. Start your rails app (using mongrel or fcgi, or whatever crazy method you use)\n5. Input your wiki stuffs\n\n=====  Required Gems\n\n* json\n* ruby-openid\n* ruby-yadis\n* RedCloth\n\n\n'
Ruby on Rails TextMate bundle [Learn it with PeepCode - http://peepcode.com/products/textmate-for-rails-2] b'# TextMate Bundle for Ruby on Rails Development\n\nTo install with Git:\n\n    mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n    cd ~/Library/Application\\ Support/TextMate/Bundles\n    git clone git://github.com/drnic/ruby-on-rails-tmbundle.git "Ruby on Rails.tmbundle"\n    osascript -e \'tell app "TextMate" to reload bundles\'\n\n\nTo install without Git:\n\n    mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n    cd ~/Library/Application\\ Support/TextMate/Bundles\n    wget http://github.com/drnic/ruby-on-rails-tmbundle/tarball/master\n    tar zxf drnic-ruby-on-rails-tmbundle*.tar.gz\n    rm drnic-ruby-on-rails-tmbundle*.tar.gz\n    mv drnic-ruby-on-rails-tmbundle* "Ruby on Rails.tmbundle"\n    osascript -e \'tell app "TextMate" to reload bundles\'\n\nRuby 1.8.7 or greater is required.'
A jQuery plugin version of the Low Pro behavior framework. b"Low Pro JQ\n----------\n\nAuthor: Dan Webb (dan@danwebb.net)\nGIT: github.com:danwrong/low-pro-for-jquery.git\nDownload: http://github.com/danwrong/low-pro-for-jquery/tree/master/src/lowpro.jquery.js?raw=true\n\nA jQuery port of the Low Pro behavior framework that was originally written for Prototype.\n\n\n\nIn brief\n--------\n\nCreate a behavior as a class:\n\nTesty = $.klass({\n initialize: function(arg) {\n   alert('ive just been attached with the arg ' + arg);\n },\n onclick: function() {\n   alert('ive been clicked');\n }\n});\n\nBtw, $.klass is a full port of Prototype's Class.create so youget that as a bonus and \ncan use all the inheritance stuff in the same way.\n\nNext, attach the behavior on DOM ready in the jQuery way:\n\njQuery(function($) {\n $('p').attach(Testy, 'My arg');\n});\n\nAlternatively, if you just need to attach behaviors and get references to the behavior instances\ncreated then you can use:\n\n$('a').attachAndReturn(Clicky, 45) //=> Array of behavior instances\n\nAside from this everything works the same as Low Pro for Prototype.\nSee http://www.danwebb.net/lowpro for details.\n\n\n\nLivequery support\n-----------------\n\nIf the livequery plugin is found then Low Pro will use it to automatically bind behaviors to\nnewly created content so if, taking the above example, you did something like:\n\n$(document.body).append('<p>A new para</p>')\n\nThen it too would get a behavior binded to it.\n\n\n\nAcknowledgements\n----------------\n\nThe $.klass code is a direct port of the Class.create code from Prototype (http://prototypejs.org)."
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look, reference the /sample directory\n'
todo-list manager I wrote back in 2008 with the help of Gregory Brown in order to learn Ruby and TDD b"dst is a KISS GTD manager for the command line lovers.\n\n== Licence\n\ndst is copyright 2008 Simon Rozet. It is licensed under the MIT licence.\nSee the included LICENSE file for details.\n\n== Install\n\n  sudo gem install ape\n\n== Usage\n\n  % dst @mail john@doe.org about foo\n  1 - `@mail john@doe.org about foo' created.\n  % dst @code :myproj fix bug 123\n  2 - `@code :myproj fix bug 123' created.\n  % dst @code :myproj do foo and bar\n  3 - `@code :myproj do foo and bar' created.\n  % dst\n  1 - @mail john@doe.org about foo\n  2 - @code :myproj fix bug\n  3 - @code :myproj do foo and bar\n  % dst @mail\n  1 - @mail john@doe.org about foo\n  % dst :myproj\n  2 - @code :myproj fix bug\n  3 - @code :myproj do foo and bar\n  % dst ^2\n  Ok, `2 - @code :myproj fix bug' marked as `completed'.\n  % dst\n  1 - @mail john@doe.org about foo\n  3 - @code :myproj do foo and bar\n\n== Contact\n\nSimon Rozet, simon@rozet.name\n"
YAWS is an erlang web server b'\nThis is yaws, a webserver for dynamic content written in Erlang.\n\n\nTo build and install\n\n\n1. Get and install an erlang system (http://www.erlang.org)\n\n2. ./configure --prefix=/usr/local\n   This will install everything under /usr/local including var files\n   in /usr/local/var/run/yaws and etc files in\n   /usr/local/etc/yaws.*\n\n  A plain ./configure will install executables under \n  /usr/local/bin and libs in /usr/local/lib/yaws etc and\n  var files will end up under /usr/local/etc and /usr/local/var\n\n\nNote: We can also change the target directory for etc and var \n      directories by using:\n\n  --localstatedir=DIR for files that should go in /var\n  --sysconfdir=DIR for files that should go in /etc\n  --disable-pam  If we for some reason do not want pam support\n  --with-extrainclude=DIR Will add DIR to the include path\n                      May be useful if e.g. pam is installed\n\t\t      somewhere where its usually not found\n  --with-defaultcharset=String  Will set the default charset used\n                        in generated page headers. Usually never needed.\n                        \nThis way you can precisely control where you install Yaws (This is\nusefull for computers where you do not have right access to the \nstandard systemdirs). \n\nFor example:\n./configure --prefix=/home/install/yaws --localstatedir=/home/install/yaws/var --sysconfdir=/home/install/etc\n\n\n2b. Note to packagers (rpm, deb ...) All install targets support the \n    DESTDIR variable.\n    Thus, if we do ./configure --prefix=/usr; make\n    we can subsequently do:\n    DESTDIR=/foo/bar make install\n    All yaws files will be installed under DESTDIR, but all \n    code will assume yaws should be installed under /usr\n\n\n3. make\n     This will build the system\n\n  make docs \n     (Optionnal) You can issue this command if you want to build Yaws\n     documentation.\n\n  make local_install\n     and perform something we call a\n     local install. It will create an executable script in the $HOMe/bin \n     directory and a config file in $HOME/yaws.conf. This is for developers\n     only\n\n4.   To test the build, Start as bin/yaws -i \n     This will start a webserver at http://0.0.0.0:8000\n     Terminate through ^C or > init:stop()\n\n5. as root make install\n\n6. as root Start as /usr/local/bin/yaws -i \n   (this starts an interactive system)\n\n7. This will create a webserver at http://${host} and one at https://${host}\n\n8. as root Edit /etc/yaws.conf \n\n9. Create content in /var/yaws\n\n10a. Start as /usr/local/bin/yaws --daemon --heart\n     This will start a daemon (--daemon) which will be autorestarted when/if\n     it crashes or hangs (--heart)\n\n10b. Or start interactive system as /usr/local/bin/yaws -i\n\n'
YAWS is an erlang web server b'\nThis is yaws, a webserver for dynamic content written in Erlang.\n\n\nTo build and install\n\n\n1. Get and install an erlang system (http://www.erlang.org)\n\n2. ./configure --prefix=/usr/local\n   This will install everything under /usr/local including var files\n   in /usr/local/var/run/yaws and etc files in\n   /usr/local/etc/yaws.*\n\n  A plain ./configure will install executables under \n  /usr/local/bin and libs in /usr/local/lib/yaws etc and\n  var files will end up under /usr/local/etc and /usr/local/var\n\n\nNote: We can also change the target directory for etc and var \n      directories by using:\n\n  --localstatedir=DIR for files that should go in /var\n  --sysconfdir=DIR for files that should go in /etc\n  --disable-pam  If we for some reason do not want pam support\n  --with-extrainclude=DIR Will add DIR to the include path\n                      May be useful if e.g. pam is installed\n\t\t      somewhere where its usually not found\n  --with-defaultcharset=String  Will set the default charset used\n                        in generated page headers. Usually never needed.\n                        \nThis way you can precisely control where you install Yaws (This is\nusefull for computers where you do not have right access to the \nstandard systemdirs). \n\nFor example:\n./configure --prefix=/home/install/yaws --localstatedir=/home/install/yaws/var --sysconfdir=/home/install/etc\n\n\n2b. Note to packagers (rpm, deb ...) All install targets support the \n    DESTDIR variable.\n    Thus, if we do ./configure --prefix=/usr; make\n    we can subsequently do:\n    DESTDIR=/foo/bar make install\n    All yaws files will be installed under DESTDIR, but all \n    code will assume yaws should be installed under /usr\n\n\n3. make\n     This will build the system\n\n  make docs \n     (Optionnal) You can issue this command if you want to build Yaws\n     documentation.\n\n  make local_install\n     and perform something we call a\n     local install. It will create an executable script in the $HOMe/bin \n     directory and a config file in $HOME/yaws.conf. This is for developers\n     only\n\n4.   To test the build, Start as bin/yaws -i \n     This will start a webserver at http://0.0.0.0:8000\n     Terminate through ^C or > init:stop()\n\n5. as root make install\n\n6. as root Start as /usr/local/bin/yaws -i \n   (this starts an interactive system)\n\n7. This will create a webserver at http://${host} and one at https://${host}\n\n8. as root Edit /etc/yaws.conf \n\n9. Create content in /var/yaws\n\n10a. Start as /usr/local/bin/yaws --daemon --heart\n     This will start a daemon (--daemon) which will be autorestarted when/if\n     it crashes or hangs (--heart)\n\n10b. Or start interactive system as /usr/local/bin/yaws -i\n\n'
Some more or less useful rake tasks. Includes tasks to work with git-cvs, convert an Atom collection to a blog, post to an AtomPub server and more. 
Ruby on Rails TextMate bundle [master branch is svn trunk; patches to drnicwilliams@gmail.com] 
Ruby on Rails TextMate bundle [master branch is svn trunk; patches to drnicwilliams@gmail.com] b'# TextMate bundle for Ruby on Rails development\n\nTo install with Git:\n\n    mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n    cd ~/Library/Application\\ Support/TextMate/Bundles\n    git clone git://github.com/drnic/ruby-on-rails-tmbundle.git "Ruby on Rails.tmbundle"\n    osascript -e \'tell app "TextMate" to reload bundles\'\n\n\nTo install without Git:\n\n    mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n    cd ~/Library/Application\\ Support/TextMate/Bundles\n    wget http://github.com/drnic/ruby-on-rails-tmbundle/tarball/master\n    tar zxf drnic-ruby-on-rails-tmbundle*.tar.gz\n    rm drnic-ruby-on-rails-tmbundle*.tar.gz\n    mv drnic-ruby-on-rails-tmbundle* "Ruby on Rails.tmbundle"\n    osascript -e \'tell app "TextMate" to reload bundles\'\n\n## Rails 3.0 contributors\n\n* Kamil Kukura (rake migrate timestamp patch)\n\n## Rails 2.0 features/contributors (copied from CHANGELOG)\n\n* Snippets/Commands for:\n  * Tests\n    * assert_select (ass)\n    * assert_difference/assert_no_difference (asd/asnd)\n    * GET+POST test method stubs (defg+defp)\n  * Controllers\n    * respond_to (rst)\n    * REMOVED: render_component snippets\n    * loggers - pass a block instead of raw string to save time if logging not used (e.g. production) [thx Stephen Touset]\n    * redirect_to for resource paths (rep, repp, renp, renpp)\n    * render :update (ru) [thx Simon Jefford]\n  * Views\n    * form_for (ff)\n    * link_to for resource paths (lip, lipp, linp, linpp)\n    * <% end -%> (end)\n  * Models\n    * has_many :though (hmt)\n    * association snippets give better defaults (e.g. bt + hm)\n    * validates_format_of (vf,vfif) [thx Dean Strelau]\n  * Migrations\n    * Sexy Migrations now available as "t." snippets [thx Lawrence Pit]\n    * Migration classes have own textmate scope\n    * Add/Remove Columns - the \'down\' statements are in reverse order [thx Lawrence Pit, Daniel Kristensen]\n* Language/Syntax\n  * New keywords: rescue_from\n  * Added rb as a valid Rails file type [thx James Deville]\n* Commands\n  * html.erb is the default for new templates (backwards compatibility is being worked on too)\n* Plugins\n  * Footnote\n    * footnote-edge uses .erb for templates [thx Stephen Bannasch]\n\n* Ian\'s extra notes:\n  * I\'ve noticed that the install plugin command doesn\'t work under Ruby 1.9.*'
A Ruby Gem that gives you full access to several of the Amazon Web Services API from your Ruby/Ruby on Rails apps b'= IMPORTANT!\n\nThis Ruby gem is no longer supported and has not been for several years.  It is no longer recommended for public use.  Instead I would recommend looking at the officially supported Amazon Ruby SDK provided by Amazon.com.  See https://aws.amazon.com/sdkforruby/\n\nThanks for your support!\n\n\n= Amazon Web Services Elastic Compute Cloud (EC2) Ruby Gem\n\n== About amazon-ec2\n\nAmazon Web Services offers a compute power on demand capability known as the Elastic Compute Cloud (EC2). The server resources in the cloud can be provisioned on demand by making HTTP Query API calls to EC2.\n\nThis \'amazon-ec2\' Ruby Gem is an interface library that can be used to interact with the Amazon EC2 system and control server resources on demand from your Ruby scripts, or from applications written in your Ruby framework of choice (Ruby on Rails, Merb, etc.).\n\nMore recently, support has been added for the following EC2 related AWS API\'s as well:\n\n* Autoscaling\n* Cloudwatch\n* Elastic Load Balancing (ELB)\n* Relational Database Service (RDS)\n\nFor the most complete and up-to date README information please visit the project homepage at:\n\nhttp://github.com/grempe/amazon-ec2/tree/master\n\nor the official EC2 website at http://aws.amazon.com/ec2\n\n\n== Installation\n\nThis gem follows the standard conventions for installation on any system with Ruby and RubyGems installed and uses Bundler for gem installation and build management.  If you have worked with gems before this will look very familiar.\n\n=== Get an AWS account\n\nBefore you can make use of this gem you will need an Amazon Web Services developer account which you can sign up for at https://aws-portal.amazon.com/gp/aws/developer/registration/index.html.  This account must also be specifically enabled for Amazon EC2 usage.  AWS will provide you with an \'AWS Access Key ID\' and a \'Secret Access Key\' which will allow you to authenticate any API calls you make and ensure correct billing to you for usage of the service.  Take note of these (and keep them secret!).\n\n=== Install the amazon-ec2 gem (Canonical Release)\n\nThis is the standard install for stable releases from RubyGems.\n\n  # Install the gem\n  [sudo] gem install amazon-ec2\n\n\n=== Install from local Git clone (for amazon-ec2 developers)\n\nTo install from git for adding features or fixing bugs, you\'ll need to clone and build.\n\n  git clone git://github.com/grempe/amazon-ec2.git\n  cd amazon-ec2\n  bundle install\n  rake test\n  rake build\n  rake install\n\n\n== Using amazon-ec2\n\nThe library exposes one main interface class AWS::EC2::Base.  It is through an instance of this class that you will perform all the operations for using the EC2 service including query string header signing.\n\nThe public methods on AWS::EC2::Base closely mirror the EC2 Query API, and as such the Query API Reference in the EC2 Developer Guide ( http://developer.amazonwebservices.com/connect/kbcategory.jspa?categoryID=84 ) will prove helpful.\n\n\n=== Setting up\n\nThe \'awshell\' and \'ec2-gem-example.rb\' scripts which will be introduced to you shortly expect your AWS EC2 credentials to be stored as shell environment variables which are accessible to those scripts. This makes them convenient to use whenever you need to do a quick query to see what images you have available to you, what\'s running now, or to start or stop an instance on EC2. You\'ll find \'awshell\' to be a very handy tool. I\'ll describe only the OS X route for setting up (of course the setup steps will vary depending on your particular system and preferred shell). If you don\'t want to do it this way, feel free to copy these scripts from the gem dir to any location where you can run them from and modify them directly to include your credentials.\n\nEdit the file ~/.bash_login and add the following to the existing contents:\n\n  # OPTIONAL : Why \'export RUBYOPT\'? Because we leave loading libs up to you... See : http://gist.github.com/54177\n  export RUBYOPT="rubygems"\n\n  # For amazon-ec2 and amazon s3 ruby gems\n  export AWS_ACCESS_KEY_ID="YOUR_ACCESS_KEY_ID"\n  export AWS_SECRET_ACCESS_KEY="YOUR_SECRET_ACCESS_KEY_ID"\n\nIf you are using EC2 in the EU region, make sure you also set:\n\n  export EC2_URL="https://eu-west-1.ec2.amazonaws.com"\n\n(which you have already if you configured standard EC2 command line tools to work with this region).\n\nOnce you save the file you should close and re-open your terminal so the new variables are made available. You\'ll need to do this close/re-open step for each terminal window you have open (or issue the \'source ~/.bash_login\' command in each). Make sure that this file is only readable by your user so you don\'t inadvertently expose your credentials to other users on your system.\n\nYou can verify that this setup is complete by running the \'set\' in a command window and seeing that your credentials are in the list of shell variables.\n\n=== The basics\n\nThe library exposes one main interface module\n\n  AWS::EC2::Base\n\nThis method requires arguments which include your AWS credentials and it will return an object that you can use to make method calls directly against EC2. All the operations for using the EC2 service, including query string header signing, are handled automatically for you. The connection string will look something like this:\n\n  @ec2 = AWS::EC2::Base.new(:access_key_id => ACCESS_KEY_ID, :secret_access_key => SECRET_ACCESS_KEY)\n\nI\'ve tried to keep the public methods on \'amazon-ec2\' as close as possible to the AWS EC2 Query API. This similarity allows you to reference the Query API Reference in the EC2 Developer Guide and be able to get started right away. In most cases the methods names only differ in how they are presented. e.g. \'DescribeImages\' becomes \'#describe_images()\' in Ruby. Feel free to browse the full RDoc documentation for all classes and methods of \'amazon-ec2\' if you want more details.\n\n\n=== Examples\n\nThe best way to become familiar with \'amazon-ec2\' is to take it for a test drive. We have provided a few simple ways to get you started. There is also some sample code below that should help out in using \'amazon-ec2\' with a plain Ruby script, or as part of a Ruby on Rails application.\n\n==== Using the \'ec2-gem-example.rb\' sample test script\n\nAn example Ruby script which exercises the library a bit more is installed for you to check out when you install this gem. You can run this script to verify that everything is setup and working correctly in your environment. Consult the file which is installed at :\n\n  [your amazon-ec2 gem dir]/examples/ec2-example.rb\n\nSince we also package this sample file in the gem\'s bin/ dir you should also be able to run it from anywhere on your shell path (once you have set your environment variables as described above).\n\n==== Using the \'awshell\' command shell\n\nThe \'awshell\' command shell is actually a standard \'irb\' Ruby shell, with the main difference being we read your AWS credentials from your environment and pre-configure a connection string for you. This lets you run any EC2 command very simply. This has proven to be a valuable tool during the development of this gem and you should try it out. Since we install this tool in your system path as part of the installation of this gem, you should be able to simply run \'awshell\' from any terminal command prompt on your local system. You\'ll see some basic instructions for use, and a few examples when you start \'awshell\'. Go ahead and try it out now. We\'ll wait...\n\nIf you\'re not in front of a terminal shell now (perhaps you\'re browsing this site on your iPhone) this is what you would see:\n\n\n  hostname:/tmp/rails/amazon_test glenn$ awshell\n\n    \'awshell\' usage :\n    This is an interactive \'irb\' command shell that allows you to use all\n    commands available to the amazon-ec2 gem.  You\'ll find this to be a\n    great tool to help you debug issues and practice running commands\n    against the live EC2 servers prior to putting them in your code.\n\n    The EC2 connection is wired to the class instance \'@ec2\'.  Make method calls\n    on this to execute commands on EC2.  Adding a #to_s\n    at the end of any command should give you a full String representation of the\n    response.\n\n      Examples to try:\n\n        returns : all ec2 public methods\n        >> @ec2.methods.sort\n\n        returns : a string representation of ALL images\n        >> @ec2.describe_images.to_s\n\n        returns : an Array of AWS::Response objects, each an EC2 image and its data\n        >> @ec2.describe_images.imagesSet.item\n        >> @ec2.describe_images.imagesSet.item[0] (a hash representing a single item in that array)\n        >> @ec2.describe_images.imagesSet.item[0].to_s (a String representation of that item)\n\n  >> @ec2.describe_images.imagesSet.item[0].to_s\n  => "#<AWS::Response:0x100A465B4 imageId=\\"ami-018e6b68\\" imageLocation=\\"rbuilder-online/phonehome-1.5.6-x86_10132.img.manifest.xml\\" imageOwnerId=\\"099034111737\\" imageState=\\"available\\" isPublic=\\"true\\" parent=#<AWS::Response:0x100A469A6 ...>>"\n\n\n=== Ruby script usage example:\n\nTry out the following bit of code. This should walk through each image returned by a call to #describe_images and print out its key data. Note in the example below that you cannot walk through the results of the #describe_images call with the \'.each\' iterator (You\'ll get errors if you try). You need to instead walk through the Array of items which are in the \'imagesSet\' embedded in the response. This reflects exactly the XML hierarchy of data returned from EC2 which we parse to Ruby OpenStruct objects (AWS::Response).\n\n  #!/usr/bin/env ruby\n\n  require \'rubygems\'\n  require \'AWS\'\n\n  ACCESS_KEY_ID = \'--YOUR AWS ACCESS KEY ID--\'\n  SECRET_ACCESS_KEY = \'--YOUR AWS SECRET ACCESS KEY--\'\n\n  ec2 = AWS::EC2::Base.new(:access_key_id => ACCESS_KEY_ID, :secret_access_key => SECRET_ACCESS_KEY)\n\n  puts "----- listing images owned by \'amazon\' -----"\n  ec2.describe_images(:owner_id => "amazon").imagesSet.item.each do |image|\n    # OpenStruct objects have members!\n    image.members.each do |member|\n      puts "#{member} => #{image[member]}"\n    end\n  end\n\n=== Ruby on Rails usage example:\n\n\n<b>Rails 2.3.x - config/environment.rb</b>\n\n  Rails::Initializer.run do |config|\n   ...\n   config.gem "amazon-ec2", :lib => "AWS", :source => "http://gemcutter.org/"\n   ...\n  end\n\n\n<b>Rails 3.x.x - Gemfile</b>\n\n  ...\n  gem "amazon-ec2", :require => "AWS"\n\n\n<b>app/controllers/my_controller.rb</b>\n\n  [some controller code ...]\n\n  ec2 = AWS::EC2::Base.new(:access_key_id => "YOUR_AWS_ACCESS_KEY_ID", :secret_access_key => "YOUR_AWS_SECRET_ACCESS_KEY")\n\n  # get ALL public images\n  @ec2_images = ec2.describe_images().imagesSet.item\n\n  # Get info on all public EC2 images created by the Amazon EC2 team.\n  @ec2_images_amazon = ec2.describe_images(:owner_id => "amazon").imagesSet.item\n\n  [some more controller code ...]\n\n\n<b>app/views/my/index.rhtml</b>\n\n  <h1>EC2 Test#index</h1>\n\n  <h1>Sample 1 - debug() view</h1>\n\n  <%= debug(@ec2_images_amazon) %>\n\n  <h1>Sample 2 - Build a table</h1>\n\n  <table border=\'1\'>\n    <tr>\n      <th>image.imageId</th>\n      <th>image.imageLocation</th>\n      <th>image.imageOwnerId</th>\n      <th>image.imageState</th>\n      <th>image.isPublic</th>\n    </tr>\n\n    <% for image in @ec2_images_amazon %>\n      <tr>\n        <td><%=h image.imageId %></td>\n        <td><%=h image.imageLocation %></td>\n        <td><%=h image.imageOwnerId %></td>\n        <td><%=h image.imageState %></td>\n        <td><%=h image.isPublic %></td>\n      </tr>\n    <% end %>\n  </table>\n\n  <h1>Sample 3 - Iterate</h1>\n\n  <% @ec2_images_amazon.each do |image| %>\n    <% image.each_pair do |key, value| %>\n      <% unless key == \'parent\' %>\n        <%= "#{key} => #{value}" %><br />\n      <% end %>\n    <% end %>\n    <br />\n  <% end %>\n\n\n=== Important notes regarding the structure of AWS::Response Objects\n\nOne of the key benefits of this new version of the library is that all responses from EC2 are bundled up in a real data structure and no longer require parsing of text. The hash returned is populated directly from the XML given to us by EC2 in response to any command we issue. This means that future changes to the API and what is returned by EC2 will be handled transparently by the gem. This is a huge benefit. What this means though, is that you may have to do a little homework on what actually gets returned by EC2 as XML. For example, when you make a #describe_images call in \'awshell\' what AWS returns behind the scenes looks like:\n\n  <?xml version="1.0"?>\n  <DescribeImagesResponse xmlns="http://ec2.amazonaws.com/doc/2007-01-19/">\n      <imagesSet>\n          <item>\n              <imageId>ami-20b65349</imageId>\n              <imageLocation>ec2-public-images/fedora-core4-base.manifest.xml</imageLocation>\n              <imageState>available</imageState>\n              <imageOwnerId>amazon</imageOwnerId>\n              <isPublic>true</isPublic>\n          </item>\n          <item>\n              <imageId>ami-22b6534b</imageId>\n              <imageLocation>ec2-public-images/fedora-core4-mysql.manifest.xml</imageLocation>\n              <imageState>available</imageState>\n              <imageOwnerId>amazon</imageOwnerId>\n              <isPublic>true</isPublic>\n          </item>\n          <item>\n              <imageId>ami-23b6534a</imageId>\n              <imageLocation>ec2-public-images/fedora-core4-apache.manifest.xml</imageLocation>\n              <imageState>available</imageState>\n              <imageOwnerId>amazon</imageOwnerId>\n              <isPublic>true</isPublic>\n          </item>\n          <item>\n              <imageId>ami-25b6534c</imageId>\n              <imageLocation>ec2-public-images/fedora-core4-apache-mysql.manifest.xml</imageLocation>\n              <imageState>available</imageState>\n              <imageOwnerId>amazon</imageOwnerId>\n              <isPublic>true</isPublic>\n          </item>\n          <item>\n              <imageId>ami-26b6534f</imageId>\n              <imageLocation>ec2-public-images/developer-image.manifest.xml</imageLocation>\n              <imageState>available</imageState>\n              <imageOwnerId>amazon</imageOwnerId>\n              <isPublic>true</isPublic>\n          </item>\n          <item>\n              <imageId>ami-2bb65342</imageId>\n              <imageLocation>ec2-public-images/getting-started.manifest.xml</imageLocation>\n              <imageState>available</imageState>\n              <imageOwnerId>amazon</imageOwnerId>\n              <isPublic>true</isPublic>\n          </item>\n      </imagesSet>\n  </DescribeImagesResponse>\n\nYou can see here the XML the structure that you will need to follow when constructing queries for information and parsing responses from EC2.\n\nSo, for example, if you wanted to get the image ID of the third image listed in the response above you would need to do:\n\n  >> puts @ec2.describe_images(:owner_id => \'amazon\').imagesSet.item[2].imageId\n  ami-23b6534a\n\nEC2 will typically return sets of things (imagesSet, reservationSet, etc.) which we map to ruby Arrays (.imagesSet.item in the example above). If you want to iterate over a response set you will need to iterate over this array. The Arrays will typically contain additional AWS::Response objects that represent each individual item. You\'ll find that you can use the \'awshell\' to help you understand the structure more completely if you try issuing commands there as a way to practice seeing what will be returned and making sure you get exactly what you want.\n\n=== Handling Exceptions\nIf for some reason an error occurs when executing a method (e.g. its arguments were\nincorrect, or it simply failed) then an exception will be thrown.  The exceptions are\ndefined in exceptions.rb as individual classes and should match the exceptions that\nAWS has defined in the API.  If the exception raised cannot be identified then a\nmore generic exception class will be thrown.\n\nThe implication of this is that you need to be prepared to handle any exceptions that\nmay be raised by this library in YOUR code with a \'rescue\' clause.  It is up to you\nto determine how you want to handle these exceptions in your code.\n\n\n== Additional Resources\n\n=== Project Websites\n\n* Project Home : http://github.com/grempe/amazon-ec2/tree/master\n* API Documentation : http://rdoc.info/projects/grempe/amazon-ec2\n* Amazon Web Services : http://aws.amazon.com\n\n== Credits\n\nThe original code for this library was provided by Amazon Web Services, LLC as sample code.  Thanks to them for providing all of us with something to get us started.\n\n== Contact\n\nComments, patches, Git pull requests and bug reports are welcome. Send an email to mailto:glenn@rempe.us or join the Google Groups forum.\n\n== Patches & Pull Requests\n\nPlease follow these steps if you want to send a patch or a GitHub pull request:\n\n* Fork grempe/amazon-ec2\n* Create a topic branch: `git checkout -b my_fix`\n* Make sure you add tests for your changes and that they all pass with \'rake test\'\n* Don\'t change files that you don\'t own like the gemspec or version.rb\n* Commit your changes, one change/fix per commit\n* Push your fixes branch: `git push origin my_fix`\n* Open an Issue on GitHub referencing your branch and send a pull request.\n* Please do not push to `master` on your fork. Using a feature/bugfix branch will make everyone\xe2\x80\x99s life easier.\n\n\nEnjoy!\n\nGlenn Rempe\n\n'
A Merb Blogging &amp; Publishing Platform using Merb, DataMapper, haml and jQuery. b'= merblogger # merb + logger merblogger\n\nmerblogger.com - Ruby community blog, anybody doing ruby gets a blog there\n'
Merb + Webgen CMS system that has dynamic routing, Nginx config and static site generation with haml/sass/erb/... support. 
AlogR is a threadsafe non-blocking asynchronous configurable logger for Ruby. b'= About\n\n  AlogR enables a Ruby project to log to the filesystem using non-blocking asynchronous IO with no external dependencies.\n\n= Author\n\n  Wayne E. Seguin (wayneeseguin at gmail dot com)\n\n= How it works\n\n  A global logging buffer gets added to the running application.\n  There is a global buffer which is an array of fifo queues.\n  Worker threads are to pop the first element (which is a string) off of a fifo queue and "process" it. \n  Processing involves writing the string to disk using non-blocking asynchronous IO\n  Threads will be event based where the event is something being placed in the queue, or the queue non-empty.\n  \n= Config\n  \n  You can choose the log that the application uses:\n\n  AlogR.new( "log/app_log.log" )\n  \n  :log specifies the default log\n  \n  AlogR.new( :log => "log/app_log.log" )\n\n  You may also specify any combination of logs corresponding to the log levels in addition to the default log:\n\n  AlogR.new( :log => "log/app_log.log", :error => "log/error.log", :debug => "log/debug.log")\n\n  where log levels are one of: [ emergency, alert, critical, error, warning, notice, info, debug ] \n\n= Application Usage\n\n  First be sure to setup the logger:\n\n  $alogger = AlogR.new(:log)\n\n  To log a string to either the error log or the default log (depending on your configuration):\n\n  "Jonnie! You borked it!".log(:error)\n\nFeature Requests:\n# Be able to specify conditional filters\n\n= Examples\n\n* Example 1\nrequire "alogr"\n$logger = AlogR::Logger.new(:log => "/Users/wayne/projects/ruby/alogr/trunk/log/default.log")\n"a test, should go to the logs 10 times\\n".log.log.log.log.log.log.log.log.log.log\n\n* Example 2\nrequire "alogr"\n$logger = AlogR.new(\n:log => "/Users/wayne/projects/ruby/alogr/trunk/log/production.log", \n:error => "/Users/wayne/projects/ruby/alogr/trunk/log/error.log"\n)\n\n"(1)this should go to the production log\\n".log\n\n"(2)this should go to error log\\n".log(:error)\n\n"(3)error\\n".log :error\n\n"(4)production\\n".log :info\n\n"(5)error".log :error\n\n\n* Example 3\nrequire "lib/alogr"\n$logger = AlogR.new(\n:log => "/Users/wayne/projects/ruby/alogr/trunk/log/production.log", \n:error => "/Users/wayne/projects/ruby/alogr/trunk/log/error.log",\n:info => "/Users/wayne/projects/ruby/alogr/trunk/log/info.log",\n:warning => "/Users/wayne/projects/ruby/alogr/trunk/log/warning.log"\n)\n\n"this should go to info log".log\n\n"this should go to error log".log(:error)\n\n"this should go to production log".log(:warning)\n\n"error".log :error\n\n"warning".log :warning\n\n"info".log :info\n\n"yetanother error".log :error\n\n* Example 4\nrequire "lib/alogr"\n$logger = AlogR.new(\n:log => "/Users/wayne/projects/ruby/alogr/trunk/log/production.log", \n:error => "/Users/wayne/projects/ruby/alogr/trunk/log/error.log",\n:info => "/Users/wayne/projects/ruby/alogr/trunk/log/info.log",\n/paypal => "/Users/wayne/projects/ruby/alogr/trunk/log/paypal.log"\n)\n"this should go to info log".log\n"this should go to error log".log(:error)\n"this should go to production log".log(:warning)\n\n* Example 4:\nIf line matches a regexp then sent log/paypal.log as well as production.log\nAlogR.new(:log => "log/production.log", /paypal/ => "log/paypal.log")\n\nGets logged to both\n{ :something => "value", :something_else => "value" }.log\n\n'
AutoZest is an autotest addon that: * automated growl installation * generation of .autotest with growl & autozest config * generation of .autozest.yml config file * autozest.sqlite3 database file for pulling random messages based on severity b'= About\n\nAutoZest is an autotest extension\n\n= Author\n\n  Wayne E. Seguin (wayneeseguin at gmail dot com)\n\n= Features\n\n* automated growl installation\n  $ autozest install growl\n\n* generation of .autotest with growl & autozest config\n  $ autozest setup autotest\n\n* generation of .autozest.yml config file\n  $ autozest setup\n\n* autozest.sqlite3 database file for pulling random messages based on severity, update via:\n  $ autozest update\n\nNotes:\n\n* config file can specify extra image fetching options\n* dependency: ZenTest\n\n'
Command line utility and library for working with Nginx configuration scripts. 
Sequel ORM 
A simple, non-invasive, approach to versioning ActiveRecord models b'SimplyVersioned\n===============\n\nRelease:\t1.0.0\nDate:\t\t\t28-01-2008\nAuthor:\t\tMatt Mower <self@mattmower.com>\n\nSimplyVersioned is a simple, non-invasive, approach to versioning ActiveRecord models.\n\nSimplyVersioned does not require any structural change to the models to be versioned and requires only one versions table to be created (a migration generator is supplied with the plugin) for the application, regardless of the number of models being versioned.\n\nThe plugin introduces a \'Version\' ActiveRecord model (that reflects changes to model attributes) to which versioned models are polymorphically associated. Version records store the model information as a YAML hash.\n\t\nSimplyVersioned meets a simple need for model versioning. If your needs are more complex maybe try Rick Olsen\'s acts_as_versioned (http://svn.techno-weenie.net/projects/plugins/acts_as_versioned/).\n\t\nSimplyVersioned is (so far) actively tested with Rails 2.0.2 and Ruby 1.8.6\n\t\nUsage\n=====\n\n1. Install the plugin\n\n  ./script/plugin install http://rubymatt.rubyforge.org/svn/simply_versioned\n\n2. Generate the migration\n\n  ./script/generate simply_versioned_migration\n\n\tNote that the migration defaults to storing the version info in a TEXT field. On MySQL this will default to a\n\tlimit of 64K. If you are versioning particularly large models you will want to modify the migration to include\n\ta :limit => n condition to promote the yaml column to a MEDIUMTEXT or (god forbid) a LONGTEXT.\n\n3. Create the versions table\n\n  rake db:migrate\n\n4. Annotate the models you want to version specifying how many versions to keep\n\n\tclass Thing < ActiveRecord::Base\n\t  simply_versioned :keep => 10\n\tend\n\t\n\tIf you do not specify a limit then old versions are never automatically deleted. You can\n\tmanually delete them like this:\n\t\n\tthing.versions.purge( 10 )\n\t\n\twhich would delete all the but the last ten versions.\n\t\n\tIf you want fine-grained control over when versions are created you can use:\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :automatic => false\n\tend\n\t\n\tand new versions will no longer be created by default. You will then need to use\n\tthe with_versioning method to create a version.\n\t\n\tLastly you can control which columns will be versioned by specifying an exclude parameter.\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => :awkward_column\n\tend\n\t\t\n\tor\t\n\t\n\tclass Thing < ActiveRecord::Base\n\t\tsimply_versioned :exclude => [:first_awkward_column,:second_awkward_column,...]\n\tend\n\t\n\tThis may be helpful if you run into conflicts with other plugins which try to manage columns.\n\n5. Create versions\n\n\tthing = Thing.create!( :foo => bar ) # creates v1\n\tthing.foo = baz\n\tthing.save! # creates v2\n\t\n\tIf you need to control whether a version is created or not, use #with_versioning. For example:\n\t\n\tthing.with_versioning( false ) do |t|\n\t\tt.save!\n\tend\n\t\n\tor, using the "magic pen" (http://dablog.rubypal.com/2007/2/18/the-magic-pens-of-ruby thanks hmj):\n\t\n\tthing.with_versioning( false, &:save! )\n\n6. Find versions\n\n\tthing.versions.each do |version| ... end\n\trender :partial => \'thing_version\', :collection => thing.versions\n\tthing.versions.current\n\tthing.versions.first\n\tthing.versions.get( 3 )\n\t\n\tTo find a version number:\n\t\n\tthing.version_number\n\n7. Revert to a previous version\n\n\tthing.revert_to_version( 5 )\n\t\n\tIf a specific reversion needs to avoid overwriting some column values pass\n\tan :except option, e.g.\n\t\n\tthing.revert_to_version( 1, :except => [:name,:age] )\n\t\n\tThe revert_to_version method also takes an existing Version instance, e.g.\n\t\n\tversion = thing.versions.find( ... )\n\tthing.revert_to_version( version )\n\n8. Traverse versions\n\n\tthing.versions.current.previous\n\tthing.versions.first.next\n\n9. Obtain a copy of a previous versioned model\n\n\tthing.versions.first.model # => Instantiated Thing with versioned values\n\t\nThanks to:\n\n\tChris Wanstrath (http://ozmm.org/) for useful feedback and GitHub\n\tJosh Susser (http://blog.hasmanythrough.com/) for useful suggestions and feedback\n\tRick Olson (http://techno-weenie.net/) for all the many plugins whose code i\'ve read\n\t\nCopyright (c) 2007 Matt Mower <self@mattmower.com> and released under the MIT license\n'
SwitchPipe is a backend process manager and HTTP proxy that makes (especially Ruby) web app deployment simple. NOW OBSOLETE. DO NOT USE. b'SwitchPipe 1.05\nBy Peter Cooper\n~~~~ February 10, 2008 (development began January 11, 2008)\nswitchpipe@peterc.org\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\nTHE LATEST, CANONICAL DOCUMENTATION FOR SWITCHPIPE IS LOCATED AT:\nhttp://groups.google.com/group/switchpipe/web\n\nTHE DOCUMENTATION BELOW IS INCLUDED MERELY TO HELP IF YOU\'RE IN A RUSH OR UNABLE \nTO VISIT THE ONLINE VERSION. IT IS INCOMPLETE, SECTIONS MAY BE INACCURATE, AND \nTHE ONLINE DOCUMENTATION EXPLAINS A LOT MORE AND IS MORE UP TO DATE.\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\n\nWHAT IS SWITCHPIPE?\n-------------------\nOnline @ http://groups.google.com/group/switchpipe/web/introduction-overview\n\nSwitchPipe is a proof of concept "Web application server." More accurately,\nit\'s a Web application process manager and request dispatcher / proxy. Backend \nHTTP-speaking applications (Web applications) do not run directly within\nSwitchPipe, but are loaded into their own processes making SwitchPipe language\nand framework agnostic.\n\nSwitchPipe takes control of, and manages, the backend application processes, \nincluding loading and proxying to multiple instances of each application in a\nround-robin style configuration. As an administrator, you can define the maximum\nnumber of backend processes to run for each app, along with other settings so \nthat you do not exceeded preferred resource limits. SwitchPipe quickly removes\nprocesses that "break" or otherwise outlive their welcome. For example, you can\nlet SwitchPipe kill any backend processes that have not been accessed for, say,\n20 seconds. This makes hosting many multiple Rails applications, for example, a\nquick and non-memory demanding process, ideal for shared hosting environments.\n\nSwitchPipe proxies incoming HTTP requests at the TCP level, using information \nextracted from the HTTP request and headers to work out which backend application\nis required to handle the request.\n\nSwitchPipe\'s goal is to be:\n\n  * super easy to configure\n  * the easiest way to deploy multiple HTTP-talking backend applications\n  * painless in terms of management; no hand-holding of different applications is needed\n  * a permanent daemon that can handle configuration changes in backend apps "on the fly"\n  * a reliable solution on Linux and OS/X (and anything POSIX compatible, ideally)\n\n\nQUICK INSTALL / STEPS TO SEEING A QUICK DEMO OF SWITCHPIPE\n----------------------------------------------------------\nOnline @ http://groups.google.com/group/switchpipe/web/installation-instructions\n\nRun the "demo" script from SwitchPipe\'s base directory:\n  # ./script/demo\n\nThe "demo" script does everything that the manual process below does, except it runs\nSwitchPipe as a daemon temporarily, does one test request, then closes down and\ncleans up.\n\nOR DO IT "THE MANUAL WAY" (preferred by all true hackers)...\n\nInstall dependencies:\n  # sudo gem install daemons eventmachine open4\n\nInstate configuration file:\n  # cp config.yml.example config.yml\n\nMove application configurations for the demo apps into the "apps" directory:\n  # mv demo_apps/*.yml apps/\n\nRun SwitchPipe as an interactive process:\n  # ./script/switchpipe run\n\nVisit these URLs in a browser:\n  http://127.0.0.1:10000/webrick_thing/\n  http://127.0.0.1:10000/python_http_server/ (won\'t run unless Python is installed)\n  http://127.0.0.1:10000/camping_demo_app/ (won\'t run unless Camping is installed)\n\nYou should notice SwitchPipe start and manage the relevant processes, killing them\nwhenever the timeouts kick in. Use CTRL+C to break out of SwitchPipe\'s non-daemonized\nmode. In future use ./script/switchpipe start and ./script/switchpipe stop to start\nand stop SwitchPipe as a daemonized process.\n\nInformation about setting up SwitchPipe as a system service in /etc/init.d, etc, is\navailable within SwitchPipe\'s online documentation.\n\n\nTHE KEY STEPS TO GETTING STARTED FOR YOUR OWN APPS\n--------------------------------------------------\nOnline @ http://groups.google.com/group/switchpipe/web/setting-up-your-own-webapps-with-switchpipe\n(significantly more up to date than this)\n\n1) Put YAML files into /apps\n\tExample for Rails:\n\t\tpath: /Users/peter/dev/rails/app1\n\t\ttype: mongrel_rails\n\t\tmax_instances: 6\n\t\ttimeout: 60\n\n\tExample for WEBrick / regular app:\n\t\tpath: demo_apps\n\t\tcmd: ruby webrick_thing [[PORT]]\n\t\tsingle_threaded: false\n\n\tExample for Camping:\n\t\tpath: demo_apps\n\t\tcmd: camping -p [[PORT]] camping_demo.rb\n\t\tmax_instances: 1\n\t\ttimeout: 15\n\n2) Make sure config.yml exists, by copying config.yml.example to config.yml and tweaking.\n\n3) Run ./script/switchpipe run  \n   Note: This runs it as a regular process, not daemonized.\n         To daemonize use ./script/switchpipe start and ./script/switchpipe stop\n\n4) Make your main HTTP server (Apache / Nginx / whatever) proxy requests to SwitchPipe at directories with the same name as the YAML files you made.\n\tExample: If your YAML file is some_rails_app.yml, then proxy to http://switchpipe-host.example.com/some_rails_app/\n\t\t\t If your YAML file is acampingapp.yml, then proxy to http://switchpipe-host.example.com/acampingapp/\n\t\t\t\n\tmod_proxy / <VirtualHost> example:\n\t         ProxyPass / http://127.0.0.1:10000/rails_app_name/\n             ProxyPassReverse / http://127.0.0.1:10000/rails_app_name/\n\n    .htaccess example (useful so that Apache can serve static files!):\n             RewriteEngine On\n             RewriteCond %{REQUEST_FILENAME} !-f\n             RewriteRule ^(.*)$ http://127.0.0.1:10000/rails_app_name/$1 [P]\n\n5) Enjoy watching the output of SwitchPipe as it starts and stops backend processes as you access the different apps.\n\n\nEXAMPLE OF ADDING AN APPLICATION\n--------------------------------\nOnline @ http://groups.google.com/group/switchpipe/web/setting-up-your-own-webapps-with-switchpipe\n\nLet\'s say you\'ve developed a Rails application and you want SwitchPipe to manage it. Just \ncreate a new YAML file in /apps called rails_app_name.yml (or anything, but the base name\nof the file name is used as the app\'s identifier), and drop in a few lines like so:\n\npath: /path/to/the/rails/app\ntype: mongrel_rails\nmax_instances: 6\ntimeout: 8\n\nRestart SwitchPipe, or merely wait a few seconds until it picks up the new file itself, and\nthe application is made available, with up to six backend processes, in seconds at\na directory just off of SwitchPipe\'s main URL. For example: http://switchpipe/rails_app_name\n\nYou can deploy Camping, Merb, or even plain old WEBrick apps in the same way. As long\nas it can be run at a prompt, given a specific port to run on, and talk HTTP, SwitchPipe will\ndeploy it. That goes for Ruby and non-Ruby apps.\n\nTo complete the setup, you would then configure your normal Apache, nginx, or other\nmain HTTP daemon to forward requests to a particular domain / virtual host / directory\nthrough to SwitchPipe at the relevant folder. For example, from Apache <Virtualhost>\ndirectives:\n\n  ProxyPass / http://127.0.0.1:10000/rails_app_name/\n  ProxyPassReverse / http://127.0.0.1:10000/rails_app_name/\n\nAn even better way to do it, if possible, is from a .htaccess file. Example:\n\n  RewriteEngine On\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^(.*)$ http://127.0.0.1:10000/rails_app_name/$1 [P]\n\nThe benefit of this technique is that static files can be served up by Apache at usual\nbreakneck speed!\n\nNo more port numbers. No more setting up individual clusters for different apps. No\nmore worrying about how different frameworks handle clustering. Hurrah!\n\nNote that a "hostname" config variable can also be used on applications to serve up the\napplication through SwitchPipe DIRECTLY. This means you can serve up apps WITHOUT Apache\nor Nginx in front of SwitchPipe!\n\n\nTO DOS\n------\nOnline @ http://groups.google.com/group/switchpipe/web/todos-limitations\n\n * Improve error handling\n * Web-accessible status / information URL\n * Caching (potentially)\n * Test suite\n * Test SwitchPipe on more platforms and architectures (OS X and Linux on i386/686 tested so far)\n * Improve documentation and Web site\n * Stream HTTP message bodies over a certain size to backend apps rather than buffer the whole lot in SwitchPipe\n   (this becomes a necessity when dealing with huge HTTP uploads, say)\n\nCONTRIBUTORS\n------------\n\n - Peter Cooper is / was the primary developer of SwitchPipe (so far).\n - Jason Stirk provided a key patch in April 2008 that resolved hanging issues.\n - Mike Auclair provided a fix so that trailing slashes are not necessary on app names\n\n"LICENSE"\n---------\nOnline @ http://groups.google.com/group/switchpipe/web/licensing-information\n\nThis work is hereby released into the Public Domain. To view a copy of the public \ndomain dedication, visit http://creativecommons.org/licenses/publicdomain/ or send\na letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, \nCalifornia, 94105, USA.\n\nSwitchPipe is distributed and made available with the freedoms of the\npublic domain, but with a stern reminder to be ethical.\n\nThis software / content / other work is released into the public \ndomain. Do what you want with it, but may your conscience and \nmoral compass encourage you to be a good guy (or gal). Being good means:\n\n * Not using the same, identical name or title for any substantially\n   different or derived works in such a way that confusion could be\n   caused amongst other users.\n\n * Providing the original author(s) with feedback, notices, patches\n   or credit relating to further extended usage of the work. It\'s\n   only the decent thing to do.\n\nTHE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, \nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR \nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THIS WORK.\n\nNote: If you or your company REQUIRES a license for SwitchPipe (e.g.\ncompany policy), Peter Cooper can prove you with one for a fee. Contact\ndetails can be found at http://www.petercooper.co.uk/. The same applies\nto anyone who wishes to support Peter Cooper in his work on SwitchPipe.\nThank you.\n'
My arc repo 
eBay4R is a Ruby wrapper for eBay's Web Services SOAP API b'=================\nWelcome to eBay4R\n=================\n\n:Author: Garry Dolley\n:Date: 03-28-2008\n:Version: v1.1\n:eBay API: 583\n\neBay4R is a Ruby wrapper for eBay\'s Web Services SOAP API (v583). Emphasis is\non ease of use and small footprint.\n\nPlease report bugs and other problems, see "Author" section at the bottom.\n\nCurrent release can be downloaded from:\n\nhttp://rubyforge.org/projects/ebay4r\n\nThe latest code is available at both RubyForge and GitHub:\n\n  * git://rubyforge.org/ebay4r.git\n  * git://github.com/up_the_irons/ebay4r.git\n\n\nRequirements\n------------\n\n* SOAP4R library v1.5.7 or newer.  The specific version I\'m using for testing\n  is soap4r-1.5.7.90.20070921.\n\n\nOptionals\n---------\n\n* RubyGems\n\n\nInstallation\n------------\n\ntar/gzip\n~~~~~~~~\n\nJust unzip the archive anywhere you like, and see "Getting Started" below \n(you will need to add the ebay4r/lib path to your $RUBYLIB environment\nvariable)\n\nRubyGems\n~~~~~~~~\n\n* To install a gem you already downloaded::\n  \n    gem install ebay-<version>.gem\n\n* For the latest release with no fuss (previous download not required)::\n  \n    gem install -r ebay\n\nGit\n~~~\n\nYou can download the latest and greatest code using Git, just type::\n\n  git clone git://github.com/up_the_irons/ebay4r.git\n\n\nImportant Note about Using eBay4R and Ruby on Rails\n---------------------------------------------------\n\nIf you installed SOAP4R as a gem you must put the following two lines at the\nvery top of your config/environment.rb::\n\n  require \'rubygems\'\n  gem \'soap4r\'\n\nThis must be done before Rails starts auto-loading things.\n\nAdditionally, you have to put those two lines in *every* Rails app you have\non your machine, even if it doesn\'t use SOAP4R!  This is, allegedly, because\nActiveSupport (in dependency.rb) wrongly loads the SOAP4R included with Ruby\ninstead of your Gem.  More details can be found here:\n\n  http://dev.ctor.org/soap4r/ticket/433\n\nIf you get this error, or similar, in every Rails app::\n\n  [...]/activesupport-1.4.2/lib/active_support/dependencies.rb:477:in `const_missing\': uninitialized constant XSD::NS::KNOWN_TAG (NameError?)\n\nyou\'ve hit this problem.\n\n\nGetting Started\n---------------\n\nIf you installed eBay4R from a tarball or git repo, you will want to add the\nebay4r/lib directory to your Ruby include path ($RUBYLIB).  Then put\n\n::\n\n  require \'eBayAPI\'\n \nat the top of your programs.\n\nIf you installed eBay4R with RubyGems, you don\'t have to add anything to\nRuby\'s include path, just put\n\n::\n\n  require \'rubygems\'\n  gem \'ebay\'\n\nat the top of your programs.\n\nExamples\n--------\n\nLook at the examples/ directory.  Edit the file myCredentials.rb and insert\nthe appropriate values.  Then you can run any of the example programs.\n\nHello, World!\n~~~~~~~~~~~~~\n\nThe simplest eBay API call is "GeteBayOfficialTime".  Here\'s how to call it\nwith eBay4R::\n\n  require \'rubygems\'\n  gem \'ebay\'\n\n  # Put your credentials in this file\n  load(\'myCredentials.rb\')\n\n  # Create new eBay caller object.  Omit last argument to use live platform.\n  eBay = EBay::API.new($authToken, $devId, $appId, $certId, :sandbox => true)\n\n  resp = eBay.GeteBayOfficialTime\n\n  puts "Hello, World!"\n  puts "The eBay time is now: #{resp.timestamp}"\n\n  # Wasn\'t that easy?!\n\nAdding an Item\n~~~~~~~~~~~~~~\n\nThis is a more complex example that performs a real (useful) function::\n\n  require \'rubygems\'\n  gem \'ebay\'\n\n  load(\'myCredentials.rb\')\n\n  eBay = EBay::API.new($authToken, $devId, $appId, $certId, :sandbox => true)\n\n  # Notice how we nest hashes to mimic the XML structure of an AddItem request\n  resp = eBay.AddItem(:Item => EBay.Item(:PrimaryCategory => EBay.Category(:CategoryID => 57882),\n                                         :Title => \'Mouse Pad\',\n                                         :Description => \'A really cool mouse pad, you know you want it...\',\n                                         :Location => \'On Earth\',\n                                         :StartPrice => \'12.0\',\n                                         :Quantity => 1,\n                                         :ListingDuration => "Days_7",\n                                         :Country => "US",\n                                         :Currency => "USD",\n                                         :PaymentMethods => ["VisaMC", "PersonalCheck"]))\n\n  puts "New Item #" + resp.itemID + " added."\n\n\nDon\'t worry too much about EBay.Item and EBay.Category calls for now, they are\nexplained in the "Creating Complex Data Types" section below.\n\n\nFormat of Requests\n~~~~~~~~~~~~~~~~~~\n\nIf ``eBay`` is your caller object, then you can issue any eBay API call\nby doing::\n\n  eBay.<call_name>( ... hash of named-arguments ... )\n\nFor example, to issue the GetItem call for Item #4503432058 and return all\ninformation, you do::\n\n  eBay.GetItem(:DetailLevel => \'ReturnAll\', :ItemID => \'4503432058\')\n\nor to see your last invoice using the GetAccount call, you do::\n\n  eBay.GetAccount(:AccountHistorySelection => \'LastInvoice\')\n\nSee the "eBay Web Services SOAP API Guide" for acceptable parameters and values\nfor each API call.  This guide can be downloaded at eBay\'s \n`SOAP Development Center <http://developer.ebay.com/soap/>`_.\n\nCreating Complex Data Types\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA number of elements in eBay\'s schema are XML Schema simple types.  For\nexample, CategoryID, Title, and Description are all strings.  But many \nelements, like Item and Seller, are of types "ItemType" and "SellerType", \nrespectively.  These are complex data types, meaning they are structures\ncomposed of collections of simple types.\n\n"How do I make a complex type object?", you ask.  Simple::\n\n  EBay.<element_name>( ... hash of named-arguments ... )\n\ncreates a new `<element_name>` element of type ``<element_name>Type``.  For\nexample,\n\n::\n\n  EBay.Item(:Title => \'Mouse Pad\', :Description => \'...\')\n\ncreates a new ``ItemType`` object.  Please note, these factory methods are class\nmethods of module EBay, so the upper-case "E" in "EBay" is not a typo.  A\nmore common way to see this is::\n\n  EBay::Item( ... )\n\nThe only difference is if you do not pass any arguments to the factory method\nand do not explicitly put empty parentheses (), Ruby will assume it is a \nconstant, not a method.\n\nSetting XML Attributes\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe symbol you use to set an XML attribute on an element is::\n\n  :xmlattr_<attribute_name>\n\nFor example, to create a <Label> element (corresponding to eBay\'s LabelType)\nwith an attribute of "visible" equal to "true", you would do::\n\n  EBay.Label(:Name => "some string", :xmlattr_visible => true)\n\n\nFormat of Responses\n~~~~~~~~~~~~~~~~~~~\n\nThere is a one-to-one correspondence between the XML returned by eBay and the\nway you access the values contained therein using the response object returned\nby the call.  For example, let\'s say you issued a "GetItem" call::\n  \n  resp = eBay.GetItem(:DetailLevel => \'ReturnAll\', :ItemID => \'4503432058\')\n\nand eBay returned the following XML (abbreviated where appropriate)::\n\n  <?xml version="1.0" encoding="UTF-8"?>\n  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" \n                    xmlns:xsd="http://www.w3.org/2001/XMLSchema" \n                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n   <soapenv:Body>\n    <GetItemResponse xmlns="urn:ebay:apis:eBLBaseComponents">\n     <Timestamp>2005-12-09T09:40:41.602Z</Timestamp>\n     <Ack>Success</Ack>\n     <Version>437</Version>\n     <Build>e437_core_Bundled_2119808_R1</Build>\n     <Item>\n      ...\n\n      <AutoPay>false</AutoPay>\n      <BuyerProtection>ItemIneligible</BuyerProtection>\n      <BuyItNowPrice currencyID="USD">0.0</BuyItNowPrice>\n      <Country>US</Country>\n      <Currency>USD</Currency>\n      <Description>Fund. of Physics, 5th, by Halliday, Resnick, Walker</Description>\n      <Escrow>None</Escrow>\n      <GiftIcon>0</GiftIcon>\n      ...\n\n      <ShipToLocations>US</ShipToLocations>\n      <ShipToLocations>CA</ShipToLocations>\n     </Item>\n    </GetItemResponse>\n   </soapenv:Body>\n  </soapenv:Envelope>\n\n\nThe "resp" object is of type\n  \n  SOAP::Mapping::Object\n\nand contains all the XML elements between ``<GetItemResponse> ... </GetItemResponse>``.\n\nSo, if you want to print the item description, just do::\n\n  puts resp.item.description\n\nand you will see::\n  \n  "Fund. of Physics, 5th, by Halliday, Resnick, Walker"\n\nRepeated XML elements automatically become arrays of the same name, so to see\nall the locations this item can ship to, just do::\n\n  resp.item.shipToLocations.each { |loc| puts loc }\n\nand you will see::\n\n  US\n  CA\n\nIt\'s that easy! (Are any Java or C# developers reading this?  Don\'t be\njealous... ;)\n\nA Note about Case\n~~~~~~~~~~~~~~~~~\n\nAstute readers (all of you, right?) will notice that the first letter of every\nelement contained within the response object is lower-case, even though in the\nXML it is upper-case.  This is currently the way things are and you will have\nto remember to lower the first character in your code.  \n\nRuby\'s convention is that only classes, modules, and constants begin with \nupper-case letters.  The author of the SOAP4R library (which contains \nwsdl2ruby.rb) respected this convention, and as a result, the eBay.rb \nfile I use (generated from eBay\'s WSDL) has this mapping.\n\nI haven\'t come up with any Ruby magic to dynamically allow upper-case first\ncharacters to work also, so if you happen to want to take a crack at it and\nget it working, please send me your patches (see "Author" section at the \nbottom).\n\nPlease note, the opposite does _not_ apply.  That is, you can *submit* a call\nusing either case of the first character, and your arguments can also have\neither case letter first.  For example, this::\n\n  resp = eBay.GetItem(:DetailLevel => \'ReturnAll\', :ItemID => \'4503432058\')\n\nis the same as::\n\n  resp = eBay.getItem(:detailLevel => \'ReturnAll\', :itemID => \'4503432058\')\n\n\nDebugging\n---------\n\nIf "eBay" is your eBay caller object, as in::\n\n  eBay = EBay::API.new( ... )\n\nYou can see XML wiredumps by doing::\n\n  eBay.debug = true\n\nbefore you issue any eBay API calls.  This is useful to see the raw XML of\nwhat eBay is sending back to you.\n\n\nFiles\n-----\n\ncontrib/\n  Extras contributed by the community (myself included)\n\nexamples/\n  Examples of eBay API calls using this library. You will want to check out\n  these examples before making your own calls.\n\nlib/eBayAPI.rb\n  The heart of this library\n\nlib/eBayDriver.rb\n  Autogenerated by wsdl2ruby.rb\n\nlib/eBay.rb\n  Autogenerated by wsdl2ruby.rb\n\nlib/RequesterCredentialsHandler.rb\n  Helper for generating the eBay Authentication header for each call\n\ntest/\n  Unit and functional tests\n\n\nTo Do\n-----\n\n* Add many more examples\n* Add more unit and functional tests\n\n\nAuthor\n------\n\nGarry C. Dolley\n\ngdolley [at] NOSPAM- ucla.edu\n\nAIM: garry97531\n\nIRC: up_the_irons in #ram, #git, #caboose on Freenode (and usually many other\nchannels)\n\n\nFormatting\n----------\n\nI\'ve dropped RDoc formatting for this README.  Headings never looked like\nheadings to me, which was annoying.\n\nThis README is formatted in reStructredText [RST]_.  It has the best\ncorrelation between what a document looks like as plain text vs. its\nformatted output (HTML, LaTeX, etc...).  What I like best is, markup doesn\'t\nlook like markup, even though it is.\n\n.. [RST] http://docutils.sourceforge.net/rst.html\n\nCopyright\n---------\n\nCopyright (c) 2005,2006,2007,2008 Garry C. Dolley\n\neBay4R is free software; you can redistribute it and/or modify it under the\nterms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any later \nversion.\n\neBay4R is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\ndetails.\n\nYou should have received a copy of the GNU General Public License along with\neBay4R; if not, write to the Free Software Foundation, Inc., 51 Franklin\nStreet, Fifth Floor, Boston, MA  02110-1301, USA\n\n'
Merb Plugins: Even more modules to hook up your Merb installation 
Ruby Asset Manager b'= Welcome to RAM: Ruby Asset Manager\n\nRAM is the premiere open-source, role-based, access-controlled digital asset\nmanager for Ruby on Rails. It was built from the ground up to be a fast, secure\nand efficient platform for the distribution, aggregation and tracking of online\ndigital assets.\n\n\n= Installation\n\nFrom the root directory of this application type:\n\n  rake install\n  \nThis will launch the install wizard, which will take you step by step in setting up RAM.\n\nIf you have problems installing RAM, consult the support section of our \nwebsite, which can be found here: http://www.locusfoc.us/ram/pages/docs.\n\nAdditionally, you can come by our IRC channel at:\n\n  Server  : irc.freenode.net\n  Channel : #ram\n\nWe hope you enjoy RAM!\n\n\n= License\n\nRAM is distributed under the same license as Ruby on Rails. See\nhttp://www.opensource.org/licenses/mit-license.php\n'
Ambition adapter for ActiveLdap b'h2. An Ambitious ActiveLdap Adapter\n\nWrite LDAP search filters in Ruby.  Awesomeness courtesy of Chris Wanstrath\'s Ambition library.\n\nYou must be using ActiveLdap 0.9 or greater.\n\nh2. Get It \n\n@$ sudo gem install ambitious-activeldap@\n\n\n<pre>\nrequire \'rubygems\'\nrequire \'ambition/adapters/active_ldap\'\n</pre>\n\nh2. Examples\n\nLet @User@ be a subclass of @ActiveLdap::Base@\n\n<ruby>\nUser.select { |u| u.givenName == \'Severian\' }.each do |user|\n  puts user.name\nend\n</ruby>\n\nQueries don\'t run until you kick them. This adapter supports only the basic kicker methods: @each@, @each_with_index@, @map@, @entries@, @to_a@. \n\nThis adapter also doesn\'t support the methods that require sorting, slicing, or counting, because OpenLDAP effectively doesn\'t support such things.  ActiveLdap lets you request sorted and sliced result sets, but it does the work in Ruby, so you might as well do it yourself.\n\nYou can call @to_s@, but not @to_hash@ on a query.  @to_s@ returns the LDAP search filter as a string.\n\n<ruby>\n>> User.select { |m| m.givenName == \'Jonas\' }.to_s\n=> "(givenName=Jonas)"\n</ruby>\n\n\n\nh2. Issues.find(:all, :filter => "(type=bug)") \n\nFound a bug?  Sweet.  Add it at "the Lighthouse":http://err.lighthouseapp.com/projects/466-plugins/tickets/new.\n\nMore information on Ambition:\n\n  * "http://ambition.rubyforge.org":http://ambition.rubyforge.org\n  * "http://groups.google.com/group/ambition-rb/":http://groups.google.com/group/ambition-rb/\n\n'
A Rails Plugin for adding a simple health check to your application b"FitterHappier\n=============\n\nFitterHappier is a Rails plug-in that provides actions for monitoring site and/or database availability. FitterHappier's monitoring controller disables unnecessary Rails features, like sessions, layouts, and logging, for lightning-fast monitoring URIs.  \n\nFitterHappier provides three monitoring URIs \n\n    % curl localhost:3000/fitter_happier\n    FitterHappier Site Check Passed\n\n    % curl localhost:3000/fitter_happier/site_check\n    FitterHappier Site Check Passed @ Wed, 17 Dec 2008 14:27:47 -0800\n\n    % curl localhost:3000/fitter_happier/site_and_database_check\n    FitterHappier Site and Database Check Passed @ Wed, 17 Dec 2008 14:27:57 -0800\n    Schema Version: 20081217141904\n\nInstallation\n============\n\n    % cd vendor/plugins\n    % git clone git://github.com/atmos/fitter_happier.git\n\nUptime Monitoring\n=================\n\nSee EngineYard's support guide on [uptime monitoring for your rails application](http://www.engineyard.com/support/guides/uptime_monitoring_for_your_rails_application)\n\nMonit\n=====\n\nYou can do simple checks with monit like this:\n\n    if failed host 127.0.0.1 port 5000\n      protocol HTTP request /fitter_happier with checksum 15b8a1ee66d740fbfc00297684bb5430 then restart\n\nKeepalived/LVS\n==============\n\nYou can also do this in a keepalived/LVS setup:\n\n    virtual_server 169.254.y.z 80 {\n      delay_loop 15\n      lb_algo lc\n      lb_kind NAT\n      nat_mask 255.255.255.0\n      persistence_timeout 0\n      protocol TCP\n      sorry_server 127.0.0.1 80\n      virtualhost www.myfacetube.com\n      real_server 10.0.1.34 80 {\n        weight 1\n        HTTP_GET {\n          url {\n            path /fitter_happier\n            status_code 200\n          }\n          connect_port 80\n          connect_timeout 5\n          nb_get_retry 20\n          delay_before_retry 2\n        }\n      }\n      real_server 10.0.1.35 80 {\n        weight 1\n        HTTP_GET {\n          url {\n            path /fitter_happier\n            status_code 200\n          }\n          connect_port 80\n          connect_timeout 5\n          nb_get_retry 20\n          delay_before_retry 2\n        }\n      }\n    }\n\nCopyright (c) 2008 atmos, released under the MIT license\n"
my personal blog written with django 
Tools for processing credit cards on the command line b'Credit Card Tools\n=================\n\nThese are a set of ruby scripts for processing credit cards on the command\nline.\n\nSupported processors:\n\n  * PayPal (Business or Premier account required)\n\nRequirements\n------------\n\n  * RubyGems\n  * ActiveMerchant\n\nSetup\n-----\n\nCopy gateway.yml.example to gateway.yml and fill in the fields in that file.\n\nThere is one block for the "live" environment, where real credit cards are\ncharged, and one block for the "test" environment, which mocks everything\nthrough PayPal\'s Sandbox and no real money is exchanged.\n\nInstall ActiveMerchant::\n\n  gem install activemerchant\n\nIf the following files are not set executable, you should do::\n\n  chmod 755 charge.rb refund.rb\n\nUsage\n-----\n\nCommands:\n\n  * charge.rb\n  * refund.rb\n\nRun the commands without arguments to see the options.\n\nExample $1.00 charge::\n\n  ./charge.rb 1.00 4111111111111111 02/2012\n\nExample $1.00 refund::\n\n  ./refund.rb 1.00 2TL24258DY409104G\n\nThe second argument in the above example is the Auth ID of the original \ntransaction.\n\nThe output will be a nicely formatted response from PayPal.  The response is\nin YAML format, so you could do further processing with your own scripts \nrelatively easily.\n\nOther Processors\n----------------\n\nActiveMerchant supports a large list of credit card processors / gateways.\nTo use these tools with a gateway besides PayPal, modify gateway.rb to suit\nyour needs.  It should be relatively straight forward.\n\nSee: http://www.activemerchant.org\n\nAuthor\n------\n\nGarry C. Dolley\n\ngdolley [at] NOSPAM- ucla.edu\n\nAIM: garry97531\n\nIRC: I am up_the_irons in #ram, #git and #caboose on Freenode.\n\nCopyright\n---------\n\nCopyright (c) 2008 Garry C. Dolley\n\nThis is free software; you can redistribute it and/or modify it under the\nterms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any later \nversion.\n\nThis is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\ndetails.\n\nYou should have received a copy of the GNU General Public License along with\nthis software; if not, write to the Free Software Foundation, Inc., 51 Franklin\nStreet, Fifth Floor, Boston, MA  02110-1301, USA\n'
Rorem is a random data generator b"Rorem\n=====\n\nRorem is a random data generator that automatically fill Ruby classes with Random data, here's how:\n\n\n  class Car\n  \n    include Rorem::Model\n  \n    attr_accessor :brand, :seats, :owner_name, :owner_age, :special_car\n    \n  end\n  \n  Car.factory do |car|\n  \n    # all brands are equality likely\n    car.brand = random(%w(BMW Mercedes Volvo Jaguar))\n    \n    # assign probabilities to each value\n    car.seats = random([2, 4], :distribution => [0.2, 0.8])\n    \n    # use a normal distribution to describe probabilities\n    car.owner_age = random(18..70, :distribution => normal(40, 15))\n    \n    # generate a name from rorem's database of names\n    car.owner_name = random(:name\n    \n    # a deterministic value can be set\n    car.special_car false\n  \n  end\n  \n  c = Car.new\n  \n  c.fill\n  \n  c.brand #=> 'BMW'\n  c.seats #=> 4\n  c.owner_age #=> 27\n  c.owner_name #=> 'Allan Hernandez'\n  c.special_car #=> false\n  \nanother (more complex) example\n\n  class Employee\n  \n    include Rorem::Model\n    \n    attr_accessor :first_name, :last_name, :email, :employee_nr, :empolyee_id, :address, :city, :country\n  \n  end\n  \n  Employee.factory do\n  \n    c.employee_nr = sequence(:employee_nr, :start => 1)\n  \n    person = random(:person, :unique => true)\n    location = random(:location)\n  \n    c.first_name = person.first_name\n    c.last_name = person.last_name\n    c.email = person.email\n    c.address = location.address\n    c.city = location.city\n    c.country = location.country\n    \n    c.employee_id = c.first_name[1..3] + c.last_name[1..4] + c.employee_nr.to_s\n    \n  \n  \n  end\n\n"
Simple tool to help track vendor branches in a Git repository. b'# Braid\n\nBraid is a simple tool to help track vendor branches in a\n[Git](http://git-scm.com/) repository.\n\n## Motivation\n\nVendoring allows you take the source code of an external library and ensure it\'s\nversion controlled along with the main project. This is in contrast to including\na reference to a packaged version of an external library that is available in a\nbinary artifact repository such as Maven Central, RubyGems or NPM.\n\nVendoring is useful when you need to patch or customize the external libraries\nor the external library is expected to co-evolve with the main project. The\ndeveloper can make changes to the main project and patch the library in a single\ncommit.\n\nThe problem arises when the external library makes changes that you want to\nintegrate into your local vendored version or the developer makes changes to the\nlocal version that they want integrated into the external library.\n\nA typical "implementation" of vendoring is to simply download or checkout the\nsource for the external library, remove the `.git` or `.svn` directories and\ncommit it to the main source tree. However this approach makes it very difficult\nto update the library. When you want to update the library do you re-apply your\nlocal changes onto a new copy of the vendored library or do you re-apply the\nchanges from the external library to local version? Both cases involve manual\ngeneration and application of patch files to source trees.\n\nThis is where Braid comes into play. Braid makes it easy to vendor in remote git\nrepositories and use an automated mechanism for updating the external library\nand generating patches to upgrade the external library.\n\nBraid creates a file `.braids` in the root of your repository that contains\nreferences to external libraries or mirrors. There are two types of mirrors in\nBraid: squashed and full. Mirrors are squashed by default, which is what you\'ll\ngenerally want because they\'re faster and don\'t pollute your history with\ncommits from the mirrors.\n\nFull mirrors are useful when you want to view imported history in your own\nproject. You usually want this if the mirror is also a repository you have\naccess to, for example, when using shared code across projects.\n\nPlease note that you cannot change between mirror types after the initial add.\nYou\'ll have to remove the mirror and add it again.\n\n## Installation\n\n    gem install braid\n\n## Quick usage - ruby project\n\nLet\'s assume we\'re writing the project `myproject` that needs grit in lib/grit. Initialize the repo (nothing braid related here):\n\n    git init myproject\n    cd myproject\n    touch README\n    git add README\n    git commit -m "initial commit"\n\nNow let\'s vendor grit:\n\n    braid add git://github.com/mojombo/grit.git lib/grit\n\nAnd you\'re done! Braid vendored grit into lib/grit. Feel free to inspect the changes with git log or git show.\n\nIf further down the line, you want to bring new changes from grit into your repository, just update the mirror:\n\n    braid update lib/grit\n\nIf you make changes to the grit library and want to generate a patch file so that you can submit the patch file\nto the grit project:\n\n    braid diff lib/grit > grit.patch\n\nOnce those changes have been applied to grit you probably want to update your local version of grit again.\n\n    braid update lib/grit\n\n## More usage\n\nUse the built in help system to find out about all commands and options:\n\n    braid help\n    braid help add # or braid add --help\n\n### Examples\n\n#### Adding a mirror\n\n    braid add git://github.com/rails/rails.git vendor/rails\n\n#### Adding mirrors with revisions\n\n    braid add --revision bf1b1e0 git://github.com/rails/rails.git vendor/rails\n\n#### Adding mirrors with full history\n\n    braid add --full git://github.com/mislav/will_paginate.git vendor/plugins/will_paginate\n\n#### Updating mirrors\n\n    # Update a specific mirror\n    braid update vendor/plugins/cache_fu\n    # Update all mirrors\n    braid update\n\n#### Updating mirrors with conflicts\n\nIf a braid update creates a conflict, braid will stop execution and leave the partially committed\nfiles in your working copy, just like a normal git merge conflict would.\n\nYou will then have to resolve all conflicts and manually run `git commit`. The commit message is\nalready prepared.\n\nIf you want to cancel the braid update and the merge, you\'ll have to reset your working copy and\nindex with `git reset --hard`.\n\n#### Locking and unlocking mirrors\n\n    braid update --revision 6c1c16b vendor/rails\n    braid update --head vendor/rails\n\n#### Showing local changes made to mirrors\n\n    braid diff vendor/rails\n\n## Contributing\n\nWe appreciate any patches, error reports and usage ideas you may have. Please\nsubmit an issue or pull request on GitHub.\n\n### Subversion\n\nWhile preparing to release Braid v1.0 the support for subversion repositories was removed as\nthere was no active maintainers and inadequate test coverage. If there is anyone motivated to\nre-add and maintain the Subversion support, please contact the authors.\n\n# Authors\n\n* Cristi Balan\n* Norbert Crombach\n* Peter Donald\n\n## Contributors (alphabetically)\n\n* Alan Harper\n* Christoph Sturm\n* Dennis Muhlestein\n* Ferdinand Svehla\n* Michael Klishin\n* Roman Heinrich\n* Travis Tilley\n* Tyler Rick\n'
UploadColumn is no longer maintained, check out CarrierWave for an alternative b'= UploadColumn\n\nUploadColumn is a plugin for the Ruby on Rails framework that enables easy uploading of files, especially images.\n\nSuppose you have a list of users, and you would like to associate a picture to each of them. You could upload the image to a database, or you could use upload_column for simple storage to the file system.\n\nAssuming you have a User model with a column called \'picture\' that is of type String, you could simply add the upload_column instruction to your User model:\n\n    class User < ActiveRecord::Base\n      upload_column :picture\n    end\n\nThat\'s it! You can start uploading files. Of course, +upload_column+ has a lot of different options you can use to customize your uploads.\n\nUploading files is no fun without a user interface, so get going and make one:\n\nadd an upload_column_field to your form, maybe like this:\n\n    <p><label for="user_picture">Picture</label><br/>\n    <%= upload_column_field \'user\', \'picture\'  %></p>\n\nYou should use upload_column_field instead of Rails\' file_field, since it will work even when the form is redisplayed, like when a validation fails. Unfortunately file_field doesn\'t work in that case.\n\nNow that\'s excellent, but most likely it will fail, because instead of sending the file, it just sends a string. No worries though, if we just set the form\'s encoding to multipart it will all work out, UploadColumn even comes with some nice helpers to avoid that nasty multipart syntax. This could look something like this:\n\n    <%= upload_form_tag( :action => \'create\' ) %>\n\nAnd that\'s it! Your uploads are up and running (hopefully) and you should now be able to add pictures to your users. The madness doesn\'t stop there of course!\n\n== Storage Path\n\nYou won\'t always want to store the pictures in the directory that upload_column selects for you, but that\'s not a problem, because changing that directory is trivial. You can pass a <tt>:store_dir</tt> key to the upload_column declaration, this will override the default mechanism and always use that directory as the basis.\n\n    upload_column :picture, :store_dir => "pictures"\n    \nmight be sensible in our case. Note that this way, all files will be stored in the same directory.\n\nIf you need more refined control over the storage path (maybe you need to store it by the id of an association?) then you can use a proc instead. Our proc might look like this:\n\n    upload_column :picture, :store_dir => proc{|record, file| "images/#{record.category.name}/#{record.id}/#{file.extension}"}\n\nThe proc will be passed two parameters, the first is the current instance of your model class, the second is the name of the attribute that is being uploaded to (in our case +attr+ would be <tt>:picture</tt>).\n\nYou can change the <tt>:tmp_dir</tt> in the same way.\n\n== Filename\n\nBy default, UploadColumn will keep the name of the original file, however this might be inconvenient in some cases. You can pass a :filename directive to your upload_column declaration:\n\n    upload_column :picture, :filename => "donkey.png"\n    \nIn which case all files will be named +donkey.png+. This is not desirable if the file in question is a jpeg file of course. Usually it is more sensible to pass a Proc to :filename.\n\n    upload_column :picture, :filename => proc{|record, file| "avatar#{record.id}.#{file.extension}"}\n    \nThe Proc will be passed two parameters, the current instance, and the file itself.\n\n== Manipulators\n\nUploadColumn allows you to use manipulators on your file, that in some way transform your file, or perform any kind\nof operations on it. There are currently two manipulators bundled, the RMagick manipulator and the ImageScience\nmanipulator, but writing your own is very easy. There are further instructions on the website.\n\n== Manipulating Images with RMagick\n\nSay you would want (for whatever reason) to have a funky solarize effect on your users\' images. Manipulating images with upload_column can be done either at runtime or after the image is saved, let\'s look at some possibilities:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :manipulator => UploadColumn::Manipulators::RMagick\n      \n      def picture_after_assign\n        \n        picture.process! do |img|\n          img.solarize\n        end\n        \n      end\n    end\n\nYou can also use the :process instruction, which will automatically apply the manipulation when a new image is uploaded. If you wanted to resize your image to a maximum of 800 by 600 pixels for example, you could do:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :process => \'800x600\', :manipulator => UploadColumn::Manipulators::RMagick\n    end\n    \nthe previous example with solarize could be written shorter as:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :process => proc{|img| img.solarize }, :manipulator => UploadColumn::Manipulators::RMagick\n    end\n\nOr maybe we want different versions of our image, then we could simply specify:\n \n    class User < ActiveRecord::Base\n      upload_column :picture, :versions => [ :solarized, :sepiatoned ], :manipulator => UploadColumn::Manipulators::RMagick\n      \n      def picture_after_assign\n        picture.solarized.process! do |img|\n          img.solarize\n        end\n        picture.sepiatoned.process! do |img|\n          img.sepiatone\n        end\n      end\n    end\n    \nyou can also use a Hash for versions and pass a dimension or a proc to it, so you can do:\n\n    class User < ActiveRecord::Base\n      upload_column :picture, :versions => { :thumb => "c100x100", :large => "200x300", :sepiatoned => proc{ |img| img.sepiatone } }, :manipulator => UploadColumn::Manipulators::RMagick\n    end\n    \nNote the \'c\' in front of the dimensions for the thumb image, this will crop the image to the exact dimensions. All of this is a bit wordy though, and it also doesn\'t take check, that the files really are images. Sepiatoning the latest GreenDay song somehow doesn\'t sound too good. For that reason UploadColumn comes with the image_column function:\n\n    class User < ActiveRecord::Base\n      image_column :picture, :versions => { :thumb => "c100x100", :large => "200x300", :sepiatoned => proc{ |img| img.sepiatone } }\n    end\n\nThis also puts your images in public/images instead of public, which is neat!\n\n== Runtime rendering\n\nYou can manipulate images at runtime (it\'s a huge performance hit though!). In your controller add an action and use UploadColumnRenderHelper.render_image.\n\n    def sepiatone\n      @user = User.find(parms[:id])\n      render_image @user.picture do |img|\n        img.sepiatone\n      end\n    end\n    \nAnd that\'s it!\n\nIn your view, you can use UploadColumnHelper.image to easily create an image tag for your action:\n\n    <%= image :action => "sepiatone", :id => 5 %>\n    \n== Views\n\nIf your uploaded file is an image you would most likely want to display it in your view, if it\'s another kind of file you\'ll want to link to it. Both of these are easy using UploadColumn::BaseUploadedFile.url.\n\n    <%= link_to "Guitar Tablature", @song.tab.url %>\n    \n    <%= image_tag @user.picture.url %>\n\n== Magic Columns\n\nUploadColumn allows you to add \'magic\' columns to your model, which will be automatically filled with the appropriate data. Just add the column, for example via migrations:\n\n    add_column :users, :picture_content_type\n\nAnd if our model looks like this:\n\n    class User < ActiveRecord::Base\n      upload_column :picture\n    end\n\nThe column <tt>picture_content_type</tt> will now automatically be filled with the file\'s content-type (or at least with UploadColumn\'s best guess ;).\n\nYou can use any method method on UploadColumn::UploadedFile that takes no argument, so you can use for example, size, url, store_dir and so on.\n\nYou can also do <tt>picture_exif_date_time</tt> or <tt>picture_exif_model</tt>, etc. This works only, of course, if the uploaded file is a JPEG image, since that is the only filetype that has exif data. This requires the EXIFR library, which you can get by installing the gem via <tt>gem install exifr</tt>.\n      \n== Validations\n\nUploadColumn comes with its own validation method, validates_integrity_of. This method will ensure that only files with an extension from a whitelist will be uploaded. This prevents a hacker from uploading executable files (such as .rb, .pl or .cgi for example) or it can be used to restrict what kind of file are allowed to be uploaded, for example only images. You can customize the whitelist with the :extensions parameter to upload column.\n\nIf you want to only allow the upload of XHTML and XML files, so you can manipulate them with XSLT you could do:\n\n    upload_column :xml, :extensions => %w(xml html htm), :manipulator => MyXSLTProcessor\n\n\tvalidate_integrity_of :xml\n\nYou can also use some of Rails\' validations with UploadColumn.\n\nvalidates_presence_of and validates_size_of have been verified to work. \n\n    validates_size_of :image, :maximum => 200000, :message => "is too big, must be smaller than 200kB!"\n\nRemember to change the error message, the default one sounds a bit stupid with UploadColumn.\n\nvalidates_uniqueness_of does NOT work, this is because validates_uniqueness_of will send(:your_upload_column) instead of asking for the instance variable, thus it will get an UploadedFile object, which it can\'t really compare to other values in the database, this is rather difficult to work around without messing with Rails internals (if you manage, please let me know!). Meanwhile you could do\n\n    validates_each :your_upload_column do |record, attr, value|    \n      record.errors.add attr, \'already exists!\' if YourModel.find( :first, :conditions => ["#{attr.to_s} = ?", value ] )\n    end\n\nIt\'s not elegant I know, but it should work.\n'
Ruby on Rails TextMate bundle [master branch is svn trunk; patches to drnicwilliams@gmail.com] b'TextMate bundle for Ruby on Rails development\n\nGET IT NOW: with Rails 2.0 support.\n\nRails 2.0 (copied from CHANGELOG)\n\n* Snippets/Commands for:\n  * Tests\n    * assert_select (ass)\n    * assert_difference/assert_no_difference (asd/asnd)\n    * GET+POST test method stubs (defg+defp)\n  * Controllers\n    * respond_to (rst)\n    * REMOVED: render_component snippets\n    * loggers - pass a block instead of raw string to save time if logging not used (e.g. production) [thx Stephen Touset]\n    * redirect_to for resource paths (rep, repp, renp, renpp)\n    * render :update (ru) [thx Simon Jefford]\n  * Views\n    * form_for (ff)\n    * link_to for resource paths (lip, lipp, linp, linpp)\n    * <% end -%> (end)\n  * Models\n    * has_many :though (hmt)\n    * association snippets give better defaults (e.g. bt + hm)\n    * validates_format_of (vf,vfif) [thx Dean Strelau]\n  * Migrations\n    * Sexy Migrations now available as "t." snippets [thx Lawrence Pit]\n    * Migration classes have own textmate scope\n    * Add/Remove Columns - the \'down\' statements are in reverse order [thx Lawrence Pit, Daniel Kristensen]\n* Language/Syntax\n  * New keywords: rescue_from\n  * Added rb as a valid Rails file type [thx James Deville]\n* Commands\n  * html.erb is the default for new templates (backwards compatibility is being worked on too)\n* Plugins\n  * Footnote\n    * footnote-edge uses .erb for templates [thx Stephen Bannasch]\n\n'
OUTDATED mirror of Rack's darcs repository, use github.com/chneukirchen/rack b'= Rack, a modular Ruby webserver interface\n\nRack provides a minimal, modular and adaptable interface for developing\nweb applications in Ruby.  By wrapping HTTP requests and responses in\nthe simplest way possible, it unifies and distills the API for web\nservers, web frameworks, and software in between (the so-called\nmiddleware) into a single method call.\n\nThe exact details of this are described in the Rack specification,\nwhich all Rack applications should conform to.\n\n== Supported web servers\n\nThe included *handlers* connect all kinds of web servers to Rack:\n* Mongrel\n* EventedMongrel\n* WEBrick\n* FCGI\n* CGI\n* SCGI\n* LiteSpeed\n\nThese web servers include Rack handlers in their distributions:\n* Ebb\n* Fuzed\n* Thin\n\nAny valid Rack app will run the same on all these handlers, without\nchanging anything.\n\n== Supported web frameworks\n\nThe included *adapters* connect Rack with existing Ruby web frameworks:\n* Camping\n\nThese frameworks include Rack adapters in their distributions:\n* Coset\n* Halcyon\n* Maveric\n* Merb\n* Racktools::SimpleApplication\n* Ramaze\n* Sinatra\n* Vintage\n\nRuby on Rails can be run with the adapter included with Thin, which\nwill be merged into a later Rack version.\n\nCurrent links to these projects can be found at\nhttp://ramaze.net/#other-frameworks\n\n== Available middleware\n\nBetween the server and the framework, Rack can be customized to your\napplications needs using middleware, for example:\n* Rack::URLMap, to route to multiple applications inside the same process.\n* Rack::CommonLogger, for creating Apache-style logfiles.\n* Rack::ShowException, for catching unhandled exceptions and\n  presenting them in a nice and helpful way with clickable backtrace.\n* Rack::File, for serving static files.\n* ...many others!\n\nAll these components use the same interface, which is described in\ndetail in the Rack specification.  You can choose to use them exactly\nin the way you want.\n\n== Convenience\n\nIf you want to develop outside of existing frameworks, implement your\nown ones, or develop middleware, Rack provides many helpers to create\nRack applications quickly and without doing the same web stuff all\nover:\n* Rack::Request, which also provides query string parsing and\n  multipart handling.\n* Rack::Response, for convenient generation of HTTP replies and\n  cookie handling.\n* Rack::MockRequest and Rack::MockResponse for efficient and quick\n  testing of Rack application without real HTTP round-trips.\n\n== rackup\n\nrackup is a useful tool for running Rack applications, which uses the\nRack::Builder DSL to configure middleware and build up applications\neasily.\n\nrackup automatically figures out the environment it is run in, and\nruns your application as FastCGI, CGI, or standalone with Mongrel or\nWEBrick---all from the same configuration.\n\n== Quick start\n\nTry the lobster!\n\nEither with the embedded WEBrick starter:\n\n    ruby -Ilib lib/rack/lobster.rb\n\nOr with rackup:\n\n    bin/rackup -Ilib example/lobster.ru \n\nBy default, the lobster is found at http://localhost:9292.\n\n== Installing with RubyGems\n\nA Gem of Rack is available.  You can install it with:\n\n    gem install rack\n\nI also provide a local mirror of the gems (and development snapshots)\nat my site:\n\n    gem install rack --source http://chneukirchen.org/releases/gems\n\n== Running the tests\n\nTesting Rack requires the test/spec testing framework:\n\n    gem install test-spec\n\nThe full set of tests also test FCGI access with lighttpd so you will\nneed lighttpd installed as well as the FCGI libraries and the fcgi gem\ninstalled:\n\nDownload and install lighttpd:\n\n    http://www.lighttpd.net/download\n\nInstalling the FCGI libraries:\n\n    curl -O http://www.fastcgi.com/dist/fcgi-2.4.0.tar.gz\n    tar xzvf fcgi-2.4.0.tar.gz\n    cd fcgi-2.4.0\n    ./configure --prefix=/usr/local\n    make\n    sudo make install\n    cd ..\n\nInstalling the Ruby fcgi gem:\n\n    gem install fcgi\n\nThere are two rake-based test tasks:\n\n    rake test       tests all the fast tests (no Handlers or Adapters)\n    rake fulltest   runs all the tests\n\n== History\n\n* March 3rd, 2007: First public release 0.1.\n\n* May 16th, 2007: Second public release 0.2.\n  * HTTP Basic authentication.\n  * Cookie Sessions.\n  * Static file handler.\n  * Improved Rack::Request.\n  * Improved Rack::Response.\n  * Added Rack::ShowStatus, for better default error messages.\n  * Bug fixes in the Camping adapter.\n  * Removed Rails adapter, was too alpha.\n\n* February 26th, 2008: Third public release 0.3.\n  * LiteSpeed handler, by Adrian Madrid.\n  * SCGI handler, by Jeremy Evans.\n  * Pool sessions, by blink.\n  * OpenID authentication, by blink.\n  * :Port and :File options for opening FastCGI sockets, by blink.\n  * Last-Modified HTTP header for Rack::File, by blink.\n  * Rack::Builder#use now accepts blocks, by Corey Jewett.\n    (See example/protectedlobster.ru)\n  * HTTP status 201 can contain a Content-Type and a body now.\n  * Many bugfixes, especially related to Cookie handling.\n\n* XXX, 2008: Fourth public release 0.4.\n  * New Memcache sessions, by blink.\n  * Rack::Reloader is not loaded in rackup development mode.\n  * Many bugfixes, especially for pool sessions and URLMap.\n\n== Contact\n\nPlease mail bugs, suggestions and patches to\n<mailto:chneukirchen@gmail.com>.\n\nDarcs repository ("darcs send" is welcome for patches):\nhttp://chneukirchen.org/repos/rack\n\nYou are also welcome to join the #rack channel on irc.freenode.net.\n\n== Thanks to\n\n* blink for the Pool sessions, OpenID support, many tweaks, patches\n  and bugreports.\n* Michael Fellinger, for the helpful discussion, bugfixes and a better\n  Rack::Request interface.\n* Adrian Madrid, for the LiteSpeed handler.\n* Christoffer Sawicki, for the Rails adapter.\n* Tim Fletcher, for the HTTP authentication code.\n* Luc Heinrich for the Cookie sessions, the static file handler and bugfixes.\n* Armin Ronacher, for the logo and racktools.\n* Aredridel, for bug fixing.\n* Stephen Bannasch, for bug reports and documentation.\n* Gary Wright, for proposing a better Rack::Response interface.\n* Jonathan Buch, for improvements regarding Rack::Response.\n* Armin R\xc3\xb6hrl, for tracking down bugs in the Cookie generator.\n* Alexander Kellett for testing the Gem and reviewing the announce.\n* Marcus R\xc3\xbcckert, for help with configuring and debugging lighttpd.\n* The WSGI team for the well-done and documented work they\'ve done and\n  Rack builds up on.\n\n== Copyright\n\nCopyright (C) 2007, 2008 Christian Neukirchen <http://purl.org/net/chneukirchen>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n== Links\n\nRack:: <http://rack.rubyforge.org/>\nRack\'s Rubyforge project:: <http://rubyforge.org/projects/rack>\n\nCamping:: <http://camping.rubyforge.org/>\nRamaze:: <http://ramaze.rubyforge.org/>\nMaveric:: <http://maveric.rubyforge.org/>\nracktools:: <http://lucumr.pocoo.org/trac/repos/racktools/>\n\nChristian Neukirchen:: <http://chneukirchen.org/>\n\n'
(experimental) Mirror of the coset darcs repository 
JavaScript Unit Test TextMate Bundle [for prototype's unittest.js library] b"JavaScript Unit Testing TextMate bundle\n\nA set of snippets for using prototypejs' unittest.js test suite."
Engine Yard specific capistrano recipes b'# eycap [![Build Status](https://secure.travis-ci.org/engineyard/eycap.png)](http://travis-ci.org/engineyard/eycap)\n\n## Description\n\nThe Engine Yard capistrano tasks are for use specifically with Engine Yard Managed services.  But can be used as examples for building other tasks as well.\n\n## Requirements\n\n* [Capistrano](https://github.com/capistrano/capistrano) >= 2.2.0\n\n* NOTE: When using a git repository use Capistrano >= 2.5.3.\n\n## Install\n\nUse your `Gemfile` and `bundler` to both document and install the `eycap` gem to your application.  We also recommend the following gems to be configured along side `eycap`.  Add these to your `Gemfile`:\n\n```ruby\ngroup :development, :test do\n  gem \'eycap\', :require => false\n  gem \'capistrano\', \'~> 2.15\'\n  gem \'net-ssh\', \'~> 2.7.0\'\nend\n```\n\nThen run bundle install to install the `eycap` and other gem(s).\n\n    $ bundle install\n\nThen in your `deploy.rb` file you\'ll need to add the following require statement to the begininng of the file:\n\n```\nrequire "eycap/recipes"\n```\n\n## Usage\n\n### Configuration\n\nYour initial deploy.rb will be provided for you when your servers are provisioned on Engine Yard Managed.  In order to deploy your application, you can go to the `RAILS_ROOT` folder and run:\n\n    $ capify .\n\nThis generates the `Capfile` and the `config/deploy.rb` file for you.  You\'ll replace the `config/deploy.rb` file with the `deploy.rb` given to you by Engine Yard.\n\nFor deploying Rails 3.1 or greater apps using the [asset pipeline](https://github.com/engineyard/eycap/wiki/Asset-Pipeline) read more on the linked page.\n\n### Setup restart server\n\nMongrel is the default server, to override this default you\'ll need to define the following in your `deploy.rb` file:\n\n```ruby\nnamespace :deploy do\n\n  task :restart, :roles => :app do\n    # mongrel.restart\n  end\n\n\n  task :spinner, :roles => :app do\n    # mongrel.start\n  end\n\n\n  task :start, :roles => :app do\n    # mongrel.start\n  end    \n  \n\n  task :stop, :roles => :app do\n    # mongrel.stop\n  end\n  \nend\n```\n\nReplace the commented out with your server (passenger, unicorn, thin, puma, etc.) and then it will override the default of mongrel.\n\n### Deploying to Environment\n\nTo ensure your environments are ready to deploy, check on staging.\n\n    $ cap staging deploy:check\n\nThis will determine if all requirements are met to deploy.  Sometimes if the default folders are not setup you may be able to repair by running:\n\n    $ cap staging deploy:setup\n\nIf you cannot get `deploy:check` to pass, please open a [new support ticket](https://support.cloud.engineyard.com/tickets/new) and let us know.\n\nNow you\'re ready to do a test deploy.\n\nOptionally, `cap deploy:cold` will run your migrations and start (instead of restart) your app server.\n\n    $ cap staging deploy:cold\n\nOr if you have already dumped a copy of your data to staging or do not want to run migrations you can simply do a deploy.\n\n    $ cap staging deploy\n\nAnd to do all this on production, just change the environment name and you\'ll be all set.\n\n    $ cap production deploy\n\n## Eycap Commands\n\nFor a list of all available commands, run:\n\n    $ cap -T\n\nThis will show you not only the default capistrano commands but also the ones you get by including the eycap gem.\n\n## Custom binaries path\n\nIn rare cases (`unicorn` / `sphinx`) it is required to set custom path for binaries when using\ndevelopment versions of scripts. It is as easy as:\n\n```ruby\nset :engineyard_bin, "/engineyard/custom"\n```\n\nThe default is `/engineyard/bin` and is just fine in normal deployment.\n\n## Pull Requests\n\nIf you\'d like to contribute to the eycap gem please create a fork, then send a pull request and a member of the eycap team will review it.\n\n## Issues\n\nWhen you run into a problem please check the [issues](/issues) to see if one has been reported.  If not, please report the issue and we\'ll get to work on fixing it.\n\n## License\n\nCopyright (c) Engine Yard\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
basic darcsum feelalike for Git b"= gitsum.el --- basic darcsum feelalike for Git\n\nCopyright (C) 2008  Christian Neukirchen <purl.org/net/chneukirchen>\nLicensed under the same terms as Emacs.\n\nGitsum provides a mode to do interactive partial commits with Emacs.\nRun `M-x gitsum' inside a Git repository and kill everything you don't\nwant to commit with `k'.  You can navigate easily between hunks with\n`n' and `p' and between files with `N' and `P'.  A whole file can be\nkilled with `K'.  If you want to refine the patch, you can split it\nwith `C-c C-s'.  If you toggle read-only with `C-x C-q', you can edit\neverything freely (be careful!).\n\nIf you are ready, commit the patch with `C-c C-c' or just `c'.\nEnter the message and press `C-c C-c' again.\n\nN.B: If you want to add files in the commit, use `M-x git-status' from\ngit.el, add the files with `a', then switch to gitsum with `s'.  You\ncan only add files as a whole.  You need git.el from the git\nrepository then.\n\n\nRepository: http://github.com/chneukirchen/gitsum\n             git://github.com/chneukirchen/gitsum.git\nPatches to: chneukirchen@gmail.com\n"
Sequel::Model (No longer working on this project) b'== Sequel: Concise ORM for Ruby\n\nSequel is an ORM framework for Ruby. Sequel provides thread safety, connection pooling, and a concise DSL for constructing queries and table schemas.\n\nSequel makes it easy to deal with multiple records without having to break your teeth on SQL.\n\n== Resources\n\n* {Project page}[http://code.google.com/p/ruby-sequel/]\n* {Source code}[http://ruby-sequel.googlecode.com/svn/]\n* {Bug tracking}[http://code.google.com/p/ruby-sequel/issues/list]\n* {Google group}[http://groups.google.com/group/sequel-talk]\n* {RubyForge page}[http://rubyforge.org/projects/sequel/]\n\nTo check out the source code:\n  \n  svn co http://ruby-sequel.googlecode.com/svn/trunk\n  \n=== Contact\n\nIf you have any comments or suggestions please send an email to ciconia at gmail.com and I\'ll get back to you.\n\n== Installation\n\n  sudo gem install sequel\n  \n== Supported Databases\n\nSequel currently supports:\n\n* ADO (on Windows)\n* DBI\n* Informix\n* MySQL\n* ODBC\n* Oracle\n* PostgreSQL\n* SQLite 3\n\nThere are also experimental adapters for DB2, OpenBase and JDBC (on JRuby).\n\n== The Sequel Console\n\nSequel includes an IRB console for quick\'n\'dirty access to databases. You can use it like this:\n\n  sequel sqlite:///test.db\n\nYou get an IRB session with the database object stored in DB.\n\n== An Introduction\n\nSequel was designed to take the hassle away from connecting to databases and manipulating them. Sequel deals with all the boring stuff like maintaining connections, formatting SQL correctly and fetching records so you can concentrate on your application.\n\nSequel uses the concept of datasets to retrieve data. A Dataset object encapsulates an SQL query and supports chainability, letting you fetch data using a convenient Ruby DSL that is both concise and infinitely flexible.\n\nFor example, the following one-liner returns the average GDP for the five biggest countries in the middle east region:\n\n  DB[:countries].filter(:region => \'Middle East\').reverse_order(:area).limit(5).avg(:GDP)\n  \nWhich is equivalent to:\n\n  SELECT avg(GDP) FROM countries WHERE region = \'Middle East\' ORDER BY area DESC LIMIT 5\n\nSince datasets retrieve records only when needed, they can be stored and later reused. Records are fetched as hashes (they can also be fetched as custom model objects), and are accessed using an Enumerable interface:\n\n  middle_east = DB[:countries].filter(:region => \'Middle East\')\n  middle_east.order(:name).each {|r| puts r[:name]}\n  \nSequel also offers convenience methods for extracting data from Datasets, such as an extended map method:\n\n  middle_east.map(:name) #=> [\'Egypt\', \'Greece\', \'Israel\', ...]\n  \nOr getting results as a transposed hash, with one column as key and another as value:\n\n  middle_east.to_hash(:name, :area) #=> {\'Israel\' => 20000, \'Greece\' => 120000, ...}\n\nMuch of Sequel is still undocumented (especially the part relating to model classes). The following section provides examples of common usage. Feel free to explore...\n\n== Getting Started\n\n=== Connecting to a database\n\nTo connect to a database you simply provide Sequel with a URL:\n\n  require \'sequel\'\n  DB = Sequel.open \'sqlite:///blog.db\'\n  \nThe connection URL can also include such stuff as the user name and password:\n\n  DB = Sequel.open \'postgres://cico:12345@localhost:5432/mydb\'\n\nYou can also specify optional parameters, such as the connection pool size, or a logger for logging SQL queries:\n\n  DB = Sequel.open("postgres://postgres:postgres@localhost/my_db",\n    :max_connections => 10, :logger => Logger.new(\'log/db.log\'))\n\n=== Arbitrary SQL queries\n\n  DB.execute("create table t (a text, b text)")\n  DB.execute("insert into t values (\'a\', \'b\')")\n\nOr more succinctly:\n\n  DB << "create table t (a text, b text)"\n  DB << "insert into t values (\'a\', \'b\')"\n\n=== Getting Dataset Instances\n\nDataset is the primary means through which records are retrieved and manipulated. You can create an blank dataset by using the dataset method:\n\n  dataset = DB.dataset\n\nOr by using the from methods:\n\n  posts = DB.from(:posts)\n\nYou can also use the equivalent shorthand:\n\n  posts = DB[:posts]\n\nNote: the dataset will only fetch records when you explicitly ask for them, as will be shown below. Datasets can be manipulated to filter through records, change record order and even join tables, as will also be shown below.\n\n=== Retrieving Records\n\nYou can retrieve records by using the all method:\n\n  posts.all\n\nThe all method returns an array of hashes, where each hash corresponds to a record.\n\nYou can also iterate through records one at a time:\n\n  posts.each {|row| p row}\n\nOr perform more advanced stuff:\n\n  posts.map(:id)\n  posts.inject({}) {|h, r| h[r[:id]] = r[:name]}\n  \nYou can also retrieve the first record in a dataset:\n\n  posts.first\n  \nOr retrieve a single record with a specific value:\n\n  posts[:id => 1]\n  \nIf the dataset is ordered, you can also ask for the last record:\n\n  posts.order(:stamp).last\n  \n=== Filtering Records\n\nThe simplest way to filter records is to provide a hash of values to match:\n\n  my_posts = posts.filter(:category => \'ruby\', :author => \'david\')\n  \nYou can also specify ranges:\n\n  my_posts = posts.filter(:stamp => (2.weeks.ago)..(1.week.ago))\n  \nOr lists of values:\n\n  my_posts = posts.filter(:category => [\'ruby\', \'postgres\', \'linux\'])\n  \nSequel now also accepts expressions as closures, AKA block filters:\n\n  my_posts = posts.filter {:category == [\'ruby\', \'postgres\', \'linux\']}\n  \nWhich also lets you do stuff like:\n\n  my_posts = posts.filter {:stamp > 1.month.ago}\n  \nSome adapters (like postgresql) will also let you specify Regexps:\n\n  my_posts = posts.filter(:category => /ruby/i)\n  \nYou can also use an inverse filter:\n\n  my_posts = posts.exclude(:category => /ruby/i)\n\nYou can then retrieve the records by using any of the retrieval methods:\n\n  my_posts.each {|row| p row}\n  \nYou can also specify a custom WHERE clause:\n\n  posts.filter(\'(stamp < ?) AND (author <> ?)\', 3.days.ago, author_name)\n\nDatasets can also be used as subqueries:\n\n  DB[:items].filter(\'price > ?\', DB[:items].select(\'AVG(price) + 100\'))\n\n=== Summarizing Records\n\nCounting records is easy:\n  posts.filter(:category => /ruby/i).count\n\nAnd you can also query maximum/minimum values:\n  max_value = DB[:history].max(:value)\n  \nOr calculate a sum:\n  total = DB[:items].sum(:price)\n  \n=== Ordering Records\n\n  posts.order(:stamp)\n  \nYou can also specify descending order\n\n  posts.order(:stamp.DESC)\n\n=== Deleting Records\n\n  posts.filter(\'stamp < ?\', 3.days.ago).delete\n  \n=== Inserting Records\n\n  posts.insert(:category => \'ruby\', :author => \'david\')\n  \nOr alternatively:\n\n  posts << {:category => \'ruby\', :author => \'david\'}\n  \n=== Updating Records\n\n  posts.filter(\'stamp < ?\', 3.days.ago).update(:state => \'archived\')\n\n=== Joining Tables\n\nJoining is very useful in a variety of scenarios, for example many-to-many relationships. With Sequel it\'s really easy:\n\n  order_items = DB[:items].join(:order_items, :item_id => :id).\n    filter(:order_items__order_id => 1234)\n  \nThis is equivalent to the SQL:\n\n  SELECT * FROM items LEFT OUTER JOIN order_items\n  ON order_items.item_id = items.id \n  WHERE order_items.order_id = 1234\n\nYou can then do anything you like with the dataset:\n\n  order_total = order_items.sum(:price)\n  \nWhich is equivalent to the SQL:\n\n  SELECT sum(price) FROM items LEFT OUTER JOIN order_items\n  ON order_items.item_id = items.id\n  WHERE order_items.order_id = 1234\n  \n'
Ruby process monitor b"god\n    by Tom Preston-Werner\n       Kevin Clark (kqueue/netlink support)\n       \n    http://god.rubyforge.org\n\n== DESCRIPTION:\n  \nGod is an easy to configure, easy to extend monitoring framework written \nin Ruby.\n\nKeeping your server processes and tasks running should be a simple part of \nyour deployment process. God aims to be the simplest, most powerful \nmonitoring application available.\n\n== DOCUMENTATION:\n\nSee online documentation at http://god.rubyforge.org\n\n== COMMUNITY:\n\nSign up for the god mailing list at http://groups.google.com/group/god-rb\n\n== INSTALL:\n\n  $ sudo gem install god\n  \n== CONTRIBUTE:\n\nLatest code is available at http://github.com/mojombo/god\n\nThe 'master' branch can be cloned with:\n\n  $ git clone git://github.com/mojombo/god.git\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 Tom Preston-Werner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
blerb running on merb-core b'= Welcome to Blerb!\n\n== Installation\n  * from your working directory, say ~/code/, clone the blerb repository:\n  * git clone git://github.com/hornbeck/blerb-core.git - anon checkout\n  * git clone git@github.com:hornbeck/blerb-core.git   - commit access\n  * cd blerb-core\n  * use script/install to update or install merb-* in the parent directory (e.g. ~/code/merb-core/):\n  * script/install_merb\n  * cp config/database.sample.yml config/database.yml\n  * fill in the correct database credentials\n  * cp config/settings.sample.yml config/settings.yml\n  * fill in the correct blog settings\n  * rake dm:auto_migrate\n  * to start a webserver, run the merb command:\n  * merb\n\nBlerb should now be running on port 4000, so open up your browser and visit localhost:4000!\n\n== Dependencies (versions tested)\n\n\nmerb-core         (0.9)\nmerb-more         (0.9.0)\nmerb-action-args  (0.9.0)\nmerb-assets       (0.9.0)\nmerb-mailer       (0.9.1)\nmerb-test         (0.9.0)\nmerb_datamapper   (0.9.0)\nmerb_helpers      (0.9.0)\nmerb_rspec        (0.9.0)\ndatamapper        (0.3.0)\nrspec             (1.1.3)\ndo_yourdbhere     (varies)\n\n'
utilities for implementing a modified pre-order traversal tree in django b'===========\nDjango MPTT\n===========\n\nUtilities for implementing Modified Preorder Tree Traversal with your\nDjango Models and working with trees of Model instances.\n\nFor installation instructions, see the file "INSTALL" in this\ndirectory; for instructions on how to use this application, and on what\nit provides, see the file "overview.txt" in the "docs/" directory.\n'
a Scheme written in Ruby, but implemented on the bus! b'= Bus Scheme\n    by Phil Hagelberg (c) 2007 - 2008\n    http://bus-scheme.rubyforge.org\n\n== Description\n\nBus Scheme is a Scheme written in Ruby, but implemented on the bus!\nEvery programmer must implement Scheme as a rite of passage; this is\nmine. Note that at least half of the implementation of Bus Scheme must\nbe written while on a bus. Documentation, tests, and administrivia may\nbe accomplished elsewhere, but the majority of actual implementation\ncode is strictly bus-driven. Bus Scheme is primarily a toy; using it\nfor anything serious is (right now) ill-advised.\n\nBus Scheme aims for general Scheme usefulness optimized for learning\nand fun. It\'s loosely targeting R5RS, but varies in huge ways. (For\nthe purposes of this project we pretend that R6RS never happened.) See\nthe file R5RS.diff for ways in which Bus Scheme differs from the\nstandard, both things that are yet unimplemented and things that are\nintentionally different.\n\n== Usage\n\n$ bus # drop into the REPL\n\n$ bus -e "(do some stuff)"\n\n$ bus foo.scm # load a file\n\n== Tutorial\n\nSee http://technomancy.us/104 for a "Getting Started" tutorial.\n\n== Contributing\n\nIf you\'re looking for stuff to do, try "rake todo"\n\nPatches are welcome especially if they were written while riding a\nbus. If your daily commute does not involve a bus but you want to\nsubmit a patch, we may be able to work something out regarding code\nwritten on trains, ferries, or perhaps even carpool lanes.\n\nJoin the mailing list to ask questions and discuss:\nhttp://rubyforge.org/mail/?group_id=5094\n\n== What makes Bus Scheme different?\n\nWell, for starters it\'s implemented on the bus. No other Scheme\nimplementation can claim this. Here are a few other things that set\nBus Scheme apart:\n\n=== Flexible calling syntax\n\nTaking a hint from Arc, Bus Scheme allows you to use the notation\n(mylist n) to access the nth place of the mylist list instead of (nth\nmylist n) or the (myhash key) notation to access the slot in myhash\ncorresponding to the value of key instead of (gethash myhash key). \nTODO: This notation is flexible, and other data types may have\ntheir own "call behaviour" specified.\n\n=== Web functionality\n\nPlanned: Web and RESTful application development are part of the\npackage. Bus Scheme uses the Rack library to allow scheme programs to\nserve web applications. Representations of data can be easily\ntranslated between s-expressions, HTML, and JSON.\n\n=== Written in a high-level language\n\nBus Scheme is written in Ruby, which means anyone with experience in\nhigh-level dynamic languages (like, oh, I don\'t know... Scheme?)\nshould be right at home poking around at the implementation. Using\nRuby allows the implementation code to remain compact and concise. Bus\nScheme should run on Ruby 1.8, Ruby 1.9, Rubinius, and JRuby at\nleast. Bus Scheme also allows you to drop into Ruby when that\'s\nconvenient. TODO: allow real inline Ruby blocks instead of access via\na function call.\n\n=== Test-Driven\n\nBus Scheme is written in an entirely test-driven manner. As much as\npossible, it tries to keep its tests written in Scheme itself, so it\nincludes a fairly comprehensive testing suite and encourages programs\nto be written test-first.\n\n== Install\n\n* sudo gem install bus-scheme\n\nFor the source:\n\n* git clone git://github.com/technomancy/bus-scheme.git\n\n== Todo\n\nBus Scheme is currently missing pieces of functionality:\n\n=== Parser\n* multiline strings\n* regular expressions\n\n=== General\n* filter stacktrace\n* continuations\n* macros\n\nFailing tests for some of these are already included (commented out,\nmostly) in the relevant test files.\n\n=== Long Term (post 1.0)\n* web functions (defresource and friends)\n* (lambda (arg1 arg2 . args) body) for rest args\n* string interpolation\n* escape sequences in strings\n* Ruby blocks inline?\n* XML literals?\n* optimize tail call recursion\n* compile to Rubinius bytecode\n* custom call behaviour\n* parse non-decimal base numbers\n* parse rationals, scientific, complex, and polar complex numbers\n\n== Requirements\n\nBus Scheme should run on (at least) Ruby 1.8, Ruby 1.9, Rubinius,\nJRuby. Any support for Windows is entirely accidental.\n\n== Bonus Fact\n\nI haven\'t actually used a real Scheme yet. Everything I know about it\nI\'ve gathered from reading The Little Schemer, watching the Structure\nand Interpretation of Computer Programs videos, and reading lots about\nCommon Lisp and Emacs Lisp. If there are huge gaping flaws in the\nimplementation, this is likely to be why.\n'
Useful pieces of JavaScript.  Some old, some new. 
Ruby parsers for some Adobe file formats. b"This code is OLD and may not work AT ALL anymore.  It was a crazy idea I had way back when.  \nAt one point in time it used to workto some extent.  It parses Photoshop Brush (ABR) files and \ngenerates PNG images.  It could also extract color information from color palette files.\n\nJust figured I'd Open Source it since I'm no longer doing anything with it and someone, somewhere \nmight find it useful.\n\nUse it under an MIT LICENSE"
Easy and customizable generation of forged data. b'Forgery\n=======\n\n[![Build Status](https://travis-ci.org/sevenwire/forgery.png)](https://travis-ci.org/sevenwire/forgery)\n[![Code Climate](https://codeclimate.com/github/sevenwire/forgery.png)](https://codeclimate.com/github/sevenwire/forgery)\n\n\n**A Problem**:\nIt\'s harder than *absolutely easy* to make meaningful, simple, data for testing and development.\n\n**A Solution**:\nA fake data generator that provides not only a host of basics and a rememberable syntax, but a customizable library to boot.\n\nWelcome to Forgery, an excellent solution to a problem so hard you didn\'t know it was there.\n\n\nUsing\n-----\n\nYou\'ll want to read individual Forgery categories for more information, but these are the basics:\n\n```ruby\nForgery(:basic).password\n  #=> "b6qZTQEH"\n\nForgery(:internet).email_address\n  #=> "krainboltgreene@crt.net"\n\nForgery(:monetary).money\n  #=> "1.58"\n\nForgery(:lorem_ipsum).words(10)\n  #=> "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam egestas."\n\nForgery(:monetary).formatted_money :min => 100, :max => 1000\n  #=> "$923.36"\n```\n\nAnd many many more!\n\nAlternatively you can write it like this: \n\n```ruby\nForgery::Basic.hex_color\nForgery::Name.full_name\nForgery::Personal.shirt_size\n```\n\nIn addition, you can always write your own dictionaries and formats, overriding the ones in the gem.\nFully explained here.\n\n\nInstalling\n----------\n\nLike any gem, you can install Forgery two ways depending on it\'s use.\n\nFor normal Ruby development, you need simply use:\n\n```bash\n$ gem install forgery\n```\n\nThis will add it to your gem library, just like any normal gem.\nYou can then use it like any normal gem library.\nSee examples for more.\n\n\n**Rails 3.x**\n\nIf you\'re using Rails 3.x you need to do a few extra things (that are probably rote).\nFirst step is to add it to your `Rails.root/Gemfile`, we also suggest specifying the latest version (found on rubygems):\n\n```ruby\ngem \'forgery\', \'0.6.0\'\n```\n\nThen you\'ll need to run `bundle install` to install and lock in your new gem.\nNext you\'ll want to run the special Rails 3 generator:\n\n```\n$ [bundle exec] rails generate forgery\n```\n\n**Rails 2.x**\n\nFor **Rails 2.x** you\'ll need to do something a little different, by first editing your `Rails.root/config/environment.rb` and adding this to the configuration block:\n\n```ruby\nconfig.gem \'forgery\'\n```\n\nThen you\'ll need to run this in your command line:\n\n```bash\n$ script/generate forgery\n```\n\n**Generators**\n\nThis Rails generators will make these directories in your Rails.root directory:\n\n- Rails.root/lib/forgery\n- Rails.root/lib/forgery/dictionaries\n- Rails.root/lib/forgery/extensions\n- Rails.root/lib/forgery/forgeries\n- Rails.root/lib/forgery/formats\n\nYou can then use these directories to write your own dictionaries, class extensions, forgeries, and formats.\n\nFull List of methods:\n--------------------\n\nMethod                                          | Example Output\n:------------------------------                 |:----------------\n`Forgery(\'address\').city`                       | Loomis\n`Forgery(\'address\').continent`                  | South America\n`Forgery(\'address\').country`                    | Cameroon\n`Forgery(\'address\').phone`                      | +1 (693) 901-4549\n`Forgery(\'address\').province`                   | Alberta\n`Forgery(\'address\').province_abbrev`            | NT\n`Forgery(\'address\').state`                      | Alabama\n`Forgery(\'address\').state_abbrev`               | SC\n`Forgery(\'address\').street_address`             | 21 Hayes Park\n`Forgery(\'address\').street_name`                | Oneill\n`Forgery(\'address\').street_number`              | 222\n`Forgery(\'address\').street_suffix`              | Drive\n`Forgery(\'address\').zip`                        | 11281-5568\n                                                |\n`Forgery(\'basic\').boolean`                      | `true` (`TrueClass`)\n`Forgery(\'basic\').color`                        | Red\n`Forgery(\'basic\').encrypt`                      | fc0d835dd4e4df144a33a6a346298b0f23dcd14a\n`Forgery(\'basic\').frequency`                    | Never\n`Forgery(\'basic\').hex_color`                    | #e1d82a\n`Forgery(\'basic\').number`                       | 4\n`Forgery(\'basic\').password`                     | KcLBHCv6\n`Forgery(\'basic\').short_hex_color`              | #c1d\n`Forgery(\'basic\').text`                         | G8gECFfvDs2\n                                                |\n`Forgery(\'credit_card\').check_digit(number)`    | 5\n`Forgery(\'credit_card\').number`                 | 343682330855371\n`Forgery(\'credit_card\').type`                   | American Express\n`Forgery(\'currency\').code`                      | XPF\n`Forgery(\'currency\').description`               | Austria Schillings\n                                                |\n`Forgery(\'date\').date`                          | Fri, 20 Mar 2009 (`Date`)\n`Forgery(\'date\').day`                           | 15\n`Forgery(\'date\').day_of_week`                   | Monday\n`Forgery(\'date\').delta(options)`                | 3\n`Forgery(\'date\').month`                         | January\n`Forgery(\'date\').year`                          | 1994\n                                                |\n`Forgery(\'email\').address`                      | gsmith@kamba.org\n`Forgery(\'email\').body`                         | Lorem ipsum dolor sit amet, consectetuer ...\n`Forgery(\'email\').subject`                      | Lorem Ipsum Dolor Sit Amet...\n                                                |\n`Forgery(\'geo\').latitude`                       | -8.095096815540515 (`Float`)\n`Forgery(\'geo\').latitude_degrees`               | -49\n`Forgery(\'geo\').latitude_direction`             | N\n`Forgery(\'geo\').latitude_minutes`               | 14\n`Forgery(\'geo\').latitude_seconds`               | 45\n`Forgery(\'geo\').longitude`                      | -22.56746406884514 (`Float`)\n`Forgery(\'geo\').longitude_degrees`              | 100\n`Forgery(\'geo\').longitude_direction`            | W\n`Forgery(\'geo\').longitude_minutes`              | 47\n`Forgery(\'geo\').longitude_seconds`              | 41\n                                                |\n`Forgery(\'internet\').cctld`                     | cf\n`Forgery(\'internet\').domain_name`               | bubbletube.net\n`Forgery(\'internet\').email_address`             | cwalker@quire.name\n`Forgery(\'internet\').email_subject`             | Lorem Ipsum Dolor Sit Amet...\n`Forgery(\'internet\').ip_v4`                     | 94.120.51.103\n`Forgery(\'internet\').ip_v6`                     | c61e:5926:15e6:d225:8eef:fb39:7412:e9d5\n`Forgery(\'internet\').top_level_domain`          | com\n`Forgery(\'internet\').user_name`                 | sdixon\n                                                |\n`Forgery(\'lorem_ipsum\').character`              | l\n`Forgery(\'lorem_ipsum\').characters`             | lorem ipsu\n`Forgery(\'lorem_ipsum\').lorem_ipsum_characters` | lorem ipsum dolor sit amet...\n`Forgery(\'lorem_ipsum\').lorem_ipsum_words`      | ["lorem", "ipsum", "dolor", ...] (`Array`)\n`Forgery(\'lorem_ipsum\').paragraph`              | Lorem ipsum dolor sit amet...\n`Forgery(\'lorem_ipsum\').paragraphs`             | Lorem ipsum dolor sit amet...\n`Forgery(\'lorem_ipsum\').range_from_quantity(quantity)` | 0..4 (`Range`)\n`Forgery(\'lorem_ipsum\').sentence`               | Lorem ipsum dolor sit amet...\n`Forgery(\'lorem_ipsum\').sentences`              | Lorem ipsum dolor sit amet...\n`Forgery(\'lorem_ipsum\').text`                   | Lorem ipsum dolor sit amet...\n`Forgery(\'lorem_ipsum\').title`                  | Lorem Ipsum Dolor Sit Amet...\n`Forgery(\'lorem_ipsum\').word`                   | lorem\n`Forgery(\'lorem_ipsum\').words`                  | lorem ipsum dolor sit amet...\n                                                |\n`Forgery(\'monetary\').formatted_money`           | $5.49\n`Forgery(\'monetary\').money`                     | 9.20 (`String`)\n                                                |\n`Forgery(\'name\').company_name`                  | Bubbletube\n`Forgery(\'name\').female_first_name`             | Judy\n`Forgery(\'name\').first_name`                    | Albert\n`Forgery(\'name\').full_name`                     | Evelyn Wallace\n`Forgery(\'name\').industry`                      | Toy & Hobby Stores\n`Forgery(\'name\').job_title`                     | Analyst Programmer\n`Forgery(\'name\').job_title_suffix`              | III\n`Forgery(\'name\').last_name`                     | Jackson\n`Forgery(\'name\').location`                      | Try-N-Save\n`Forgery(\'name\').male_first_name`               | Donald\n`Forgery(\'name\').suffix`                        | Sr\n`Forgery(\'name\').title`                         | Mr\n                                                |\n`Forgery(\'personal\').abbreviated_gender`        | F\n`Forgery(\'personal\').gender`                    | Female\n`Forgery(\'personal\').language`                  | Bislama\n`Forgery(\'personal\').race`                      | Indonesian\n`Forgery(\'personal\').shirt_size`                | 2XL\n                                                |\n`Forgery(\'russian_tax\').account_number`         | 56335652786612121479\n`Forgery(\'russian_tax\').bik`                    | 046533860\n`Forgery(\'russian_tax\').inn`                    | 7366543467\n`Forgery(\'russian_tax\').legal_inn`              | 7822838630\n`Forgery(\'russian_tax\').legal_ogrn`             | 3483465598635\n`Forgery(\'russian_tax\').ogrn`                   | 666325227817763\n`Forgery(\'russian_tax\').person_inn`             | 451559765443\n`Forgery(\'russian_tax\').person_ogrn`            | 195478617554621\n                                                |\n`Forgery(\'time\').zone`                          | Amsterdam (`String`)\n\n\nContributing\n------------\n\nThis is a work in progress and an open source project, so feel free to contribute.\nWe\'ll take pull requests via git or suggestions via the issues tab.\nAny work done on Forgery will get you into the credits list and in our hearts.\n\n\nCredits\n-------\n\nThanks to the authors and contributors:\n\n* Nate Sutton (nate aka fowlduck)\n* Brandon Arbini (brandonarbini)\n* Josh Nichols (technicalpickles)\n* Jeremy Stephens (viking aka crookshanks)\n* Darcy Laycock (Sutto)\n* Lukas Westermann (lwe)\n* Mike Dungan\n* Andrew Selder (aselder)\n* Thomas Sinclair (anathematic)\n* Stafford Brunk (wingrunr21)\n* SixArm (SixArm)\n* Akira Matsuda (amatsuda)\n* Diego Plentz (plentz)\n* Gabe Berke-Williams (gabebw)\n* Todd Mazierski (toddmazierski)\n\n\nLicensing\n---------\n\nCopyright (c) 2007 Sevenwire LLC\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nOn that note, have fun!\n'
Ambition adapter for Sphinx b"= An Ambitious Sphinx Adapter\n\nI don't know about you, but I like me some sexy full-text searching.\n\n== The basics\n\nWant to find all meals that mention bacon?\n\n  Meal.select {'bacon'}\n\nWhat about bacon bits and sour cream?\n\n  Meal.select {'bacon bits' && 'sour cream'}\n\nMaybe with bacon in the name, or cheese in the recipe?\n\n  Meal.select {|m| m.name =~ 'bacon' || m.recipe =~ 'cheese'}\n\nCheese in the name, but not grilled?\n\n  Meal.select {|m| m.name =~ 'bacon' && m.name !~ 'grilled'}\n\n== Pagination\n\nYou're going to want to use pagination. Ultrasphinx, the underlying library, only supports it, as in, you can't just get all the objects matching your query. You _have_ to use paging.\n\nIt's pretty simple:\n\n  Meal.select {'bacon'}.page(2)\n  Meal.select {'bacon'}.page(3)\n\n== Big honking disclaimer\n\nWe're still learning a lot about how sphinx and ambition work, so things are likely to change a lot, and features are likely to be missing.\n\n== Getting Started\n\n\n=== Installing\n\n  sudo gem install ambitious-sphinx\n  \n=== Add it to your app\n    \nRequire our files somewhere, like at the end of config/environment.rb, maybe create config/initializers/sphinx.rb\n\n  require 'ultrasphinx'\n  require 'ambition/adapters/ambitious_sphinx'\n  \n=== Sphinx and Ultrasphinx\n    \nYou will also need to go through the motions of setting up ultrasphinx.\n\nThis includes:\n\n * Configuring/installing sphinx\n * Modifying your model to indicate what's to be indexed\n * Bootstrapping ultrasphinx\n \nAll this is discussed in detail in ultrasphinx's README\n\n== Playing with the code base\n\nIn addition to the other dependencies, you'll need to:\n\n  gem install echoe redgreen mocha test-spec\n  \nRun the tests with:\n  \n  rake test\n  \n\n== More information on Sphinx:\n\n -> http://www.sphinxsearch.com/\n -> http://blog.evanweaver.com/articles/2007/07/09/ultrasphinx-searching-the-world-in-231-seconds/\n -> http://blog.evanweaver.com/files/doc/fauna/ultrasphinx/files/README.html\n\n== More information on Ambition:\n\n-> http://ambition.rubyforge.org\n-> http://groups.google.com/group/ambition-rb/\n"
I suppose it's a document database. Or a tuple store. But really, it's just data sloshing around, waiting to be used. b'Soup is a bit of everything, summoned from nothing. Soup is like an imaginary friend - comforting, \nand will often talk to you, but when you look closely, they don\'t exist.\n\nTerrifying. And so:\n\n  require \'soup\'\n  soup = Soup.new(File.join("soup", __FILE__))\n\n  soup << { \n    :name => "James",\n    :skills => "Bowstaff, nunchuck" \n  }\n\n  # ...much later...\n\n  s = soup[\'james\']\n  s.skills # => "Bowstaff, nunchuck"\n\n  soup << {\n    :mane => "Lush and thick"\n    :teeth => "Sharp and ready"\n    :position => "Above my bed!!!" \n  }\n\n\nThe point is that you can set any attribute on a Soup data, and it will be persisted without \ncare. With reckless abandon, really.\n\nThe data can be stored using anything - Soup doesn\'t really care much about the underlying \npersistence layer. I\'ve written implementations using DataMapper, ActiveRecord and Sequel... \nthere are other implementations of course. Unknowable implementations. \nTerrifying implementations. You Fool! Warren is Dead!\n\n\n\n(c) 2008 James Adam, MIT LICENSE. Yeah.\n\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXP\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY?"""  .\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY?""   ,;ciCCC\n  "?YXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXYYY??""   .,;iCCCCCCCCCC\n  .,.  `""""""???YYYYYYYYYYXXXXXXXYYYYY???"""""""   ..,;ciiCCCCCCCCCCC\'\'`\n  ```\'`CCiiicccccccccc;;,,.    .,..,..,;cccciiiCCCCCCC????>\'\'`````   .;ciCCC\n  Cic;,.   `\'\'<<????CCCCCCCCCCCC?????\'\'\'\'\'\'\'\'`````\'   ..,;;;ccciiiCCCCCCCCCC\n  CCCCCCCCCCCCcc;;;,,.       .,..,..,..,;;cciiiiCCCCCCCCCCCCCCCCCCCCC??>\'`\n  ``\'\'?CCCCCCCCCC"\'```\'\'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC??""\'\'``   _.,;cciCC\n  ic;;,. ````\'<?Ciiccc;,,.  ````\'\'\'`CCCCCC\'\'\'\'\'\'\'\'`\' .,;cciiiCCCCCCCCCC?"\'`\n  CCCCCCCCCiic;._  ```\'\'"<?CCC;;;,,,.,..,...,;;;;;;C777???CC\'\'\'\'\'``\'  _,xiXX\n  .  ```\'\'\'`CCCCCCCiicc;,,,,,..        ```````\'            .,,,xiiXXXXXXXXXX\n  XXXXXxXx,,,.   ```````````````````   .,..,..,.xiXiiXiiXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXxXxxXxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY??"""\n  """?YXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXYY???"""\n  =          """""???YYXXXXXXXXXXXXXXXXXXXXXXXXXXYYY???""                 ,;\n   -;ccccc;;,.,..            """"""""""                          ,;ciCC\'``\'\n  ;;, ```\'???CCCCC  `\'\'--;CCicc;;,      .,;;,,,.   ..      .,;ciCCCCCCCicc;-\n  C\'```CCiiiiiCCCCtCiicc;,.  ```\' . .,;;iCCCCC\'\' .,;;cccc-\'\'`CCCCCCCCCCCCC;;\n  CCCCc;,,.,;CCCcc,,,,..\'\' .;CC\'`\'CCCCCCCCCC\'\' ``\' .,;;;cc===`CC\'\'````````\'\n  .,...```\' .C.,.`""""?CCCCC\'`CCC\'\'\'\'``\'  .,.,;ciCCCCCC..,;cciiCtttCCCCCCCtt\n   ```\'     `\'`CCCCCCCCCCC\' . `\'       ```\' .,. ```CCC\'\'\'\'`CCCCCCCCCCCCC?"\'\'\n  ..                           ``\'                            ```\'\n  $$$$$$$$$$$$ccc$$$$$$$$"?hccc=Jcc$$hccccccc$$$$$$$$$$$$$cccccc,,,,,ccc,,..\n  $$$??hcccci???CCCCCC$$L ,$$$$c $$hcccccJ???LcccccccccJCCC???????CCCC??????\n  $$F `?$$$$$$$$$$$$$$$$. ,$$"$$.?$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n  $$,. ,$$$$$$$$$$$$$$$$. ,$$ $$h $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$??????????$$\n  $$$h $$$$$$$$$$$$$$$$$$ $$$ ?$h ?$$$$$$$$$$$$$$$$$$$$$$$???izc?????????i??\n  ???" ?????$$$$$$$""""""  "" ?"" `"?"""$$$$$$$$??<Lr??cr?=""    .  .      .\n  ,,,,,,,,,J$$$$$$$$,.,,,,,,,,..       ,$$$$$$P>JP"       .,;;,.!!;,.!!!!!!!\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$C3$$  -\'  --\'\'`!!!!\'`\'   ..  `!\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$Ci??c,,,.,..,.            `````\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$JJCCCC????????$$????rrrcccc,\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$C<<$$$$$PF<$$$$\n  $$$$$cizccCCCCCCCCCcccc$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$?????)>>J$CLccc$??""\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$????ii?iiJJJ$$??"""\n  $$$$$$$$$$$$$??$$$$????P$$$???iiiiicccccc<<????)Cicc$P""      ..   .,;;!!!\n  $$$$$CCCCCCC>>J>>>>cccccc>>>??C????CC>cccJ$??"""""         -``!!;!\'  .!!!\'\n  $$$$$??CCCCCCCCCCCff>>>>>J$$$P""""""""            ..,;;;;;;;!\'`.,;;!\'\'\'\n  ??????????????"""""\'\' `\'              .,..,;;;;!!!\'```..```\' .,.,;;;- `,;\'\n                      .,.    ,;;----\'\'\'\'\'\'\'```````\'  `\'\'`,;;!!\'\'\'`..,;;\'\' ,;\n  ---;;;;;;;-----\'\'\'\'\'\'\'\'\'``\'  --- `\'  .,,ccc$$hcccccc,.  `\' ,;;!!!\'``,;;!!\'\n  ;;;;,,.,;-------\'\'\'\'\'\'\' ,;;!!-    .zJ$$$$$$$$$$$$$$$$$$$c,. `\' ,;;!!!!\' ,;\n    ```\'    -;;;!\'\'\'\'\'-  `.,..   .zJ$$$$$$$$$$$$$$$$$$$$$$$$$$c, `!!\'\' ,;!!\'\n  !!-  \' `,;;;;;;;;;;\'\'\'\'\'```\' ,c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$c,  ;!!\'\' ,;\n  ,;;;!!!!!!!!\'\'``.,;;;;!\'`\'  z$$$$$$$$???"""""\'.,,.`"?$$$$$$$$$$$  ``,;;!!!\n  ;;..       --\'\'```_..,;;!  J$$$$$$??,zcd$$$$$$$$$$$$$$$$$$$$$$$$h  ``\'``\'\n  ```\'\'\'   ,;;\'\'``.,.,;;,  ,$$$$$$F,z$$$$$$$$$$$$$$$$$$$c,`""?$$$$$h\n  !!!!;;;;,   --`!\'\'\'\'\'\'\'  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$h.`"$$$$h .\n  `\'\'\'``.,;;;!;;;--;;   zF,$$$$$$$$$$?????$$$$$$$$$$$$$?????$$r ;?$$$ $.\n  !;.,..,.````.,;;;;  ,$P\'J"$$$$$$P" .,c,,.J$$$$$$$$$"\',cc,_`?h.`$$$$ $L\n  \'``````\'    .,..  ,$$". $ $$$$P",c$$$$$$$$$$$$$$$$\',$$$$$$$$$$ $$$$ $$c,\n  !!!!!!!!!!!!!\'\'\'  J$\',$ $.`$$P c$$$$$$$$$$$$$$$$$$,$$$$$$$$$$$ $$$$ $$$$C\n     ``            J$ ,$P $$ ?$\',$$$$???$$$$$$$$$$$$$$$??"""?$$$ <$$$ $$$$$\n  c           ;,  z$F,$$  `$$ $ ?$"      "$$$.?$$$ $$$P c??c, ?$.<$$\',$$$$$F\n  $$h.  -!>   (\'  $" $F ,F ?$ $ F ,="?$$c,`$$F $$"z$$\',$\' ,$$P $h.`$ ?$$$$$r\n  $$$$$hc,. ``\'  J$ $P J$ . $$F L ",,J$$$F <$hc$$ "$L,`??????,J$$$.` z$$$$$\n  $$$$$$$$$$c,\'\' ?F,$\',$F.: $$ c$c,,,,,c,,J$$$$$$$ ?$$$c,,,c$$$$$$F. $$$$$$\n  `"$$$$$$$$$$$c, $$\',$$ :: $$$$$$$$F"\',$$$$$$$$$$h ?$$$L;;$$$??$$$$ $$$$$$\n     "?$$$$$$$$$$ $$$$$$ : .`F"$$$$$$$$$$$$""""?"""h $$$$$$$"$,J$$$$ $$$$$\'\n        "?$$$$$$$ $$$$$$.`.` h `$$$$$$$$$$$cccc$$c,zJ$$$$$P\' $$$$$P\',$$$$P\n  $.       `""?$$ $$$$$$$  ` "$c "?$$$$$$$$$$$$??$$$$$$$$" ,J$$$P",J$$$$P\n  ..           `" ?$$$$$$h    ?$$c.`?$$$$$$$$$\' . <$$$$$\' ,$$$"  ,$$$$$"\n  !!>. .          `$$$$$$$h  . "$$$c,"$$$$$$$\' `\' `$$$P  ,$$$\' ,c$$$$$\'   ;!\n  ```<!!!>         `$$$$$$$c     "$$$c`?$$$$$  : : $$$  ,$$P\' z$$$$$$\'   ;!!\n  $hc ```\'  ;       `$$$$$$$.      ?$$c ?$$$$ .: : $$$  $$F ,J$$$$$$\'   ;!!\n  .,..      \'        `$$$$$$$       "$$h`$$$$ .\' \' $$$ ,$$ ,J$$$$$$\'    !!!\n  ????P               `$$$$$$L       $$$ $$$F :.: J$$P J$F J$$$$$P     ;!!\n  -=<                  ?$$."$$       `$$ ?$$\' `\' z$$$F $P  $$$$$$\'     !!\'\n  cc                   `$$$c`?        ?$.`$$hc, cd$$F ,$\'  $$$$$$     ;!!\n                        $$$$c         `$$c$$$$$$$$$",c$\'   $$$$$$     `!!\n                        $$$$$          `?$$$$$$$$$$$$P\'    $$$$$$> ..\n                        $$$$$            `"?$$$$$$$P"      $$$$$$L $$c,\n            !!         <$$$$$            zc,`"""\',         <$$$$$$.`$$$$cc,\n            !!         J$$$$P            `$$$$$$$\' !\'       $$$$$$L `$$$$$$h\n           ;,          $$$$$L          `! J$$$$$\',!!        $$$$$$$  `$$$$$$\n            \'         <$$$$$.           ! $$$$$$ !!         ?$$$$$$   `$$$$$\n                     ,$$$$$$$c          `,`???? ;\'         c,?$$$$\'    `?$$$\n                     $$$$$$$??           `!;;;;!     .     `h."?$P      `$$$\n                    ,$$$$$$$h.            `\'\'\'      `\'      `$$$P        `?$\n                     $$$$$$$$h                      `!\'      `"\'           `\n                    `$$$$$$$$F          !;     !    ;,\n                     `$$$$$$$\'         `!!>         `!\n  c,        ;,        `?$$$$P           !!>             .\n  $F        !!>         `""\'            `!!            ;!>    <-\n  $F       `!!\'                      ;!; \'   `!        <!>    ;\n  $F        `\'      <!               !!!               !!>    !!\n  ?\'       `\'      !!!               !!!               !!>    !!\n           !!\'    <!!               ;!!!               `\'     ;\n          ;!!     !!                !!!!                      !\'\n          !!!     `\'                !!!                       \'            ;\n          !!                       ;!!\'                                    !\n                                   !!!                      ;!             !\n                                  <!!!                      )\'            `!\n            ,;;>                 ;!!!                                     `!\n            `\'\'                 ;!!!                     !                `!\n                ;!             ;!!!                                  ,$$c, `\n              !\'\'             ;!!!           \'                    ,c$$$$$$c.\n  >                       ;   !!!                                 ?$$$$$$$$$\n  !!>                   ;!! .!!!     .!>                           "?$$$$$$$\n  <! `!         ,;     ;!!  !!!!     !!                              `"?$$$$\n   . \'          \'    ;!!! .!!!!     !!   .                              `"?$\n   `\'               <!!\' .!!!!!!   !!!\'  !                     >           `\n                  .!!!  <!!\'`!!! .!!!!;                   !!>\n                  !!!  <!!\'  !! ;!!!!!!                   (\' ;,\n                 <!!  !!!\'  !!! !!!\'!!!                   !> `!\n                 !!\' !!!\'  `!!\';!>  !!                 <! `\' `!  !>.\n                 \' ;<!!\'  .!!! !!\' <!\'       ;        `!! ;  `!  !!!>\n              .<!>;!!!\'   !!! `!! <!!                .. \' \'      !!!\' ;,\n             <!!! <!! ;   !!! !!>;!!\'\'!             J$$c         `!!; !!>\n            ;!!! ;!! <!   !!> !! `!! !\'            J$$$$hr        `\'\' !!!,;;\n            ;!!! !! <!!  <!!  !\' ;!! \'            <$$$$$$$.           <!!!\'!\n            !!!  !;<!!\'  !!! ;!  !!>              $$$$$$$$$$.          `\'  !\n           `!!! !!!!!\'   !!! !! `!!!              ?$$$$$$$??$c        !!>;\n           ;!! ;!!!!!   ;!!> !! <!!>               ?$$$$$$c,`$$.      `!!!\n           !!! !!! !\'   `!!> !! !!!                 "?$$$$$$ "?$c      `<!\n          ;!!  !! ;!    !!!> ! ;!!!,                  "$$$$$$c,"?$c,\n          ;!!  !! ;!    !!!! ! `!!!!                    "$$$$$$c ?$$h.\n          !!!> !! !!    !!!!    !!!                       "?$$$$c "$$$c,\n          !!!\' \'  !!    `!!!    `!                          "$$$$h.`?$$$c,\n         <!!!>   <!!    `!!!     !>                          ?$$$$$c ?$$$$h.\n         `!!!    `!!     !!!     `\'                           "?$$$$h.`?$$$$\n          `!!>    !!     `!!                                    `?$$$$$$$$$$\n           `!\'    !!      `\'                                      "$$$$$$$$$\n                  `!>                                               ?$$$$$$$\n                   `!                                                `"?$$$$\n                    `-                ;!                                `"$$\n                                                                          `?\n(http://www.edvard-munch.com/Paintings/other_artists/scream_ascii_3.htm)'
Ruby on Rails b'## Welcome to Rails\n\nRails is a web-application framework that includes everything needed to\ncreate database-backed web applications according to the\n[Model-View-Controller (MVC)](http://en.wikipedia.org/wiki/Model-view-controller)\npattern.\n\nUnderstanding the MVC pattern is key to understanding Rails. MVC divides your\napplication into three layers, each with a specific responsibility.\n\nThe _Model layer_ represents your domain model (such as Account, Product,\nPerson, Post, etc.) and encapsulates the business logic that is specific to\nyour application. In Rails, database-backed model classes are derived from\n`ActiveRecord::Base`. Active Record allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in its [README](activerecord/README.rdoc).\nAlthough most Rails models are backed by a database, models can also be ordinary\nRuby classes, or Ruby classes that implement a set of interfaces as provided by\nthe Active Model module. You can read more about Active Model in its [README](activemodel/README.rdoc).\n\nThe _Controller layer_ is responsible for handling incoming HTTP requests and\nproviding a suitable response. Usually this means returning HTML, but Rails controllers\ncan also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and\nmanipulate models, and render view templates in order to generate the appropriate HTTP response.\nIn Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and\ncontroller classes are derived from `ActionController::Base`. Action Dispatch and Action Controller\nare bundled together in Action Pack. You can read more about Action Pack in its\n[README](actionpack/README.rdoc).\n\nThe _View layer_ is composed of "templates" that are responsible for providing\nappropriate representations of your application\'s resources. Templates can\ncome in a variety of formats, but most view templates are HTML with embedded\nRuby code (ERB files). Views are typically rendered to generate a controller response,\nor to generate the body of an email. In Rails, View generation is handled by Action View.\nYou can read more about Action View in its [README](actionview/README.rdoc).\n\nActive Record, Action Pack, and Action View can each be used independently outside Rails.\nIn addition to them, Rails also comes with Action Mailer ([README](actionmailer/README.rdoc)), a library\nto generate and send emails; Active Job ([README](activejob/README.md)), a\nframework for declaring jobs and making them run on a variety of queueing\nbackends; and Active Support ([README](activesupport/README.rdoc)), a collection\nof utility classes and standard library extensions that are useful for Rails,\nand may also be used independently outside Rails.\n\n## Getting Started\n\n1. Install Rails at the command prompt if you haven\'t yet:\n\n        gem install rails\n\n2. At the command prompt, create a new Rails application:\n\n        rails new myapp\n\n   where "myapp" is the application name.\n\n3. Change directory to `myapp` and start the web server:\n\n        cd myapp\n        rails server\n\n   Run with `--help` or `-h` for options.\n\n4. Using a browser, go to `http://localhost:3000` and you\'ll see:\n"Welcome aboard: You\'re riding Ruby on Rails!"\n\n5. Follow the guidelines to start developing your application. You may find\n   the following resources handy:\n    * [Getting Started with Rails](http://guides.rubyonrails.org/getting_started.html)\n    * [Ruby on Rails Guides](http://guides.rubyonrails.org)\n    * [The API Documentation](http://api.rubyonrails.org)\n    * [Ruby on Rails Tutorial](http://www.railstutorial.org/book)\n\n## Contributing\n\nWe encourage you to contribute to Ruby on Rails! Please check out the\n[Contributing to Ruby on Rails guide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for guidelines about how to proceed. [Join us!](http://contributors.rubyonrails.org)\n\n## Code Status\n\n[![Build Status](https://travis-ci.org/rails/rails.svg?branch=master)](https://travis-ci.org/rails/rails)\n\n## License\n\nRuby on Rails is released under the [MIT License](http://www.opensource.org/licenses/MIT).\n'
An Io web framework of sorts b'# Backpacking: Io-powered web framework #\n\nInspired by the simplicity of other web frameworks, and the awesome\nmetaprogramming power of Io, Chris Carter set out to recreate nails,\nhammer and toolbox.\n\nHere it is: the wheel, recreated in Io. \n\n* both DBRMS- and ORM-agnostic \n* simple template system\n* MIT-licensed, yours to fiddle with\n\n## Run it ##\n\n  $ io\n\nWill start a server on port 8000 per default.\n\n## Get the source code ##\n\ngit clone git://github.com/cdcarter/backpacking.git\n\n## Co-creators ##\n\nChris Carter\nIan Ownbey (the View system, among other things)\nOlle Jonsson (this Readme)\n\n## Read more ##\n\nhttp://iolanguage.com/'
A Capistrano extension for managing and running your app on Amazon EC2. b'h1. Capsize\n\nCapsize provides Capistrano tasks to manage Amazon EC2.\n\nThis project is in no way endorsed, sponsored by, or associated with Amazon, Amazon.com, or Amazon Web Services.\n\nh2. Installation\n\n* @gem install jnewland-capsize -s http://gems.github.com@\n* Edit your your @config/deploy.rb@:\n\n<pre>\n<code>\n# #################################################################\n# CAPSIZE EC2 GEM\n# #################################################################\n\n# Include the Capsize EC2 \'cap\' tasks\n# WARNING : This must be placed in your deploy.rb file anywhere\n# AFTER the line where you set your application name!  Looks like:\n#   set :application, "foobar".\n# The application name is used by Capsize and the order matters.\nrequire \'capsize\'\n\n# Use this to overwrite the standard capsize config dir locations\n#set :capsize_config_dir, \'config/capsize\'\n#set :capsize_secure_config_dir, \'config/capsize\'\n\n# Use these to overwrite the actual config file names stored in the config dirs.\n#set :capsize_config_file_name, \'capsize.yml\'\n#set :capsize_secure_config_file_name, \'secure.yml\'\n</code>\n</pre>\n\n* Run @cap ec2:setup@\n* Read the task\'s output for example usage.\n\nh2. Tasks\n\nRun cap -e <taskname> on any task to get more details\n\n* cap ec2:console:output\n* cap ec2:addresses:allocate\n* cap ec2:addresses:associate\n* cap ec2:addresses:disassociate\n* cap ec2:addresses:release\n* cap ec2:addresses:show\n* cap ec2:images:show\n* cap ec2:instances:reboot\n* cap ec2:instances:run\n* cap ec2:instances:show\n* cap ec2:instances:ssh\n* cap ec2:instances:terminate\n* cap ec2:keypairs:create\n* cap ec2:keypairs:delete\n* cap ec2:keypairs:show\n* cap ec2:security_groups:authorize_ingress\n* cap ec2:security_groups:create\n* cap ec2:security_groups:create_with_standard_ports\n* cap ec2:security_groups:delete\n* cap ec2:security_groups:revoke_ingress\n* cap ec2:security_groups:show\n* cap ec2:setup\n* cap ec2:setup:check\n\nh4. Notes:\n\n* <em>All tasks optionally take environment variables in lieu of capistrano configuration variables.</em>\n\nh4. Contributing\n\nSource is on "GitHub":http://github.com/jnewland/capsize. You know what to do.\n\nh4. Authors\n\n* "Jesse Newland":http://jnewland.com/\n* "Glenn Rempe":http://blog.rempe.us/\n\nh4. Copyright\n\n(c) 2007-2008 Jesse Newland, Glenn Rempe\n\nDistributes under the same terms as Ruby\n'
Starling Message Queue b'= Name\n\nStarling - a light weight server for reliable distributed message passing.\n\n= Synopsis\n\n  # Start the Starling server as a daemonized process:\n  starling -h 192.168.1.1 -d\n\n  # Put messages onto a queue:\n  require \'memcache\'\n  starling = MemCache.new(\'192.168.1.1:22122\')\n  starling.set(\'my_queue\', 12345)\n\n  # Get messages from the queue:\n  require \'memcache\'\n  starling = MemCache.new(\'192.168.1.1:22122\')\n  loop { puts starling.get(\'my_queue\') }\n\n  # See the Starling documentation for more information.\n\n= Description\n\nStarling is a powerful but simple messaging server that enables reliable \ndistributed queuing with an absolutely minimal overhead. It speaks the\nMemCache protocol for maximum cross-platform compatibility. Any language\nthat speaks MemCache can take advantage of Starling\'s queue facilities.\n\n= Known Issues\n\n* Starling is "slow" as far as messaging systems are concerned. In practice,\n  it\'s fast enough.\n\n= Authors\n\nBlaine Cook <romeda@gmail.com>\n\n= Copyright\n\nStarling - a light-weight server for reliable distributed message passing.\nCopyright 2007 Blaine Cook <blaine@twitter.com>, Twitter Inc.\n\n<<to be completed>>\n'
The Atom Protocol Exerciser b"== Atom Protocol Exerciser (APE)\n\nAPE is a sanity-checker for implementations of the Atom Publishing Protocol (AtomPub or APP). It is written in Ruby,\nand provides a Mongrel-based HTML interface describing its interactions with the APP implementation under test.\n\nFor more information about the history and impetus for the creation of APE, see Tim Bray's account here[http://www.tbray.org/ongoing/When/200x/2006/08/11/Meet-the-Ape].\n  \n== License\n\nCopyright (c) 2006 Sun Microsystems, Inc. All rights reserved. See the included LICENSE[link:/files/LICENSE.html] file for details.\n\n== Quick Start\n\nInstall APE via RubyGems:\n\n $ gem install ape\n \nNow, you should have the ape_server command available in your $PATH. Start the server with:\n\n $ ape_server\n \nThis will start the server in the foreground. You can access APE in your browser at http://localhost:4000\n\n== The Source\n\nTo access the latest source code for APE, see the project site at https://rubyforge.org/projects/ape\n"
Collective Idea's Awesomeness.  A collection of useful Rails bits and pieces. b'Collective Idea\'s Awesomeness\n=============================\n\nA collection of stuff that we use often, but not generic enough to go in another plugin.\n\nIf you\'ve stumbled across this and love/hate it, let us know!\n\n== Compatability\n\nThis plugin is compatible with edge-rails that is slated to be Rails 2.2.  For a version compatible with 2.1, check out the "rails-2.1" tag from git.\n\n== Core Extensions\n\n* Object#tap (http://moonbase.rydia.net/mental/blog/programming/eavesdropping-on-expressions)\n\n* String#widont to make typography nicer (http://shauninman.com/archive/2006/08/22/widont_wordpress_plugin)\n\n* Array#uniq with a block\n\n  >> %w(the cow jumped over the moon).uniq {|s| s.length }\n  => ["the", "jumped", "over"]\n\n* Round floats to the nearest x\n\n  >> 5.38475.round(0.5)\n  => 5.5\n\n* Hash goodies\n\n  >> {:a => [1,3,4], :b => [2,5]}.without(:a => 1)\n  => {:a => [3,4], :b => [2,5]}\n\n  >> {:a => "", :b => nil, :c => 1}.compact\n  => {:c => 1}\n\n* And more\xe2\x80\xa6\n\n== Rails Helpers\n\n* Unicode TextHelper additions that change the default truncate & excerpt string to an elipsis (\xe2\x80\xa6)\xc2\xa0instead of just three periods (...)\n\n* Add widont to textilize methods\n\n* Transparent removal of trailing slashes in URLs\n\n== Rake Tasks\n\n== Capistrano Recipes\n\n* Use :remote_cache by default\n\n* Disable and enable web during restarts\n\n* Run deploy:cleanup after deploys\n\n* Backups'
Audited (formerly acts_as_audited) is an ORM extension that logs all changes to your Rails models. b'Audited [![Build Status](https://secure.travis-ci.org/collectiveidea/audited.png)](http://travis-ci.org/collectiveidea/audited) [![Dependency Status](https://gemnasium.com/collectiveidea/audited.png)](https://gemnasium.com/collectiveidea/audited)[![Code Climate](https://codeclimate.com/github/collectiveidea/audited.png)](https://codeclimate.com/github/collectiveidea/audited)\n=======\n\n> ## Important version disclaimer\n> ***This README is for a branch which is still in development.\n> Please switch to the [4.2-stable branch](https://github.com/collectiveidea/audited/tree/4.2-stable) for a stable version.***\n\n**Audited** (previously acts_as_audited) is an ORM extension that logs all changes to your models. Audited also allows you to record who made those changes, save comments and associate models related to the changes.\n\nAudited currently (4.x) works with Rails 4.2. For Rails 3, use gem version 3.0 or see the [3.0-stable branch](https://github.com/collectiveidea/audited/tree/3.0-stable).\n\n## Supported Rubies\n\nAudited supports and is [tested against](http://travis-ci.org/collectiveidea/audited) the following Ruby versions:\n\n* 2.0.0\n* 2.1.5\n* 2.2.0\n\nAudited may work just fine with a Ruby version not listed above, but we can\'t guarantee that it will. If you\'d like to maintain a Ruby that isn\'t listed, please let us know with a [pull request](https://github.com/collectiveidea/audited/pulls).\n\n## Supported ORMs\n\nAudited is currently ActiveRecord-only. In a previous life, Audited worked with MongoMapper. Use the [4.2-stable branch](https://github.com/collectiveidea/audited/tree/4.2-stable) if you need MongoMapper.\n\n## Installation\n\nAdd the gem to your Gemfile:\n\n```ruby\ngem "audited", "~> 4.0"\n```\n\nThen, from your Rails app directory, create the `audits` table:\n\n```bash\n$ rails generate audited:install\n$ rake db:migrate\n```\n\n#### Upgrading\n\nIf you\'re already using Audited (or acts_as_audited), your `audits` table may require additional columns. After every upgrade, please run:\n\n```bash\n$ rails generate audited:upgrade\n$ rake db:migrate\n```\n\nUpgrading will only make changes if changes are needed.\n\n\n## Usage\n\nSimply call `audited` on your models:\n\n```ruby\nclass User < ActiveRecord::Base\n  audited\nend\n```\n\nBy default, whenever a user is created, updated or destroyed, a new audit is created.\n\n```ruby\nuser = User.create!(name: "Steve")\nuser.audits.count # => 1\nuser.update_attributes!(name: "Ryan")\nuser.audits.count # => 2\nuser.destroy\nuser.audits.count # => 3\n```\n\nAudits contain information regarding what action was taken on the model and what changes were made.\n\n```ruby\nuser.update_attributes!(name: "Ryan")\naudit = user.audits.last\naudit.action # => "update"\naudit.audited_changes # => {"name"=>["Steve", "Ryan"]}\n```\n\n### Specifying columns\n\nBy default, a new audit is created for any attribute changes. You can, however, limit the columns to be considered.\n\n```ruby\nclass User < ActiveRecord::Base\n  # All fields\n  # audited\n\n  # Single field\n  # audited only: :name\n\n  # Multiple fields\n  # audited only: [:name, :address]\n\n  # All except certain fields\n  # audited except: :password\nend\n```\n\n### Specifying callbacks\n\nBy default, a new audit is created for any Create, Update or Destroy action. You can, however, limit the actions audited.\n\n```ruby\nclass User < ActiveRecord::Base\n  # All fields and actions\n  # audited\n\n  # Single field, only audit Update and Destroy (not Create)\n  # audited only: :name, on: [:update, :destroy]\nend\n```\n\n### Comments\n\nYou can attach comments to each audit using an `audit_comment` attribute on your model.\n\n```ruby\nuser.update_attributes!(name: "Ryan", audit_comment: "Changing name, just because")\nuser.audits.last.comment # => "Changing name, just because"\n```\n\nYou can optionally add the `:comment_required` option to your `audited` call to require comments for all audits.\n\n```ruby\nclass User < ActiveRecord::Base\n  audited :comment_required => true\nend\n```\n\n### Current User Tracking\n\nIf you\'re using Audited in a Rails application, all audited changes made within a request will automatically be attributed to the current user. By default, Audited uses the `current_user` method in your controller.\n\n```\nclass PostsController < ApplicationController\n  def create\n    current_user # => #<User name: "Steve">\n    @post = Post.create(params[:post])\n    @post.audits.last.user # => #<User name: "Steve">\n  end\nend\n```\n\nTo use a method other than `current_user`, put the following in an initializer:\n\n```ruby\nAudited.current_user_method = :authenticated_user\n```\n\nOutside of a request, Audited can still record the user with the `as_user` method:\n\n```ruby\nAudited.audit_class.as_user(User.find(1)) do\n  post.update_attribute!(title: "Hello, world!")\nend\npost.audits.last.user # => #<User id: 1>\n```\n\n### Associated Audits\n\nSometimes it\'s useful to associate an audit with a model other than the one being changed. For instance, given the following models:\n\n```ruby\nclass User < ActiveRecord::Base\n  belongs_to :company\n  audited\nend\n\nclass Company < ActiveRecord::Base\n  has_many :users\nend\n```\n\nEvery change to a user is audited, but what if you want to grab all of the audits of users belonging to a particular company? You can add the `:associated_with` option to your `audited` call:\n\n```ruby\nclass User < ActiveRecord::Base\n  belongs_to :company\n  audited associated_with: :company\nend\n\nclass Company < ActiveRecord::Base\n  has_many :users\n  has_associated_audits\nend\n```\n\nNow, when a audit is created for a user, that user\'s company is also saved alongside the audit. This makes it much easier (and faster) to access audits indirectly related to a company.\n\n```ruby\ncompany = Company.create!(name: "Collective Idea")\nuser = company.users.create!(name: "Steve")\nuser.update_attribute!(name: "Steve Richert")\nuser.audits.last.associated # => #<Company name: "Collective Idea">\ncompany.associated_audits.last.auditable # => #<User name: "Steve Richert">\n```\n\n### Disabling auditing\n\nIf you want to disable auditing temporarily doing certain tasks, there are a few\nmethods available.\n\nTo disable auditing on a save:\n\n```ruby\n@user.save_without_auditing\n```\n\nor:\n\n```ruby\n@user.without_auditing do\n  @user.save\nend\n```\n\nTo disable auditing on a column:\n\n```ruby\nUser.non_audited_columns = [:first_name, :last_name]\n```\n\nTo disable auditing on an entire model:\n\n```ruby\nUser.auditing_enabled = false\n```\n\n## Gotchas\n\n### Using attr_protected or strong_parameters\n\nAudited assumes you are using `attr_accessible`. If you\'re using\n`attr_protected` or `strong_parameters`, you\'ll have to take an extra step or\ntwo.\n\n\nIf you\'re using `strong_parameters` with Rails 3.x, be sure to add `allow_mass_assignment: true` to your `audited` call; otherwise Audited will\ninterfere with `strong_parameters` and none of your `save` calls will work.\n\n```ruby\nclass User < ActiveRecord::Base\n  audited allow_mass_assignment: true\nend\n```\n\nIf using `attr_protected`, add `allow_mass_assignment: true`, and also be sure to add `audit_ids` to the list of protected attributes to prevent data loss.\n\n```ruby\nclass User < ActiveRecord::Base\n  audited allow_mass_assignment: true\n  attr_protected :logins, :audit_ids\nend\n```\n\n## Support\n\nYou can find documentation at: http://rdoc.info/github/collectiveidea/audited\n\nOr join the [mailing list](http://groups.google.com/group/audited) to get help or offer suggestions.\n\n## Contributing\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project. Here are a few ways _you_ can pitch in:\n\n* Use prerelease versions of Audited.\n* [Report bugs](https://github.com/collectiveidea/audited/issues).\n* Fix bugs and submit [pull requests](http://github.com/collectiveidea/audited/pulls).\n* Write, clarify or fix documentation.\n* Refactor code.\n'
Simple geocoding for Active Record models b'# acts_as_geocodable\n\n[![Gem Version](https://img.shields.io/gem/v/acts_as_geocodable.svg?style=flat)](http://rubygems.org/gems/acts_as_geocodable)\n[![Build Status](https://img.shields.io/travis/collectiveidea/acts_as_geocodable/master.svg?style=flat)](https://travis-ci.org/collectiveidea/acts_as_geocodable)\n[![Code Climate](https://img.shields.io/codeclimate/github/collectiveidea/acts_as_geocodable.svg?style=flat)](https://codeclimate.com/github/collectiveidea/acts_as_geocodable)\n[![Code Coverage](http://img.shields.io/codeclimate/coverage/github/collectiveidea/acts_as_geocodable.svg?style=flat)](https://codeclimate.com/github/collectiveidea/acts_as_geocodable)\n[![Dependency Status](https://img.shields.io/gemnasium/collectiveidea/acts_as_geocodable.svg?style=flat)](https://gemnasium.com/collectiveidea/acts_as_geocodable)\n\nacts_as_geocodable helps you build geo-aware applications. It automatically geocodes your models when they are saved, giving you the ability to search by location and calculate distances between records.\n\n**Beginning with version 2, we require Rails 3. Use one of the 1.0.x tags to work with Rails 2.3.**\n\nWe\'ve adopted the ARel style syntax for finding records.\n\n## Usage\n\n```ruby\nevent = Event.create(\n  street: "777 NE Martin Luther King, Jr. Blvd.",\n  locality: "Portland",\n  region: "Oregon",\n  postal_code: 97232\n)\n\nevent.geocode.latitude  # => 45.529100000000\nevent.geocode.longitude # => -122.644200000000\n\nevent.distance_to("49423") # => 1807.66560483205\n\nEvent.origin("97232", within: 50)\n\nEvent.origin("Portland, OR").nearest\n```\n\n## Installation\n\nInstall as a gem\n\n```\ngem install acts_as_geocodable\n```\n\nor add it to your Gemfile\n\n```ruby\ngem "acts_as_geocodable"\n```\n\n[Graticule](http://github.com/collectiveidea/graticule) is used for all the heavy lifting and will be installed too.\n\n## Upgrading\n\nBefore October 2008, precision wasn\'t included in the `Geocode` model. Make sure you add a string precision column to your geocode table if you\'re upgrading from an older version, and update Graticule.\n\nAlso, if you\'re upgrading from a previous version of this plugin, note that `:city` has been renamed to `:locality` to be consistent with Graticule 0.2. Create a migration that has:\n\n```ruby\nrename_column :geocodes, :city, :locality\n```\n\nAlso remember to change your mapping in your geocodable classes to use the `:locality` key instead of `:city`:\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable address: { street: :address1, locality: :city, region: :state, postal_code: :zip }\nend\n```\n\n## Configuration\n\nCreate the required tables\n\n```\nrails generate acts_as_geocodable\nrake db:migrate\n```\n\nSet the default geocoder in your environment.rb file.\n\n```ruby\nGeocode.geocoder = Graticule.service(:yahoo).new("your_api_key")\n```\n\nThen, in each model you want to make geocodable, add `acts_as_geocodable`.\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable\nend\n```\n\nThe only requirement is that your model must have address fields. By default, acts_as_geocodable looks for attributes called _street_, _locality_, _region_, _postal_code_, and _country_. To change these, you can provide a mapping in the `:address` option:\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable address: { street: :address1, locality: :city, region: :state, postal_code: :zip }\nend\n```\n\nIf that doesn\'t meet your needs, simply override the default `to_location` method in your model, and return a `Graticule::Location` with those attributes set.\n\nacts_as_geocodable can also update your address fields with the data returned from the geocoding service:\n\n```ruby\nclass Event < ActiveRecord::Base\n  acts_as_geocodable normalize_address: true\nend\n```\n\n## IP-based Geocoding\n\nacts_as_geocodable adds a `remote_location` method in your controllers that uses http://hostip.info to guess remote users location based on their IP address.\n\n```ruby\ndef index\n  @nearest = Store.origin(remote_location).nearest if remote_location\n  @stores = Store.all\nend\n```\n\nKeep in mind that IP-based geocoding is not always accurate, and often will not return any results.\n\n## Contributing\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project.\n\nHere are some ways **you** can contribute:\n\n* using alpha, beta, and prerelease versions\n* reporting bugs\n* suggesting new features\n* writing or editing documentation\n* writing specifications\n* writing code (**no patch is too small**: fix typos, add comments, clean up inconsistent whitespace)\n* refactoring code\n* closing [issues](https://github.com/collectiveidea/acts_as_geocodable/issues/)\n* reviewing patches\n\n## Submitting an Issue\n\nWe use the [GitHub issue tracker](https://github.com/collectiveidea/acts_as_geocodable/issues/) to track bugs\nand features. Before submitting a bug report or feature request, check to make sure it hasn\'t already\nbeen submitted. You can indicate support for an existing issuse by voting it up. When submitting a\nbug report, please include a [Gist](https://gist.github.com/) that includes a stack trace and any\ndetails that may be necessary to reproduce the bug, including your gem version, Ruby version, and\noperating system. Ideally, a bug report should include a pull request with failing specs.\n\n## Submitting a Pull Request\n\n1. Fork the project.\n2. Create a topic branch.\n3. Implement your feature or bug fix.\n4. Add specs for your feature or bug fix.\n5. Run `bundle exec rake`. If your changes are not 100% covered and passing, go back to step 4.\n6. Commit and push your changes.\n7. Submit a pull request. Please do not include changes to the gemspec, version, or history file. (If you want to create your own version for some reason, please do so in a separate commit.)\n\n### To Do\n\n* configurable formulas\n'
an Active Record plugin that makes it easier to work with the money gem b'= ActsAsMoney\n\nacts_as_money is a plugin that makes it easier to work with the money gem.\n\n  class Product < ActiveRecord::Base\n    money :price\n  end\n  \nThis assumes that there are 2 columns in the database, price_in_cents (integer) and currency (string).  These fields can be changed by setting the :cents and :currency options.  To use the default currency (USD), you can simply leave off :currency.\n\n  class Room < ActiveRecord::Base\n    money :rate, :cents => :rate_in_cents, :currency => :rate_currency\n    money :discount, :cents => :discount_in_cents, :currency => false\n  end\n\nacts_as_money allows you to pass a String, Fixnum, Float or Money object as a parameter to the setter, and it will call #to_money to convert it to a Money object.  This makes it convenient for using money fields in forms.\n\n  r = Room.new :rate => "100.00"\n  r.rate                            # returns <Money:0x249ef9c @currency="USD", @cents=10000>\n\n\n= Compatibility\n\nThis plugin is compatible with the current edge-rails that is slated to be 2.2. If you are using Rails <= 2.1, check out the "rails-2.1" tag from git.'
 b'== CalendarBuilder\n\nCalendarBuilder does a couple things\n\n* Builds calendars for the view\n* Adds event finders to your event models\n\n== Building Calendars\n\nAdd docs here. Please.\n\n== Event Finders\n\nAssuming you have an event model with some sort of begin_at and end_at, you can use all these finders:\n\n  Event.upcoming\n  Event.on_date(date)\n  Event.in_month(date)\n  Event.in_date_range(date1..date2)\n  Event.in_rolling_month(date, number_of_weeks)\n  Event.in_month_with_outliers(date)\n\nIf your event model is an association unto some other model, like a Community for instance, you can do the following:\n\n  community = Community.find(1)\n  comunity.events.upcoming\n  comunity.events.on_date(date)\n  comunity.events.in_month(date)\n  comunity.events.in_date_range(date1..date2)\n  comunity.events.in_rolling_month(date, number_of_weeks)\n  comunity.events.in_month_with_outliers(date)\n\n== ToDo\n\n* Extract CSS classes into options (month, day, weekend, other_month)'
When Active Record objects are saved from a form, empty fields are saved as empty strings instead of nil.  This kills most validations. b"Problem\n=======\nWhen AR objects are saved, empty fields are saved as '' instead of nil.\n\n - Complicates queries for empty fields (`WHERE field IS NULL OR field = ''`)\n - Makes the use of `unless field.blank?` necessary (opposed to only `if field`)\n - Can lead to late-detected bugs because most of the time strings were `filled or ''` and suddenly they are `nil`\n - Some validations do not support `:allow_blank=>true`\n - Databases can handle `NULL` better & faster than empty strings (especially when using `LIKE`)\n\n\nSolution\n========\nDefines an AR `before_validation` that sets empty Strings to nil.\n\n\nInstall\n=======\n` script/plugin install git://github.com/collectiveidea/clear_empty_attributes.git `\nOR  \n` sudo gem install clear_empty_attributes `\n\n\nMigration\n=========\nWhen you are switching to `clear_empty_attributes`, run this task\nto remove any `''` strings/texts from your database.\n\n    rake db:clear_empty_attributes\n(only works when checked out or installed as plugin)\n\n\nAuthors\n=======\n - [Brandon Keepers](http://opensoul.org)\n - [Michael Grosser](http://pragmatig.wordpress.com)\n\nHereby placed under public domain, do what you want, just do not hold anybody accountable..."
A Rails plugin that disables all CSS on CSS Naked Day b'CssNakedDay\n===========\n\nThis plugin disables all stylesheets on CSS Naked Day.\nhttp://naked.dustindiaz.com/\n\nAs long as you\'re using Rails\' stylesheet_link_tag helper, your CSS will automatically be hidden on Naked Day (April 9, 2009).\n\nIt also adds a method to the Date class so you can check if a day is Naked Day.\n\nExample\n=======\n\n<% if Date.today.is_css_naked_day? %>\n  <h3>What happened to the design?</h3>\n  <p>To know more about why styles are disabled on this website visit the\n  <a href="http://naked.dustindiaz.com" title="Web Standards Naked Day Host Website">\n  Annual CSS Naked Day</a> website for more information.</p>\n<% end %>\n\n\nRead more at:\nhttp://daniel.collectiveidea.com/blog/tags/css_naked_day\n\n\nCopyright (c) 2007 Daniel Morrison, Collective Idea http://collectiveidea.com, released under the MIT license'
Authenticate your Rails app using any IMAP server! b"IMAPAuthenticatable\n===================\n\nA quick library for authenticating against an IMAP server.\n\nSee http://daniel.collectiveidea.com/blog/tags/imap_authenticatable for more info.\n\nIt expects a model with a 'username' column. You must pass a host.\n\nExample:\n\nclass User < ActiveRecord::Base\n  imap_authenticatable :host => 'mail.example.com'\n  \n  ...\nend\n\n\nother options:\n\t:allow_new_users => true/false\n\t\tAlters whether to use find_by_username or find_or_create_by_username.\n\t\tThe default is true (find or create).\n\t:default_domain => 'example.com'\n\t\tWhat usernames have at the end.\n\t\tDefaults to the :host option.\n\t:append_domain => false/true\n\t\tShould we always add or remove the default_domain (with preceding '@) value?\n\t\tThe default is false (always remove).\n\t:ssl => false/true\n\t  Sets whether to connect via SSL (TLS).  You must have OpenSSL installed.\n\t  Defaults to false.\n\t:port => 143\n\t  Sets the port.  The :ssl option will set the port automatically unless you override it.\n\t  Defaults to 143 if :ssl => false, 993 if :ssl => true\n\t\t\n\nOther options may be added as need arises.\n\n\nTesting:\n\nTo mock the IMAP login in your tests, add the following line to the top of your test_helper.rb\n  require File.join(File.dirname(__FILE__), '..', 'vendor', 'plugins', 'imap_authenticatable', 'test', 'mocks', 'imap.rb')\n\nThis mock makes the valid password the reverse of the username (username.reverse)."
A Rails plugin that allows quick and easy fetching of random records, or records in random order. b'RandomFinders\n=============\n\nAllows quick and easy fetching of random records, or records in random order.\n\nSimply pass the :random to the order in any finder method.\n\nExamples\n========\n\nFind a random article\n  Article.find(:first, :order => :random)\n  \nRandomize photos\n  Photo.find(:all, :order => :random)\n  \n\nCaveat\n======\n\nThis will not treat you nicely with large datasets.  \n\nRead about it here:\nhttp://daniel.collectiveidea.com/blog/tags/random_finders\n\n\n\nBased on an idea by Mike Burns\nhttp://mikeburnscoder.wordpress.com/2006/08/18/retrieving-random-elements-from-an-activerecord/\n\nCopyright (c) 2007 Daniel Morrison, Collective Idea (http://collectiveidea.com), released under the MIT license'
A respond_to style helper for doing different actions based on which request parameters are passed. b'= WithAction\n\nA respond_to style helper for doing different actions based on which request parameters are passed. Specifically, it is helpful if you want to use multiple form buttons on a page, such as "Save", "Save and Continue Editing", and "Cancel".  with_action executes different blocks based on what the presence of request parameters.\n\n  def create\n    with_action do |a|\n      a.cancel { redirect_to articles_path }\n      a.any do\n        @article = Article.new(params[:article])\n        if @article.save\n          a.save { redirect_to article_path(@article) }\n          a.edit { redirect_to article_path(@article) }\n          a.approve do\n            @article.approve!\n            redirect_to article_path(@article)\n          end\n        else\n          render :action => \'new\'\n        end\n      end\n    end\n  end\n  \nA block is invoked if a parameter with the same name exists and is not blank.  Here is an example of a form to submit to this action:\n\n  <%= submit_tag \'Save\', :name => \'save\' %>\n  <%= submit_tag \'Save & Continue Editing\', :name => \'edit\' %>\n  <%= submit_tag \'Save & Approve\', :name => \'approve\' %>\n  <%= submit_tag \'Cancel\', :name => \'cancel\' %>\n\nIf an @any@ block is present and no parameter that matches one of the other blocks, it is called by default, otherwise the first block will be called. The @any@ block is the only one that can have nesting and be called multiple times.\n\nIf a block is not passed to the action, then a method with the same name is called on the controller: \n\n  def update\n    with_action do |a|\n      a.publish\n      a.reject\n      a.any { redirect_to root_path }\n    end\n  end\n  \n  def publish\n    # \xe2\x80\xa6\n  end\n  \n  def reject\n    # \xe2\x80\xa6\n  end\n  \nWhich can be abbreviated as:\n\n  def update\n    with_action(:publish, :reject) do |a|\n      a.any { redirect_to root_path }\n    end\n  end\n\n(c) Copyright 2007 Brandon Keepers (brandon@opensoul.org)'
Graticule is a geocoding API for looking up address coordinates and performing distance calculations, supporting many popular APIs. b'Graticule\n=========\n\n```\n  grat\xc2\xb7i\xc2\xb7cule |\xcb\x88grat\xc9\x99\xcb\x8ckyo\xc5\x8dl|\n    Navigation. a network of parallels and meridians on a map or chart.\n```\n\nGraticule is a geocoding API for looking up address coordinates and performing distance calculations. It supports many popular APIs:\n\n* Yahoo\n* Google\n* MapQuest\n* Geocoder.ca\n* Geocoder.us\n* Geonames\n* SimpleGeo\n* Postcode Anywhere\n* MetaCarta\n* FreeThePostcode\n* LocalSearchMaps\n* Yandex\n\n### Installation\n\n```\ngem install graticule\n```\n\n### Usage\n\nThere is a companion Rails plugin called [acts_as_geocodable](https://github.com/collectiveidea/acts_as_geocodable) that makes geocoding seem like magic.\n\nGraticule exposes to main APIs: location search and distance calculations. Graticule also\nprovides a command line utility.\n\n#### Location Search / Geocoding\n\n```\nrequire \'rubygems\'\nrequire \'graticule\'\n\ngeocoder = Graticule.service(:google).new "api_key"\nlocation = geocoder.locate("61 East 9th Street, Holland, MI")\n```\n\nFor specific service documentation, please visit the [documentation](http://rdoc.info/github/collectiveidea/graticule).\n\n#### Distance Calculation\n\nGraticule includes 3 different distance formulas, Spherical (simplest but least accurate), Vincenty (most accurate and most complicated), and Haversine (somewhere inbetween). The default is Haversine. There are two ways to calculate the distance between two points.\n\nFirst is `Location#distance_to`:\n\n```\nholland = geocoder.locate("Holland, MI")\nchicago = geocoder.locate("Chicago, IL")\nholland.distance_to(chicago, :formula => :haversine) # or :spherical or :vincenty\n# => 101.997458788177\n```\n\nYou can also use the formula classes directly:\n\n```\nGraticule::Distance::Haversine.distance(holland, chicago)\n# => 101.997458788177\n```\n\nAll units are miles by default, but you can switch to kilometers with the `units` option\n\n```\nholland.distance_to(chicago, :units => :kilometers)\n#\nGraticule::Distance::Haversine.distance(holland, chicago, :kilometers)\n```\n\n\n#### Command Line\n\nGraticule includes a command line interface (CLI). The CLI does not currently support all of the implemented services.\n\n```\n$ geocode -s google -a [api_key] Washington, DC\nWashington, DC US\nlatitude: 38.895222, longitude: -77.036758\n```\n\n### Contributing\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project.\n\nHere are some ways you can contribute:\n\n* Reporting bugs\n* Suggesting new features\n* Writing or editing documentation\n* Writing specifications\n* Writing code (**no patch is too small**: fix typos, add comments, clean up inconsistent whitespace)\n* Refactoring code\n* Reviewing patches\n\n### Submitting an Issue\n\nWe use the [GitHub issue tracker](https://github.com/collectiveidea/graticule/issues) to track bugs and features. Before submitting a bug report or feature request, check to make sure it hasn\'t already been submitted. When submitting a bug report, please include a [Gist](https://gist.github.com/) that includes a stack trace and any details that may be necessary to reproduce the bug, including your gem version, Ruby version, and operating system. \n\n### Submitting a Pull Request\n\n1. Fork the project.\n2. Create a topic branch.\n3. Implement your feature or bug fix.\n4. Add specs for your feature or bug fix.\n5. Run `rake`. If your changes are not 100% covered and passing, go back to step 4.\n6. Commit and push your changes.\n7. Submit a pull request. Please do not include changes to the gemspec, version, or history file. (If you want to create your own version for some reason, please do so in a separate commit.)\n\n### Other Links\n\n[Blog posts about Graticule](http://opensoul.org/tags/geocoding)\n\n[Geocoder: Alternative Geocoding library](https://github.com/alex.../geocoder)\n\n\n'
Tinder is a Ruby API for interfacing with Campfire, the 37Signals chat application. b'# Tinder - get the Campfire started\n\n[![Gem Version](https://badge.fury.io/rb/tinder.png)](http://badge.fury.io/rb/tinder)\n[![Build Status](https://travis-ci.org/collectiveidea/tinder.png?branch=master)](https://travis-ci.org/collectiveidea/tinder)\n[![Code Climate](https://codeclimate.com/github/collectiveidea/tinder.png)](https://codeclimate.com/github/collectiveidea/tinder)\n[![Dependency Status](https://gemnasium.com/collectiveidea/tinder.png)](https://gemnasium.com/collectiveidea/tinder)\n\nTinder is a library for interfacing with Campfire, the chat application from 37Signals, allowing you to programmatically manage and speak/listen in chat rooms.  As of December 2009, thanks to initial work from Joshua Peek at 37signals, it now makes use of the official Campfire API (described at: http://developer.37signals.com/campfire/).\n\n## Usage\n\n    campfire = Tinder::Campfire.new \'mysubdomain\', :token => \'546884b3d8fee4d80665g561caf7h9f3ea7b999e\'\n    # or you can still use username/password and Tinder will look up your token\n    # campfire = Tinder::Campfire.new \'mysubdomain\', :username => \'user\', :password => \'pass\'\n    # or if you have an OAuth token then you can use that to connect\n    # campfire = Tinder::Campfire.new \'mysubdomain\', :oauth_token => \'546884b3d8fee4d80665g561caf7h9f3ea7b999e\'\n\n    room = campfire.rooms.first\n    room.rename \'New Room Names\'\n    room.speak \'Hello world!\'\n    room.paste "my pasted\\ncode"\n\n    room = campfire.find_room_by_guest_hash \'abc123\', \'John Doe\'\n    room.speak \'Hello world!\'\n\nSee the RDoc for more details.\n\n## Installation\n\n    gem install tinder\n\n## Contributions\n\nTinder is open source and contributions from the community are encouraged! No contribution is too small. Please consider:\n\n* adding an awesome feature\n* fixing a terrible bug\n* updating documentation\n* fixing a not-so-bad bug\n* fixing typos\n\nFor the best chance of having your changes merged, please:\n\n1. Ask us! We\'d love to hear what you\'re up to.\n2. Fork the project.\n3. Commit your changes and tests (if applicable (they\'re applicable)).\n4. Submit a pull request with a thorough explanation and at least one animated GIF.\n'
The invisible framework b'= THE INVISIBLE FRAMEWORK\nInvisible is like a giant robot combining the\nawesomeness of Rails, Merb, Camping and Sinatra.\nExcept, it\'s tiny (100 sloc).\n\nIt\'s easy to deploy and get started with using the\nfriendly generator.\n\nGet started today!\n\n  invisible my_lil_app\n  cd my_lil_app\n  thin start config/rack.ru\n  edit app.rb\n\nOr, if you\'re really into tiny things:\n\n  invisible my_very_lil_app --flat\n\n== Build web apps in just a few lines\nThe app syntax looks a lot like Sinatra:\n\n  get "/session/:value" do\n    session[:invisible] = params[:value]\n    render do\n      h2 "I added this to the session for you:"\n      pre params[:value].inspect\n      p { a "Go back", :href => "/" }\n    end\n  end\n\nYou can also render ERB, eRubis and Haml templates.\n\n== TATFT (aka Test all the fucking time)\nInvisible also comes with support for easy\ntesting, using Test::Unit or RSpec.\n\n  def test_should_get_root\n    assert get("/").ok?\n  end\n  \n  it "should get /" do\n    get("/").should be_ok\n  end\n\n== The extras you were missing in a micro-framework\nInvisible has:\n* reloading\n* configurable multi-environment support\n* multi-app in the same VM\n* session support (Cookie, Memcache, etc.)\n* a love affair with Rack middlewares\n* another love affair with testing\n* load just what you need approach (low mem)\n* awesomeness builtin, twice!\n* all that under 100 LOC (+ taxes)\n\nI\'m like, WOW! What are you waiting for?\nGo build the next Twitter now, mkay?\n\nRuby License, http://ruby-lang.org/en/LICENSE.txt\nInvisible is copyright Marc-Andre Cournoyer\nmacournoyer@gmail.com\n'
Starting out a suite of test-developed tools for solving boring social network portability tasks. 
Ruby replacement for bash+ssh b'= rush -- manage your unix systems with pure Ruby\n\nrush is a unix integration library and an interactive shell which uses pure Ruby syntax.  Walk directory trees; create, copy, search, and destroy files; find and kill processes - everything you\'d normally do with shell commands, now in the strict and elegant world of Ruby.\n\n== Usage\n\nCount the number of classes in your project using bash:\n\n  find myproj -name \\*.rb | xargs grep \'^\\s*class\' | wc -l\n\nIn rush, this is:\n\n  myproj[\'**/*.rb\'].search(/^\\s*class/).lines.size\n\nPesky stray mongrels?  In bash:\n\n  kill `ps aux | grep mongrel_rails | grep -v grep | cut -c 10-20`\n\nIn rush:\n\n  processes.filter(:cmdline => /mongrel_rails/).kill\n\n== As a library\n\n  require \'rubygems\'\n  require \'rush\'\n\n  file = Rush[\'/tmp/myfile\']\n  file.write "hello"\n  puts file.contents\n  file.destroy\n\n  puts Rush.my_process.pid\n  puts Rush.processes.size\n  puts Rush.bash("echo SHELL COMMAND | tr A-Z a-z")\n  puts Rush.launch_dir[\'*.rb\'].search(/Rush/).entries.inspect\n\n== Invoking the shell\n\nRun the "rush" binary to enter the interactive shell.\n\n== Remote access and clustering\n\nrush can control any number of remote machines from a single location. Copy files or directories between servers as seamlessly as if it was all local.\n\nExample of remote access:\n\n  local = Rush::Box.new(\'localhost\')\n  remote = Rush::Box.new(\'my.remote.server.com\')\n  local_dir = local[\'/Users/adam/myproj/\']\n  remote_dir = remote[\'/home/myproj/app/\']\n\n  local_dir.copy_to remote_dir\n  remote_dir[\'**/.svn/\'].each { |d| d.destroy }\n\nClustering:\n\n  local_dir = Rush::Box.new(\'localhost\')[\'/Users/adam/server_logs/\'].create\n  servers = %w(www1 www2 www3).map { |n| Rush::Box.new(n) }\n  servers.each { |s| s[\'/var/log/nginx/access.log\'].copy_to local_dir["#{s.host}_access.log"] }\n\n== Reference\n\nFor more details on syntax and commands, see:\n\n* Rush\n* Rush::Entry\n* Rush::File\n* Rush::Dir\n* Rush::Commands\n* Rush::Box\n* Rush::Process\n\n== Meta\n\nCreated by Adam Wiggins\n\nPatches contributed by Chihiro Ito, Gabriel Ware, Michael Schutte, Ricardo Chimal Jr., and Nicholas Schlueter, Pedro Belo, and Martin Kuehl\n\nLogo by James Lindenbaum\n\nReleased under the MIT License: http://www.opensource.org/licenses/mit-license.php\n\nhttp://rush.heroku.com\n\nhttp://groups.google.com/group/ruby-shell\n\n'
Rake in Io. b"________________\nike: rake for io\n----------------\n\nThis is how I'm learning Io.  By writing code, y'know.\n\n>> chris@ozmm.org\n=> http://github.com/defunkt/ike \n"
JSON Web App Framework [NOT UNDER ACTIVE DEVELOPMENT] b"= Halcyon\n== JSON Application Framework\n\nA JSON Web Application Framework for developing lightweight applications\ninterfaced via JSON-encoded HTTP requests. This is ideal for back end\napplications serving functionality for other applications.\n\nHalcyon consists of two parts, the server application and the client. The\nserver application is similar to a Merb or Rails app, without the need for\nimplementing views, and the client is used to facilitate talking to the\napplication from other applications.\n\n\n== On Rack\n\nHalcyon is a Rack application, meaning that it can sit right along with any\nother Rack app, such as a Merb or Rails app, and can be manipulated by any\nkind of Rack middleware/filter. This means that interfacing with Halcyon in\nunconventional ways is trivial since the Rack specification makes communicating\nwith Rack apps dead simple.\n\n\n== Development\n\nHalcyon is actively being developed by a very small community of developers and\ncontributors. Halcyon has seen a good deal of paradigm shift up until the 0.5.0\nrelease, but with that release its internal API has stabilized and should\nremain fairly backwards compatible from here on.\n\nThe changes made on the way to the 0.5.0 codebase were to remove all of the\nserver-like code to make Halcyon more application-centric and also to model\napplication development and structure to be more Rails- or Merb-like, though\nthis was just the natural evolution of Halcyon's design.\n\n\n== Installation\n\nA Gem of Halcyon is available.  You can install it with:\n\n  $ sudo gem install halcyon\n\nThe latest development release can be installed with RubyGems:\n\n  $ sudo gem install halcyon --source http://halcyon.rubyforge.org/latest/\n\nAlternatively, you can install the latest development efforts from the git\nrepository, located at http://github.com/mtodd/halcyon:\n\n  $ git clone git://github.com/mtodd/halcyon.git\n  $ cd halcyon; rake install\n\nDon't forget to install the JSON gem for improved performance:\n\n  $ sudo gem install json\n\nMore in depth documentation can be found at\nhttp://halcyon.rubyforge.org/docs/installation.html.\n\n\n== Usage\n\nAfter installing a Halcyon app, you can generate a new app, similar to the\n<tt>rails</tt> or <tt>merb-gen app</tt> commands, with this:\n\n  $ halcyon init app_name\n\nThis will create a directory and generate a skeletal Halcyon application. You\ncan run this application without changing anything; here's how:\n\n  $ cd app_name\n  $ halcyon start -p 4647\n\nA great tutorial to dive right into using Halcyon and writing apps is located\nat http://halcyon.rubyforge.org/docs/tutorial.html. This will step you through\nwhat to do, what to expect, and what it means.\n\n\n== Contact\n\nPlease mail bugs, suggestions and patches to <mailto:chiology@gmail.com>.\n\nYou are also welcome to join the #halcyon channel on irc.freenode.net.\n\nOur website is up so stop by and check out what's going down. Our address is\nhttp://halcyon.rubyforge.org/. On there you will find information about our\nmailing list as well, so do stop by.\n\n\n== Thanks To\n\n* Bill Marquette, typo correction, reviewing examples\n* Elliott Cable, missing dependency, Thin testing\n* ramstedt, Mongrel on JRuby port numericality issue (#14)\n* Ben Simpson, PHP Client bug fixes\n* Eivind Uggedal, dependencies for Router support of resources\n\n\n== Links\n\nHalcyon:: <http://halcyon.rubyforge.org/>\nAurora:: <http://aurora.rubyforge.org/>\n\nRack:: <http://rack.rubyforge.org/>\nMerb:: <http://merbivore.com/>\nJSON:: <http://json.rubyforge.org/>\n\nMatt Todd:: <http://maraby.org/>\n"
CruiseControl.rb is a continuous integration tool, written in Ruby. It is quick to install, simple to use and easy to hack. b"== CruiseControl.rb\n\nThis is a fork of CruiseControl.rb that supports the git SCM.  You'll need git installed to download this fork.\n\n=== github URL\n\n* git://github.com/benburkert/cruisecontrolrb.git\n\n=== Download from github\n\nType the following command to download the source\ngit clone git://github.com/benburkert/cruisecontrolrb.git\n\n=== What's this?\n\nCruiseControl.rb is a continuous integration tool. Its basic purpose in life is to alert members of a software project\nwhen one of them checks into a source control system something that breaks the build.\n\nCC.rb is easy to install, pleasant to use and simple to hack. It's written in Ruby.\n\n===Download the latest release from:\n\n* http://rubyforge.org/frs/?group_id=2918\n\n\n=== Project web site\n\n* http://cruisecontrolrb.thoughtworks.com\n\n\n===Project RubyForge site (for developers)\n\n* http://rubyforge.org/projects/cruisecontrolrb/\n\n\n===License:\n\n* Apache Software License 2.0\n\n\n(C) ThoughtWorks 2007\n"
(Unofficial) RELAX NG schema to specify the construction and meaning of OPML 1.0 and 2.0 documents. 
Ruby-native RDF library b'This library is deprecated.\n\nTo use RDF in Ruby, use [RDF.rb](http://rdf.rubyforge.org/).\n'
Ruby API for the YouTube REST API 
Facebook-style lightbox, built in jQuery b'# Facebox\n\nFacebox is a jQuery-based, Facebook-style lightbox which can display images, divs, or entire remote pages.\n\n[See it in action](http://defunkt.github.com/facebox/).\n\n![Sample Image](http://share.kyleneath.com/captures/Facebox_1.2-20100417-190352.jpg)\n\n[Download the latest release](http://github.com/defunkt/facebox/zipball/master)\n\n## Compatibility\n\nThis release relies on a lot of advanced CSS techniques (box-shadow, border-radius, RGBA). That being said, it\'s compatible with many browsers.\n\n* **Safari 4**\n* **Webkit Nightlies** (Chromium, Chrome) as of 4/17/10\n* **Firefox 3.5**\n* **IE8** (degraded experience)\n* **IE7** (degraded experience)\n* IE6 - I just don\'t care\n* Opera - I just don\'t care\n\n## Usage\n\nInclude jQuery, `src/facebox.js` and `src/facebox.css`. Then tell facebox where you\'ve put `src/loading.gif` and `src/closelabel.png`\n\n    $.facebox.settings.closeImage = \'/images/facebox/closelabel.png\'\n    $.facebox.settings.loadingImage = \'/images/facebox/loading.gif\'\n\nCalling facebox() on any anchor tag will do the trick, it\'s easier to give your Faceboxy links a rel="facebox"  and hit them all onDomReady.\n\n    jQuery(document).ready(function($) {\n      $(\'a[rel*=facebox]\').facebox()\n    })\n\nAny anchor links with `rel="facebox"` with now automatically use facebox:\n\n    <a href="#terms" rel="facebox">Terms</a>\n      Loads the #terms div in the box\n\n    <a href="terms.html" rel="facebox">Terms</a>\n      Loads the terms.html page in the box\n\n    <a href="terms.png" rel="facebox">Terms</a>\n      Loads the terms.png image in the box\n\n\n### Using facebox programmatically\n\n    jQuery.facebox(\'some html\')\n    jQuery.facebox(\'some html\', \'my-groovy-style\')\n\nThe above will open a facebox with "some html" as the content.\n\n    jQuery.facebox(function($) {\n      $.get(\'blah.html\', function(data) { $.facebox(data) })\n    })\n\nThe above will show a loading screen before the passed function is called,\nallowing for a better ajaxy experience.\n\nThe facebox function can also display an ajax page, an image, or the contents of a div:\n\n    jQuery.facebox({ ajax: \'remote.html\' })\n    jQuery.facebox({ ajax: \'remote.html\' }, \'my-groovy-style\')\n    jQuery.facebox({ image: \'stairs.jpg\' })\n    jQuery.facebox({ image: \'stairs.jpg\' }, \'my-groovy-style\')\n    jQuery.facebox({ div: \'#box\' })\n    jQuery.facebox({ div: \'#box\' }, \'my-groovy-style\')\n\n### Events\n\nWant to close the facebox?  Trigger the `close.facebox` document event:\n\n    jQuery(document).trigger(\'close.facebox\')\n\nFacebox also has a bunch of other hooks:\n\n* `loading.facebox`\n* `beforeReveal.facebox`\n* `reveal.facebox` (aliased as `afterReveal.facebox`)\n* `init.facebox`\n* `afterClose.facebox`  (callback after closing `facebox`)\n\nSimply bind a function to any of these hooks:\n\n    $(document).bind(\'reveal.facebox\', function() { ...stuff to do after the facebox and contents are revealed... })\n\n### Customization\n\nYou can give the facebox container an extra class (to fine-tune the display of the facebox) with the facebox[.class] rel syntax.\n\n    <a href="remote.html" rel="facebox[.bolder]">text</a>\n\n## Contact & Help\n\nIf you have questions, feel free to ask on the [Google Groups Mailing List](http://groups.google.com/group/facebox/). Alternatively if you find a bug, you can [open an issue](http://github.com/defunkt/facebox/issues).\n'
HTML Abstraction Markup Language - A Markup Haiku b'# Haml\n\n[![Gem Version](https://badge.fury.io/rb/haml.svg)](http://rubygems.org/gems/haml)\n[![Build Status](https://travis-ci.org/haml/haml.svg?branch=master)](http://travis-ci.org/haml/haml)\n[![Code Climate](http://img.shields.io/codeclimate/github/haml/haml.svg)](https://codeclimate.com/github/haml/haml)\n[![Coverage Status](http://img.shields.io/coveralls/haml/haml.svg)](https://coveralls.io/r/haml/haml)\n[![Inline docs](http://inch-ci.org/github/haml/haml.png)](http://inch-ci.org/github/haml/haml)\n\nHaml is a templating engine for HTML. It\'s designed to make it both easier and\nmore pleasant to write HTML documents, by eliminating redundancy, reflecting the\nunderlying structure that the document represents, and providing an elegant syntax\nthat\'s both powerful and easy to understand.\n\n## Basic Usage\n\nHaml can be used from the command line or as part of a Ruby web framework. The\nfirst step is to install the gem:\n\n~~~sh\ngem install haml\n~~~\n\nAfter you write some Haml, you can run\n\n~~~sh\nhaml document.haml\n~~~\n\nto compile it to HTML. For more information on these commands, check out\n\n~~~sh\nhaml --help\n~~~\n\nTo use Haml programatically, check out the [YARD documentation](http://haml.info/docs/yardoc/).\n\n## Using Haml with Rails\n\nTo use Haml with Rails, simply add Haml to your Gemfile and run `bundle`.\n\n~~~ruby\ngem \'haml\'\n~~~\n\nHaml 5 will require Rails version 4.0 or later. If you are using Rails 3.x, you should use Haml version 4.0.x:\n\n~~~ruby\ngem \'haml\', \'~> 4.0.5\'\n~~~\n\nIf you\'d like to replace Rails\'s Erb-based generators with Haml, add\n[haml-rails](https://github.com/indirect/haml-rails) to your Gemfile as well.\n\n## Formatting\n\nThe most basic element of Haml is a shorthand for creating HTML:\n\n~~~haml\n%tagname{:attr1 => \'value1\', :attr2 => \'value2\'} Contents\n~~~\n\nNo end-tag is needed; Haml handles that automatically. If you prefer HTML-style\nattributes, you can also use:\n\n~~~haml\n%tagname(attr1=\'value1\' attr2=\'value2\') Contents\n~~~\n\nAdding `class` and `id` attributes is even easier. Haml uses the same syntax as\nthe CSS that styles the document:\n\n~~~haml\n%tagname#id.class\n~~~\n\nIn fact, when you\'re using the `<div>` tag, it becomes _even easier_. Because\n`<div>` is such a common element, a tag without a name defaults to a div. So\n\n~~~haml\n#foo Hello!\n~~~\n\nbecomes\n\n~~~html\n<div id=\'foo\'>Hello!</div>\n~~~\n\nHaml uses indentation to bring the individual elements to represent the HTML\nstructure. A tag\'s children are indented beneath than the parent tag. Again, a\nclosing tag is automatically added. For example:\n\n~~~haml\n%ul\n  %li Salt\n  %li Pepper\n~~~\n\nbecomes:\n\n~~~html\n<ul>\n  <li>Salt</li>\n  <li>Pepper</li>\n</ul>\n~~~\n\nYou can also put plain text as a child of an element:\n\n~~~haml\n%p\n  Hello,\n  World!\n~~~\n\nIt\'s also possible to embed Ruby code into Haml documents. An equals sign, `=`,\nwill output the result of the code. A hyphen, `-`, will run the code but not\noutput the result. You can even use control statements like `if` and `while`:\n\n~~~haml\n%p\n  Date/Time:\n  - now = DateTime.now\n  %strong= now\n  - if now > DateTime.parse("December 31, 2006")\n    = "Happy new " + "year!"\n~~~\n\nHaml provides far more tools than those presented here. Check out the [reference\ndocumentation](http://haml.info/docs/yardoc/file.REFERENCE.html)\nfor full details.\n\n### Indentation\n\nHaml\'s indentation can be made up of one or more tabs or spaces. However,\nindentation must be consistent within a given document. Hard tabs and spaces\ncan\'t be mixed, and the same number of tabs or spaces must be used throughout.\n\n## Contributing\n\nContributions are welcomed, but before you get started please read the\n[guidelines](http://haml.info/development.html#contributing).\n\nAfter forking and then cloning the repo locally, install Bundler and then use it\nto install the development gem dependencies:\n~~~sh\ngem install bundler\nbundle install\n~~~\n\nOnce this is complete, you should be able to run the test suite:\n~~~sh\nrake\n~~~\n\nYou\'ll get a warning that you need to install haml-spec, so run this:\n\n~~~sh\ngit submodule update --init\n~~~\n\nAt this point `rake` should run without error or warning and you are ready to\nstart working on your patch!\n\nNote that you can also run just one test out of the test suite if you\'re working\non a specific area:\n\n~~~sh\nruby -Itest test/helper_test.rb -n test_buffer_access\n~~~\n\nHaml currently supports Ruby 2.0.0 and higher, so please make sure your changes run on 2.0+.\n\n## Team\n\n### Current Maintainers\n\n* [Norman Clarke](https://github.com/norman)\n* [Matt Wildig](https://github.com/mattwildig)\n* [Akira Matsuda](https://github.com/amatsuda)\n* [Tee Parham](https://github.com/teeparham)\n\n### Alumni\n\nHaml was created by [Hampton Catlin](http://hamptoncatlin.com), the author of\nthe original implementation. Hampton is no longer involved in day-to-day coding,\nbut still consults on language issues.\n\n[Natalie Weizenbaum](http://nex-3.com) was for many years the primary developer\nand architect of the "modern" Ruby implementation of Haml.\n\n## License\n\nSome of Natalie\'s work on Haml was supported by Unspace Interactive.\n\nBeyond that, the implementation is licensed under the MIT License.\n\nCopyright (c) 2006-2013 Hampton Catlin, Natalie Weizenbaum and the Haml team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the "Software"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Keep it stupid simple Generator b'= KISS Generator\n\nKeep it stupid simple (or simple stupid) code generator. \n\n== Installation\n\n  gem install kissgen\n\n== API Usage\n\n  require "kissgen"\n\n  @generator = KISSGen.generator(\n                   :generator => "/path/to/generator", \n                   :directory => "/path/where/files/are/generated", \n                   :pretend   => true,\n                   :assignes  => {:my_name => "lancelot", ...},\n                   :files     => {"app", "models"}\n                  )\n\n Now perform the generation:\n\n   @generator.generate!\n\n Note that the last loaded generator is retrievable via:\n\n  @generator = KISSGen.generator # => Last loaded generator\n  \n  \nInstead of using @g.directory and @g.assign, you can also create a setup.rb file inside of your generator directory\nand run the instance methods directly from there. IE:\n  \nsetup.rb:\n  directory "/app"\n  file "README"\n  \n== Console Usage\n\n  kissgen -s /path/to/generator -t /path/where/files/are/generated\n\n== Repository\n\n  visit http://github.com/lancecarlson/kissgen/ or git clone git://github.com/lancecarlson/kissgen.git'
our hacks to exception_logger b'ExceptionLogger\n===============\n\nThe Exception Logger (forgive the horrible name) logs your Rails exceptions in the database and provides a funky web interface to manage them.\n\nFirst you need to generate the migration:\n\n  ./script/generate exception_migration\n\nNext, you\'ll need to include the ExceptionLoggable module into ApplicationController.  Once that\'s done you might want to modify key methods to customize the logging:\n\n  render_404(exception) - Shows the 404 template.\n  \n  render_500(exception) - Shows the 500 template.\n  \n  log_exception(exception) - Logs the actual exception in the database.\n  \n  rescue_action_in_public(exception) - Does not log these exceptions: ActiveRecord::RecordNotFound, ActionController::UnknownController, ActionController::UnknownAction\n\nAfter that, visit /logged_exceptions in your application to manage the exceptions.\n\nIt\'s understandable that you may want to require authentication.  Add this to your config/environments/production.rb:\n\n  # config/environments/production.rb\n  config.after_initialize do\n    require \'application\' unless Object.const_defined?(:ApplicationController)\n    LoggedExceptionsController.class_eval do\n      # set the same session key as the app\n      session :session_key => \'_beast_session_id\'\n      \n      # include any custom auth modules you need\n      include AuthenticationSystem\n      \n      before_filter :login_required\n      \n      # optional, sets the application name for the rss feeds\n      self.application_name = "Beast"\n      \n      protected\n        # only allow admins\n        # this obviously depends on how your auth system works\n        def authorized?\n          current_user.is_a?(Admin)\n        end\n        \n        # assume app\'s login required doesn\'t use http basic\n        def login_required_with_basic\n          respond_to do |accepts|\n            # alias_method_chain will alias the app\'s login_required to login_required_without_basic\n            accepts.html { login_required_without_basic }\n            \n            # access_denied_with_basic_auth is defined in LoggedExceptionsController\n            # get_auth_data returns back the user/password pair\n            accepts.rss do\n              access_denied_with_basic_auth unless self.current_user = User.authenticate(*get_auth_data)\n            end\n          end\n        end\n        \n        alias_method_chain :login_required, :basic\n    end\n  end\n\nThe exact code of course depends on the specific needs of your application.\n\nCREDITS\n\nJamis Buck  - original exception_notification plugin\nRick Olson  - model/controller code\nJosh Goebel - design\n\nUPDATES\n\nChris Wanstrath - use will_paginate\nHenrik Nyh (DanceJam) - catch exceptions in development mode\n'
BrainBuster - a logic captcha for Rails b'BrainBuster - A Logic Captcha For Rails\n=======================================\n\nBrainBuster is a logic captcha for Rails.  A logic captcha attempts to detect automated responses (ie spambots) by asking a simple question, such as a word puzzle or math question.  Logic captchas are often easier for humans to answer then image based captchas, but can exclude foreign users or users with cognitive disabilities.  \n\nSome example question and answers are:\n\n"What is fifteen minus five?" => "10"\n\n"Which one of these doesn\'t fit? \'blue, red, yellow, flower\'" => \'flower\'\n\nFor more on logic captchas and alternate approaches, please see http://www.w3.org/TR/turingtest/#logic\n\nInstall\n-------\n\nFirst, install from GitHub:\n\n    script/plugin install git://github.com/rsanheim/brain_buster.git\n  \nGenerate the migration, modifying the stock questions and answers if you wish, and migrate:\n\n    script/generate brain_buster_migration \n    rake db:migrate\n    \nOptionally set the cookie salt in your ApplicationController (or don\'t touch it to use the default).  \n\nAdd the appropriate filters where you want to use the captcha, and make sure to render the `_captcha` partial in any views where you want to challenge the user with a captcha.  \n\nDetails\n-------\n\nBrainBuster includes a model for storing questions and answers, a small module that is mixed into ActionController::Bases, a small partial to display the question and input form, and a basic stylesheet for styling the partial.  There is also a "captcha_footer" partial that is not functionally required at all, its just included to make it easy to give credit and a little link-love if you find this useful.  The style sheet is also not required of course, it just has a little bit of clean css for the captcha form.\n\nThis captcha is meant to be user-friendly, so for a questions like "What is two plus two", all of the following answers will work: "4", "four", "Four", "   four   ".  By default, a user only needs to answer a captcha _once_, then they are cookied and don\'t have to answer another question until they close/reopen their browser.\n\nExample\n-------\n\nLets pretend that you have a simple app that displays Pages following fairly standard Rails RESTful conventions.  After initial install and database setup (detailed above), you need to add the filters to the any action(s) you want protected.  \n\nLets say in PagesController you have a edit action that presents a page to a user in a form, and it posts the change to #update.  So we need to create a captcha before we show the user the edit form, and we need to validate that captcha before we allow the update to succeed.\n\n    class PagesController\n      before_filter :create_brain_buster, :only => [:edit]\n      before_filter :validate_brain_buster, :only => [:update]\n      \n      def edit # your normal code is here\n      def update # updating your models, etc\n\nOverride `render_or_redirect_for_captcha_failure` in your controller, to handle the captcha failure state.  Note that if you *don\'t override* this method, BrainBuster will just do render :text with the brain buster error message -- this is probably not what you want.\n\n    class PagesController\n      \n      def render_or_redirect_for_captcha_failure\n        render :action => "show"\n      end\n\n\nRender the partial in appropriate templates - if we are creating the captcha for the edit action, we probably need the form rendered in edit.html.erb.\n\n    - edit.html.erb:\n      ... inside your form somewhere\n      <%= render :partial => \'/captcha\' %> \n\nCopy the style sheet into your app\'s public directory (optional)\n\n    cp vendor/plugins/brain_buster/assets/stylesheets/captcha.css public/stylesheets/             \n\n    # add the style sheet to any views that use the captcha\n    <%= stylesheet_link_tag \'captcha\' %>\n\nThats it.  Now if the captcha fails on update, the filter chain will place the failure message into `flash[:error]` and call `render_or_redirect_for_captcha_failure`.  \n\nTroubleshooting\n---------------\n\n* If you don\'t override render_or_redirect_for_captcha_failure, you will see a plain error message for a failed captcha.\n* If you delete a question, the random id finder may try to find that deleted question and blow up.  For now, just insert another question with that same id to fix the issue.\n* The built in questions and answers could be scripted fairly easily by a determined spammer, but usually just having _some_ defense makes bots move on to easier targets.\n\nReal world usage\n----------------\n[Tender](https://help.tenderapp.com) uses BrainBuster.\n\nLinks\n-----\n[Homepage](http://github.com/rsanheim/brain_buster) is on GitHub.\n\n\nCredits\n-------\nRob Sanheim started and maintains BrainBuster\nVarious other folks from [http://thinkrelevance.com](Relevance) have paired and helped with issues\n'
Super streamlined memory profiler with real time graphs for Ruby programs 
Linthicum b'== Welcome to Linthicum\n\nLithicum is attempt at creating a blog engine to work my way.\n\n== External dependencies\n\nhpricot 0.6'
Textilize plugin for rails, based on PermalinkFu b'TextilizeFu\n\n  class Article < ActiveRecord::Base\n    textilize :body\n  end\n\nThis will convert the body from textile into html and store the result in body_html\n\nBased primarily off permalink_fu from Rick Olsen (technoweenie)'
Rails-based content management system/framework b'h2. Overview\n\nslate is a content management system/framework originally developed at\nWest Virginia University Web Services (http://www.wvu.edu).\n\nh2. Setup\n\n* Configure your database connection (database.yml)\n* Create your database and load the schema (rake db:schema:load)\n* Run slate setup to create a login (rake slate:setup)\n\nh2. Local Machine Setup\n\n* Add slate.local.host to your hosts file. Point it at 127.0.0.1\n* Start mongrel (script/server)\n* Access admin at slate.local.host:3000\n\n\nh2. Hey!\n\n*Please be aware*: slate is still in early _alpha_ stage.  This version (0.5)\nis a complete rebuild of the original system used at WVU.  Many aspects\nhave not been rebuilt yet.  Comments are welcome, but no support will \nbe provided at this point.'
Magic configuration for your nginx, mongrels and god! b'README'
Ruby process monitor b"god\n    by Tom Preston-Werner\n       Kevin Clark (kqueue/netlink support)\n       \n    http://god.rubyforge.org\n\n== DESCRIPTION:\n  \nGod is an easy to configure, easy to extend monitoring framework written \nin Ruby.\n\nKeeping your server processes and tasks running should be a simple part of \nyour deployment process. God aims to be the simplest, most powerful \nmonitoring application available.\n\n== DOCUMENTATION:\n\nSee online documentation at http://god.rubyforge.org\n\n== COMMUNITY:\n\nSign up for the god mailing list at http://groups.google.com/group/god-rb\n\n== INSTALL:\n\n  $ sudo gem install god\n  \n== CONTRIBUTE:\n\nLatest code is available at http://github.com/mojombo/god\n\nThe 'master' branch can be cloned with:\n\n  $ git clone git://github.com/mojombo/god.git\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 Tom Preston-Werner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
newjs - create new JavaScript libraries b"= New JavaScript Generator - newjs\n\n* http://newjs.rubyforge.org\n\n== Description\n\nThe +newjs+ command creates a new JavaScript project/application\nwith a default directory structure and configuration at the path you specify.\n\n== Example\n\n+newjs path/to/my-app-name+\n\nThis generates a skeletal JavaScript project/application\ninstallation in path/to/my-app-name\n\n== Author\n\nDr Nic Williams, http://drnicwilliams.com, drnicwilliams@gmail.com \n\n== License\n\n(The MIT License)\n\nCopyright (c) 2008-2009 Dr Nic Williams\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
A Ruby interface to the Twitter API. b'# The Twitter Ruby Gem\n\n[![Gem Version](http://img.shields.io/gem/v/twitter.svg)][gem]\n[![Build Status](http://img.shields.io/travis/sferik/twitter.svg)][travis]\n[![Dependency Status](http://img.shields.io/gemnasium/sferik/twitter.svg)][gemnasium]\n[![Code Climate](http://img.shields.io/codeclimate/github/sferik/twitter.svg)][codeclimate]\n[![Coverage Status](http://img.shields.io/coveralls/sferik/twitter.svg)][coveralls]\n[![Inline docs](http://inch-ci.org/github/sferik/twitter.svg?style=shields)][inchpages]\n\n[gem]: https://rubygems.org/gems/twitter\n[travis]: https://travis-ci.org/sferik/twitter\n[gemnasium]: https://gemnasium.com/sferik/twitter\n[codeclimate]: https://codeclimate.com/github/sferik/twitter\n[coveralls]: https://coveralls.io/r/sferik/twitter\n[inchpages]: http://inch-ci.org/github/sferik/twitter\n\nA Ruby interface to the Twitter API.\n\n## Installation\n    gem install twitter\n\n## CLI\nLooking for the Twitter command-line interface? It was [removed][] from this\ngem in version 0.5.0 and now exists as a [separate project][t].\n\n[removed]: https://github.com/sferik/twitter/commit/dd2445e3e2c97f38b28a3f32ea902536b3897adf\n[t]: https://github.com/sferik/t\n\n## Documentation\n[http://rdoc.info/gems/twitter][documentation]\n\n[documentation]: http://rdoc.info/gems/twitter\n\n## Examples\n[https://github.com/sferik/twitter/tree/master/examples][examples]\n\n[examples]: https://github.com/sferik/twitter/tree/master/examples\n\n## Announcements\nYou should [follow @gem][follow] on Twitter for announcements and updates about\nthis library.\n\n[follow]: https://twitter.com/gem\n\n## Mailing List\nPlease direct questions about this library to the [mailing list].\n\n[mailing list]: https://groups.google.com/group/twitter-ruby-gem\n\n## Apps Wiki\nDoes your project or organization use this gem? Add it to the [apps\nwiki][apps]!\n\n[apps]: https://github.com/sferik/twitter/wiki/apps\n\n## Configuration\nTwitter API v1.1 requires you to authenticate via OAuth, so you\'ll need to\n[register your application with Twitter][register]. Once you\'ve registered an\napplication, make sure to set the correct access level, otherwise you may see\nthe error:\n\n[register]: https://apps.twitter.com/\n\n    Read-only application cannot POST\n\nYour new application will be assigned a consumer key/secret pair and you will\nbe assigned an OAuth access token/secret pair for that application. You\'ll need\nto configure these values before you make a request or else you\'ll get the\nerror:\n\n    Bad Authentication data\n\nYou can pass configuration options as a block to `Twitter::REST::Client.new`.\n\n```ruby\nclient = Twitter::REST::Client.new do |config|\n  config.consumer_key        = "YOUR_CONSUMER_KEY"\n  config.consumer_secret     = "YOUR_CONSUMER_SECRET"\n  config.access_token        = "YOUR_ACCESS_TOKEN"\n  config.access_token_secret = "YOUR_ACCESS_SECRET"\nend\n```\n\n## Usage Examples\nAfter configuring a `client`, you can do the following things.\n\n**Tweet (as the authenticated user)**\n\n```ruby\nclient.update("I\'m tweeting with @gem!")\n```\n**Follow a user (by screen name or user ID)**\n\n```ruby\nclient.follow("gem")\nclient.follow(213747670)\n```\n**Fetch a user (by screen name or user ID)**\n\n```ruby\nclient.user("gem")\nclient.user(213747670)\n```\n**Fetch a cursored list of followers with profile details (by screen name or user ID, or by implicit authenticated user)**\n\n```ruby\nclient.followers("gem")\nclient.followers(213747670)\nclient.followers\n```\n**Fetch a cursored list of friends with profile details (by screen name or user ID, or by implicit authenticated user)**\n\n```ruby\nclient.friends("gem")\nclient.friends(213747670)\nclient.friends\n```\n\n**Fetch the timeline of Tweets by a user**\n\n```ruby\nclient.user_timeline("gem")\nclient.user_timeline(213747670)\n```\n**Fetch the timeline of Tweets from the authenticated user\'s home page**\n\n```ruby\nclient.home_timeline\n```\n**Fetch the timeline of Tweets mentioning the authenticated user**\n\n```ruby\nclient.mentions_timeline\n```\n**Fetch a particular Tweet by ID**\n\n```ruby\nclient.status(27558893223)\n```\n**Collect the three most recent marriage proposals to @justinbieber**\n\n```ruby\nclient.search("to:justinbieber marry me", result_type: "recent").take(3).collect do |tweet|\n  "#{tweet.user.screen_name}: #{tweet.text}"\nend\n```\n**Find a Japanese-language Tweet tagged #ruby (excluding retweets)**\n\n```ruby\nclient.search("#ruby -rt", lang: "ja").first.text\n```\nFor more usage examples, please see the full [documentation][].\n\n## Streaming\nSite Streams are restricted to whitelisted accounts. To apply for access,\n[follow the steps in the Site Streams documentation][site-streams]. [User\nStreams][user-streams] do not require prior approval.\n\n[site-streams]: https://dev.twitter.com/streaming/sitestreams#applyingforaccess\n[user-streams]: https://dev.twitter.com/streaming/userstreams\n\n**Configuration works just like `Twitter::REST::Client`**\n\n```ruby\nclient = Twitter::Streaming::Client.new do |config|\n  config.consumer_key        = "YOUR_CONSUMER_KEY"\n  config.consumer_secret     = "YOUR_CONSUMER_SECRET"\n  config.access_token        = "YOUR_ACCESS_TOKEN"\n  config.access_token_secret = "YOUR_ACCESS_SECRET"\nend\n```\n\n**Stream a random sample of all tweets**\n\n```ruby\nclient.sample do |object|\n  puts object.text if object.is_a?(Twitter::Tweet)\nend\n```\n\n**Stream mentions of coffee or tea**\n\n```ruby\ntopics = ["coffee", "tea"]\nclient.filter(track: topics.join(",")) do |object|\n  puts object.text if object.is_a?(Twitter::Tweet)\nend\n```\n\n**Stream tweets, events, and direct messages for the authenticated user**\n\n```ruby\nclient.user do |object|\n  case object\n  when Twitter::Tweet\n    puts "It\'s a tweet!"\n  when Twitter::DirectMessage\n    puts "It\'s a direct message!"\n  when Twitter::Streaming::StallWarning\n    warn "Falling behind!"\n  end\nend\n```\n\nAn `object` may be one of the following:\n* `Twitter::Tweet`\n* `Twitter::DirectMessage`\n* `Twitter::Streaming::DeletedTweet`\n* `Twitter::Streaming::Event`\n* `Twitter::Streaming::FriendList`\n* `Twitter::Streaming::StallWarning`\n\n## Object Graph\n![Entity-relationship diagram][erd]\n\n[erd]: https://cdn.rawgit.com/sferik/twitter/master/etc/erd.svg "Entity-relationship diagram"\n\nThis entity-relationship diagram is generated programatically. If you add or\nremove any Twitter objects, please regenerate the ERD with the following\ncommand:\n\n    bundle exec rake erd\n\n## Supported Ruby Versions\nThis library aims to support and is [tested against][travis] the following Ruby\nversions:\n\n* Ruby 1.9.3\n* Ruby 2.0.0\n* Ruby 2.1\n* Ruby 2.2\n* JRuby 1.7 (in Ruby 1.9 mode)\n\nIf something doesn\'t work on one of these versions, it\'s a bug.\n\nThis library may inadvertently work (or seem to work) on other Ruby versions,\nhowever support will only be provided for the versions listed above.\n\nIf you would like this library to support another Ruby version or\nimplementation, you may volunteer to be a maintainer. Being a maintainer\nentails making sure all tests run and pass on that implementation. When\nsomething breaks on your implementation, you will be responsible for providing\npatches in a timely fashion. If critical issues for a particular implementation\nexist at the time of a major release, support for that Ruby version may be\ndropped.\n\n## Versioning\nThis library aims to adhere to [Semantic Versioning 2.0.0][semver]. Violations\nof this scheme should be reported as bugs. Specifically, if a minor or patch\nversion is released that breaks backward compatibility, that version should be\nimmediately yanked and/or a new version should be immediately released that\nrestores compatibility. Breaking changes to the public API will only be\nintroduced with new major versions. As a result of this policy, you can (and\nshould) specify a dependency on this gem using the [Pessimistic Version\nConstraint][pvc] with two digits of precision. For example:\n\n    spec.add_dependency \'twitter\', \'~> 6.0\'\n\n[semver]: http://semver.org/\n[pvc]: http://guides.rubygems.org/patterns/#pessimistic-version-constraint\n\n## Copyright\nCopyright (c) 2006-2015 Erik Michaels-Ober, John Nunemaker, Wynn Netherland, Steve Richert, Steve Agalloco.\nSee [LICENSE][] for details.\n\n[license]: LICENSE.md\n'
[DEAD] Google Base Auth Class is a base for authenticating to google and making requests to google services. b'DEAD AND UNMAINTAINED\n\nGoogle Base Class is a base for authenticating to google and making requests to google services.\n\n=Installation\n\nsudo gem install googlebase\n\n=Usage\n\n===Establish A Connection\n\nThe code below shows how to use the gem by itself. It checks if username and password are correct (raising Google::LoginError on FAIL) and stores the session id internally. Then you can make requests and the session id is automatically passed in a cookie.\n\n\trequire \'google/base\'\n\tGoogle::Base.establish_connection(\'username\', \'password\')\n\tGoogle::Base.get(\'http://google.com/reader/path/to/whatever/\')\n\tGoogle::Base.get(\'https://google.com:443/analytics/home/\') # to make an ssl request\n\n===Inheritance\n\nThis example takes things a bit farther and shows how to use this class simply as a base to get some methods for free and then wrap whatever google service you would like.\n\t\n\trequire \'google/base\'\n\tGoogle::Base.establish_connection(\'username\', \'password\')\n\tmodule Google\n\t  module Reader\n\t    class Base < Google::Base\n\t      class << self\n\t        def get_token\n\t          get("http://www.google.com/reader/api/0/token")\n\t        end\n\t      end\n\t    end\n\t  end\n\tend\n\n\tputs Google::Reader::Base.get_token\n'
[DEAD AND UNMAINTAINED] Wrapper for Google Reader's undocumented and possibly "unstable" API. By unstable, I mean if they haven't documented it, then they could change it at anytime without notice. b"DEAD AND UNMAINTAINED\n\n= Installation\n\nsudo gem install googlereader\n\n= Usage\n\n  require 'google/reader'\n  Google::Reader::Base.establish_connection('username', 'password')\n\n  # => all feeds and labels unread counts\n  pp Google::Reader::Count.all\n\n  # => all unread counts for labels\n  pp Google::Reader::Count.labels\n\n  # => all unread counts for feeds\n  pp Google::Reader::Count.feeds\n\n  # => all items for a label\n  pp Google::Reader::Label.all\n  \n  puts 'Links'\n  # 5 latest unread items\n  unread = Google::Reader::Label.new('links').entries(:unread, :n => 5) \n  unread.each { |p| puts p.title }\n  \n  puts 'Using Continuation'\n  # next 5 latest items after the unread above\n  more_unread = Google::Reader::Label.new('links').entries(:unread, :n => 5, :c => unread.continuation) \n  more_unread.each { |p| puts p.title }\n\t\n= Notes\n\nI'm using the following links below as documentation (and also a bit of reverse engineering with Firebug) until google releases an official and documented api:\n\n* http://code.google.com/p/pyrfeed/wiki/GoogleReaderAPI\n* http://blog.gpowered.net/2007/08/google-reader-api-functions.html\n"
[DEAD] Mirrored is a wrapper for the mirrored del.icio.us and ma.gnolia apis. b"= Mirrored\n\nMirrored is a really easy to use wrapper for the delicious api (http://del.icio.us/help/api) and magnolia's mirrored version (http://wiki.ma.gnolia.com/Mirror%27d_API).\n\n== Install\n\n\tsudo gem install mirrored -y\n\t\n== Usage\n\n1. Setup your connection to either :magnolia or :delicious.\n\n\tMirrored::Base.establish_connection(:magnolia, 'jnunemaker', 'password')\n\n2. Work the mirrored classes (Post, Tag, Update and Date)\t\n\n\t# => posts tagged ruby\n\tMirrored::Post.find(:get, :tag => 'ruby')\n\t\nYou can also manipulate tags, find out when your last update was and see information about your posting habits. See the rubyforge page for more information (http://mirrored.rubyforge.org)."
[DEAD] Scrobbler is a wrapper for the audioscrobbler (last.fm) web services. b'= Scrobbler\n\nScrobbler is a wrapper for the audioscrobbler web services (http://www.audioscrobbler.net/data/webservices/). \n\nBelow is just a sampling of how easy this lib is to use.\n\n== Users\n\n    user = Scrobbler::User.new(\'jnunemaker\')\n\n    puts "#{user.username}\'s Recent Tracks"\n    puts "=" * (user.username.length + 16)\n    user.recent_tracks.each { |t| puts t.name }\n\n    puts\n    puts\n\n    puts "#{user.username}\'s Top Tracks"\n    puts "=" * (user.username.length + 13)\n    user.top_tracks.each { |t| puts "(#{t.playcount}) #{t.name}" }\n    \n== Albums\n    \n    album = Scrobbler::Album.new(\'Carrie Underwood\', \'Some Hearts\', :include_info => true)\n\n    puts "Album: #{album.name}"\n    puts "Artist: #{album.artist}"\n    puts "Reach: #{album.reach}"\n    puts "URL: #{album.url}"\n    puts "Release Date: #{album.release_date.strftime(\'%m/%d/%Y\')}"\n\n    puts\n    puts\n\n    puts "Tracks"\n    longest_track_name = album.tracks.collect(&:name).sort { |x, y| y.length <=> x.length }.first.length\n    puts "=" * longest_track_name\n    album.tracks.each { |t| puts t.name }\n    \n== Artists\n    \n    artist = Scrobbler::Artist.new(\'Carrie Underwood\')\n\n    puts \'Top Tracks\'\n    puts "=" * 10\n    artist.top_tracks.each { |t| puts "(#{t.reach}) #{t.name}" }\n\n    puts\n\n    puts \'Similar Artists\'\n    puts "=" * 15\n    artist.similar.each { |a| puts "(#{a.match}%) #{a.name}" }\n    \n== Tags \n    \n    tag = Scrobbler::Tag.new(\'country\')\n\n    puts \'Top Albums\'\n    tag.top_albums.each { |a| puts "(#{a.count}) #{a.name} by #{a.artist}" }\n\n    puts\n\n    puts \'Top Tracks\'\n    tag.top_tracks.each { |t| puts "(#{t.count}) #{t.name} by #{t.artist}" }\n    \n== Tracks\n    \n    track = Scrobbler::Track.new(\'Carrie Underwood\', \'Before He Cheats\')\n    puts \'Fans\'\n    puts "=" * 4\n    track.fans.each { |u| puts "(#{u.weight}) #{u.username}" }\n    \n== Simple Authentication (for Scrobbling)\n\n    auth = Scrobbler::SimpleAuth.new(:user => \'chunky\', :password => \'bacon\')\n    auth.handshake!\n\n    puts "Auth Status: #{auth.status}"\n    puts "Session ID: #{auth.session_id}"\n    puts "Now Playing URL: #{auth.now_playing_url}"\n    puts "Submission URL: #{auth.submission_url}"\n\n== Scrobbling\n\n    scrobble = Scrobbler::Scrobble.new(:session_id => auth.session_id,\n                                       :submission_url => auth.submission_url,\n                                       :artist => \'Coldplay\',\n                                       :track => \'Viva La Vida\',\n                                       :album => "Viva La Vida",\n                                       :time => Time.new,\n                                       :length => 244,\n                                       :track_number => 7)\n    scrobble.submit!\n    puts "Scrobbler Submission Status: #{scrobble.status}"\n\n== Now Playing Submission\n\n    playing = Scrobbler::Playing.new(:session_id => auth.session_id,\n                                     :now_playing_url => auth.now_playing_url,\n                                     :artist => \'Anberlin\',\n                                     :track => \'Readyfuels\',\n                                     :album => \'Blueprints For the Black Market\',\n                                     :length => 218,\n                                     :track_number => 1)\n\n    playing.submit!         \n    puts "Playing Submission Status: #{playing.status}"\n    \n== Docs\n\nhttp://rdoc.info/projects/jnunemaker/scrobbler\n'
Ever get tired of opening up lipsum.com, filling out a form and waiting for it to give you your filler text? Yeah, me too. I threw this together in an hour to generate lipsum text from the command line. b'== Lorem by John Nunemaker\n\nLorem is a simple gem for outputing lorem ipsum text. I got tired of opening a browser, going to lipsum.com, filling out a form and waiting for it to submit. Now you can get all that lorem goodness from the command line. Yehaw!\n\n== Usage\n\nUsage: lorem [number] [type] (ie: lorem 5 paragraphs)\n - Number defaults to 1 if no parameters given\n - Type defaults to paragraphs\n - Available Types:\n   - paragraphs\n   - words\n   - chars\n   - characters\n   \n   lorem -p # will paste default to pasteboard on OSX\n   \n== Docs\n\nhttp://rdoc.info/projects/jnunemaker/lorem'
[DEAD AND UNMAINTAINED] StatWhore is for the stat addict in all of us. Eventually it will become a ruby wrapper for several web stat services apis. Initially, it will cover Google Analytics and Feedburner. 
This plugin provides a flexible way to add authorization to Rails.  b'    NOTE: This repository is historical and not actively maintained. Please seek out alternatives or an active fork.\n\n= Authorization plugin\n\nThis plugin provides a flexible way to add authorization to Rails.\n\nThe authorization process decides whether a user is allowed access to some\nfeature.  It is distinct from the authentication process, which tries to\nconfirm a user is authentic, not an imposter. There are many authentication\nsystems available for Rails, e.g., acts_as_authenticated and LoginEngine. This\nauthorization system will play nicely with them as long as some simple\nrequirements are met:\n\n1. User objects are available that implement a has_role?(role,\n   authorizable_object = nil) method. This requirement can be easily\n   handled by using acts_as_authorized_user in the User-like class.\n\n2. If you want to use "role of model" authorization expressions, like "owner of\n   resource" or "eligible for :award", then your models with roles must\n   implement an accepts_role?(role, user) method. This requirement can\n   be handled by using acts_as_authorizable in the model class.\n\nThe authorization plugin provides the following:\n\n* A simple way of checking authorization at either the class or instance method\n  level using #permit and #permit?\n\n* Authorization using roles for the entire application, a model class, or an\n  instance of a model (i.e., a particular object).\n\n* Some english-like dynamic methods that draw on the defined roles. You will be\n  able to use methods like "user.is_fan_of angelina" or "angelina.has_fans?",\n  where a \'fan\' is only defined in the roles table.\n\n* Pick-and-choose a mixin for your desired level of database complexity. For\n  all the features, you will want to use "object roles table" (see below)\n\n\n== Example Usage\n\n  class MeetingController < ApplicationController\n\n    permit "rubyists and wanna_be_rubyists", :except => :public_page\n\n    def public_page\n      render :text => "We\'re all in Chicago"\n    end\n\n    def secret_info\n      permit "interested in Answers and (matz or dhh)" do\n        render :text => "The Answer = 42"\n      end\n    end\n\n    def find_apprentice\n      @founder = User.find_by_name(\'matz\')\n      permit "\'inner circle\' of :founder" do\n        if request.post?\n          apprentice = User.find_by_skillset(params[:uber_hacker])\n          ruby_community = Group.find_by_name(\'Ruby\')\n          ruby_community.accepts_role \'yarv_builder\', apprentice\n        end\n      end\n    end\n\n    def rails_conf\n      @meeting = Meeting.find_by_name(\'RailsConf\')\n      permit "attendees of :meeting or swedish_mensa_supermodels" do\n        venue = Hotel.find_by_name("Wyndham O\'Hare")\n        current_user.is_traveller_to venue\n        if permit? "traveller to :venue and not speaker"\n          Partay.all_night_long\n          @misdeeds = current_user.is_participant_in_what\n        end\n      end\n    end\n\n  end\n\n\n== Installation\n\nInstallation of the Authorization plugin is quick and easy.\n\n=== Step 1\n\nOpen a terminal and change directory to the root of your\nRuby on Rails application referred to here as \'RAILS_ROOT\'. You\ncan choose to install the plugin using the standard Ruby on Rails tools (recommended),\nas a Git sub-module, or by grabbing a tarball.\n\n=== Step 2a (Standard install, recommended)\n\nNOTE : This assumes you are using a current (Rails 2.1.x +) version of Rails which\nnow has built in support for installing a plugin directly from a git repo.  This also assumes\nyou have Git installed and working properly.  You can always use the manual install shown below\nif this is not true.\n\nRun the following command in your RAILS_ROOT:\n\n  ./script/plugin install git://github.com/DocSavage/rails-authorization-plugin.git\n\nThis will install the latest version of the plugin from our GitHub master repo\ninto your RAILS_ROOT/vendor/plugins/rails-authorization-plugin directory.\n\n=== Step 2b (Alternative install using Git sub-module, for advanced users of the Git SCM)\n\nThe source code for this plugin is maintained in a Git SCM\nrepository. The Git repository will always have the latest\nversion of the code.\n\nYou can install the plugin using Git sub-modules (which\nare akin to using SVN externals). Installing this way allows\nyou to update the plugin code later if needed (but note that\nit will not update any generated code created earlier by this\nplugin such as migrations, which you will need to update manually).\nAlso note that if you are deploying your code using Capistrano\nthis method may cause issues if you are not careful (e.g. the code\nwill be deployed but the sub-modules will not be updated or\ninstalled at all).\n\nFrom your RAILS_ROOT directory run:\n\n  git submodule add git://github.com/DocSavage/rails-authorization-plugin.git vendor/plugins/authorization\n\nYou should be able to update this plugin in the future with\nthe simple command (again from RAILS_ROOT):\n\n  git submodule update\n\n=== Step 2c (Alternative manual install from tarball)\n\nIf you like to install the old school manual way, feel free to download a copy of\nlatest master branch plugin code from:\n\nhttp://github.com/docsavage/rails-authorization-plugin/tarball/master\n\nOnce downloaded, rename the top level dir to \'rails-authorization-plugin\' and then\nyou can stuff that directory in your RAILS_ROOT/vendor/plugins directory.\n\n\n== Configuration\n\nThese instructions will show you how to do the initial configuration\nof the plugin.\n\n=== Choose a Mixin Type\n\n==== Hardwired Roles\n\nThis is the simplest way to use the plugin and requires no database.\nRoles are assumed to be coded into the Model classes using the\n<tt>has_role?(role, obj = nil)</tt> method. This method is however more\nlimited in the functionality available to you.\n\n==== Object Roles (Recommended, DB Required)\n\nThe Object Roles Table mixin provides full support for authorization\nexpressions within a database by add a polymorphic field to the\nRole table. Because roles have polymorphic associations to an\nauthorizable object, we can assign a user to a role for any model\ninstance. So you could declare user X to be a moderator for workshop Y,\nor you could make user A be the owner of resource B.\n\nThe identity module adds a number of dynamic methods that use defined\nroles. The user-like model gets methods like `user.is_moderator_of\ngroup (sets user to "moderator" of group`), user.is_moderator? (returns\ntrue/false if user has some role "moderator"), and group.has_moderators\n(returns an array of users that have role "moderator" for the group). If\nyou prefer not to have these dynamic methods available, you can simply\ncomment out the inclusion of the identity module within object_roles_table.rb.\n\n=== Initial Configuration Instructions\n\nChoose one of the installation types identified above and make sure your\napplication provides a current_user method or something that returns the\ncurrent user object (resful_authentication provides this out of the box).\n\nAt the top of your RAILS_ROOT/config/environment.rb file add something\nlike the following (customized for your controllers and actions of course):\n\n  ...\n\n  # Authorization plugin for role based access control\n  # You can override default authorization system constants here.\n\n  # Can be \'object roles\' or \'hardwired\'\n  AUTHORIZATION_MIXIN = "object roles"\n\n  # NOTE : If you use modular controllers like \'/admin/products\' be sure\n  # to redirect to something like \'/sessions\' controller (with a leading slash)\n  # as shown in the example below or you will not get redirected properly\n  #\n  # This can be set to a hash or to an explicit path like \'/login\'\n  #\n  LOGIN_REQUIRED_REDIRECTION = { :controller => \'/sessions\', :action => \'new\' }\n  PERMISSION_DENIED_REDIRECTION = { :controller => \'/home\', :action => \'index\' }\n\n  # The method your auth scheme uses to store the location to redirect back to\n  STORE_LOCATION_METHOD = :store_location\n\n  # standard rails config below here\n  Rails::Initializer.run do |config|\n\n  ...\n\n* Set the AUTHORIZATION_MIXIN constant to object roles or hardwired.  (See init.rb in this plugin for how the role support is mixed in.)\n* Set the LOGIN_REQUIRED_REDIRECTION to match the path or a hash with the :controller and :action for your applications login page.\n* Set the PERMISSION_DENIED_REDIRECTION to match the path or a hash with the :controller and :action for your applications permission denied page.\n* Set the STORE_LOCATION_METHOD to the method your application uses for storing the current URL that the user should return to after authentication (e.g. store_location).\n* See the PLUGIN_DIR\\lib\\authorization.rb file for the default values of LOGIN_REQUIRED_REDIRECTION, PERMISSION_DENIED_REDIRECTION and STORE_LOCATION_METHOD.\n\n\n=== Create the database tables\n\nIf you plan to use the object roles method you will need to setup a few\ndatabase tables. We have provided a database migration file\n(Rails 2.0+ compatible) that will make this process easy for you.\nIf you plan to use the hardwired mixin, no extra database tables\nare required. and you can skip to the next step.\n\nRun the following command from your RAILS_ROOT (Note : The generator\ntakes a model name as its argument, which at this time must be \'Role\'.):\n\n  ./script/generate role_model Role\n\nThis will create:\n\n  Model:      RAILS_ROOT/app/models/role.rb\n  Test:       RAILS_ROOT/test/unit/role_test.rb\n  Fixtures:   RAILS_ROOT/test/fixtures/roles.yml\n  Migration:  RAILS_ROOT/db/migrate/###_add_role.rb\n\nAnd now you will need to run a database migration from your RAILS_ROOT:\n\n  rake db:migrate\n\n=== Jumpstarting with a mixin\n\nNow we need to add the methods needed by each of your models that will\nparticipate in role based authorization. Typically these models fall into\ntwo categories, the User model, and all other models that will have\nroles available for use.\n\nFor a typical installation you would add both mixins to your User model.\n\n  class User < ActiveRecord::Base\n\n    # Authorization plugin\n    acts_as_authorized_user\n    acts_as_authorizable\n\n  ...\n\nThen in each additional model that you want to be able to restrict based\non role you would add just the acts_as_authorizable mixin like this:\n\n  class Event < ActiveRecord::Base\n\n    acts_as_authorizable\n\n  ...\n\nYou are done with the configuration!\n\n\n== The Specifics\n\n=== permit and permit?\n\npermit and permit? take an authorization expression and a hash of options that\ntypically includes any objects that need to be queried:\n\n  permit <authorization expression> [, options hash ]\n  permit? <authorization expression> [, options hash ]\n\nThe difference between permit and permit? is redirection. permit is a\ndeclarative statement and redirects by default. It can also be used as a class\nor an instance method, gating the access to an entire controller in a\nbefore_filter fashion.\n\npermit? is only an instance method, can be used within expressions, does not\nredirect by default.\n\nThe authorization expression is a boolean expression made up of permitted\nroles, prepositions, and authorizable models. Examples include "admin" (User\nmodel assumed), "moderator of :workshop" (looks at options hash and then\n@workshop), "\'top salesman\' at :company" (multiword roles delimited by single\nquotes), or "scheduled for Exam" (queries class method of Exam).\n\nNote that we can use several permitted prepositions (\'of\', \'for\', \'in\', \'on\',\n\'to\', \'at\', \'by\'). In the discussion below, we assume you use the "of"\npreposition. You can modify the permitted prepositions by changing the constant\nin Authorization::Base::Parser.\n\n* If a specified role has no "of <model>" designation, we assume it is a user\n  role (i.e., the model is the user-like object).\n\n* If an "of model" designation is given but no "model" key/value is supplied in\n  the hash, we check if an instance variable @model if it\'s available.\n\n* If the model is capitalized, we assume it\'s a class and query\n  <tt>Model#self.accepts_role?</tt> (the class method) for the\n  permission. (Currently only available in ObjectRolesTable mixin.)\n\nFor each role, a query is sent to the appropriate model object.\n\nThe grammar for the authorization expression is:\n\n         <expr> ::= (<expr>) | not <expr> | <term> or <expr> | <term> and <expr> | <term>\n         <term> ::= <role> | <role> <preposition> <model>\n  <preposition> ::= of | for | in | on | to | at | by\n        <model> ::= /:*\\w+/\n         <role> ::= /\\w+/ | /\'.*\'/\n\nParentheses should be used to clarify permissions. Note that you may prefix the\nmodel with an optional ":" -- the first versions of Authorization plugin made\nthis mandatory but it\'s now optional since the mandatory preposition makes\nmodels unambiguous.\n\n==== Options\n\n  :allow_guests => false.\n\nWe can allow permission processing without a\ncurrent user object. The default is false.\n\n  :user => YourUserObject.\n\nThe name of your user object.\n\n  :get_user_method => method_name\n\nThe method name provided should return a user\nobject. Default is #current_user, which is the how\nacts_as_authenticated works.\n\n  :only => [ :method1, :method2 ]\n\nArray of methods to apply permit (not valid when used in instance methods)\n\n  :except => [ :method1, :method2 ]\n\nArray of methods that won\'t have permission checking (not valid when used in instance methods)\n\n  :redirect => boolean\n\nDefault is true. If false, permit will not redirect to denied page.\n\n  :login_required_redirection => path or hash\n\n  default is "{ :controller => \'session\', :action => \'new\' }"\n\nPath or Hash where user will be redirected if not logged in ()\n\n  :login_required_message => \'my message\'\n\nA string to present to your users when login is required. Default is \'Login is required to access the requested page.\'\n\n  :permission_denied_redirection => path or hash\n\nPath or Hash where user will be redirected if logged in but not authorized (default is \'\')\n\n  :permission_denied_message => \'my message\'\n\nMessage that will be presented to the user when permission is denied.  Default is \'Permission\ndenied. You cannot access the requested page.\'\n\n=== Setting and getting the roles\n\nRoles are set by #has_role and #accepts_role methods that are mixed into the\nUser-like object and the authorizable models. User objects can set roles and\noptionally an object scope for that role:\n\n  user.has_role \'site_admin\'\n  user.has_role \'moderator\', group\n  user.has_no_role \'site_admin\'\n  user.has_no_role \'moderator\', group\n  user.has_role \'member\', Group\n\nNote that the last method sets role "member" on a class "Group". Roles can be\nset with three scopes: entire application (no class or object specified), a\nmodel class, or an instance of a model (i.e., a model object).\n\nModels set roles for specific users:\n\n  a_model.accepts_role \'moderator\', user\n  a_model.accepts_no_role \'moderator\', user\n  Model.accepts_role \'class moderator\', user\n\nThe method language has been chosen to aid memory of the argument order. A user\nhas a role "foo", so the role string immediately follows has_role. Similarly, a\nmodel accepts a role "foo", so the role string immediately follows\naccepts_role. Then we append the scope.\n\nSometimes the user-like object might be an authorizable object as well, for example, when you\nallow \'friend\' roles for users. In this case, the user-like object can be declared to be\n<tt>acts_as_authorizable</tt> as well as <tt>acts_as_authorized_user</tt>.\n\nRole queries follow the same pattern as the setting of roles:\n\n  user.has_role? \'moderator\'\n  user.has_role? \'moderator\', group\n  user.has_role? \'member\', Group\n\n  a_model.accepts_role? \'moderator\', user\n  Model.accepts_role? \'moderator\', user\n\nWhen a user is queried without specifying either a model class or object, it\nreturns true if the user has *any* matching role. For example,\n<tt>user.has_role? \'moderator\'</tt> returns true if the user is \'moderator\' of\na class, a model object, or just a generic \'moderator\'.  Note that if you say\n<tt>user.has_role \'moderator\'</tt>, the user does not become \'moderator\' for\nall classes and model objects; the user simply has a generic role \'moderator\'.\n\n==== Dynamic methods through the Identity mixin\n\nThe Object Roles Table version includes some dynamic methods that use the roles\ntable.  For example, if you have roles like "eligible", "moderator", and\n"owner", you\'ll be able to use the following:\n\n  user.is_eligible_for_what   --> returns array of authorizable objects for which user has role "eligible"\n  user.is_moderator_of? group --> returns true/false\n  user.is_moderator_of group  --> sets user to have role "moderator" for object group.\n  user.is_administrator       --> sets user to have role "administrator" not really tied to any object.\n\nModels get has_* methods:\n\n  group.has_moderators  --> returns array of users with role "moderator" on that group\n  group.has_moderators? --> returns true/false\n\nAllowed prepositions are optional in the above dynamic methods. They are simply\nsyntactic sugar.  For example, the following are equivalent:\n\n  user.is_member_of group\n  user.is_member_for group\n  user.is_member group\n\nAllowed prepositions are required in the authorization expressions because they\nare used to distinguish "role" and "role of :model" and "role of Model".\n\nIf you prefer not to pollute your namespace with these dynamic methods, do not\ninclude the Identity module in <tt>object_roles_table.rb</tt>.\n\n=== Pattern of use\n\nWe expect the application to provide the following methods:\n\n==== #current_user\n\nReturns some user object, like an instance of my favorite class,\n<tt>UserFromMars</tt>.  A <tt>user</tt> object, from the Authorization\nviewpoint, is simply an object that provides a <tt>has_role?</tt> method.\n\nNote that duck typing means we don\'t care what else the <tt>UserFromMars</tt>\nmight be doing.  We only care that we can get an id from whatever it is, and we\ncan check if a given role string is associated with it. By using\n<tt>acts_as_authorized_user</tt>, we inject what we need into the user object.\n\nIf you use an authorization expression "admin of :foo", we check permission by\nasking <tt>foo</tt> if it <tt>accepts_role?(\'admin\', user)</tt>. So for each\nmodel that is used in an expression, we assume that it provides the\n<tt>accepts_role?(role, user)</tt> method.\n\nNote that <tt>user</tt> can be <tt>nil</tt> if <tt>:allow_guests => true</tt>.\n\n==== #store_location (optional)\n\nThis method will be called if authorization fails and the user is about to be\nredirected to the login action. This allows the application to return to the\ndesired page after login.  If the application doesn\'t provide this method, the\nmethod will not be called.\n\nThe name of the method for storing a location can be modified by changing the\nconstant STORE_LOCATION_METHOD in environment.rb. Also, the default login and\npermission denied pages are defined by the constants LOGIN_REQUIRED_REDIRECTION\nand PERMISSION_DENIED_REDIRECTION in authorization.rb and can be overriden in\nyour environment.rb.\n\n=== Conventions\n\nRoles specified without the "of model" designation:\n\n1. We see if there is a <tt>current_user</tt> method available that will return\n   a user object. This method can be overridden with the <tt>:user</tt> hash.\n\n2. Once a user object is determined, we pass the role to\n   <tt>user.has_role?</tt> and expect a true return value if the user has the\n   given role.\n\nRoles specified with "of model" designation:\n\n1. We attempt to query an object in the options hash that has a matching\n   key. Example: <tt>permit "knight for justice", :justice =>\n   @abstract_idea</tt>\n\n2. If there is no object with a matching key, we see if there\'s a matching\n   instance variable. Example: @meeting defined before we use <tt>permit\n   "moderator of meeting"</tt>\n\n3. Once the model object is determined, we pass the role and user (determined\n   in the manner above) to <tt>model.accepts_role?</tt>\n\n\n== Upgrading\n\nWhen upgrading this plugin, please refer to the following file:\n\nhttp://github.com/DocSavage/rails-authorization-plugin/tree/master/UPGRADE.rdoc\n\n\n== Developers Note : Contributing Patches\n\nPlease see the file README_developers.txt for the methods we would like you to use to submit new code features, bugfixes and patches.\n'
JavaScript helper libraries for unit testing b'README'
ERB templates for Mephisto 
Don't use this anymore, use maddox/imdb-party b'h1. IMDB!\n\nh2. DON\'T USE THIS\n\nThis essentially uses screen scraping and is totally broken now that IMDB has new movie page layouts.\nUse this new gem: "http://github.com/maddox/imdb-party":http://github.com/maddox/imdb-party\n'
This Rails plugin extends ActiveRecord::Base to add automatic updating of created_by and updated_by attributes of your models in much the same way that the ActiveRecord::Timestamp module updates created_(at/on) and updated_(at/on) attributes. b'Userstamp Plugin (v 2.0)\n========================\n\nOverview\n--------\n\nThe Userstamp Plugin extends [ActiveRecord::Base](http://api.rubyonrails.org/classes/ActiveRecord/Base.html) to add automatic updating of \'creator\',\n\'updater\', and \'deleter\' attributes. It is based loosely on the [ActiveRecord::Timestamp](http://api.rubyonrails.org/classes/ActiveRecord/Timestamp.html) module.\n\nTwo class methods (`model_stamper` and `stampable`) are implemented in this plugin.\nThe `model_stamper` method is used in models that are responsible for creating, updating, or\ndeleting other objects. The `stampable` method is used in models that are subject to being\ncreated, updated, or deleted by \'stampers\'.\n\n\nInstallation\n------------\n\nInstallation of the plugin can be done using the built in Rails plugin script. Issue the following\ncommand from the root of your Rails application:\n\n    $ ./script/rails plugin install git://github.com/delynn/userstamp.git\n\nor add it to your Gemfile:\n\n    gem \'userstamp\'\n\nand run `bundle install` to install the new dependency.\n\nOnce installed you will need to restart your application for the plugin to be loaded into the Rails\nenvironment.\n\nUsage\n-----\n\nIn this new version of the Userstamp plug-in, the assumption is that you have two different\ncategories of objects; those that manipulate, and those that are manipulated. For those objects\nthat are being manipulated there\'s the Stampable module and for the manipulators there\'s the\nStamper module. There\'s also the actual Userstamp module for your controllers that assists in\nsetting up your environment on a per request basis.\n\nTo better understand how all this works, I think an example is in order. For this example we will\nassume that a weblog application is comprised of User and Post objects. The first thing we need to\ndo is create the migrations for these objects, and the plug-in gives you a `userstamps`\nmethod for very easily doing this:\n\n```ruby\nclass CreateUsers < ActiveRecord::Migration\n  def self.up\n    create_table :users, :force => true do |t|\n      t.timestamps\n      t.userstamps\n      t.name\n    end\n  end\n  \n  def self.down\n    drop_table :users\n  end\nend\n\nclass CreatePosts < ActiveRecord::Migration\n  def self.up\n    create_table :posts, :force => true do |t|\n      t.timestamps\n      t.userstamps\n      t.title\n    end\n  end\n  \n  def self.down\n    drop_table :posts\n  end\nend\n```\n\nSecond, since Users are going to manipulate other objects in our project, we\'ll use the\n`model_stamper` method in our User class:\n\n```ruby\nclass User < ActiveRecord::Base\n  model_stamper\nend\n```\n\nFinally, we need to setup a controller to set the current user of the application. It\'s\nrecommended that you do this in your ApplicationController:\n\n```ruby\nclass ApplicationController < ActionController::Base\n  include Userstamp\nend\n```\n\nIf all you are interested in is making sure all tables that have the proper columns are stamped\nby the currently logged in user you can stop right here. More than likely you want all your\nassociations setup on your stamped objects, and that\'s where the `stampable` class method\ncomes in. So in our example we\'ll want to use this method in both our User and Post classes:\n\n```ruby\nclass User < ActiveRecord::Base\n  model_stamper\n  stampable\nend\n\nclass Post < ActiveRecord::Base\n  stampable\nend\n```\n\nOkay, so what all have we done? The `model_stamper` class method injects two methods into the\nUser class. They are #stamper= and #stamper and look like this:\n\n```ruby\ndef stamper=(object)\n  object_stamper = if object.is_a?(ActiveRecord::Base)\n    object.send("#{object.class.primary_key}".to_sym)\n  else\n    object\n  end\n  \n  Thread.current["#{self.to_s.downcase}_#{self.object_id}_stamper"] = object_stamper\nend\n\ndef stamper\n  Thread.current["#{self.to_s.downcase}_#{self.object_id}_stamper"]\nend\n```\n\nThe big change with this new version is that we are now using Thread.current to save the current\nstamper so as to avoid conflict with concurrent requests.\n\nThe `stampable` method allows you to customize what columns will get stamped, and also\ncreates the _creator_, _updater_, and _deleter_ associations.\n\nThe Userstamp module that we included into our ApplicationController uses the setter method to\nset which user is currently making the request. By default the \'set_stampers\' method works perfectly\nwith the [RestfulAuthentication](http://svn.techno-weenie.net/projects/plugins/restful_authentication) plug-in:\n\n```ruby\ndef set_stampers\n  User.stamper = self.current_user\nend\n```\n\nIf you aren\'t using ActsAsAuthenticated, then you need to create your own version of the\n`set_stampers` method in the controller where you\'ve included the Userstamp module.\n\nNow, let\'s get back to the Stampable module (since it really is the interesting one). The Stampable\nmodule sets up before_* filters that are responsible for setting those attributes at the appropriate\ntimes. It also creates the belongs_to relationships for you.\n\nIf you need to customize the columns that are stamped, the `stampable` method can be\ncompletely customized. Here\'s an quick example:\n\n```ruby\nclass Post < ActiveRecord::Base\n  acts_as_stampable :stamper_class_name => :person,\n                    :creator_attribute  => :create_user,\n                    :updater_attribute  => :update_user,\n                    :deleter_attribute  => :delete_user\nend\n```\n\nIf you are upgrading your application from the old version of Userstamp, there is a compatibility\nmode to have the plug-in use the old "_by" columns by default. To enable this mode, add the\nfollowing line to the Rails.root/config/initializers/userstamp.rb file:\n\n```ruby\nDdb::Userstamp.compatibility_mode = true\n```\n\nIf you are having a difficult time getting the Userstamp plug-in to work, I recommend you checkout\nthe sample application that I created. You can find this application on [GitHub](http://github.com/delynn/userstamp_sample)\n\nUninstall\n---------\n\nUninstalling the plugin can be done using the built in Rails plugin script. Issue the following\ncommand from the root of your application:\n\n    script/plugin remove userstamp\n\n\nDocumentation\n-------------\n\nRDoc has been run on the plugin directory and is available in the doc directory.\n\n\nRunning Unit Tests\n------------------\n\nThere are extensive unit tests in the "test" directory of the plugin. These test can be run\nindividually by executing the following command from the userstamp directory:\n\n    ruby test/compatibility_stamping_test.rb\n    ruby test/stamping_test.rb\n    ruby test/userstamp_controller_test.rb\n\n\nBugs & Feedback\n---------------\n\nBug reports and feedback are welcome via [GitHub Issues](https://github.com/delynn/userstamp/issues). I also encouraged everyone to clone the git repository and make modifications--I\'ll be more than happy to merge any changes from other people\'s branches that would be beneficial to the whole project.\n\n\nCredits and Special Thanks\n--------------------------\n\nThe original idea for this plugin came from the Rails Wiki article entitled\n"Extending ActiveRecord" on the Rails Wiki (no longer published).'
matzbot is nice so we are nice b'**********************\n   Plugin API Howto\n (so we don\'t forget)\n**********************\n\nTypical plugin:\n\n  module MatzBot::Commands\n    needs_gem \'hpricot\' => [ :tinyurl, :get_tinyurl ]\n\n    def tinyurl(data)\n      say "Here it is! #{get_tinyurl(data.first)}"\n    rescue\n      say "No, no that\'s not gonna work."\n    end\n\n  private\n    def get_tinyurl(url)\n      return if url.empty?\n\n      res = Net::HTTP.post_form(URI.parse(\'http://tinyurl.com/create.php\'), { \'url\' => url })\n      doc = Hpricot(res.body)\n      ((doc/:blockquote).last/:b).innerHTML\n    end\n  end\n\n- New methods added to MatzBot::Commands show up as commands\n\n- If you want to add methods which aren\'t bot commands, make them protected or private.\n\n- Methods must accept one argument, an array of words said after the command.\n\n- If you need to require a gem, use needs_gem like above.  Pass it the gem name and all\n  the methods that depend on it.\n\n- If you need to keep around data, use the `session\' hash.\n    session[:my_plugin] = true\n    session[:my_plugin]\n\n- You can use `reply\' like say, except it will prefix your command with the user\'s name.\n    <defunkt> hey bot\n    <matzbot> defunkt: hey  # => using reply \'hey\'\n\n- You can use `pm\' to send a private message to whoever made a request of you.  Use it like `say.\'\n\n- The above plugin would be triggered like this:\n    <irc_dude> tinyurl http://myurl.com\n    <matzbot> Here it is!  http://tinyurl.com/fz3\n\n- You get these methods in the Commands API:\n  - puts(string to say)\n  - reply(string to say)\n  - pm(sting to pm) [your bot must be ident\'d on most networks for this to work]\n  - action(string to emote)\n  - config -- hash of runtime configuration options\n  - socket -- direct access to the socket, if you need it\n\n- Put plugins in ~/.matzbot and name them whatever.rb.\n\n=> Evan Weaver && Chris Wanstrath\n>> %w[ http://blog.evanweaver.com http://errtheblog.com ]\n'
Ruby port of Programming Collective Intelligence b'= pci4r\n\'pci4r\' is a library of concepts covered in Toby Seagaran\'s "Programming\nCollective Intelligence". The idea is not to slavishly port Toby\'s code,\nbut to provide the same tools in Ruby for others to use.\n\nThis code is brought to you by the following international conspirators:\n  * Jesse Clark\n  * Sandro Paganotti\n  * Mike Mondragon\n  * Alex Vollmer\n  * Damiano Zanisi\n\n(c) 2008\n\nYou can find the latest code at http://github.com/alexvollmer/pci4r/tree/master.'
Exposure is a Rails-based photo blog/album, intended to be a starter kit for programmers 
Packet is a Library for Event Driven Network Programming in Ruby b'Packet is a pure ruby library for writing network applications in Ruby.\nIt follows Evented Model of network programming and implements almost all the\nfeatures provided by EventMachine.\n\nIt also provides real easy to user UNIX workers for concurrent programming.\n\nIts best to have some examples going:\n\n== Examples\n=== A Simple Echo Server:\nrequire "rubygems"\nrequire "packet"\n\nclass Foo\n  def receive_data p_data\n    send_data(p_data)\n  end\n\n  def post_init\n    puts "Client connected"\n  end\n\n  def connection_completed\n    puts "Whoa man"\n  end\n  \n  def unbind\n    puts "Client Disconnected"\n  end\nend\n\nPacket::Reactor.run do |t_reactor|\n  t_reactor.start_server("localhost",11006,Foo)\nend\n\nThose new to network programming with events and callbacks, will note that,\neach time a new client connects an instance of class Foo is instantiated.\nWhen client writes some data to the socket, receive_data method is invoked.\n\nAlthough Packet implements an API similar to EventMachine, but it differs\nslightly because of the fact that, for a packet app, there can be more than one\nreactor loop running and hence, we don\'t use Packet.start_server(...).\n\n=== A Simple Http Client\nclass WikiHandler\n  def receive_data p_data\n    p p_data\n  end\n\n  def post_init\n  end\n\n  def unbind\n  end\n\n  def connection_completed\n    send_data("GET / \\r\\n")\n  end\nend\n\nPacket::Reactor.run do |t_reactor|\n  t_reactor.connect("en.wikipedia.org",80,WikiHandler)\nend\n\n\n=== Using Workers\n  Packet enables you to write simple workers, which will run in \n  different process and gives you nice \n  evented handle for concurrent execution of various tasks. \n\n  When, you are writing a scalable networking application \n  using Event Model of network programming,\n  sometimes when processing of certain events take time, \n  your event loop is stuck there. With green\n  threads, you don\'t really have a way of paralleling \n  your request processing. Packet library, allows\n  you to write simple workers, for executing long \n  running tasks. You can pass data and callbacks as an\n  argument.\n\n  When you are going to use workers in\n  your application, you need to define\n  constant WORKER_ROOT,\n  which is the directory location, where\n  your workers are located. All the workers defined in that directory\n  will be automatically, picked and forked in a\n  new process when your packet app starts. So, a typical\n  packet_app, that wants to use workers, will look like this:\n\n  packet_app_root\n    |\n    |__  lib\n    |\n    |___ worker\n    |\n    |___ config\n    |\n    |___ log\n\n  You would define WORKER_ROOT = PACKET_APP_ROOT/worker\n\n  All the workers must inherit class Packet::Worker, and hence a \n  general skeleton of worker will look like:\n\n    class FooWorker < Packet::Worker\n      set_worker_name :foo_worker #=> This is necessary.\n      def receive_data p_data\n      end\n      \n      def connection_completed\n      end\n      \n      def unbind\n      end\n      \n      def post_init\n      end\n    end\n\n  All the forked workers are connected to master via\n  UNIX sockets, and hence messages passed to workers from master\n  will be available in receive_data method. Also,\n  when you are passing messages to workers, or worker is passing \n  message to master ( in a nutshell, all the internal\n  communication between workers and master ) directly takes\n  place using ruby objects. All the passed ruby objects are\n  dumped and marshalled across unix sockets in a non blocking \n  manner. BinParser class parses dumped binary objects and\n  makes sure, packets received at other end are complete.\n  Usually, you wouldn\'t need to worry about this little detail.\n\n  Packet provides various ways of interacting with\n  workers. Usually, when a worker is instantiated, a proxy for\n  that worker will also be instantiated at master\n  process. Packet automatically provides a worker proxy(See meta_pimp.rb)\n  for you, but  if you need to multiplex/demultiplex\n  requests based on certain criteria, you may as well define your \n  own worker proxies. Code, would like something like this:\n\n    class FooWorker < Packet::Worker\n      set_worker_proxy :foo_handler\n    end\n\n  When you define, :foo_handler as a proxy for\n  this worker, packet is gonna search for FooHandler class and \n  instantiate it when the worker gets started. All \n  the worker proxies must inherit from Packet::Pimp. \n  Have a look at, Packet::MetaPimp,\n  which acts as a meta pimp for all the workers,\n  which don\'t have a explicit worker proxy defined.\n\n=== A complete Case :\n\n    Just for kicks, lets write a sample server,\n    which evals whatever clients send to it. But, assuming this \'eval\' of \n    client data can be potentially time/cpu\n    consuming ( not to mention dangerous too ), we are gonna ask our eval_worker, to\n    perform eval and return the result to master process, which in \n    turn returns the result to happy client.\n\n    # APP_ROOT/bin/eval_server.rb\n    EVAL_APP_ROOT = File.expand_path(File.join(File.dirname(__FILE__) + "/.."))\n    ["bin","worker","lib"].each { |x| $LOAD_PATH.unshift(EVAL_APP_ROOT + "/#{x}")}\n    WORKER_ROOT = EVAL_APP_ROOT + "/worker"\n    \n    require "packet"\n    class EvalServer\n      def receive_data p_data\n        ask_worker(:eval_worker,:data => p_data, :type => :request)\n      end\n  \n      # will be called, when any worker sends data back to master process\n      # it should be noted that, you may have several instances of eval_server in\n      # your master, for each connected client, but worker_receive will be always\n      # be invoked for the instance, which originally made the request.\n      # If you need fine control, over this behaviour, you can implement a worker proxy \n      # on the lines of meta_pimp class. This API will change in future perhaps, as i\n      # expect, better ideas to come.  \n      def worker_receive p_data\n        send_data "#{p_data[:data]}\\n"\n      end\n    \n      def show_result p_data\n        send_data("#{p_data[:response]}\\n")\n      end\n    \n      def connection_completed\n      end\n    \n      def post_init\n      end\n    \n      def wow\n        puts "Wow"\n      end\n    end\n    \n    Packet::Reactor.run do |t_reactor|\n      t_reactor.start_server("localhost", 11006,EvalServer) do |instance|\n        instance.wow\n      end\n    end\n\n   # APP_ROOT/worker/eval_worker.rb\n     class EvalWorker < Packet::Worker\n     set_worker_name :eval_worker\n     def worker_init\n       p "Starting no proxy worker"\n     end\n   \n     def receive_data data_obj\n       eval_data = eval(data_obj[:data])\n       data_obj[:data] = eval_data\n       data_obj[:type] = :response\n       send_data(data_obj)\n     end\n   end\n\n=== Disable auto loading of certain workers:\n  Sometimes, you would need to start a\n  worker at runtime and don\'t want this pre-forking mechanism.\n  Packet, allows this. You just need to define\n  "set_no_auto_load true" in your worker class and worker\n  will not be automatically forked. Although name is a bit misleading perhaps.\n\n  Now, at runtime, you can call start_worker(:foo_worker, options)\n  to start a worker as usual. It should\n  be noted that, forking a worker, which is already\n  forked can be disastrous, since worker names are being\n  used as unique keys that represent a worker.Test\n\n== Performance:\n  Although written in pure ruby, packet performs\n  reasonably well. Mongrel, running on top of Packet is a tad\n  slower than Mongrel running on top of EventMachine. More benchmarks coming soon.\n\n== SVN repo:\n   Code for packet is on google code, svn repo is:\n   http://packet.googlecode.com/svn/trunk/\n\n== Credits\n  Francis for awesome EventMachine lib, which has constantly acted as an inspiration.\n  Ezra, for being a early user and porting mongrel to run on top of packet      \n\n\n\n'
Reading Glasses for the Web b'# ElderBrowser\n\n[![wercker status](https://app.wercker.com/status/b9c8d0bb3354d9ebf17c0a97eae317e1/m "wercker status")](https://app.wercker.com/project/bykey/b9c8d0bb3354d9ebf17c0a97eae317e1)\n\nStarting from a chromium build as per\nhttp://dev.chromium.org/developers/how-tos/get-the-code\nAlso looked at CEF https://code.google.com/p/chromiumembedded/,\nfor later research.\n\nUsing @wercker for build and deployment pipelining.\nInstalled https://atom.io/packages/wercker-status so I can keep an eye on it.\nThen I installed the command line tools following\n http://devcenter.wercker.com/articles/cli/installation.html\n\n\n - http://www.ehow.com/info_8551183_colors-elderly.html\n - http://www.paciellogroup.com/resources/contrastanalyser/\n'
A quick & dirty git-powered Sinatra wiki 
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a "normal" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n'
testin 
An irc bot written in io. To learn and stuff b'This is an irc bot written in iO. Trying to learn.\n\nThe bot responds to its nick to just repeat things back\n! to eval a script\n!newSandbox to initiate a new sandbox'
A Ruby mixin to determine whether an object's values are blank with examples for Arrays and Hashes. 
LINKS TO Merb plugins that make the transition from Rails a little bit easier b'Moved to separate repos\n\nhttp://github.com/ivey/merb_has_flash\nhttp://github.com/ivey/merb_has_rails_plugins\n'
A Ruby on Rails plugin for OpenID authentication and profile exchange  
Ruby Wrapper for the portmidi c library 
The greatest jotting web app of all time 
simple mongrel handler for a sweet hit counter 
jQuery Autocomplete plugin b"# jQuery Autcomplete plugin #\n\nThis is a simple but really powerful autocomplete plugin for jQuery.\n\nIt has many events and it's very customizable. Give it a try!\n\n## Documentation ##\n\nYou can start by opening the `autocomplete.html` file in your browser to see the examples.\n\nAfter that take look at the `jquery.ui.autocomplete.js` and `jquery.ui.autocomplete.ext.js` files for\nmore documentation\n\n\n"
 b'One part taboo, one part mini-mapper, one part flock shelf, one part scrap book, one part netvibes\n\nThe goal is to be extensible ala greasemonkey (easy to add scripts to enhance without restarting),\nproviding wrappers around the technologies that aren\'t "standard" (xbl/rdf/dnd) so that enhancements\ncan be done by as many people as possible.\n\nTODO:\n\n  * pattern for inheritance/reuse of xbls (lots of redundancy)\n  * pattern for scraplets to determine DND content\n  * how to hanlde multiple scraplets having an opinion on the dropped content\n\nCONTENT:\n  * photos\n    * screenshots from page\n    * flickr\n    * smugmug\n    * photobucket\n    * ...\n  * movies\n    * youtube\n    * metacafe\n    * ...\n  * web pages\n    * taboo\n    * delicious\n    * ...\n  * addresses\n  * text/html\n  * people\n  * micro-format content\n  * music\n  * products\n    * books\n  * email\n  * chat\n  * twitter\n  * widgets (open social?)\n  \nWhat works:\n\n  * dnd a flickr picture on to the page\n  * dnd a picture on to the page\n  * dnd a link (stored but bad ui)\n  * dnd html snippet (stored but bad ui)'
Rails app for controlling instances of other Rails apps on a server. Useful if you have lots of little apps that you want to turn on and off at various times. b'Alfred is a Rails app for controlling other Rails apps. I developed it for myself to keep track of lots of \nlittle prototypes that need to be up and available at various times so that others in the company can view\nand comment on them.\n\nRequirements\n------------\nRails\nMongrel - There is currently the option to start your app with either Mongrel or WEBrick but the code will\n          always try to start with Mongrel only.\n\nKnown Limitations\n-----------------\n* Although the New Project screen says that you can specify WEBrick as the web server, you can\'t (there\'s no\n  code in the controller to try anything other than Mongrel).\n* The system does not gracefully respond to errors in your app. Let\'s say you try to start your app, but you\n  specified the wrong Rails Root. Ideally that project square turns red and gives you some info about why\n  the error occurred. This doesn\'t happen yet.\n* If you have an app running and you `kill` it, or the server restarts, Mongrel will not restart the app\n  until you clear out the mongrel.pid file (which for some reason seems to sometimes live in /log and\n  other times in /tmp). I attempted some code to rescue from this, but it doesn\'t seem to work. Haven\'t\n  had a chance to go back and take a second look.\n* You\'ll see a link to view the log of the current environment, but this doesn\'t work yet\n* There\'s a checkbox in the New Project screen to create the rails app itself along with the project.\n  This doesn\'t work yet!\n* No tests (sorry).\n\nInstallation\n------------\nPretty simple. Get a copy of the code:\n\n  git clone git://github.com:cannikin/alfred.git   (if you have git)\n    or\n  http://github.com/cannikin/alfred/tarball/master    (if you don\'t)\n  \n`cd` to that directory and initialize the database:\n\n  rake db:create\n  rake db:migrate\n\nNow start the app from Alfred\'s directory (switching it to a different port if you wish, my default \nis 3100 to keep all the 3000\'s open for apps):\n\n  mongrel_rails start -p 3100 -d\n\nAlfred is now running and ready to serve your apps:\n\n  http://localhost:3100 \n  (if you used my default port above and you\'re running it locally).\n\nUsage\n-----\nThe first screen you\'ll see is the Dashboard. This is where you\'ll see your projects and their current \nstatus. There\'s an Extended and Compact view. They both have the same info, just that Compact takes up \nless space. \n\nClick the Settings tab to set the default values for new projects (local hostname, remote \nhostname) as well as the port Alfred is running on and how often he should check for the current status \nof projects. Unless you\'re doing some volatile testing, or someone else also has access to your apps, \ntheir status isn\'t going to change very often. 600 seconds is 10 minutes which is still probably more\noften than necessary. \n\nIf you\'re running this in Firefox 2 you may want to disable Firebug -- after Alfred is open for a \ncouple of days Firefox\'s RAM tends to get a little out of control, I assume because Firebug is tracking \neach status update AJAX request.\n\nComing Soon\n-----------\n* Properly handle and recover from errors\n* Create a little command line "engine" to run all the logic of starting/stopping the apps, handling\n  errors that come back from the command line, etc. (right now this is handled by UtilityController)\n* Ability to view live log\n* Make Environment a dropdown in the dashboard so you can switch to others before starting the app (right\n  now you need to edit the project and change the environment there)\n* Add a Public view so that others can find your apps, but not have access to start/stop them\n* Ideally I would love to integrate with god: http://github.com/mojombo/god'
Sinatra app that pushes your Github Commit info to Campfire b'github-campfire\n===============\n\nToss your github pushes to Campfire\n\nrequirements\n============\nsudo gem install json tinder (sinatra|merb-core)\n\ninstructions\n============\ncp config.yml.example config.yml\nvim config.yml\n# sinatra\nruby servers/sinatra.rb\n# merb-core\nmerb -I servers/merb-core.rb'
Merb More: The Full Stack. Take what you need; leave what you don't. 
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen app myapp                   # a "normal" merb app\n$ merb-gen app myapp --flat            # a flattened app\n$ merb-gen app myapp --very-flat       # a single-file app\n\n'
Blanket is a flexible backup framework designed to get the drudgery out of the way and to make automated backups easy. b'Welcome to Blanket!\n\nhttps://github.com/bigfleet/blanket/wikis is the canonical online source for info on Blanket.\n\nh2. Version History\n\nh3. Current: 0.1.1\n\nMajor element in this release is new RDoc\n\nh3. Previous\n\n* 0.1.0\n\nAdded new sources and sinks.'
Merb More: The Full Stack. Take what you need; leave what you don't. 
Hookin-based RubyPorts system b'= RubyPorts -- a hookin-based ports system for Ruby\n\nCopyright (C) 2008 Christian Neukirchen <purl.org/net/chneukirchen>\n\nRubyPorts is freely distributable under the terms of an MIT-style license.\nSee COPYING or http://www.opensource.org/licenses/mit-license.php.\n\n== How to install\n\nRun <tt>hook-bin.rb</tt> and add the <tt>bin</tt> directory to your path.\n\nYou need curl(1) to fetch packages over HTTP.\nYou need tar(1) to unpack packages.\nYou need svn, darcs, and git to check out package repositories.\n\nYou need a development tool chain installed if you want to build\nextensions.  RubyPorts does not provide binaries.\n\n== How to use\n\nUsually, you will want to use RubyPorts directly from the Git checkout.\nPeriodically call <tt>git pull</tt> to keep your ports tree fresh.\n\nUse <tt>ls -1 ports/*/*.rport</tt> to get a list of available ports.\n\nTo install a port, simply type <tt>hook-get.rb /path/to/portsfile.rport</tt>\nto automatically download, build and hookin the port.  Dependencies\nwill be installed automatically if possible.  You can also try to type\n<tt>hook-get.rb portname</tt> and hook-get will try to figure out what\nyou want to install.  Note that this can install unstable and even\nbroken development versions of your code; you may wish to provide a\nversion number as well.\n\nPeriodically call <tt>hook-bin.rb</tt> to update the symlinks in\n<tt>bin</tt>.\n\nSet the environment variable $RUBYPORTS to the full path of the\n"ports" directory if you want to call hook-get from any location.\n\n== How RubyPorts works\n\nEvery port consists of a .rport-file that contains download and\nbuilding instructions.  It looks like this:\n\n    # A package-line declaring the package name and version (no\n    # version if it packages the trunk).\n    # This defines the pkgpath as "mongrel-1.1.3".\n    package \'mongrel\', \'1.1.3\'\n\n    # A list of dependencies, as by the versioning convention.\n    depend \'fastthread-1.0.1...\'\n    depend \'daemons-1.0.3...\'\n\n    # A source, which can be:\n    # tar_gz URL:: a tar.gz unpacking(!) into pkgpath\n    # tar_bz2 URL:: a tar.bz2 unpacking(!) into pkgpath\n    # gem URL:: a URL to a .gem file unpacked to pkgpath.\n    # git URL, head="HEAD":: a git checkout of the respective head to pkgpath\n    # svn URL:: a SVN checkout of the URL to pkgpath\n    # darcs URL, tag=nil:: a Darcs checkout of the repo (possibly of a\n    #                      tag) to pkgpath\n    tar_gz "http://rubyforge.org/frs/download.php/30048/mongrel-1.1.3.tgz"\n\n    # Optional build commands, run in pkgpath\n    build "ruby setup.rb config"\n    build "ruby setup.rb setup"\n\n    # A optional "hookin add" call, defaulting to "hookin add $pkgpath\n    # $pkgpath/lib" if not mentioned.\n    hookin pkgpath, [pkgpath+"/lib", pkgpath+"/ext/http11"]\n\n== RubyPorts port naming conventions\n\n* foo.rport will install the current development branch from the repository.\n* foo-VERSION.rport will install a release VERSION.\n\n== RubyPorts versioning conventions\n\n* foo means any version of foo.\n* foo-1.0 means any version of foo prefixed with "1.0".\n* foo-1.0... means any version of foo starting from "1.0".\n* foo-1.0.1...foo-2 means any version of foo starting from "1.0.1"\n  up to, but not including any version starting with 2.\n\n== Caveat user\n\nPlease take note of these things:\n\n* RubyPorts is utterly alpha.  There is zero error handling as of now.\n  If it breaks you get to keep both pieces.\n\n* Therefore, consider using a hookin.db on its own for RubyPorts.\n\n== Contact\n\nPlease mail bugs, suggestions and patches to\n<mailto:chneukirchen@gmail.com>.\n\nGit repository ("git send-email" is welcome for patches):\ngit clone http://git.vuxu.org/rubyports.git\ngit clone git://github.com/chneukirchen/rubyports.git\n\nPatches contributing a port are welcome *iff*\n* the patch only touch/add the desc and PORT.rport files.\n* the patch is titled "Added port PORT-VERSION" or "Update port\n  PORT-VERSION".\n* all dependencies are already in RubyPorts or contributed as well.\n\n== Thanks to\n\n* Michael Fellinger, for help with development.\n* pkgsrc/DarwinPorts/OpenBSD ports/portage for inspiration.\n* Paul Feyerabend, for making me open my eyes.\n\n== Copyright\n\nCopyright (C) 2008  Christian Neukirchen <http://purl.org/net/chneukirchen>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
vocab trainer 
DumbApp is a simple AtomPub (RFC 5023) implementation based on Mongrel and ActiveRecord. b'DumbApp is a simple AtomPub (RFC 5023) implementation based on Mongrel and ActiveRecord.\n\n== Licence\n\nDumbApp is copyright 2008 Simon Rozet. It is licensed under the MIT licence.\nSee the included LICENSE file for details.\n\n== Usage\n\n  % git clone git://atonie.org/dumbapp.git\n  % cd dumbapp.git\n  % cp config.yml.example config.yml\n  % ./bin/dumbapp config.yml\n\n== Required gems\n\n- mongrel\n- active_record\n- atom-tools\n- uuid\n\n== Contact\n\nSimon Rozet -- simon@rozet.name\n'
A lightweight web framework for Erlang. Not very complete. 
Micro-blog with erubis and markdown and auto-publishing with git commit hook (in about 20 lines of code) b"### Requirements ###\nRuby\nGit\nRake\nErubis gem\nBlueCloth gem\n\n### Get started ###\n\nClone squawk-micro\n\n\t$ git clone git@github.com:zackchandler/squawk-micro.git\n\t$ cd squawk-micro\n\t\nSetup commit hook\n\nEdit .git/hooks/post-commit file to say:\n\n\t#!/bin/sh\n\trake publish\n\nSet as executable\n\t\n\t$ chmod +x .git/hooks/post-commit\n\nMake posts in the posts/ directory in this format:\n\n\tposts/001-first-post\n\tor\n\tposts/002_second_post\n\t\nCommit changes\n\n\t$ git add .\n\t$ git commit -a -m 'Should auto-publish blog on commit'\n\t\nA site directory will be created on commit containing your published blog.\n\nOpen site/index.html to see your blog.\n\n### Rake ###\n\nYou can also build via rake:\n\n\t$ rake publish\n"
I'm just copying this too look at it 
An integrated replacement for Mongrel+Revproxy systems in erlang b"fuzed\n    by Dave Fayram, Tom Preston-Werner\n    fuzed.rubyforge.org\n\n\n== Summary\nLeverage the YAWS webserver (and additional erlang-based infrastructure) to\nrun Rails.\n\n\n== Dependencies\n* Erlang: http://www.erlang.org\n* Yaws: http://yaws.hyber.org\n* Ruby: http://www.ruby-lang.org\n* Ruby Gems: \n  * rake: http://rake.rubyforge.org\n  * erlectricty: http://code.google.com/p/erlectricity\n  * rack: http://rack.rubyforge.org\n\n\n== Installation (from gem)\n\n  sudo gem install fuzed\n\n\n== Installation (from git)\n\nGet it from the git repo:\n\n  git clone git://repo.or.cz/fuzed.git\n\nChange to the fuzed working copy:\n\n  cd fuzed\n\nBuild Fuzed:\n\n  rake build\n\n\n== Configuration\n\nCreate a shared Erlang cookie on each machine. In order for Erlang processes in\ndifferent interpreters to communicate with each other, they each need to be\nable to find a file called .erlang.cookie in the home directory of the user\nunder which they are running. The cookie should contain 20 uppercase alpha\ncharacters on a single line (no newline).\n\nGenerate a starter Yaws config file with:\n\n  fuzed-conf RAILS_ROOT 8080 > fuzed.conf\n\nwhere RAILS_ROOT is the absolute path to the root directory of your Rails\nproject. You may optionally specify a port as the second argument. This will\ngenerate a file called 'fuzed.conf' which contains a sample Yaws config file\nthat should be suitable for initial testing.\n\n\n== Starting fuzed\n\nStart the fuzed master server (yaws) locally:\n\n  fuzed start -n server@127.0.0.1 -c fuzed.conf\n\nIn another terminal, start a fuzed client locally:\n\n  fuzed join -n client@127.0.0.1 -m server@127.0.0.1 -r RAILS_ROOT\n\nwhere RAILS_ROOT is the same as before.\n    \nPoint your browser at:\n\n  http://localhost:8080\n\nIf everything worked out, you'll see your Rails app!\n\n\n== What is a Valid Hostname?\n  Erlang has a funny notion about what a valid hostname is. Localhost won't\n  cut it. I recommend using rendezvous to point to your local host. Short of\n  that, 127.0.0.1 works.\n\n\n== Contribution Notes\n* Please note that empty directories should contain a .placeholder file\n  (which should be empty), to facilitate the use of other version\n  control systems which bridge to subversion but don't support empty\n  directories."
Embedded 'reply' links in blog comments b'Comment Replies\n\nDescription:\n    This JavaScript project makes it quick and easy to reply\n    to specific comments within a blog/forum.\n\n    It adds "reply" links for each comment in your \n    blog/forum, and when clicked it copies the comment\'s authors name\n    into the comment textarea for easy reference.\n\nMore information:\n    http://drnicjavascript.rubyforge.org/comment_replies\n    \nAuthor:\n    Dr Nic Williams, drnicwilliams@gmail.com'
Tumblr is a simple Ruby script that aggregates RSS feeds into a "tumblelog"-style format, in static files. b'== Tumblr\n\nTumblr is a simple Ruby script that aggregates RSS feeds into a "tumblelog"-style\nformat, in static files.\n\n=== Feeds\n\nFeeds are specified in <tt>config/feeds.yml</tt> like so:\n\n  blog:\n    url: http://feeds.feedburner.com/kevinmarsh\n    title: Blog\n    generate_permalink: true\n    \n  delicious:\n    url: http://del.icio.us/rss/kevinmarsh\n    title: del.icio.us\n\nBecause it is a YAML file, spaces are important (not tabs!). The url and title\nkeys are pretty straightforward, but the <tt>generate_permalink</tt> may be a little\nconfusing. <tt>generate_permalink</tt> should be set to true if you want tumblr to\ncreate its own permalink page for the content and link to that. This is\nespecially useful if you have a RSS-only feed that you\'d like to generate a\nstatic page for. The default is to not specify it, therefore preserving the\nfeed\'s permalink for the post.\n\n=== Templates\n\nTemplates specify how you want tumblr to render the content of your feeds.\nThey are specified on a per-feed basis, so you can have different templates\nfor each type of content (only showing a <tt>media_thumbnail_link</tt> in Flickr, or tags for\ndel.icio.us, for example.)\n\nTemplates are straight-up ERB, so they will look very familiar if you\'ve used\nRails, and there a few key ones everyone should have:\n\n  index.html.erb\n  layout.html.erb\n  post/_[feed_type].html.erb\n  post.[feed_type].html.erb\n  \n==== index.html.erb\n\nThis is the template for the main index page and archive pages. It is a listing\nof posts, and may look something like:\n\n  <% last_time = nil %>\n  <% @posts.each do |post| %>\n    <h2><% time = post.time.strftime("%A, %B %d, %Y") %></h2>\n    <%= render post %>\n  <% end %>\n\n==== layout.html.erb\n\nThis is the template for the layout of your site. All the other templates will\nbe wrapped around this one, inserted wherever <%= @content %> is. You\'ll include\nyour stylesheets, meta tags, doctype, and whatnot here.\n\nYou also have access to a few variables that can give you some flexibility in\nlaying out your tumblr: <tt>@feeds</tt> and <tt>@archives</tt>. They are used thusly:\n\n  <h2>Feeds</h2>\n  <ul id="feeds">\n    <%- @feeds.each do |key, feed| -%>\n    <li class="feed <%= key %>"><a href="<%= feed[\'url\'] %>"><%= feed[\'title\'] %></a></li>\n    <%- end -%>\n  </ul>\n\n  <h2>Archives</h2>\n  <ul>\n    <%- @archives.each do |date, posts| -%>\n    <li><a href="/<%= date.year %>/<%= date.month %>/"><%= date.strftime("%B %Y") %></a> (<%= posts %>)</li>\n    <%- end -%>\n  </ul>\n  </div>    \n      \n==== post/_[feed_type].html.erb\n\nThis is the template rendered for each post. You will have one of these for each\nfeed you are displaying in your tumblr so you can customize and tailor the output for each.\n\nFor example, a Flickr feed may show a thumbnail:\n\n  <div class="post flickr">\n    <h1><a href="<%= @post.link %>"><%= @post.title %></a></h1>\n    <img src="<%= @post.media_thumbnail_link %>" alt="<%= @post.title %>" />\n  </div>\n\nWhile a del.icio.us feed will show tags:\n\n  <div class="post delicious">\n    <p><a href="<%= @post.link %>"><%= @post.title %></a></p>\n    <p><%= @post.content %></p>\n    <p class="tags">\n      <%- @post.tags.each do |tag| -%>\n      <a href="http://del.icio.us/kevinmarsh/<%= tag %>"><%= tag %></a>\n      <%- end -%>\n    </p>\n  </div>\n\nNote: templates are ERB, which means you can run any string through Ruby and\nmanipulate the output. This is especially useful for feeds like Twitter, to\nstrip out your username from each post:\n\n  <div class="post twitter">\n    <p><%= @post.content.gsub(/^willcodeforfoo\\:/, "") %></p>\n  </div>\n  \nThis also means you must be careful!\n\n====  post.[feed_type].html.erb\n\nThis template is very similar to those "partials" in the post/ directory,\nbut they are rendered if and when tumblr creates permalink pages for you.\n\n=== Generating\n\nIt is important to note that tumblr generates static files for you, which means\ntumblr is not serving pages for you. You read that right, pages are not dynamic,\nand this is still Web 2.0. You\'ll have to point your web server to tumblr\'s\npublic directory.\n\nEach time you invoke <tt>tumblr</tt>, tumblr will fetch new feed items and regenerate\nall your pages (index, monthly archives, and invidual permalink pages if you \nhave feeds with <tt>generate_permalink</tt>). This may seem like overkill, but for\nhigh traffic sites, generating static files once every hour vs. every hit is the\nless expensive route.\n\nTo just re-generate without fetching your feeds, throw tumblr the <tt>--generate</tt>\nflag. You may find yourself wanting this after you tweak a template.'
my random codes b'My random codes, configurations, scripts repsository.\n'
The Ruby barcode generator b'# Barby\nBarby is a Ruby library that generates barcodes in a variety of symbologies.\n\nIts functionality is split into _barcode_ and "_outputter_" objects:\n  * [`Barby::Barcode` objects] [symbologies] turn data into a binary representation for a given symbology.\n  * [`Barby::Outputter`] [outputters] then takes this representation and turns it into images, PDF, etc.\n\nYou can easily add a symbology without having to worry about graphical\nrepresentation. If it can be represented as the usual 1D or 2D matrix of\nlines or squares, outputters will do that for you.\n\nLikewise, you can easily add an outputter for a format that doesn\'t have one\nyet, and it will work with all existing symbologies.\n\nFor more information, check out [the Barby wiki] [wiki].\n\n### New require policy\n\nBarcode symbologies are no longer required automatically, so you\'ll have to\nrequire the ones you need.\n\nIf you need EAN-13, `require \'barby/barcode/ean_13\'`. Full list of symbologies and filenames below.\n\n## Example\n\n```ruby\nrequire \'barby\'\nrequire \'barby/barcode/code_128\'\nrequire \'barby/outputter/ascii_outputter\'\n\nbarcode = Barby::Code128B.new(\'BARBY\')\n\nputs barcode.to_ascii #Implicitly uses the AsciiOutputter\n\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n## #    #  #   # ##   # #   ##   ##   # ### #   # ##   ### ## #   ## ### ### ##   ### # ##\n          B          A          R          B          Y\n```\n\n## Supported symbologies\n\n```ruby\nrequire \'barby/barcode/<filename>\'\n```\n\n| Name                                | Filename              | Dependencies  |\n| ----------------------------------- | --------------------- | ------------- |\n| Code 25                             | `code_25`             | \xe2\x94\x80             |\n| \xe2\x94\x9c\xe2\x94\x80 Interleaved                      | `code_25_interleaved` | \xe2\x94\x80             |\n| \xe2\x94\x94\xe2\x94\x80 IATA                             | `code_25_iata`        | \xe2\x94\x80             |\n| Code 39                             | `code_39`             | \xe2\x94\x80             |\n| Code 93                             | `code_93`             | \xe2\x94\x80             |\n| Code 128                            | `code_128`            | \xe2\x94\x80             |\n| \xe2\x94\x94\xe2\x94\x80 GS1 128                          | `gs1_128`             | \xe2\x94\x80             |\n| EAN-13                              | `ean_13`              | \xe2\x94\x80             |\n| \xe2\x94\x9c\xe2\x94\x80 Bookland                         | `bookland`            | \xe2\x94\x80             |\n| \xe2\x94\x94\xe2\x94\x80 UPC-A                            | `ean_13`              | \xe2\x94\x80             |\n| EAN-8                               | `ean_8`               | \xe2\x94\x80             |\n| UPC/EAN supplemental, 2 & 5 digits  | `upc_supplemental`    | \xe2\x94\x80             |\n| QR Code                             | `qr_code`             | `rqrcode`     |\n| DataMatrix (Semacode)               | `data_matrix`         | `semacode`    |\n| PDF417                              | `pdf_417`             | JRuby         |\n\n\n## Outputters\n\n```ruby\nrequire \'barby/outputter/<filename>_outputter\'\n```\n\n| filename    | dependencies  |\n| ----------- | ------------- |\n| `ascii`     | \xe2\x94\x80             |\n| `cairo`     | cairo         |\n| `html`      | \xe2\x94\x80             |\n| `pdfwriter` | \xe2\x94\x80             |\n| `png`       | chunky_png    |\n| `prawn`     | prawn         |\n| `rmagick`   | RMagick       |\n| `svg`       | \xe2\x94\x80             |\n\n### Formats supported by outputters\n\n* Text (mostly for testing)\n* PNG, JPEG, GIF\n* PS, EPS\n* SVG\n* PDF\n* HTML\n\n---\n\nFor more information, check out [the Barby wiki] [wiki].\n\n\n  [wiki]: https://github.com/toretore/barby/wiki\n  [symbologies]: https://github.com/toretore/barby/wiki/Symbologies\n  [outputters]: https://github.com/toretore/barby/wiki/Outputters\n'
A mini blog engine in Sinatra with hAtom and MetaWeblog API b'Sin - The lazy Blogging engine in Sinatra\n\nBased on a conversation with Dan Benjamin, I decided to see how hard it would be to get XMLRPC (MetaWeblog API) working on a minimal site.\nAs of right now (2008-02-17), it has:\n  * posting by anyone through MetaWeblog api (point blog editor at http://site/xml)\n  * uploads with the MetaWeblog api (only small-ish files, bug with Rack or something)\n  * hAtom\n  * A single file for the whole thing'
JavaScript Unit Test suite; no dependencies (but same API as prototypejs' unittest suite) b'JsUnitTest\n\nDescription:\n    This JavaScript project provides a one-file JavaScript test suite.\n\n    This is based off unittest.js from "prototypejs":http://prototypejs.org, \n    except this library has no dependency on prototype.js so there is no \n    chance your code-under-test can conflict with prototype.js or that you might \n    accidently use a prototype.js helper for a library that will be deployed \n    independently off prototypejs.\n\nMore information:\n    http://drnicjavascript.rubyforge.org/jsunittest\n    \nAuthor:\n    Dr Nic Williams, drnicwilliams@gmail.com\n    \nContributions/Thanks:\n    original unittest code - prototypejs project\n    ajax library - John Resig, Pro JavaScript book\n    event library - Dean Edwards\n'
Database backed asynchronous priority queue -- Extracted from Shopify  b'h1. Delayed::Job\n\nDelayed_job (or DJ) encapsulates the common pattern of asynchronously executing longer tasks in the background. \n\nIt is a direct extraction from Shopify where the job table is responsible for a multitude of core tasks. Amongst those tasks are:\n\n* sending massive newsletters\n* image resizing\n* http downloads\n* updating smart collections\n* updating solr, our search server, after product changes\n* batch imports \n* spam checks \n\nh2. Setup\n\nThe library evolves around a delayed_jobs table which can be created by using:\n<pre><code>\n  script/generate delayed_job\n</code></pre>\n\nThe created table looks as follows: \n\n<pre><code>\n  create_table :delayed_jobs, :force => true do |table|\n    table.integer  :priority, :default => 0      # Allows some jobs to jump to the front of the queue\n    table.integer  :attempts, :default => 0      # Provides for retries, but still fail eventually.\n    table.text     :handler                      # YAML-encoded string of the object that will do work\n    table.string   :last_error                   # reason for last failure (See Note below)\n    table.datetime :run_at                       # When to run. Could be Time.now for immediately, or sometime in the future.\n    table.datetime :locked_at                    # Set when a client is working on this object\n    table.datetime :failed_at                    # Set when all retries have failed (actually, by default, the record is deleted instead)\n    table.string   :locked_by                    # Who is working on this object (if locked)\n    table.timestamps\n  end\n</code></pre>\n\nOn failure, the job is scheduled again in 5 seconds + N ** 4, where N is the number of retries.\n\nThe default @MAX_ATTEMPTS@ is @25@. After this, the job either deleted (default), or left in the database with "failed_at" set.\nWith the default of 25 attempts, the last retry will be 20 days later, with the last interval being almost 100 hours.\n\nThe default @MAX_RUN_TIME@ is @4.hours@. If your job takes longer than that, another computer could pick it up. It\'s up to you to\nmake sure your job doesn\'t exceed this time. You should set this to the longest time you think the job could take.\n\nBy default, it will delete failed jobs (and it always deletes successful jobs). If you want to keep failed jobs, set\n@Delayed::Job.destroy_failed_jobs = false@. The failed jobs will be marked with non-null failed_at.\n\nHere is an example of changing job parameters in Rails:\n\n<pre><code>\n  # config/initializers/delayed_job_config.rb\n  Delayed::Job.destroy_failed_jobs = false\n  silence_warnings do\n    Delayed::Job.const_set("MAX_ATTEMPTS", 3)\n    Delayed::Job.const_set("MAX_RUN_TIME", 5.minutes)\n  end\n</code></pre>\n\nNote: If your error messages are long, consider changing last_error field to a :text instead of a :string (255 character limit).\n\n\nh2. Usage\n\nJobs are simple ruby objects with a method called perform. Any object which responds to perform can be stuffed into the jobs table.\nJob objects are serialized to yaml so that they can later be resurrected by the job runner. \n\n<pre><code>\n  class NewsletterJob < Struct.new(:text, :emails)\n    def perform\n      emails.each { |e| NewsletterMailer.deliver_text_to_email(text, e) }\n    end    \n  end  \n  \n  Delayed::Job.enqueue NewsletterJob.new(\'lorem ipsum...\', Customers.find(:all).collect(&:email))\n</code></pre>\n\nThere is also a second way to get jobs in the queue: send_later. \n\n<pre><code>\n  BatchImporter.new(Shop.find(1)).send_later(:import_massive_csv, massive_csv)\n</code></pre>\n\nThis will simply create a @Delayed::PerformableMethod@ job in the jobs table which serializes all the parameters you pass to it. There are some special smarts for active record objects\nwhich are stored as their text representation and loaded from the database fresh when the job is actually run later.\n                                                                                                                              \n                                                                                                                    \nh2. Running the jobs\n\nYou can invoke @rake jobs:work@ which will start working off jobs. You can cancel the rake task with @CTRL-C@. \n\nYou can also run by writing a simple @script/job_runner@, and invoking it externally:\n  \n<pre><code>\n  #!/usr/bin/env ruby\n  require File.dirname(__FILE__) + \'/../config/environment\'\n  \n  Delayed::Worker.new.start  \n</code></pre>\n\nWorkers can be running on any computer, as long as they have access to the database and their clock is in sync. You can even\nrun multiple workers on per computer, but you must give each one a unique name:\n\n<pre><code>\n  3.times do |n|\n    worker = Delayed::Worker.new\n    worker.name = \'worker-\' + n.to_s\n    worker.start\n  end\t\n</code></pre>\n\nKeep in mind that each worker will check the database at least every 5 seconds.\n\nNote: The rake task will exit if the database has any network connectivity problems.\n\nh3. Cleaning up\n\nYou can invoke @rake jobs:clear@ to delete all jobs in the queue.\n\nh3. Changes\n\n* 1.7.0: Added failed_at column which can optionally be set after a certain amount of failed job attempts. By default failed job attempts are destroyed after about a month. \n\n* 1.6.0: Renamed locked_until to locked_at. We now store when we start a given job instead of how long it will be locked by the worker. This allows us to get a reading on how long a job took to execute.                    \n\n* 1.5.0: Job runners can now be run in parallel. Two new database columns are needed: locked_until and locked_by. This allows us to use   pessimistic locking instead of relying on row level locks. This enables us to run as many worker processes as we need to speed up queue processing.\n\n* 1.2.0: Added #send_later to Object for simpler job creation\n\n* 1.0.0: Initial release\n'
Chronic is a pure Ruby natural language date parser. b'Chronic\n\thttp://chronic.rubyforge.org/\n\tby Tom Preston-Werner\n\n== DESCRIPTION:\n\nChronic is a natural language date/time parser written in pure Ruby. See below for the wide variety of formats Chronic will parse.\n\n== INSTALLATION:\n\nChronic can be installed via RubyGems:\n\n  $ sudo gem install chronic\n  \n== CODE:\n\nBrowse the code and get an RSS feed of the commit log at:\n\n  http://github.com/mojombo/chronic.git\n\nYou can grab the code (and help with development) via git:\n\n  $ git clone git://github.com/mojombo/chronic.git\n\n== USAGE:\n\nYou can parse strings containing a natural language date using the Chronic.parse method.\n\n  require \'rubygems\'\n  require \'chronic\'\n\n  Time.now   #=> Sun Aug 27 23:18:25 PDT 2006\n\n  #---\n\n  Chronic.parse(\'tomorrow\')       \n    #=> Mon Aug 28 12:00:00 PDT 2006\n\n  Chronic.parse(\'monday\', :context => :past)\n    #=> Mon Aug 21 12:00:00 PDT 2006\n\n  Chronic.parse(\'this tuesday 5:00\')\n    #=> Tue Aug 29 17:00:00 PDT 2006\n\n  Chronic.parse(\'this tuesday 5:00\', :ambiguous_time_range => :none)\n    #=> Tue Aug 29 05:00:00 PDT 2006\n\n  Chronic.parse(\'may 27th\', :now => Time.local(2000, 1, 1))\n    #=> Sat May 27 12:00:00 PDT 2000\n\n  Chronic.parse(\'may 27th\', :guess => false)\n    #=> Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007\n\nSee Chronic.parse for detailed usage instructions.\n\n== EXAMPLES:\n\nChronic can parse a huge variety of date and time formats. Following is a small sample of strings that will be properly parsed. Parsing is case insensitive and will handle common abbreviations and misspellings.\n\nSimple\n\n  thursday\n  november\n  summer\n  friday 13:00\n  mon 2:35\n  4pm\n  6 in the morning\n  friday 1pm\n  sat 7 in the evening\n  yesterday\n  today\n  tomorrow\n  this tuesday\n  next month\n  last winter\n  this morning\n  last night\n  this second\n  yesterday at 4:00\n  last friday at 20:00\n  last week tuesday\n  tomorrow at 6:45pm\n  afternoon yesterday\n  thursday last week\n\nComplex\n\n  3 years ago\n  5 months before now\n  7 hours ago\n  7 days from now\n  1 week hence\n  in 3 hours\n  1 year ago tomorrow\n  3 months ago saturday at 5:00 pm\n  7 hours before tomorrow at noon\n  3rd wednesday in november\n  3rd month next year\n  3rd thursday this september\n  4th day last week\n\nSpecific Dates\n\n  January 5\n  dec 25\n  may 27th\n  October 2006\n  oct 06\n  jan 3 2010\n  february 14, 2004\n  3 jan 2000\n  17 april 85\n  5/27/1979\n  27/5/1979\n  05/06\n  1979-05-27\n  Friday\n  5\n  4:00\n  17:00\n  0800\n\nSpecific Times (many of the above with an added time)\n\n  January 5 at 7pm\n  1979-05-27 05:00:00\n  etc\n\n== LIMITATIONS:\n  \nChronic uses Ruby\'s built in Time class for all time storage and computation. Because of this, only times that the Time class can handle will be properly parsed. Parsing for times outside of this range will simply return nil. Support for a wider range of times is planned for a future release.\n\nTime zones other than the local one are not currently supported. Support for other time zones is planned for a future release.\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Tom Preston-Werner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Access the Get Satisfaction API using Ruby b'README'
Legacy code from the original llor.nu site b'Yeah, this is really old code. Not only old, but it\'s the first app I built with Rails when Rails was something like 0.11.0. Be kind.\n\nGETTING IT RUNNING\n* Make sure you have Rails 1.2.6 - there might be some gems needed too\n* Create the database\n* Run rake db:migrate\n* Run script/server\n* Go to localhost:3000\n* Click the huge JOIN button\n* Signup\n* Run script/console\n* u = User.find :first\n* u.role = "admin"\n* u.save\n* Go to localhost:3000/instances/new\n* Fiddle with the settings and create an instance\n* Make sure you enter settings for all numeric fields (nil default causes issues)\n* Go to localhost:3000/instances/choose\n* Join the instance you created.\n* Done.'
Your favorite URL-shortening service in all of Ruby land b'== RubyURL\n\nThis project is the source code for the application that powers Rubyurl.com. \n\n* http://rubyurl.com\n\nFeel free to start your own URL-shortening service!\n\n== Bugs and/or Feedback\n\nFeel free to submit tickets to the Rubyurl ticket system.\n\n* http://planetargon.lighthouseapp.com/projects/4059-rubyurl\n\n== Authors\n\nRobby Russell <robby@planetargon.com>\nChris Griffin <chris@deadboltdesign.com>\n'
 b'== RubyURL\n\nThis project is the source code for the application that powers Rubyurl.com. \n\n* http://rubyurl.com\n\nFeel free to start your own URL-shortening service!\n\n== Bugs and/or Feedback\n\nFeel free to submit tickets to the Rubyurl ticket system.\n\n* http://planetargon.lighthouseapp.com/projects/4059-rubyurl\n\n== Authors\n\nRobby Russell <robby@planetargon.com>\nChris Griffin <chris@deadboltdesign.com>\n'
A simple Rails application demoing using Google Charts b'= Montreal on Rails 7:  Google Charts Demo\n\nGoogle Charts API documentation is available at:\n  http://code.google.com/apis/chart/\n\nThe demo code can be had using Git using:\n  git clone git@github.com:francois/mor7-google-charts-demo\n\nThe code in this application is available under the public domain.\n'
DataMapper 
El Dorado is a full-stack community web application written in Ruby/Rails. b'El Dorado\n=========\n\nEl Dorado is a full-stack community web application written in Ruby/Rails.\nIt features a forum, event calendar, group chat, file sharing, random headers,\navatars, themes, and privacy settings.\n\n- Code: <http://github.com/trevorturk/eldorado/>\n- Demo and support site: <http://eldorado.heroku.com/>\n- Examples: <http://wiki.github.com/trevorturk/eldorado/> # add your site!\n\n\nScreenshot\n----------\n\n![Screenshot](http://s3.amazonaws.com/trevorturk/eldorado.png)\n\n\nInstall\n----------\n\n    git clone git://github.com/trevorturk/eldorado.git\n    cd eldorado\n    cp config/database.example.yml config/database.yml\n    cp config/config.example.yml config/config.yml\n    gem install rails -v=2.3.9\n    rake gems:install\n    rake db:create\n    rake db:schema:load\n    script/server\n\nVisit <http://localhost:3000/> to see the app running locally.\n\n\nDeploy\n------\n\nDeploy the app to Heroku:\n\n    gem install heroku\n    heroku create\n    # set the variables for your production environment in config/config.yml\n    rake s3:create\n    rake heroku:config\n    git push heroku master\n    heroku rake db:schema:load\n    heroku open\n\n\nMIT License\n-----------\n\nCopyright (c) 2006-* Trevor Turk\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the "Software"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.'
Updated Attachment Fu plugin including support for Core Image under Mac OSX b'attachment-fu\n=============\n\nattachment_fu is a plugin by Rick Olson (aka technoweenie <http://techno-weenie.net>) and is the successor to acts_as_attachment.  To get a basic run-through of its capabilities, check out Mike Clark\'s tutorial <http://clarkware.com/cgi/blosxom/2007/02/24#FileUploadFu>.\n\n\nattachment_fu functionality\n===========================\n\nattachment_fu facilitates file uploads in Ruby on Rails.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are three storage options for files uploaded through attachment_fu:\n  File system\n  Database file\n  Amazon S3\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml and the Database file storage requires an extra table.\n\n\nattachment_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the \'meta\') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # path to store the uploaded files.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 backend.  \n                      # Setting this sets the :storage to :file_system.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, and :s3.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => \'application/pdf\'\n    has_attachment :content_type => [\'application/pdf\', \'application/msword\', \'text/plain\']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => [\'application/pdf\', :image], :resize_to => \'x50\'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\'\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\', \n                   :content_type => :image, :resize_to => [50,50]\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\',\n                   :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :s3\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachment_fu migrations\n========================\n\nFields for attachment_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the \'type\' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model \'Avatar\' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => \'320x200>\',\n                            #                  :thumbnails => { :small => \'10x10>\',\n                            #                                   :thumb => \'100x100>\' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> \'small\'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachment_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachment_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachment_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include \':multipart => true\' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => "create" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system and s3 storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachment_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachment_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file \'/path/to/readme.txt\', :type => \'plain/text\', :disposition => \'inline\'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = \'Attachment was successfully created.\'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n'
Some [hopefully] useful extensions to Ruby’s String class. It is made up of three libraries: ActsAsUrl [permalink solution with better character translation], Unidecoder [Unicode to Ascii transliteration], and StringExtensions [miscellaneous helper methods for the String class]. b'= Stringex {<img src="https://codeclimate.com/github/rsl/stringex.png" />}[https://codeclimate.com/github/rsl/stringex] {<img src="https://travis-ci.org/rsl/stringex.png?branch=master" alt="Build Status" />}[https://travis-ci.org/rsl/stringex] {<img src="https://badge.fury.io/rb/stringex.svg" alt="Gem Version" />}[http://badge.fury.io/rb/stringex]\n\nSome [hopefully] useful extensions to Ruby\'s String class. It is made up of three libraries: ActsAsUrl, Unidecoder, and StringExtensions.\n\n<em>NOTE: Stringex 2.0 [and beyond] drops support for Rails 2. If you need support for that version, use 1.5.1 instead.</em>\n\n== ActsAsUrl\n\n<em>NOTE: You can now require \'stringex_lite\' instead of \'stringex\' and skip loading ActsAsUrl functionality if you don\'t need it.</em>\n\nThis library is designed to create URI-friendly representations of an attribute, for use in generating urls from your attributes. Basic usage is just calling the method:\n\n  # Inside your model\n  acts_as_url :title\n\nwhich will populate the <tt>url</tt> attribute on the object with the converted contents of the <tt>title</tt> attribute.\n<tt>acts_as_url</tt> takes the following options:\n\n<tt>:url_attribute</tt>:: The name of the attribute to use for storing the generated url string.\n                          Default is <tt>:url</tt>\n<tt>:scope</tt>:: The name of model attribute to scope unique urls to. There is no default here.\n<tt>:only_when_blank</tt>:: If set to true, the url generation will only happen when <tt>:url_attribute</tt> is\n                            blank. Default is false (meaning url generation will happen always).\n<tt>:sync_url</tt>:: If set to true, the url field will be updated when changes are made to the\n                     attribute it is based on. Default is false.\n<tt>:allow_slash</tt>:: If set to true, the url field will not convert slashes. Default is false.\n<tt>:allow_duplicates</tt>:: If set to true, unique urls will not be enforced.\n                             Default is false. <em>NOTE: This is strongly not recommended\n                             if you are routing solely on the generated slug as you will no longer\n                             be guaranteed to lookup the expected record based on a duplicate slug.</em>\n<tt>:limit</tt>:: If set, will limit length of url generated. Default is nil.\n<tt>:truncate_words</tt>:: Used with :limit. If set to false, the url will be truncated to the last\n                           whole word before the limit was reached. Default is true.\n<tt>:blacklist</tt>:: List of urls that should not be allowed. Default is <tt>%w{new}</tt> [which avoids confusion\n                      on urls like <tt>/documents/new</tt>].\n<tt>:blacklist_policy</tt>:: Proc or lambda defining new naming behavior when blacklisted urls are encountered.\n                             Default converts <tt>/documents/new</tt> to <tt>/documents/new-document</tt>.\n\n\nIn order to use the generated url attribute, you will probably want to override <tt>to_param</tt> like so, in your Model:\n\n  # Inside your model\n  def to_param\n    url # or whatever you set :url_attribute to\n  end\n\nRouting called via named routes like <tt>foo_path(@foo)</tt> will automatically use the url. In your controllers you will need to call <tt>Foo.find_by_url(params[:id])</tt> instead of the regular find. Don\'t look for <tt>params[:url]</tt> unless you set it explicitly in the routing, <tt>to_param</tt> will generate <tt>params[:id]</tt>.\n\nNote that if you add <tt>acts_as_url</tt> to an existing model, the <tt>url</tt> database column will initially be blank. To set this column for your existing instances, you can use the <tt>initialize_urls</tt> method. So if your class is <tt>Post</tt>, just say <tt>Post.initialize_urls</tt>.\n\nUnlike other permalink solutions, ActsAsUrl doesn\'t rely on Iconv (which is inconsistent across platforms and doesn\'t provide great transliteration as is) but instead uses a transliteration scheme (see the code for Unidecoder) which produces much better results for Unicode characters. It also mixes in some custom helpers to translate common characters into a more URI-friendly format rather than just dump them completely. Examples:\n\n   # A simple prelude\n   "simple English".to_url => "simple-english"\n   "it\'s nothing at all".to_url => "its-nothing-at-all"\n   "rock & roll".to_url => "rock-and-roll"\n\n   # Let\'s show off\n   "$12 worth of Ruby power".to_url => "12-dollars-worth-of-ruby-power"\n   "10% off if you act now".to_url => "10-percent-off-if-you-act-now"\n\n   # You dont EVEN wanna rely on Iconv for this next part\n   "kick it en Fran\xc3\xa7ais".to_url => "kick-it-en-francais"\n   "rock it Espa\xc3\xb1ol style".to_url => "rock-it-espanol-style"\n   "tell your readers \xe4\xbd\xa0\xe5\xa5\xbd".to_url => "tell-your-readers-ni-hao"\n\nCompare those results with the ones produced on my Intel Mac by a leading permalink plugin:\n\n  "simple English" # => "simple-english"\n  "it\'s nothing at all" # => "it-s-nothing-at-all"\n  "rock & roll" # => "rock-roll"\n\n  "$12 worth of Ruby power" # => "12-worth-of-ruby-power"\n  "10% off if you act now" # => "10-off-if-you-act-now"\n\n  "kick it en Fran\xc3\xa7ais" # => "kick-it-en-francais"\n  "rock it Espa\xc3\xb1ol style" # => "rock-it-espan-ol-style"\n  "tell your readers \xe4\xbd\xa0\xe5\xa5\xbd" # => "tell-your-readers"\n\nNot so great, actually.\n\nNote: No offense is intended to the author[s] of whatever plugins might produce such results. It\'s not your faults Iconv sucks.\n\n== Unidecoder\n\nThis library converts Unicode [and accented ASCII] characters to their plain-text ASCII equivalents. This is a port of Perl\'s Unidecode and provides eminently superior and more reliable results than Iconv. (Seriously, Iconv... A plague on both your houses! [sic])\n\nYou may require only the unidecoder (and its dependent localization) via\n\n  require "stringex/unidecoder"\n\nYou probably won\'t ever need to run Unidecoder by itself. Thus, you probably would want to add String#to_ascii which wraps all of Unidecoder\'s functionality, by requiring:\n\n  require "stringex/core_ext"\n\nFor anyone interested, details of the implementation can be read about in the original implementation of Text::Unidecode[http://interglacial.com/~sburke/tpj/as_html/tpj22.html]. Extensive examples can be found in the tests.\n\n\n== StringExtensions\n\nA small collection of extensions on Ruby\'s String class. Please see the documentation for StringExtensions module for more information. There\'s not much to explain about them really.\n\n== Localization\n\nWith Stringex version 2.0 and higher, you can localize the different conversions in Stringex. Read more here[https://github.com/rsl/stringex/wiki/Localization-of-Stringex-conversions]. If you add a new language, please submit a pull request so we can make it available to other users also.\n\n== Ruby on Rails Usage\n\nWhen using Stringex with Ruby on Rails, you automatically get built-in translations for miscellaneous characters, HTML entities, and vulgar fractions. You can see Stringex\'s standard translations here[https://github.com/rsl/stringex/tree/master/locales].\n\nCurrently, built-in translations are available for the following languages:\n\n  * English (en)\n  * Danish (da)\n  * Swedish (sv)\n  * Dutch (nl)\n  * German (de)\n  * Polish (pl)\n  * Portuguese Brazilian (pt-BR)\n  * Russian (ru)\n\nYou can easily add your own or customize the built-in translations - read here[https://github.com/rsl/stringex/wiki/Localization-of-Stringex-conversions]. If you add a new language, please submit a pull request so we can make it available to other users also.\n\nIf you don\'t want to use the Stringex built-in translations, you can force Stringex to use English (or another language), regardless what is in your +I18n.locale+. In an initializer, e.g. +config/initializers/stringex.rb+:\n\n  Stringex::Localization.locale = :en\n\n== CanCan Usage Note\n\nYou\'ll need to add a <tt>:find_by => :url</tt> to your <tt>load_and_authorize_resource</tt>.  Here\'s an example:\n\n  load_and_authorize_resource :class => "Whatever", :message => "Not authorized", :find_by => :url\n\n== Thanks & Acknowledgements\n\nIf it\'s not obvious, some of the code for ActsAsUrl is based on Rick Olsen\'s permalink_fu[http://svn.techno-weenie.net/projects/plugins/permalink_fu/] plugin. Unidecoder is a Ruby port of Sean Burke\'s Text::Unidecode[http://interglacial.com/~sburke/tpj/as_html/tpj22.html] module for Perl. And, finally, the bulk of strip_html_tags[link:classes/Stringex/StringExtensions.html#M000005] in StringExtensions was stolen from Tobias L\xc3\xbctke\'s Regex in Typo[http://typosphere.org/].\n\nGIANT thanks to the many contributors who have helped make Stringex better and better: http://github.com/rsl/stringex/contributors\n\ncopyright (c) 2008-2014 Lucky Sneaks, released under the MIT license\n'
The personal site software thing b"FreeFall\n========\n\nA personal CMS\n\nThe focus of Freefall is to refocus online lives back into single websites\n\nThis code is not currently Open Source, and while you clearly have access to the source code, just for now, you can't use it. This will change very soon.\n\nFeatures\n========\n\nInbuilt Tumblog and full Blog\nSupport for various APIs direct into your site:\n  * Twitter\n  * Flickr\n  * Ma.gnolia\n  * Last.fm hearted\n  * More to come\nOpenID authentication for Administration and User comments\nRESTful\n\nDependencies\n============\n\nGems\n----\nhaml"
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a "normal" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n'
A wiki engine that uses a Git repository as its data store. b'h1. git-wiki\n\nA wiki engine that uses a Git repository as its data store.\n\nh2. Status\n\nAlex Payne (see AUTHORS file) is no longer actively developing this branch.\nPlease fork from here and continue development!\n\nh2. Requirements\n\n* rubygems\n* sinatra\n* grit\n* redcloth\n* rubypants'
A Finnish version of the Chronic natural language time parsing library 
a Scheme written in Ruby, but implemented on the bus! b'Bus Scheme\n    by Phil Hagelberg (c) 2007 - 2008\n    http://bus-scheme.rubyforge.org\n\n== Description\n\nBus Scheme is a Scheme written in Ruby, but implemented on the bus!\nEvery programmer must implement Scheme as a rite of passage; this is\nmine. Note that at least half of the implementation of Bus Scheme must\nbe written while on a bus. Documentation, tests, and administrivia may\nbe accomplished elsewhere, but the majority of actual implementation\ncode is strictly bus-driven. Patches are welcome especially if they were\nwritten while riding a bus. (If your daily commute does not involve a\nbus but you want to submit a patch, we may be able to work something\nout regarding code written on trains, ferries, or perhaps even carpool\nlanes.) Bus Scheme is primarily a toy; using it for anything serious\nis (right now) ill-advised.\n\nBus Scheme aims for general Scheme usefulness optimized for learning\nand fun. It\'s not targeting R5RS or anything like that.\n\n== Usage\n\n$ bus # drop into the REPL\n\n$ bus -e "(do some stuff)"\n\n$ bus foo.scm # load a file\n\n== Tutorial\n\nSee http://technomancy.us/104 for a "Getting Started" tutorial.\n\n== What makes Bus Scheme different?\n\nWell, for starters it\'s implemented on the bus. No other Scheme\nimplementation can claim this. Here are a few other things that set\nBus Scheme apart:\n\n=== Flexible calling syntax\n\nTaking a hint from Arc, Bus Scheme allows you to use the notation\n(mylist n) to access the nth place of the mylist list instead of (nth\nmylist n) or the (myhash key) notation to access the slot in myhash\ncorresponding to the value of key instead of (gethash myhash key). \nTODO: This notation is flexible, and other data types may have\ntheir own "call behaviour" specified.\n\n=== Mongrel integration\n\nWeb and RESTful application development are part of the package. Bus\nScheme uses the wonderful Mongrel web server to allow scheme programs\nto serve web applications. TODO: Representations of data can be easily\ntranslated between s-expressions, HTML, and JSON.\n\n=== Written in a high-level language\n\nBus Scheme is written in Ruby, which means anyone with experience in\nhigh-level dynamic languages (like, oh, I don\'t know... Scheme?)\nshould be right at home poking around at the implementation. Using\nRuby allows the implementation code to remain compact and concise. Bus\nScheme should run on Ruby 1.8, Ruby 1.9, and Rubinius at least. Bus\nScheme also allows you to drop into Ruby when that\'s convenient. TODO:\nallow real inline Ruby blocks instead of access via a function call.\n\n=== XML integration\n\nTODO: Bus Scheme has a notion of XML literals so that it may be\ninlined into your Scheme code, much like the way ECMAScript uses\nE4X. If you\'d prefer, you can leverage convenient s-expression -> XML\nconversion facilities.\n\n=== Test-Driven\n\nBus Scheme is written in an entirely test-driven manner. As much as\npossible, it tries to keep its tests written in Scheme itself, so it\nincludes a fairly comprehensive testing suite and encourages programs\nto be written test-first.\n\n== Install\n\n* sudo gem install bus-scheme\n\nFor the source:\n\n* git clone git://git.caboo.se/bus_scheme.git\n\n== Todo\n\nBus Scheme is currently missing pieces of functionality:\n\n=== Parser\n* character literals\n* multiline strings\n* dotted cons cells\n\n=== General\n* test framework needs work\n* macros\n* continuations\n\nFailing tests for some of these are already included (commented out,\nmostly) in the relevant test files.\n\n=== Long Term (post 1.0)\n* web functions (defresource and friends)\n* (lambda (arg1 arg2 . args) body) for rest args\n* string interpolation\n* escape sequences in strings\n* Ruby blocks inline?\n* XML literals?\n* optimize tail call recursion\n* compile to Rubinius bytecode\n* custom call behaviour\n* parse non-decimal base numbers\n* parse rationals, scientific, complex, and polar complex numbers\n\n== Requirements\n\nBus Scheme should run on (at least) Ruby 1.8, Ruby 1.9, and Rubinius.\n\n== Bonus Fact\n\nI haven\'t actually used a real Scheme yet. Everything I know about it\nI\'ve gathered from reading The Little Schemer, watching the Structure\nand Interpretation of Computer Programs videos, and reading lots about\nCommon Lisp and Emacs Lisp. If there are huge gaping flaws in the\nimplementation, this is likely to be why.\n'
A fork of the bindata project, with some custom extensions b'= BinData\n\nA declarative way to read and write structured binary data.\n\n== What is it for?\n\nDo you ever find yourself writing code like this?\n\n  io = File.open(...)\n  len = io.read(2).unpack("v")\n  name = io.read(len)\n  width, height = io.read(8).unpack("VV")\n  puts "Rectangle #{name} is #{width} x #{height}"\n\nIt\'s ugly, violates DRY and feels like you\'re writing Perl, not Ruby.\nThere is a better way.\n\n  class Rectangle < BinData::Struct\n    uint16le :len\n    string   :name, :read_length => :len\n    uint32le :width\n    uint32le :height\n  end\n\n  io = File.open(...)\n  r = Rectangle.read(io)\n  puts "Rectangle #{r.name} is #{r.width} x #{r.height}"\n\nBinData makes it easy to specify the structure of the data you are\nmanipulating.\n\nRead on for the tutorial, or go straight to the\ndownload[http://rubyforge.org/frs/?group_id=3252] page.\n\n== Syntax\n\nBinData declarations are easy to read.  Here\'s an example.\n\n  class MyFancyFormat < BinData::Struct\n    stringz :comment\n    uint8   :count, :check_value => lambda { (value % 2) == 0 }\n    array   :some_ints, :type => :int32be, :initial_length => :count\n  end\n\nThe structure of the data in this example is\n1. A zero terminated string\n2. An unsigned 8bit integer which must by even\n3. A sequence of unsigned 32bit integers in big endian form, the total\n   number of which is determined by the value of the 8bit integer.\n\nThe BinData declaration matches the english description closely.  Just for\nfun, lets look at how we\'d implement this using #pack and #unpack.  Here\'s\nthe writing code, have a go at the reading code.\n\n  comment = "this is a comment"\n  some_ints = [2, 3, 8, 9, 1, 8]\n  File.open(...) do |io|\n    io.write([comment, some_ints.size, *some_ints].pack("Z*CN*"))\n  end\n\n\nThe general format of a BinData declaration is a class containing one or more\nfields.\n\n  class MyName < BinData::Struct\n    type field_name, :param1 => "foo", :param2 => bar, ...\n    ...\n  end\n\n*type* is the name of a supplied type (e.g. <tt>uint32be</tt>,  +string+)\nor a user defined type.  For user defined types, convert the class name\nfrom CamelCase to lowercase underscore_style.\n\n*field_name* is the name by which you can access the data.  Use either a\nString or a Symbol.  You may specify a name as nil, but this is described\nlater in the tutorial.\n\nEach field may have *parameters* for how to process the data.  The\nparameters are passed as a Hash using Symbols for keys.\n\n== Handling dependencies between fields\n\nA common occurance in binary file formats is one field depending upon the\nvalue of another.  e.g. A string preceded by it\'s length.\n\nAs an example, let\'s assume a Pascal style string where the byte preceding\nthe string contains the string\'s length.\n\n  # reading\n  io = File.open(...)\n  len = io.getc\n  str = io.read(len)\n  puts "string is " + str\n\n  # writing\n  io = File.open(...)\n  str = "this is a string"\n  io.putc(str.length)\n  io.write(str)\n\nHere\'s how we\'d implement the same example with BinData.\n\n  class PascalString < BinData::Struct\n    uint8  :len,  :value => lambda { data.length }\n    string :data, :read_length => :len\n  end\n\n  # reading\n  io = File.open(...)\n  ps = PascalString.new\n  ps.read(io)\n  puts "string is " + ps.data\n\n  # writing\n  io = File.open(...)\n  ps = PascalString.new\n  ps.data = "this is a string"\n  ps.write(io)\n\nThis syntax needs explaining.  Let\'s simplify by examining reading and\nwriting separately.\n\n  class PascalStringReader < BinData::Struct\n    uint8  :len\n    string :data, :read_length => :len\n  end\n\nThis states that when reading the string, the initial length of the string\n(and hence the number of bytes to read) is determined by the value of the\n+len+ field.\n\nNote that <tt>:read_length => :len</tt> is syntactic sugar for\n<tt>:read_length => lambda { len }</tt>, but more on that later.\n\n  class PascalStringWriter < BinData::Struct\n    uint8  :len, :value => lambda { data.length }\n    string :data\n  end\n\nThis states that the value of +len+ is always equal to the length of +data+.\n+len+ may not be manually modified.\n\nCombining these two definitions gives the definition for +PascalString+ as\npreviously defined.\n\nOnce thing to note with dependencies, is that a field can only depend on one\nbefore it.  You can\'t have a string which has the characters first and the\nlength afterwards.\n\n== Predefined Types\n\nThese are the predefined types.  Custom types can be created by composing\nthese types.\n\nBinData::Int8::     Signed  8 bit integer.\nBinData::Int16le::  Signed 16 bit integer (little endian).\nBinData::Int16be::  Signed 16 bit integer (big endian).\nBinData::Int32le::  Signed 32 bit integer (little endian).\nBinData::Int32be::  Signed 32 bit integer (big endian).\nBinData::Int64le::  Signed 64 bit integer (little endian).\nBinData::Int64be::  Signed 64 bit integer (big endian).\n\nBinData::Uint8::    Unsigned  8 bit integer.\nBinData::Uint16le:: Unsigned 16 bit integer (little endian).\nBinData::Uint16be:: Unsigned 16 bit integer (big endian).\nBinData::Uint32le:: Unsigned 32 bit integer (little endian).\nBinData::Uint32be:: Unsigned 32 bit integer (big endian).\nBinData::Uint64le:: Unsigned 64 bit integer (little endian).\nBinData::Uint64be:: Unsigned 64 bit integer (big endian).\n\nBinData::FloatLe::  Single precision floating point number (little endian).\nBinData::FloatBe::  Single precision floating point number (big endian).\nBinData::DoubleLe:: Double precision floating point number (little endian).\nBinData::DoubleBe:: Double precision floating point number (big endian).\n\nBinData::String::   A sequence of bytes.\nBinData::Stringz::  A zero terminated sequence of bytes.\n\nBinData::Array::    A list of objects of the same type.\nBinData::Choice::   A choice between several objects.\nBinData::Struct::   An ordered collection of named objects.\n\n== Parameters\n\n  class PascalStringWriter < BinData::Struct\n    uint8  :len, :value => lambda { data.length }\n    string :data\n  end\n\nRevisiting the Pascal string writer, we see that a field can take\nparameters.  Parameters are passed as a Hash, where the key is a symbol.\nIt should be noted that parameters are designed to be lazily evaluated,\npossibly multiple times.  This means that any parameter value must not have\nside effects.\n\nHere are some examples of legal values for parameters.\n\n  * :param => 5\n  * :param => lambda { 5 + 2 }\n  * :param => lambda { foo + 2 }\n  * :param => :foo\n\nThe simplest case is when the value is a literal value, such as 5.\n\nIf the value is not a literal, it is expected to be a lambda.  The lambda\nwill be evaluated in the context of the parent, in this case the parent is\nan instance of +PascalStringWriter+.\n\nIf the value is a symbol, it is taken as syntactic sugar for a lambda\ncontaining the value of the symbol.\ne.g <tt>:param => :foo</tt> is <tt>:param => lambda { foo }</tt>\n\n== Saving Typing\n\nThe endianess of numeric types must be explicitly defined so that the code\nproduced is independent of architecture.  Explicitly specifying the\nendianess of each numeric type can become tedious, so the following\nshortcut is provided.\n\n  class A < BinData::Struct\n    endian :little\n\n    uint16   :a\n    uint32   :b\n    double   :c\n    uint32be :d\n    array    :e, :type => :int16\n  end\n\nis equivalent to:\n\n  class A < BinData::Struct\n    uint16le  :a\n    uint32le  :b\n    double_le :c\n    uint32be  :d\n    array     :e, :type => :int16le\n  end\n\nUsing the endian keyword improves the readability of the declaration as well\nas reducing the amount of typing necessary.  Note that the endian keyword will\ncascade to nested types, as illustrated with the array in the above example.\n\n== Creating custom types\n\nCustom types should be created by subclassing BinData::Struct.\nOcassionally it may be useful to subclass BinData::Single.  Subclassing\nother classes may have unexpected results and is unsupported.\n\n\n== License\n\nBinData is released under the same license as Ruby.\n\nCopyright (c) 2007 Dion Mendel\n'
Personal bookshelf application, rails based. b"UPDATE: A updated (and much improved) version of this application is available as SaaS (software as a service) here: http://bookqueue.net/ \n\n\n= bookqueue\n\nbookqueue is a bookshelf application done in rails. under heavy development,\nthe current features includes:\n\n* Categorize your books in 3 main categories (Next/Current/Finished)\n* File upload for covers\n* RSS feed with queue activity\n* Twitter integration\n\n== REQUIREMENTS:\n\n* rails 2.1 (vendored)\n* some gems (vendored too)\n* imagemagick for cover manipulation\n\n\n== INSTRUCTIONS:\n\n- mkdir log\n- create a config/database.yml (rename and edit config/database.yml.example)\n- modify the session secret\n- rake db:migrate RAILS_ENV=production\n- modify config/amazon_s3.yml with your amazon s3 credentials (covers are uploaded to s3)\n- setup the webserver to access the app\n- access '/signup' and create your admin user.\n\nYou can later login into the admin area accessing '/login'. Feel free to customize the config.yml file with fancy configatron options.\n\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Rodrigo Franco\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
StrokeDB is an embeddable distributed document database written in Ruby b"StrokeDB is a distributed document-oriented database engine. \nMain features are complete decentralization, JSON object format, \nmetadocuments, integration with runtime (it is just a ruby library). \n\n\n= Starting points\n\nOne of the most important concepts of StrokeDB is a StrokeDB::Document.\n\n\n= Installing StrokeDB\n\n=== Requirements\n\nInstall ossp-uuid library:\n\n\t$ brew install ossp-uuid # (MacOSX)\n\nYou need to install few gems in order to run StrokeDB:\n\n\t$ gem install diff-lcs json RubyInline\n\t\nIf you can't install ossp-uuid for some reason, then install uuidtools gem as well.\n\n*Note*: There is no need in <tt>uuidtools</tt> if you use JRuby\n\n=== Getting source code\n\n\t$ git clone git://github.com/yrashk/strokedb.git\n\n=== Installing rubygem\n\n\t$ gem install strokedb\n\t\n=== <i>(Optional) Running test suite</i>\n\n  $ gem install rcov echoe rspec\n\t$ rake sup\n\t\n=AUTHORS\n\n* Yurii Rashkovskii <yrashk@idbns.com>\n* Oleg Andreev <oleganza@idbns.com>\n"
a Scheme written in Ruby, but implemented on the bus! b'= Bus Scheme\n    by Phil Hagelberg (c) 2007 - 2008\n    http://bus-scheme.rubyforge.org\n\n== Description\n\nBus Scheme is a Scheme written in Ruby, but implemented on the bus!\nEvery programmer must implement Scheme as a rite of passage; this is\nmine. Note that at least half of the implementation of Bus Scheme must\nbe written while on a bus. Documentation, tests, and administrivia may\nbe accomplished elsewhere, but the majority of actual implementation\ncode is strictly bus-driven. Bus Scheme is primarily a toy; using it\nfor anything serious is (right now) ill-advised.\n\nBus Scheme aims for general Scheme usefulness optimized for learning\nand fun. It\'s loosely targeting R5RS, but varies in huge ways. (For\nthe purposes of this project we pretend that R6RS never happened.) See\nthe file R5RS.diff for ways in which Bus Scheme differs from the\nstandard, both things that are yet unimplemented and things that are\nintentionally different.\n\n== Usage\n\n$ bus # drop into the REPL\n\n$ bus -e "(do some stuff)"\n\n$ bus foo.scm # load a file\n\n== Tutorial\n\nSee http://technomancy.us/104 for a "Getting Started" tutorial.\n\n== Contributing\n\nIf you\'re looking for stuff to do, try "rake todo"\n\nPatches are welcome especially if they were written while riding a\nbus. If your daily commute does not involve a bus but you want to\nsubmit a patch, we may be able to work something out regarding code\nwritten on trains, ferries, or perhaps even carpool lanes.\n\nJoin the mailing list to ask questions and discuss:\nhttp://rubyforge.org/mail/?group_id=5094\n\n== What makes Bus Scheme different?\n\nWell, for starters it\'s implemented on the bus. No other Scheme\nimplementation can claim this. Here are a few other things that set\nBus Scheme apart:\n\n=== Flexible calling syntax\n\nTaking a hint from Arc, Bus Scheme allows you to use the notation\n(mylist n) to access the nth place of the mylist list instead of (nth\nmylist n) or the (myhash key) notation to access the slot in myhash\ncorresponding to the value of key instead of (gethash myhash key). \nTODO: This notation is flexible, and other data types may have\ntheir own "call behaviour" specified.\n\n=== Web functionality\n\nPlanned: Web and RESTful application development are part of the\npackage. Bus Scheme uses the Rack library to allow scheme programs to\nserve web applications. Representations of data can be easily\ntranslated between s-expressions, HTML, and JSON.\n\n=== Written in a high-level language\n\nBus Scheme is written in Ruby, which means anyone with experience in\nhigh-level dynamic languages (like, oh, I don\'t know... Scheme?)\nshould be right at home poking around at the implementation. Using\nRuby allows the implementation code to remain compact and concise. Bus\nScheme should run on Ruby 1.8, Ruby 1.9, Rubinius, and JRuby at\nleast. Bus Scheme also allows you to drop into Ruby when that\'s\nconvenient. TODO: allow real inline Ruby blocks instead of access via\na function call.\n\n=== Test-Driven\n\nBus Scheme is written in an entirely test-driven manner. As much as\npossible, it tries to keep its tests written in Scheme itself, so it\nincludes a fairly comprehensive testing suite and encourages programs\nto be written test-first.\n\n== Install\n\n* sudo gem install bus-scheme\n\nFor the source:\n\n* git clone git://github.com/technomancy/bus-scheme.git\n\n== Todo\n\nBus Scheme is currently missing pieces of functionality:\n\n=== Parser\n* multiline strings\n* regular expressions\n\n=== General\n* filter stacktrace\n* continuations\n* macros\n\nFailing tests for some of these are already included (commented out,\nmostly) in the relevant test files.\n\n=== Long Term (post 1.0)\n* web functions (defresource and friends)\n* (lambda (arg1 arg2 . args) body) for rest args\n* string interpolation\n* escape sequences in strings\n* Ruby blocks inline?\n* XML literals?\n* optimize tail call recursion\n* compile to Rubinius bytecode\n* custom call behaviour\n* parse non-decimal base numbers\n* parse rationals, scientific, complex, and polar complex numbers\n\n== Requirements\n\nBus Scheme should run on (at least) Ruby 1.8, Ruby 1.9, Rubinius,\nJRuby. Any support for Windows is entirely accidental.\n\n== Bonus Fact\n\nI haven\'t actually used a real Scheme yet. Everything I know about it\nI\'ve gathered from reading The Little Schemer, watching the Structure\nand Interpretation of Computer Programs videos, and reading lots about\nCommon Lisp and Emacs Lisp. If there are huge gaping flaws in the\nimplementation, this is likely to be why.\n'
A very basic site framework that uses HAML, YAML, Markdown, SmartyPants, and PHP.  There will be an admin interface at some point. b'Yark: Web 1.0 Done Right\n\nInstallation instructions:\n\n- Set your DocumentRoot to yark/public/\n- chmod 777 yark/tmp/haml\n- Do your thing in content/ and templates/\n- Bring. It. Around. Town.\n'
Recipes to get your app up and running quickly and easily. b"= Capistrano Bells\n  By Pat Nakajima.\n\n=== About\n\nCapistrano Bells is a collection of recipes intended to make deploying\nRails apps easier. That's it and that's all.\n\nCopyright (c) 2007-2008 Pat Nakajima, released under the MIT license\n"
Rails plugin to build a simple calendar scaffold, with events signified by class names added to the day. b'Calendar Maker\n==============\n\nPutting a calendar on a web page is easy now. Also, you can add events to a \ncalendar, which are denoted by adding a custom class name to that day, allowing\nyou to style it differently, or even define behavior for that day via unobtrusive\nJavascript.\n\n\nUsage\n=====\n\nYou can create a new calendar object by simply running "Calendar.new" from either\nyour controller or your view. You can specify the month and year of your calendar\nlike so:\n\n  @calendar = Calendar.new(:month => \'oct\', :year => 2001)\n  \nIf you\'d like to add events to the calendar object, you can simply pass it an\narray of objects via its #add method, then designating an attribute to signify the\nevent date using the :schedule_for option. This option is not optional. If you don\'t\ninclude it, an ArgumentError exception will be raised.\n\nYou can also specify which class should be added to days that have certain events\nby using the :html_class option. If you don\'t provide one, then the plugin will just\nadd the :schedule_for value as a class name.\n\nFinally, use the #generate method to actually render the HTML code for your calendar.\n\nExample\n=======\n\nIn your controller...\n\n  class PartyController < ApplicationController\n    def index\n      @parties  = Party.find(:all)\n      @calendar = Calendar.new\n      @calendar.add @parties, :schedule_for => :party_date, :html_class => "party_time"\n      render :action => :index\n    end\n  end\n\nIn your view...\n\n  <%= @calendar.generate %>\n\nTodo\n====\n\n- Clean it up. Big time.\n- Finish documentation.\n\nCopyright (c) 2007 Pat Nakajima, James Herdman, released under the MIT license\n'
A rails plugin that simulates some of the old scaffold funcionality, but using RESTful controllers, will_paginate for pagination and enforces the model first approach b'Mydry\n=====\n\nThis plugin emulates some of the old "scaffold" functionality, but using RESTFul controllers, will_paginate for pagination, partials for forms and enforces the model first approach.\n\nThe basic workflow is this:\n1 - create a migration and define your initial table\n2 - ./script/generate drymodel model_name\n\there the model file generated for you, will have all the validations and belongs defined in the database table\n\tyou can add more validations, configure relationships, code your model\n3 - ./script/generate dryscaffold model_name\n\there the scaffold will import the model definition (currently it is working with the database, but the next release will import from the model), and generate all the boilerplate code for you.\n\n\nThe origin of this plugin was the need to define a validation in the migration (Eg.: :null => false), in the model again (Eg.: validates_presence_of :column), then again in the view, ...\nThe way this generators work I define one thing once and it is generated in the other places for me.\n\n\nExample\n=======\n\nExample goes here.\n\n\nCopyright (c) 2008 Rodrigo Urubatan Ferreira Jardim, released under the MIT license\n'
The lightweight gemspec editor. b"Gemify, the gemspec generator\n=============================\n\nOverview\n--------\n\nGemify is a simple tool which helps you generate gemspecs (which are\nused for building gems) and verify that your project follows the common\nand proven way to structure your Ruby packages.\n\nGetting started\n---------------\n\nGenerating gemspec:\n\n    $ gem install gemify\n    $ cd myproject (which doesn't have a gemspec yet)\n    $ gemify\n    Gemify needs to know a bit about your project, but should be\n    able to guess most of the information. Type the value if you\n    need to correct it, or press ENTER to accept the suggestion by Gemify.\n\n    Project name:        gemify? \n    Namespace:           Gemify? \n    Library:             lib/gemify? \n\n    *** Verifying the structure of lib/\n    [+] Please consider to define Gemify::VERSION in lib/gemify/version.rb\n    [.] Done\n\n    *** Verifying the structure of bin/\n    [.] Done\n\n    *** Verifying the structure of ext/\n    [.] Done\n\n    *** Generating a gemspec\n    [.] Done\n\n    Please open gemify.gemspec in your text editor and fill out the details.\n\n    You should fix any warnings that was reported above. You won't need to\n    generate a new gemspec after you've fixed them.\n\n    You must also define Gemify::VERSION in lib/gemify/version.rb.\n    Gemify has automatically created the file for you, so simply\n    open it in your text editor and fill in the current version.\n    \nOr if you just want to verify it:\n\n    $ gemify -v\n\n### Build and share a gem\n\nLet's not reinvent the wheel, shall we?\n\n    $ gem build foo.gemspec\n    $ gem push foo.gem\n\n\nAcknowledgements\n----------------\n\nThanks to [Pat Nakajima](http://patnakajima.com/) for reminding me that\nGemify still has its uses.\n\n\nContributors\n------------\n\n* David A. Cuadrado\n* Ben Wyrosdick\n* Chris Wanstrath\n* Pat Nakajima\n* Vincent Landgraf\n\n"
My Montreal on Rails 7 presentation of Thin b'Presentation I did of Thin at http://www.montrealonrails.com/2008/01/22/announcing-mor-7-presenters-that-was-fast/'
Personal blog code b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
A Haml clone built using the Treetop parser generator b'Hairball is a Haml clone built using the Treetop parser generator library (http://treetop.rubyforge.org/)\n\nReally this was just a way for me to try out Treetop, so I put it up so other people could check out the .treetop file.'
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen app myapp                   # a "normal" merb app\n$ merb-gen app myapp --flat            # a flattened app\n$ merb-gen app myapp --very-flat       # a single-file app\n\n'
 b'The Earned Value Management (EVM) Portal will allow for business users to easily\nmanage EVM related activities though a easy to use web interface.\n'
Enrollment app for San Carlos Charter Learning Center b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
OS X: displays recent CPU usage in the Dock or a floating window 
Simple tool for managing vendor branches across different SCMs b'= README\n\nBraid is a simple tool for managing vendor branches across different SCMs.\n\nhttp://evil.che.lu/projects/braid\n\nYou\'ll need a rather recent version of git, most likely something after 1.5.4.\n\n= INSTALLING FORM RUBYGEMS\n\n# gem not published yet. please install from git\nsudo gem install braid\n\n= INSTALLING FROM GIT\n\n# install deps\nsudo gem install main\nsudo gem install open4\n\ngit clone git://github.com/evilchelu/braid.git\ncd braid\nrake install_gem\n\n= USAGE\n\n# create a git repo\ngit init moo\ncd moo\n\n# ideally you will also do these, but they are just good practices\ngit config --global mirror.summary true\ngit checkout -b localwork\n\n# adding mirrors\nbraid add git://blah\nbraid add svn://muh\ngitk braid/track\ngit merge braid/track\n\n# updating mirrors\nbraid update muh\nbraid update\ngit merge braid/track\n\n# removing mirrors\nbraid remove blah\nbraid remove muh\ngit merge braid/track\n\n= MORE USAGE\n\nBraid stores it\'s metadata in a file called ".braids" located in the current directory where braid is run.\n\nFor full usage docs run:\n\nbraid help\nbraid help COMMANDNAME\n\n= POSSIBLE PROBLEMS\n\nIn a multiuser setup people won\'t have all the remote branches setup. But nothing is really lost, yet.\n\nTheoretically if you add the same remotes on other checkout and set the branches correctly things could be made to just work(TM).\n\n= ISSUES\n\nBraid barely works and you\'ll definitely encounter bugs. Help is appreciated :).\n\nFor now, known issues and feature requests are stored in the TODO.txt file in the root of the braid checkout.\n\n'
A merb port of the attachment_fu Rails plugin b'attachmerb-fu\n=====================\n\nattachmerb_fu is a port of Rick Olson\'s famous attachment_fu Rails plugin to merb. It tries to be as orm-agnostic as merb while having the same functionalities as the original plugin.\n\nThis plugin is still in a very alpha state and was only tested with Datamapper ORM, mini_magick image processor and filesystem storage. It may or may not work for your application\n\n** This fork has been modified to work with ActiveRecord 2.1+ but not Datamapper\n\nNote: attachmerb_fu requires Merb >= 0.9.3\n\nTo use this:\n\nUnpack into lib/attachmerb_fu\n\nThen add to your config/init.rb:\n\nMerb::BootLoader.after_app_loads do\n  require Merb.root / \'lib/attachmerb_fu/datamapper-bindings\'\nend\n\nor\n\nMerb::BootLoader.after_app_loads do\n   require Merb.root / \'lib/attachmerb_fu/activerecord_bindings\' \nend\n\n\nIn the future, this should be automatically detected.\n\nattachmerb_fu functionality\n===========================\n\nattachmerb_fu facilitates file uploads in Merb.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are three storage options for files uploaded through attachmerb_fu:\n  File system\n  Database file (currently not tested)\n  Amazon S3 (currently not tested)\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml and the Database file storage requires an extra table.\n\n\nattachmerb_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the \'meta\') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # path to store the uploaded files.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 backend.  \n                      # Setting this sets the :storage to :file_system.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, and :s3.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => \'application/pdf\'\n    has_attachment :content_type => [\'application/pdf\', \'application/msword\', \'text/plain\']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => [\'application/pdf\', :image], :resize_to => \'x50\'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\'\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\', \n                   :content_type => :image, :resize_to => [50,50]\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\',\n                   :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :s3\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachmerb_fu migrations\n========================\n\nFields for attachmerb_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the \'type\' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model \'Avatar\' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => \'320x200>\',\n                            #                  :thumbnails => { :small => \'10x10>\',\n                            #                                   :thumb => \'100x100>\' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> \'small\'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachmerb_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachmerb_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachmerb_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include \':multipart => true\' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => "create" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system and s3 storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachmerb_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachmerb_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file \'/path/to/readme.txt\', :type => \'plain/text\', :disposition => \'inline\'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = \'Attachment was successfully created.\'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n'
ec2 extension for firefox b'This is a Mozilla Firefox extension for interacting with Amazon EC2. The source code\nalso functions as an example of how to use the Amazon EC2 Query API from\nJavaScript.\n\nUsage:\n\nThe extension can be installed by opening the .xpi file contained in the archive that includes\nthis README file. Alternatively, the latest version of the .xpi file is hosted in Amazon\nS3 at the following URL:\n\n  http://s3.amazonaws.com/ec2-downloads/ec2ui.xpi\n\nIf you visit the link above using Mozilla Firefox you will be prompted regarding the\ninstallation of the extension.\n\nPrerequisites:\n\nThis extension requires Mozilla Firefox version 1.5.0 or later.\n\nSource Code:\n\nThe .xpi file is really just a renamed ZIP archive. Your garden variety ZIP utilities can be \nused to unzip it. Within this archive you will find a file named ec2ui.jar. This is also just\na renamed JAR archive so you can explore it in the same way. This JAR file contains the bulk\nof the interesting source code. Highlights include:\n\n  content/ec2ui/client.js\n    This file contains the logic to construct and sign requests to Amazon EC2.\n\n  content/ec2ui/controller.js\n    This file wraps client.js and includes logic to unpack Amazon EC2 responses.\n'
A quick & dirty git-powered Sinatra wiki b'= git-wiki -- because who needs cool names when you use git?\n\n== Requirements\n\nrubygems\nsinatra\ngrit\nredcloth\nrubypants\nultraviolet (uv) - a pain to install - required installing Onigurama ala\n                   http://snippets.aktagon.com/snippets/61\n\n'
An awesome replacement for acts_as_nested_set and better_nested_set. b'# Awesome Nested Set\n\n[![Build Status](https://travis-ci.org/collectiveidea/awesome_nested_set.png?branch=master)](https://travis-ci.org/collectiveidea/awesome_nested_set) [![Code Climate](https://codeclimate.com/github/collectiveidea/awesome_nested_set.png)](https://codeclimate.com/github/collectiveidea/awesome_nested_set) [![Dependency Status](https://gemnasium.com/collectiveidea/awesome_nested_set.svg)](https://gemnasium.com/collectiveidea/awesome_nested_set)\n\n\nAwesome Nested Set is an implementation of the nested set pattern for ActiveRecord models.\nIt is a replacement for acts_as_nested_set and BetterNestedSet, but more awesome.\n\nVersion 3 supports Rails 4. Version 2 supports Rails 3. Gem versions prior to 2.0 support Rails 2.\n\n## What makes this so awesome?\n\nThis is a new implementation of nested set based off of BetterNestedSet that fixes some bugs, removes tons of duplication, adds a few useful methods, and adds STI support.\n\n\n## Installation\n\nAdd to your Gemfile:\n\n```ruby\ngem \'awesome_nested_set\'\n```\n\n## Usage\n\nTo make use of `awesome_nested_set` your model needs to have 3 fields:\n`lft`, `rgt`, and `parent_id`. The names of these fields are configurable.\nYou can also have optional fields: `depth` and `children_count`. These fields are configurable.\n\n```ruby\nclass CreateCategories < ActiveRecord::Migration\n  def self.up\n    create_table :categories do |t|\n      t.string :name\n      t.integer :parent_id, :null => true, :index => true\n      t.integer :lft, :null => false, :index => true\n      t.integer :rgt, :null => false, :index => true\n\n      # optional fields\n      t.integer :depth, :null => false, :default => 0\n      t.integer :children_count, :null => false, :default => 0\n    end\n  end\n\n  def self.down\n    drop_table :categories\n  end\nend\n```\n\nEnable the nested set functionality by declaring `acts_as_nested_set` on your model\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\nend\n```\n\nRun `rake rdoc` to generate the API docs and see [CollectiveIdea::Acts::NestedSet](lib/awesome_nested_set/awesome_nested_set.rb) for more information.\n\n## Options\n\nYou can pass various options to `acts_as_nested_set` macro. Configuration options are:\n\n* `parent_column`: specifies the column name to use for keeping the position integer (default: parent_id)\n* `left_column`: column name for left boundary data (default: lft)\n* `right_column`: column name for right boundary data (default: rgt)\n* `depth_column`: column name for the depth data default (default: depth)\n* `scope`: restricts what is to be considered a list. Given a symbol, it\'ll attach \xe2\x80\x9c_id\xe2\x80\x9d (if it hasn\'t been already) and use that as the foreign key restriction. You can also pass an array to scope by multiple attributes. Example: `acts_as_nested_set :scope => [:notable_id, :notable_type]`\n* `dependent`: behavior for cascading destroy. If set to :destroy, all the child objects are destroyed alongside this object by calling their destroy method. If set to :delete_all (default), all the child objects are deleted without calling their destroy method. If set to :nullify, all child objects will become orphaned and become roots themselves.\n* `counter_cache`: adds a counter cache for the number of children. defaults to false. Example: `acts_as_nested_set :counter_cache => :children_count`\n* `order_column`: on which column to do sorting, by default it is the left_column_name. Example: `acts_as_nested_set :order_column => :position`\n\nSee [CollectiveIdea::Acts::NestedSet::Model::ClassMethods](/lib/awesome_nested_set/model.rb#L26) for a list of class methods and [CollectiveIdea::Acts::NestedSet::Model](lib/awesome_nested_set/model.rb#L13) for a list of instance methods added to acts_as_nested_set models\n\n## Indexes\n\nIt is highly recommended that you add an index to the `rgt` column on your models. Every insertion requires finding the next `rgt` value to use and this can be slow for large tables without an index. It is probably best to index the other fields as well (`parent_id`, `lft`, `depth`).\n\n## Callbacks\n\nThere are three callbacks called when moving a node:\n`before_move`, `after_move` and `around_move`.\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\n\n  after_move :rebuild_slug\n  around_move :da_fancy_things_around\n\n  private\n\n  def rebuild_slug\n    # do whatever\n  end\n\n  def da_fancy_things_around\n    # do something...\n    yield # actually moves\n    # do something else...\n  end\nend\n```\n\nBeside this there are also hooks to act on the newly added or removed children.\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set  :before_add     => :do_before_add_stuff,\n                      :after_add      => :do_after_add_stuff,\n                      :before_remove  => :do_before_remove_stuff,\n                      :after_remove   => :do_after_remove_stuff\n\n  private\n\n  def do_before_add_stuff(child_node)\n    # do whatever with the child\n  end\n\n  def do_after_add_stuff(child_node)\n    # do whatever with the child\n  end\n\n  def do_before_remove_stuff(child_node)\n    # do whatever with the child\n  end\n\n  def do_after_remove_stuff(child_node)\n    # do whatever with the child\n  end\nend\n```\n\n## Protecting attributes from mass assignment\n\nIt\'s generally best to "whitelist" the attributes that can be used in mass assignment:\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\n  attr_accessible :name, :parent_id\nend\n```\n\nIf for some reason that is not possible, you will probably want to protect the `lft` and `rgt` attributes:\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\n  attr_protected :lft, :rgt\nend\n```\n\n\n## Add to your existing project\n\nTo make use of `awesome_nested_set`, your model needs to have 3 fields:\n`lft`, `rgt`, and `parent_id`. The names of these fields are configurable.\nYou can also have optional fields, `depth` and `children_count`.\n\nCreate a migration to add fields:\n\n```ruby\nclass AddNestedToCategories < ActiveRecord::Migration\n\n  def self.up\n    add_column :categories, :parent_id, :integer # Comment this line if your project already has this column\n    # Category.where(parent_id: 0).update_all(parent_id: nil) # Uncomment this line if your project already has :parent_id\n    add_column :categories, :lft,       :integer\n    add_column :categories, :rgt,       :integer\n\n    # optional fields\n    add_column :categories, :depth,          :integer\n    add_column :categories, :children_count, :integer\n\n    # This is necessary to update :lft and :rgt columns\n    Category.rebuild!\n  end\n\n  def self.down\n    remove_column :categories, :parent_id\n    remove_column :categories, :lft\n    remove_column :categories, :rgt\n\n    # optional fields\n    remove_column :categories, :depth\n    remove_column :categories, :children_count\n  end\n\nend\n```\n\nEnable the nested set functionality by declaring `acts_as_nested_set` on your model\n\n```ruby\nclass Category < ActiveRecord::Base\n  acts_as_nested_set\nend\n```\n\nYour project is now ready to run with the `awesome_nested_set` gem!\n\n\n## Conversion from other trees\n\nComing from acts_as_tree or another system where you only have a parent_id? No problem. Simply add the lft & rgt fields as above, and then run:\n\n```ruby\nCategory.rebuild!\n```\n\nYour tree will be converted to a valid nested set. Awesome!\n\n## View Helper\n\nThe view helper is called #nested_set_options.\n\nExample usage:\n\n```erb\n<%= f.select :parent_id, nested_set_options(Category, @category) {|i| "#{\'-\' * i.level} #{i.name}" } %>\n\n<%= select_tag \'parent_id\', options_for_select(nested_set_options(Category) {|i| "#{\'-\' * i.level} #{i.name}" } ) %>\n```\n\nSee [CollectiveIdea::Acts::NestedSet::Helper](lib/awesome_nested_set/helper.rb) for more information about the helpers.\n\n## References\n\nYou can learn more about nested sets at: http://threebit.net/tutorials/nestedset/tutorial1.html\n\n## How to contribute\n\nPlease see the [\'Contributing\' document](CONTRIBUTING.md).\n\nCopyright \xc2\xa9 2008 - 2014 Collective Idea, released under the MIT license\n'
A Rails plugin that lets you embed actions in your views (with caching and response_to support) b'The "embedded actions" plugin \n=============================\n\nBASIC USAGE\n  Just like the traditional render :partial, embedded actions allow you to\n  refactor your views and extract presentation logic and templates into separate\n  files.\n\n  Unlike partials, embedded actions also let you define business logic to be\n  performed before the partial is included. That logic is encapsulated in the\n  already well understood metaphor of an action inside a controller.\n\n  So a simple call like\n\n  <%= embed_action :controller => "songs", :action => "top10" %>\n\n  lets you include an html fragment containing the top 10 songs into any of your\n  pages, regardless of which controller, action or view wants to do the including.\n\nCACHING\n  Embedded actions can provide caching of their results (allowing for different \n  parameters) just like page caching, but at the level of html fragments. \n  So your dynamic pages can still be rendered dynamically, but some of the embedded\n  actions can be cached (and expired) independently.\n\n  Just declare an action as \'cacheable\' in a way similar to page caching, \n  by invoking "caches_embedded" with the name of the action to cache.\n\n  class TestController < ApplicationController\n    caches_embedded :user_list\n\n    def user_list\n      ...\n    end\n  end\n\n  Cached fragments can be invalidated with calls to expires_embedded, but you must\n  remember to use the same set of parameters used to embed the cached action in\n  the first place.\n\n  Additionally, the underlying fragment caching mechanism can be passed \n  an options hash in the following manner:\n\n    caches_embedded :user_list, :ttl => 60.minutes\n\n  And you can specify additional arguments to be used when generating the cache name.\n  Which is better explained with an example:\n  \n    caches_embedded :user_list, :options_for_name => Proc.new do |controller| \n      {:is_admin => controller.current_user.is_admin?}\n    end\n\n  this way, there will be two separate cached versions, one for admin users and one \n  for regular users. The hash returned is merged with the actual hash passed on\n  the embed_action call, and is used to create an "url-like" name for the cached\n  fragment. So in this case, a call like <%= embed_action :action => "test" %> will\n  produce two different fragments: "/mycontroller/test?is_admin=false" and "...?is_admin=true"\n  depending on the result of controller.current_user.is_admin? when embed_action \n  is called.\n  \n  Finally, cached fragments can be compressed before being stored:\n  \n    caches_embedded :user_list, :compress => true\n    \n  \nRESPONDS_TO\n  Actions can use Rails\' responds_to to provide different behaviours when invoked \n  normally or embedded in another view.\n  \n  class TestController < ApplicationController\n    def user_list\n      responds_to do |format|\n        format.html     {render :layout => :application}\n        format.embedded {render :layout => false}\n      end\n    end\n  end\n\nSOURCE CODE\n  The official repository for embedded_actions is in GitHub:\n  \n  http://github.com/sd/embedded-actions/tree/master\n\n\n\n-------------------------------------------------------------------------------\nCopyright (c) 2007, 2008 Sebastian Delmont <sd@notso.net> \nCopyright (c) 2007, 2008 StreetEasy / NMD Interactive <http://www.streeteasy.com/> \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n* Neither the name of Sebastian Delmont, nor StreetEasy nor NMD Interactive \nnor the names of their contributors may be used to endorse or promote products \nderived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-------------------------------------------------------------------------------\n\nCONTRIBUTORS\n- Sebastian Delmont <sd@notso.net>\n- Jerret Taylor <jerrett@gmail.com>\n- Ryan Barber <rfb@skyscraper.nu>\n- Andreas Simon <asimon@med4you.de>\n- Jonathan Boler <galatians@gmail.com>\n- Roman Gonzalez <romanandreg@gmail.com>\n\nRELEASE HISTORY\n  1.2 - Apr 28 2011\n    Compression support\n  \n  1.1.3 - Mar 24 2009\n    Fixed issues with content-type leakage\n    Rails 2.3 compatibility\n  \n  1.1.2 - Dec 5 2008\n    Simplified responds_to behaviour\n    Rails 2.2 compatibility (Jonathan)\n  \n  1.1.1 - Feb 20 2008\n    Allow symbol names for controllers and actions (Andreas)\n    Fixed deprecated \'require_gem\' in test environment (Andreas)\n  \n  1.1 - Dec 4 2007\n    Passthrough options for fragment caching (Ryan).\n    Support for namespaced controllers in caching (Jerret). \n    Minor bug fixes.\n  \n  1.0.2 - Nov 29 2007\n    Fixed bug (thanks Jerret) that caused caching settings to leak \n    to actions with the same name in other controllers.\n    \n  1.0.1 - Oct 30 2007 \n    Fixed bug that was causing a "Content-encoding: identity" to leak \n    to all requests.\n    \n  1.0 - Oct 23 2007\n    First widespread release.\n\n'
Set of convenience libraries for use in various applications from cryptography to configuration b'Metafusion\n==========\n\nSet of Ruby libraries that provide convenience for application developers from cryptography to configuration that utilize metadata in some form.\n\nDevelopers\n==========\n* Susan Potter <me at susanpotter dot net>\n'
Viper - Community module b'Required Gems:\r\n\r\n\t- ar_mailer (requires: hoe, rubyforge)\r\n\t- redcloth\r\n\t- ferret\r\n\t- rmagick\r\n\t- linguistics\r\n\t- markaby (requires: builder)'
A Rubycocoa GUI for tailing Ruby on Rails log files b'Logeye - A Rubycocoa GUI for tailing Ruby on Rails log files\n\nReleases http://code.google.com/p/logeye\nCode at http://github.com/lachie/logeye\nClone from git://github.com/lachie/logeye.git\n\n\nStatus: buggy as\n\n\nNote:\nFor development, Xcode and the Ringbarker gem are required\n\n$ sudo gem install ringbarker\n\nRingbarker only handles Rails 1.2.x log files at the moment.\n\n\n\nLachie Cox\nhttp://smartbomb.com.au\n\nYours under the MIT License (see LICENSE)'
Plugins for text-link-ads in mephisto blogging engine b"MephistoTextlinkads\n===================\n\nSimple support for textlinkads. \n\nExample usage:\n\n\n   <ul>\n   {{ 'GC014CRPERVL1BFLJFJG' | textlinkads }}\n   </ul>"
Yeti eats teh images b'# Overview\n\nYeti is a photo album management and publishing software package.\n\nYou can follow the development at its [Trello][1] board.\n\n# Thanks\n\n* Rui Carmo, for [Yaki][0], which inspired some of the early design decisions.\n\n* Every CPAN author whose work I\'m using to build Yeti.\n\n[0]: http://the.taoofmac.com/space/projects/Yaki "Yaki Homepage"\n[1]: https://trello.com/board/yeti/4f072bfb3aae7a580707107e "Yeti\'s Trello board"\n'
This is not needed anymore 
A 'planet' like feed aggregator using feedparser and erubis 
Webby blogging "engine" 
Ruby wrapper for Yahoo!'s FireEagle b'FireEagle[http://fireeagle.yahoo.net] (FE) is a system providing centralized\nmanagement of user location information. FE allows 3rd party developers to\npdate and/or access user\'s location data.\n\nhttp://fireeagle.yahoo.net/developer/documentation\n\n== Installation\n\n gem install fireeagle\n \n== Usage\n\n  >> require \'fireeagle\'\n  >> client = FireEagle::Client.new(\n    :consumer_key        => "<consumer key>",\n    :consumer_secret     => "<consumer secret>",\n    :access_token        => "[access token]",\n    :access_token_secret => "[access token secret]")\n\n==== With a User-specific OAuth Access Token\n\n  # update your location\n  >> client.update(:q => "punta del diablo, uruguay") # I wish\n  # query your location\n  >> user = client.user\n  => #<FireEagle::User:0x1ca5e08 ... >\n  >> user.locations\n  => [#<FireEagle::Location:0x1cdd9e8 ...>, #<FireEagle::Location:0x1cc8ffc ...>, ... ]\n  >> user.best_guess\n  => #<FireEagle::Location:0x1cdd9e8 ...>\n  >> user.best_guess.name\n  => "Punta del Diablo, Uruguay"\n  # lookup a location\n  >> locations = client.lookup(:q => "30022")\n  => [#<FireEagle::Location:0x1cdd9e8 ...>, #<FireEagle::Location:0x1cc8ffc ...>, ...]\n  >> locations.first.name => "Alpharetta, GA 30022"\n  >> locations.first.place_id => "IrhZMHuYA5s1fFi4Qw"\n\n== Authorization\n\nAuthorization is handled by OAuth. For more details about the OAuth\nauthorization flow and how it differs based on your application type, please\nsee http://fireeagle.yahoo.net/developer/documentation/authorizing\n\n== Contributing\n\nhttp://github.com/jnewland/fireeagle/tree/master. You know what to do.\n\nRubyforge Project Page:: http://rubyforge.org/projects/fireeagle\nAuthor::    Jesse Newland (http://soylentfoo.jnewland.com) (jnewland@gmail.com[mailto:jnewland@gmail.com])\nCopyright:: Copyright (c) 2008 Jesse Newland. Portions[http://pastie.caboo.se/private/oevvkdzl0zrdkf8s7hetg] Copyright (c) 2008 Yahoo!\nLicense::   Distributed under the same terms as Ruby\n'
Support for multiple SMTP servers in ActionMailer b'ManyMailers\n===========\n\nMultiple SMTP servers for ActionMailer.\n\nExample\n=======\n\n  ProjectMailer.with_settings(:internal) do |mailer|\n    mailer.deliver_notification(blah)\n  end\n\nYou can also specify servers to use in the event that the initially specified\nserver fails:\n\n  ProjectMailer.with_settings(:internal, :retry => [:backup, :default]) do |mailer|\n    mailer.deliver_notification(blah)\n  end\n\nUSE\n===\n\nCreate a YAML file in your config directory named "mail_servers.yml" Put\nyour mail settings in there like so (see mail_servers.yaml in this plugin\'s \ntest directory for a better example):\n\n  |default:\n  |  address: mail.example.com\n  |  port: 25\n  |  domain: example.com\n  |  user_name: test_user\n  |  password: test_password\n  |\n  |internal:\n  |  address: internal.example.com\n  |  port: 25\n  |  domain: example.com\n  |  user_name: test_user\n  |  password: test_password\n    \nThe plugin will look for a server named "default" to use by default. Make sure\nit exists.\n\nActionMailer::Base (and all of its subclasses, ie, your mailers) will use this\nserver by default.\n\nTODO\n====\n\n* Per-mailer settings (non-global)\n* ActionMailer::Base#with_settings shouldn\'t modify SMTP settings for other\n  mailers besides the one that called it.\n  \n\nCopyright (c) 2008 Animoto Productions, released under the MIT license\n'
general examples / poc code i have created or ran across 
Io programming language b'\nABOUT\n=====\n\nIo is a dynamic prototype-based programming language. \nThe programming guide and reference manual can be found in the docs folder.\n\nREQUIREMENTS\n============\n\n * [yajl](https://github.com/lloyd/yajl)\n * [libevent](http://libevent.org/)\n * [pcre](http://www.pcre.org/)\n\nINSTALLING\n==========\n\nIo is two parts - the vm and the `addons/packages`. Don\'t worry if all the addons don\'t compile for you - some are platform specific or not well supported.\n\nThere are a couple ways you can go about building Io, I will give the recommended way, and a note about how to do it alternatively.\n\nNOTE: If you are installing in a production environment, use `cmake -DCMAKE_BUILD_TYPE=release ..` in all the `cmake ..` lines below. This tells CMake to compile with standard optimizations. Without the `-DCMAKE_BUILD_TYPE=release` addition the resulting binaries will have been compiled in debug mode with no standard C optimizations applied.\n\nOSX\n---\n\nIf you are using the homebrew package manager you can install Io (though it may not be the latest version) with:\n\n\tbrew install io\n\nNote: Assuming you wish to install to an alternate location, ensure you supply as an argument to the following command, a `-DCMAKE_INSTALL_PREFIX=/path` where `/path` is where you wish to install Io to. This is akin to setting `INSTALL_PREFIX` with the old build system if you are familiar with it, or `--prefix` with GNU autotools if you are familiar with that suite.\n\nEnsure you are at the top level of the source tree, that is where this file lives. From here, you are in the right spot to enter these commands:\n\n\tmkdir build\n\tcd build\n\tcmake ..\n\tmake install\n\nIf you do not wish to install, just run `make` instead of `make install`. Currently there is no analogue to the old `make linkInstall`. However, if you have used `linkInstall` in previous versions of Io, you should never have to run `linkInstall` again, since it created symbolic links to where your Io source was at that time. The only time you would have to do this again, is if you moved the Io source from one dir to another. Most people don\'t.\n\nAny Linux Distribution\n----------------------\n\nAny Linux distribution will require one additional step be taken. This is because GNU ld is what\'s technically known as a "dumb" linker -- it has to be told to regenerate its hash of libraries if something changes, other platforms do not have this problem. To complete this step, run the following command:\n\n\tldconfig\n\nIf you are still getting an error when loading the `io` binary about not being able to find some shared library, then ensure you have the following path, in your `/etc/ld.so.conf` (or equivalent):\n\n\t/usr/local/lib\n\nThe above path will change depending on what you set your `CMAKE_INSTALL_PREFIX` to, it will be whatever that is with `/lib` appended. The default is `/usr/local` so the above will work for the common case.\n\nDebian or Ubuntu\n----------------\n\nSee [OSX instructions](#OSX).\n\nGentoo\n------\n\nSee [OSX instructions](#OSX).\n\nMS WINDOWS\n----------\n\nFor all the different methods explained here, some of the addons won\'t compile as they depend on libraries not provided by Io.\n\nFor methods A and B you must download and install CMake (at least v2.8) from here: <http://www.cmake.org/cmake/resources/software.html>\n\nFor method C you must install the CMake Cygwin package (at least v2.8) using the Cygwin package installer.\n\nFor the `make install` command, if you are on Windows 7/Vista you will need to run your command prompts as Administrator: right-click on the command prompt launcher->"Run as administrator" or something similar)\n\nYou will also need to add `<install_drive>:\\<install_directory>\\bin` and `<install_drive>:\\<install_directory>\\lib` to your `PATH` environment variable.\n\n### A) Building with MSVC\n\n1. Install Microsoft Visual C++ 2008 Express (should work with other versions).\n2. Install Microsoft Windows SDK 7.0 (or newer).\n3. Install CMake (v2.8 at least)\n4. Run "Vistual Studio 2008 Command Prompt" from the "Microsoft Visual Studio 2008" start menu.\n5. `cd` to `<install_drive>:\\Microsoft SDKs\\Windows\\v7.0\\Setup` then run: `WindowsSdkVer.exe -version:v7.0`\n6. Close the command prompt window and run step 4 again\n7. Ensure CMake bin path is in the `PATH` environment variable (eg: `echo %PATH%` and see that the folder is there) if not you will have to add it to your `PATH`.\n8. `cd` to your Io root folder\n9. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n10. a) `cmake ..`\n\t\n\tor\n\t\n\tb) `cmake -DCMAKE_INSTALL_PREFIX=<install_drive>:\\<install_directory> ..` (eg: `cmake -DCMAKE_INSTALL_PREFIX=C:\\Io ..`)\n11. `nmake`\n12. `nmake install`\n\n\n### B) Building with MinGW\n\nFor automatic MinGW install: <http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer>\n\nFor non-automatic MinGW install and detailed instructions refer to: <http://www.mingw.org/wiki/InstallationHOWTOforMinGW>\n\n1. `cd` to your Io root folder\n2. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n3. a) `cmake -G"MSYS Makefiles" ..`\n\t\n\tor\n\t\n\tb) `cmake -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=<install_drive>:/<install_directory> ..` (eg: `cmake -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=C:/Io ..`)\n4. `make`\n5. `make install`\n\n\n### C) Building with Cygwin\n\nInstall Cygwin from: <http://www.cygwin.com/>\n\n1. `cd` to your Io root folder\n2. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n3. a) `cmake ..`\n\t\n\tor\n\t\n\tb) `cmake -DCMAKE_INSTALL_PREFIX=<install_drive>:/<install_directory> ..` (eg: `cmake -DCMAKE_INSTALL_PREFIX=C:/Io ..`)\n4. `make`\n5. `make install`\n\nNote: If you also have CMake 2.8 for Windows installed (apart from CMake for Cygwin) check your `PATH` environment variable so you won\'t be running CMake for Windows instead of Cygwin version.\n\n\nRUNNING TESTS\n-------------\n\nYou should be inside your out-of-source build dir. The vm tests can be run with the command:\n\n\tio ../libs/iovm/tests/correctness/run.io\n'
rvideo - jaikoo edition with extra wizzy bits such as transcode progress b'RVideo\n\nRVideo allows you to inspect and process video files.\n\n\nInstallation is a little involved. First, install the gem:\n\n  sudo gem install rvideo\n  \nNext, install ffmpeg and (possibly) other related libraries. This is\ndocumented elsewhere on the web, and can be a headache. If you are on OS X,\nthe Darwinports build is reasonably good (though not perfect). Install with:\n\n  sudo port install ffmpeg\n\nOr, for a better build (recommended), add additional video- and audio-related\nlibraries, like this:\n\n  sudo port install ffmpeg +lame +libogg +vorbis +faac +faad +xvid +x264 +a52\n  \nMost package management systems include a build of ffmpeg, but many include a\npoor build. So you may need to compile from scratch.\n\nIf you want to create Flash Video files, also install flvtool2:\n\n  sudo gem install flvtool2\n\nOnce ffmpeg and RVideo are installed, you\'re set. \n\nTo inspect a file, initialize an RVideo file inspector object. See the \ndocumentation for details.\n\nA few examples:\n\n  file = RVideo::Inspector.new(:file => "#{APP_ROOT}/files/input.mp4")\n  \n  file = RVideo::Inspector.new(:raw_response => @existing_response)\n  \n  file = RVideo::Inspector.new(:file => "#{APP_ROOT}/files/input.mp4",\n                                :ffmpeg_binary => "#{APP_ROOT}/bin/ffmpeg")\n\n  file.fps        # "29.97"\n  file.duration   # "00:05:23.4"\n\nTo transcode a video, initialize a Transcoder object.\n\n  transcoder = RVideo::Transcoder.new\n\nThen pass a command and valid options to the execute method\n\n  recipe = "ffmpeg -i $input_file$ -ar 22050 -ab 64 -f flv -r 29.97 -s"\n  recipe += " $resolution$ -y $output_file$"\n  recipe += "\\nflvtool2 -U $output_file$"\n  begin\n    transcoder.execute(recipe, {:input_file => "/path/to/input.mp4",\n      :output_file => "/path/to/output.flv", :resolution => "640x360"})\n  rescue TranscoderError => e\n    puts "Unable to transcode file: #{e.class} - #{e.message}"\n  end\n\nIf the job succeeds, you can access the metadata of the input and output\nfiles with:\n\n  transcoder.original     # RVideo::Inspector object\n  transcoder.processed    # RVideo::Inspector object\n\nIf the transcoding succeeds, the file may still have problems. RVideo\nwill populate an errors array if the duration of the processed video\ndiffers from the duration of the original video, or if the processed\nfile is unreadable.\n\nThanks to Peter Boling for early work on RVideo.\n\nContribute to RVideo! If you want to help out, there are a few things you can \ndo.\n\n- Use, test, and submit bugs/patches\n- We need a RVideo::Tools::Mencoder class to add mencoder support.\n- Other tool classes would be great - On2, mp4box, Quicktime (?), etc.\n- Submit other fixes, features, optimizations, and refactorings\n\nIf RVideo is useful to you, you may also be interested in RMovie, another Ruby\nvideo library. See http://rmovie.rubyforge.org/ for more.\n\nFinally, watch for Spinoza, a commercial video transcoder built by Slantwise \nDesign. Spinoza uses RVideo for its video processing, but adds file queuing,  \ndistributed transcoding, a web-based transcoder dashboard, and more. See \nhttp://spinoza.tv or http://slantwisedesign.com for more.\n\nCopyright (c) 2007 Jonathan Dahl and Slantwise Design. Released under the MIT \nlicense.'
Social network to share scanned album arts from CDs they own - views are in Portuguese (Brazil) b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
Ruby on Rails TextMate bundle [master branch is svn trunk; patches to drnicwilliams@gmail.com] b'TextMate bundle for Ruby on Rails development\n\nGET IT NOW: with Rails 2.0 support.\n\nRails 2.0 (copied from CHANGELOG)\n\n* Snippets/Commands for:\n  * Tests\n    * assert_select (ass)\n    * assert_difference/assert_no_difference (asd/asnd)\n    * GET+POST test method stubs (defg+defp)\n  * Controllers\n    * respond_to (rst)\n    * REMOVED: render_component snippets\n    * loggers - pass a block instead of raw string to save time if logging not used (e.g. production) [thx Stephen Touset]\n    * redirect_to for resource paths (rep, repp, renp, renpp)\n    * render :update (ru) [thx Simon Jefford]\n  * Views\n    * form_for (ff)\n    * link_to for resource paths (lip, lipp, linp, linpp)\n    * <% end -%> (end)\n  * Models\n    * has_many :though (hmt)\n    * association snippets give better defaults (e.g. bt + hm)\n    * validates_format_of (vf,vfif) [thx Dean Strelau]\n  * Migrations\n    * Sexy Migrations now available as "t." snippets [thx Lawrence Pit]\n    * Migration classes have own textmate scope\n    * Add/Remove Columns - the \'down\' statements are in reverse order [thx Lawrence Pit, Daniel Kristensen]\n* Language/Syntax\n  * New keywords: rescue_from\n  * Added rb as a valid Rails file type [thx James Deville]\n* Commands\n  * html.erb is the default for new templates (backwards compatibility is being worked on too)\n* Plugins\n  * Footnote\n    * footnote-edge uses .erb for templates [thx Stephen Bannasch]\n\n'
A jQuery port of the humanized dialog display technique. (http://www.humanized.com/weblog/2006/09/11/monolog_boxes_and_transparent_messages/) b'jQuery Humanize Plugin - By Andy Kent\n======================================================\n\nThis plugin is a great way of showing user feedback\nwithout distracting flow. It shows a semi-transparent\noverlay on top of the current page which fades away\nas soon as the user interacts with the browser in\nany way.\n\n\nUsage\n------------------------------------------------------\n\nYou will need to include both the JS and CSS files\nfirst, feel free to customize the CSS as you feel\nfit.\n\nThe first example will search for an element with a\nclass of \'feedback\' and then display it\'s contents\nto the user immediately, it\'s great for showing\nrails flash messages and the like.\n\n$(document).ready(function(){\n\t$.humanize();\n});\n\nThe second example shows the provided message to the\nuser as soon as it is called. This is great for use\nin AJAX callbacks and validation checks.\n\n$.humanize(\'hello this is a message\');\n\n\nOptions\n------------------------------------------------------\n\n$.humanize([msg:String],options:Object);\n\nThe defaults should be fine for most people but the \nplugin does take several options if you want to\ncustomize things. Options can be passed in as the\nlast parameter to $.humanize(); or set globally\nvia $.humanize.defaults\n\nbaseSelector (\'.feedback)\nThe jQuery selector to be used to find and display \nthe message.\n\ncontainer (\'<p class="feedback">&nbsp;</p>\')\nThe html to use so a container can be added if none \nexists.\n\nfadeIn ({easing:\'swing\', duration:1000})\nOptions to be passed to the jQuery animate function\nwhen fading the message in.\n\nfadeOut ({easing:\'swing\', duration:1000})\nOptions to be passed to the jQuery animate function\nwhen fading the message out.\n\nopacity : 0.8\nvalue between 0 and 1 for the final message opacity.\n\n\nCredits\n------------------------------------------------------\n\nCreated by: Andy Kent\nContributors: YOUR NAME HERE ?\n\nI\'d love to hear about any bugs/improvements/patches\nthat you may have and will always credit people where\nappropriate. Thanks.'
This plugin allows you to create 'scenarios' which are collections of fixtures and ruby files that represent a context against which you can run tests. b'Copyright (c) 2007 Tom Preston-Werner\n\n=FixtureScenarios\n\nThis plugin allows you to create "scenarios" which are collections of fixtures\nand ruby files that represent a context against which you can run tests.\n\n==Disclaimer\n\nThis software is in Beta.\nSend feedback to tom at rubyisawesome dot com or find me (mojombo) on irc.freenode.net.\n\n==Installation\n\nFixtureScenarios should work on both 1.1.6 and edge rails.\nCurrently you must install this plugin from the subversion repository\n\n  script/plugin install http://fixture-scenarios.googlecode.com/svn/trunk/fixture_scenarios\n\n==WARNING\n\nBecause this plugin clears out fixture data between your test classes, you may\nsee some of your tests fail after installation. If this occurs, look at your\ntests to see if you didn\'t actually load a required fixture for that test\nclass. If you forgot to add it and your tests passed anyway (because of\nfixture contamination), just add the missing fixture(s) and you\'ll be good\nto go.\n\n==The Basics\n\nTo create a scenario, simply create a subdirectory under test/fixtures in your\nRails app. The name of the subdirectory will be the name of the scenario.\nInside this new directory, you can place fixture files, and/or Ruby files.\n\n  [RAILS_ROOT]\n  +-test/\n    +-fixtures/\n      +-brand_new_user/\n        +-users.yml\n  \n  # in users.yml\n  borges:\n    id: 1\n    name: Jorge Luis Borges\n    active: 1\n\nTo load the scenario for testing, you simply use the +scenario+ method instead\nof the normal +fixtures+ method.\n\n  require File.dirname(__FILE__) + \'/../test_helper\'\n\n  class UserTest < Test::Unit::TestCase\n    scenario :brand_new_user\n\n    def test_should_be_active\n      assert users(:borges).active?\n    end\n  end\n\nAll of the fixtures placed into your scenario directory will be loaded when\nyou invoke the +scenario+ method with your scenario name. In addition, any\nRuby files you place in the scenario directory will be run after the fixtures.\nYou can use a Ruby file to create non-database model instances, set up\nrelationships between fixtures (instead of creating fixtures for the join\ntables), or replace fixtures entirely by creating your database items with\nRuby code.\n\nIn this example, +scenario+ will actually load all fixtures from the fixture\ndirectory *and* your scenario directory. This is useful if you have some\nfixtures (such as lookup data) that you\'d like to have in most of your\nscenarios. To prevent the loading of fixtures in the fixtures root directory,\nuse the <tt>:root</tt> option. This can be very useful if you still have tests\nusing regular fixtures.\n\n  scenario :brand_new_user, :root => false\n  \nIf you\'ve just started FixtureScenarios on an existing project, adding\n:root => false to every scenario call will become tedious, so you can set\nthe option globally in your test_helper.rb (inside the Test::Unit::TestCase\nclass) like so:\n\n  self.scenarios_load_root_fixtures = false\n\nTo keep things DRY in your scenarios, you can extend or layer scenarios on top\nof each other. Following with our example, to create an "experienced user"\nscenario, we could create another subdirectory under the existing\n"brand_new_user" that would contain fixture/Ruby files that add upon the\n"brand new user" scenario.\n\n  [RAILS_ROOT]\n  +-test/\n    +-fixtures/\n      +-brand_new_user/\n        +-users.yml\n        +-experienced_user/\n          +-articles.yml\n\nNow when you load the +experienced_user+ scenario, it will load any\nfixture/Ruby files in "fixtures", then in "brand_new_user", then in\n"experienced_user"! Building off of your existing scenarios keeps data\nredundancy to a minimum, and makes it easy to change data for multiple\nscenarios simultaneously.\n\n==Testing your scenarios\n\nScenarios represent your assumptions about a given context. If these\nassumptions are wrong, your tests will be inaccurate. Your scenarios should be\nunit tested along with the rest of your application. This plugin allows you to\nplace scenario tests in a "scenario" directory under your "test" directory.\n\n  [RAILS_ROOT]\n  +-test/\n    +-scenario/\n      +-brand_new_user_test.rb\n      +-experienced_user_test.rb\n  \nYou can run these tests with rake.\n\n  rake test:scenarios  # run just scenario tests\n  rake                 # run unit, functional, integration, and scenario tests\n\nScenario tests will protect you from accidentally changing your assumptions in\na dangerous or transparent way when modifying existing scenarios.'
All my Rails plugins bundled up. 
Adds a semblance of performance to Ruby's core Date class ... b"Date::Performance\n=================\n\nThis package adds some semblance of performance to Ruby 1.8's core Date class \nusing a combination of different techniques:\n\n1. Implements various core *Date* methods in C. This is nowhere near a\n   complete rewrite of all *Date* features but many of the hot spots have\n   been replaced with machine code.\n \n2. Provide alternate implementations of `strftime` and `strptime` in C.  The stock\n   date formatting and parsing methods are extremely slow compared to their\n   libc counterparts. *Date#sys_strftime* and *Date::sys_strptime* are light\n   facades on top of the system's `strftime(2)` and `strptime(2)`. The system \n   methods run 10x and 50x (yes, _fifty-ecks_) faster than their Ruby based counterparts, \n   respectively.  Unfortunately, `strftime(2)` and `strptime(2)` implementations vary from\n   system to system and have various limitations not found in the core Date\n   implementation so can not safely be used as replacements for the core methods.\n\n3. Memoization. The *Date::Memoize* module can be used to speed certain\n   types of repetitive date processing significantly. This file must be \n   required separately.\n\nSynopsis\n--------\n\nThis package is mostly transparent after an initial require:\n\n    require 'date/performance'\n    Date.new 1912, 6, 23\n    # Wow! That was fast!\n\n*Date::Performance* is not used directly but automatically replaces core *Date*\nmethods when required.\n\nIn addition to the C extension, the *Date::Memoization* module can be used to\nspeed things up even further in some cases by making a trade off between space \nand time:\n\n    require 'date/memoize'\n    Date.new 1912, 6, 23\n    Date.parse '1912-06-23'\n\nRequiring the file automatically replaces *Date::new* / *Date::civil*, *Date::parse*, \nand *Date::jd* methods with memoized versions.\n\nInstallation / Hacking\n----------------------\n\nThis package has been tested on the following platforms:\n\n  * FreeBSD 5.4 (x86) and 6.1 (AMD64)\n  * Linux / Fedora Core 6 (x86)\n  * MacOS X (Intel)\n\nThe easiest way to install the package is to use RubyGems:\n\n    $ gem install date-performance\n\nA git repository is also available:\n\n    $ git clone git://github.com/rtomayko/date-performance.git\n\nBackground\n----------\n\nThe *Date* class is often the cause of poor performance in Ruby programs. A frequent\nsuggestion is to use the *Time* class, which is much faster, but that solution has \ncorrectness problems in a wide range of data typing cases. It is often the case that \nyou want separate *Date*, *Time*, and *DateTime* types.\n\nThere are a couple of reasons why *Date* runs slowly when compared with\n*Time*. The common assumption is that this is mostly due to *Time* being\nwritten in C and *Date* being written in Ruby. While that clearly has an\nimpact, I would argue that the reason *Date* is slow is because it's not\ndesigned to be fast. The code opts for readability over performance in almost\nevery case. _This is a feature_.\n\nHave you read the *date.rb* documentation [1]? The implementation is pretty\nhard core; it can handle a lot of weird cases that *Time* [2] does not and\nwould appear to be a correct implementation of date handling, which has the\nusual side-effect of being slow.\n\nThe *Date* implementation uses a single Astronomical Julian Day (AJD) number\nto represent dates internally. In fact, *Date#initialize* takes a\nsingle `ajd` argument, which means that all date forms that are commonly used \n(UNIX timestamp, Civil, etc.) must be converted to an AJD before we can even\ninstantiate the thing. \n\nThe real performance hit seems to come from the various rational number\noperations performed on the way from a civil, ordinal, and julian date to \nan AJD.\n\nWhen I began writing *Date::Performance*, I was getting pretty big (3x - 4x)\nperformance boosts in many places simply by optimizing the Ruby code a bit.\nThese boosts came at the expense of readability, however, and so the decision\nwas made to go for _maximum unreadability_ and implement the boosts in C.\n\nThere's a nice balance here: the Ruby implementation reads like a spec,\nwhile the C version implements it for quickness.\n\nMemoization\n-----------\n\nIn addition to the C extension, this package includes a separate *Date::Memoize*\nmodule that can further speed up date processing in situations where the range\nof dates being manipulated is fairly dense and the same dates are being\ncreated repeatedly. Working with databases and flat files are two examples\nwhere memoization may help significantly.\n\nThe *Date::Memoize* module replaces various Date constructor methods (`new`,\n`civil`, and `parse`) with memoized[http://en.wikipedia.org/wiki/Memoization] \nversions (see *Date::Memoization* for details). The best way to determine \nwhether memoization is right for you is to add it to your project and see \nwhat happens.\n\nLicense\n-------\n\nMIT. See the COPYING file included in the distribution for more \ninformation.\n\nSee Also\n--------\n\n * [1] Ruby *Date* Implementation Notes and Documentation:\n   http://www.ruby-doc.org/docs/rdoc/1.9/files/_/lib/date_rb.html\n\n * [2] Ruby *Time* documentation \n   http://www.ruby-doc.org/docs/rdoc/1.9/classes/Time.html\n"
A attempt to make SSL client certificate authentication with rails painless b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
private member portal for churches, built with Ruby on Rails b'![screnshots](https://farm8.staticflickr.com/7508/15498980049_3527e0817e_b.jpg)\n\n# OneBody\n\n[![Install on DigitalOcean](https://img.shields.io/badge/install-digital_ocean-479de4.svg)](http://installer.71m.us/install?url=https://github.com/churchio/onebody)\n[![Install on Amazon EC2](https://img.shields.io/badge/install-amazon_ec2-f78527.svg)](https://github.com/churchio/onebody/wiki/Amazon-AMI)\n[![Install on a hypervisor](https://img.shields.io/badge/install-vm-002f6b.svg)](https://github.com/churchio/onebody/wiki/Virtual-Appliance)\n[![Install elsewhere](https://img.shields.io/badge/install-other-999999.svg)](https://github.com/churchio/onebody/wiki/Installation)\n[![Chat with us](https://img.shields.io/badge/chat-slack-e01563.svg)](https://slackin-churchio.herokuapp.com/)\n\nOneBody is open-source, web-based social networking, email list, online directory, and lightweight document management software for churches.\n\nThis software has been in production use at churches for over seven years!\n\nVisit our website at [church.io](http://church.io) or browse through our [screenshots on Flickr](https://www.flickr.com/photos/timothymorgan/sets/72157644451251789) to see more.\n\n## Contributing to the Project\n\n[![Build](http://img.shields.io/travis/churchio/onebody.svg)](https://travis-ci.org/churchio/onebody)\n[![Coverage](https://coveralls.io/repos/churchio/onebody/badge.svg)](https://coveralls.io/r/churchio/onebody)\n[![Code Climate](https://codeclimate.com/github/churchio/onebody/badges/gpa.svg)](https://codeclimate.com/github/churchio/onebody)\n[![Security Status](https://hakiri.io/github/churchio/onebody/master.svg)](https://hakiri.io/github/churchio/onebody/master)\n\n[![Stories Ready](https://badge.waffle.io/churchio/onebody.svg?label=ready&title=stories+ready)](http://waffle.io/churchio/onebody)\n[![Stories in Progress](https://badge.waffle.io/churchio/onebody.svg?label=in+progress&title=stories+in+progress)](http://waffle.io/churchio/onebody)\n\nWe \xe2\x9d\xa4\xef\xb8\x8f contributors! Just check out [all these people](https://github.com/orgs/churchio/people) who have helped make OneBody awesome!\n\nTo help fix a bug, first make sure it has a logged [issue](https://github.com/churchio/onebody/issues) (if not, create one), then:\n\n1. Fork this repo on GitHub and clone your fork to your computer.\n2. Set up the software on your computer by following the directions in the next section.\n3. Fix the bug!\n4. Run the test suite (see the "Tests" section lower in this file) to make sure you didn\'t break something. (This is kind of optional, since Travis CI will run the test suite when you create your Pull Request anyway.)\n4. Submit a Pull Request to get your bug fix merged!\n\nIf you\'d like to add an awesome new feature, please join our [Slack chat](https://slackin-churchio.herokuapp.com/) to talk about what you want to do. We\'d like to give you some guidance on approach, coding style, tests, etc.\n\n[FAQs for Contributors](https://github.com/churchio/onebody/wiki/FAQs-for-Contributors)\n[Code of Conduct](https://github.com/churchio/onebody/blob/master/CONDUCT.md)\n\n### Development Setup Using Vagrant\n\nIf you\'re a developer and want to get everything running locally, this is the easiest way.\n\nOperating System: Windows, Mac, or Linux\n\n1. Install [VirtualBox](https://www.virtualbox.org/wiki/Downloads). It\'s free and it runs on Windows, Mac, and Linux.\n2. Install [Vagrant](http://www.vagrantup.com/downloads) on your host machine.\n3. Install [Git](http://git-scm.com/downloads).\n   * If you\'re on Mac, you can use [GitHub for Mac](https://mac.github.com/).\n   * If you\'re on Windows, you can use [GitHub for Windows](https://windows.github.com/).\n4. Clone the repository to your host machine: `git clone git://github.com/churchio/onebody.git` (If you forked the project, clone from your own fork.)\n5. In your terminal, change to the project directory: `cd onebody`\n6. Run vagrant: `vagrant up`\n\nNow visit the site running in development mode at http://localhost:8080.\n\nYou can use your favorite text editor to make changes inside the `onebody` directory. Changes should show in your browser after refreshing.\n\nCheck out [Using Vagrant](https://github.com/churchio/onebody/wiki/Using-Vagrant) on the wiki for further help and tips.\n\n### Manual Development Setup\n\nOperating System: Mac or Linux (See Vagrant above if you\'re on Windows)\n\n1. Install Ruby 2.2.2 or higher (we recommend you use [rbenv](https://github.com/sstephenson/rbenv) or [RVM](https://rvm.io/)).\n1. Install MySQL.\n1. Install Git.\n1. Install ImageMagick.\n1. Install Node.js.\n1. `git clone git://github.com/churchio/onebody.git && cd onebody`\n1. `mysql -uroot -e "grant all on onebody_dev.* to onebody@localhost identified by \'onebody\';"`\n1. `mysql -uroot -e "grant all on onebody_test.* to onebody@localhost identified by \'onebody\';"`\n1. `cp config/database.yml{.mysql-example,}`\n1. `gem install bundler`\n1. `bundle install` (If you get an error installing eventmachine, you might need to do [this](http://stackoverflow.com/a/31516586/197498))\n1. `cp config/secrets.yml{.example,} && vim config/secrets.yml` and add a random secret token to both the "development" and "test" sections (you can use `rake secret` to generate a new random secret).\n1. `rake db:create db:schema:load db:seed`\n1. `rails server`\n\nNow visit the site running in development mode at http://localhost:3000.\n\n### Tests\n\nTo run tests:\n\n```\nrspec\n```\n\nIf you don\'t have a test database yet, create it like you did the dev database:\n\n```\nRAILS_ENV=test rake db:create db:schema:load\n```\n\n## Get Help\n\n* [Slack Chat](https://slackin-churchio.herokuapp.com/)\n* [Wiki](http://wiki.github.com/churchio/onebody)\n* [Google Group](http://groups.google.com/group/churchio)\n* [Help Guides](http://church.io/onebody/help)\n\n## Copyright\n\nCopyright (c) [Tim Morgan](http://timmorgan.org)\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nThis software is license under the GNU Affero General Public License, version 3. See LICENSE provided with this program for the entire text.\n\n"Church.IO" is a trademark of our federation of developers and cannot be used for promotional purposes without express written permission.\n\n### Design\n\nDesign is a derivative of AdminLTE, copyright (c) almasaeed2010, available [here](https://github.com/almasaeed2010/AdminLTE), licensed under MIT license. See [LICENSE](https://github.com/almasaeed2010/AdminLTE/blob/master/LICENSE).\n'
I am Jacks PHP framework. b"I am Jack's PHP framework.\n\nJack's PHP came out of a project for a client that needs a slightly complex website\nthat required PHP4 to run. Looking for a small framwork that stayed out of the way\nwas fruitless. So Jack's PHP came together over the course of a couple of days. It's\nbeen receiving some care since then.\n\nFeatures:\n* Works on PHP4 (if that really is a feature).\n* Small footprint, under 2K lines of code.\n* Stays out of your way.\n\nSee http://jacks.bashme.org for more information.\n\n===================================================================================\n\nNotes:\n\nThere is a test folder in the root directory of the application. Jack's PHP doesn't\nprovide any testing tools at the moment (probably won't ever). Use something like\nPHPUnit or SimpleTest if you want to attempt unit testing with PHP.\n\n===================================================================================\n\nCredits:\n\nRuss Smith, Stephan Walton\n\nSome code borrowed from the Creovel project (http://www.creovel.org).\n"
An asynchronous XMPP library -- UNMAINTAINED b'Introduction:\n=============\n\nLoudmouth is a lightweight and easy-to-use C library for programming with the\nJabber protocol. It\'s designed to be easy to get started with and yet\nextensible to let you do anything the Jabber protocol allows.\n\nThe goal is to fully support Linux, *BSD, Mac OSX and Windows. It has\ncurrently only been tested on Linux (Red Hat 8.0, Debian Unstable) and FreeBSD\nthat I know of. If someone with access to other machines can provide\nfeedback I would be most grateful.\n\n\nRequirements:\n=============\n\nGlib >= 2.12.4:\nhttp://ftp.gnome.org/pub/GNOME/sources/glib/2.16/\n\ngtk-doc (optional, if you want documentation built):\nftp://ftp.gnome.org/pub/GNOME/sources/gtk-doc/1.0\n\nIf you want our unit tests through the g_test framework:\nGlib >= 2.16.0\n\nIf you want SSL-support you\'ll also need:\nGnuTLS >= 1.2.0 with libtasn support.\n\nBuilding:\n=========\n\n./configure\nmake\nmake install\n\nSSL Support:\n============\nYou can choose between using GnuTLS (recommended) and OpenSSL to enable SSL\nsupport in Loudmouth. You choose which backend to use by passing the\n--with-ssl= flag to configure. GnuTLS is the default and will be used unless\nyou pass the flag, use "openssl" for OpenSSL.\n\nDebugging:\n==========\n\nYou can get debug information printed to STDOUT by using the environment \nvariable LM_DEBUG.\n\nexport LM_DEBUG=<keyword>\n\nWhere keyword is one or more (separated by :) of the following:\n\n* "NET": Shows all the data sent over the network.\n* "PARSER": Shows debug output from the parser.\n* "VERBOSE": Shows various verbose output.\n* "ALL": Enables all output.\n\n\nQuestions, remarks, bug reports:\n================================\n\nBugs can be also reported (to not lose track of them) to github bugtracker:\n<https://github.com/mcabber/loudmouth/issues>\n\n'
Its a web UI for for ruby faker gem b'Get Fake\n=================================\n\nA sinatra app which helps to get Fake data. It uses Ruby Faker gem to generate Fake data.\n\n\nIntroduction\n------------\nCheck it out @ http://getfake.com\n\n\n\nAnil Wadghule | github.com/anildigital | twitter.com/anildigital\n\n'
A jQuery plugin for Morphic programming b'# Effen #\n\n*Effen* is a jQuery plugin that supports Concrete Javascript. Concrete Javascript is a pattern in which the state and behavior of your domain are attached directly to DOM elements. This differs from MVC, where domain behavior is isolated from the view. Concrete Javascript is draws inspiration from Self\'s Morphic UI framework.\n\n## Use ##\n\nTo attach behaviors (methods) to DOM nodes, pass a hash to the `fn` function:\n\n    $(\'div\').fn({\n      method1: function(...) {...},\n      method2: function(...) {...}\n    })\n    \nTo invoke a method, pass a string naming the method and any arguments to the `fn` function:\n\n    $(\'div\').fn(\'method1\', some, arguments, here);\n    \nThat\'s all there is to it. But there are some subtle details to bear in mind:\n\n* While `$(\'div\').fn({...})` will bind the behavior to all divs, calling `$(\'div\').fn(\'foo\')` will only invoke `foo` on the first `div`. This may be changed in future releases.\n\n* Binding is order-dependent. So, for example, to provide specialized behavior:\n\n    $(\'div\').fn({ foo: function() {} });\n    $(\'div.special\').fn({ foo: function() {} });\n    \n The latter takes precedence because it appears last--NOT because the selector is more specific. This may be changed in future releases.\n\n## An in-depth example of Concrete Programming ##\n\nSuppose we have the following HTML code, representing a Script that has many Scenes. A Scene has a Video description and many lines of Dialog.\n\n    <div class="script" url="/scripts/1">\n      <ol class="scenes" url="/scripts/1/scenes">\n        <li class="scene" url="/scripts/1/scenes/1">\n          <textarea name="video">Interior of Pivotal Labs, Day.</textarea>\n          <ol class="dialogs" url="/scripts/1/scenes/1/dialogs">\n            <li class="dialog" url="/scripts/1/scenes/1/dialogs/1">\n              <input type="text" name="character" value="Nick" />\n              <input type="text" name="text" value="I like Concrete Programming" />\n            </li>\n            <li class="dialog" url="/scripts/1/scenes/1/dialogs/2">\n              <input type="text" name="character" value="Nathan" />\n              <input type="text" name="text" value="Me too" />\n            </li>\n          </ol>\n        </li>\n      </ol>\n    </div>\n\n### Let\'s start with some simple CRUD operations. To *create* a scene, we POST to the url: ###\n\n    $(\'.scenes\').fn({\n      create: function() {\n        $.post($(this).attr(\'url\'), ...);\n      }\n    });\n\nWe\'d like to also create a scene any time someone hits &lt;Ctrl+Enter&gt; within the video textarea.\n\n    $(\'.scene textarea.video\').bind(\'keypress[ctrl+enter]\', function() {\n      ...\n    });\n\nIn order to invoke the `create` function on the scene containing the textarea, we\'ll need a reference from the textarea to the scene:\n\n    $(\'.scene\').each(function(i, scene) {\n      $(scene).find(\'*\').fn(\'scene\', $(this));\n    });\n\nNow, binding <Ctrl+Enter> on the textarea to invoke create is as simple as:\n\n    $(\'.scenes textarea.video\').bind(\'keypress[ctrl+enter]\', function() {\n      $(this).fn(\'scenes\').fn(\'create\');\n    });\n\n### Let\'s perform a Delete now ###\n\nWe\'d also like to bind the &lt;Backspace&gt; key from within the Dialog character to delete Dialog elements if both the character and text are blank. In other words:\n  \n    $(\'.dialog input[@name=character]\').bind(\'keypress[backspace]\', function() {\n      $(this).fn(\'dialog\').fn(\'delete\');\n    });\n    \n    $(\'.dialog\').fn({\n      delete: function() {\n        if ($(this).fn(\'isBlank\'))\n          $.delete($(this).attr(\'url\'), $(this).remove);\n      },\n      isBlank: function() {\n        return $(this).find(\'input[@name=character]\').val() == "" &&\n               $(this).find(\'input[@name=text]\').val() == "";\n      },\n    });\n    \nUsing the technique shown in the previous section, the character input is given a reference to the dialog (omitted here).\n\n### Polymorphism in Concrete Javascript ###\n\nWe\'d like to add a similar delete feature to Scenes. When the user hits &lt;Backspace&gt; while in the Video textarea it should delete the Scene--but only if the Video is blank and so are *each* of the Dialog elements within the Scene.\n\nFirst, let\'s define `isBlank` on Scene:\n\n    $(\'.scene\').fn({\n      isBlank: function() {\n        return $(this).fn(\'video\').fn(\'isBlank\') &&\n               $.all($(this).find(\'.dialog\'), function(dialog) {\n                 return $(dialog).fn(\'isBlank\')\n               })\n      }\n    });\n    \nAt this point, we may notice that the definition of delete is the same for Scene as for Dialog. Thus,\n\n    $(\'.scene, .dialog\').fn({\n      delete: function() {\n        if ($(this).fn(\'isBlank\'))\n          $.delete($(this).attr(\'url\'), $(this).remove);\n      }\n    });\n\nSo now we have achieved a kind of polymorphism: Both Scenes and Dialogs respond to `isBlank`, though each have differing implementations. Each has a different `url` attribute and each (given that they are DOM objects) can be `removed`. Given that they conform to the same interface, we can implement a generic `delete` method for both of them.'
Rails project template b'== Welcome to Rails\n\nRails is a web-application framework that includes everything needed to create \ndatabase-backed web applications according to the Model-View-Control pattern. \n\nThis pattern splits the view (also called the presentation) into "dumb" templates\nthat are primarily responsible for inserting pre-built data in between HTML tags.\nThe model contains the "smart" domain objects (such as Account, Product, Person,\nPost) that holds all the business logic and knows how to persist themselves to\na database. The controller handles the incoming requests (such as Save New Account,\nUpdate Product, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\'re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Apache .htaccess example\n\n# General Apache options\nAddHandler fastcgi-script .fcgi\nAddHandler cgi-script .cgi\nOptions +FollowSymLinks +ExecCGI\n\n# If you don\'t want Rails to look in certain directories,\n# use the following rewrite rules so that Apache won\'t rewrite certain requests\n# \n# Example:\n#   RewriteCond %{REQUEST_URI} ^/notrails.*\n#   RewriteRule .* - [L]\n\n# Redirect all requests not available on the filesystem to Rails\n# By default the cgi dispatcher is used which is very slow\n# \n# For better performance replace the dispatcher with the fastcgi one\n#\n# Example:\n#   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]\nRewriteEngine On\n\n# If your Rails application is accessed via an Alias directive,\n# then you MUST also set the RewriteBase in this htaccess file.\n#\n# Example:\n#   Alias /myrailsapp /path/to/myrailsapp/public\n#   RewriteBase /myrailsapp\n\nRewriteRule ^$ index.html [QSA]\nRewriteRule ^([^.]+)$ $1.html [QSA]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ dispatch.cgi [QSA,L]\n\n# In case Rails experiences terminal errors\n# Instead of displaying this message you can supply a file here which will be rendered instead\n# \n# Example:\n#   ErrorDocument 500 /500.html\n\nErrorDocument 500 "<h2>Application error</h2>Rails application failed to start properly"\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! \nYou need to install ruby-debug to run the server in debugging mode. With gems, use \'gem install ruby-debug\'\nExample:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n== dbconsole\n\nYou can go to the command line of your database directly through <tt>script/dbconsole</tt>.\nYou would be connected to the database with the credentials defined in database.yml.\nStarting the script without arguments will connect you to the development database. Passing an\nargument will connect you to a different database, like <tt>script/dbconsole production</tt>.\nCurrently works for mysql, postgresql and sqlite.\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  If the app has frozen rails, those gems also go here, under vendor/rails/.\n  This directory is in the load path.\n'
WoW Addon - Powerleveling guide framework b'TourGuide is an interactive leveling guide addon.\nIt is designed to provide the user with a streamlined order of quest completion with smart detection.\nIt is also designed for easy creation of "guides" for users with little-to-no programming knowledge.\n\nh2. Features\n\n* Automatic detection of objective completion\n** Detect quest accept, completion and turnin\n** Detect travel (by foot, flight, boat and stone)\n** Detection of flight point discovery\n** Detection of Hearth point change\n** Conditionals based on player\'s class and item possession (only tell the player to accept the quest if they have the item that starts the quest)\n* Small "lego block" style frame shows current objective, detailed tooltips on hover\n* "Use item" frame, for those annoying quests where you have to use an item on a mob before you kill it, or you have to equip something, or you have to use an item to start a quest\n* Pop out frame for detailed view of quest sequence\n* Automatic mapping of coordinates with "TomTom":http://www.wowinterface.com/downloads/info7032-TomTom.html and questgiver locations from "LightHeaded":http://www.wowinterface.com/downloads/info7017-LightHeaded.html if installed\n* "LDB":http://github.com/tekkub/libdatabroker-1-1/wikis data feed, for those that would rather use a LDB display than the built in "lego"\n\nh2. Notes\n\nLevel ranges on the guides are general guidelines only, mainly designed to help you find what guide you should start with for your current level.\n\nTourGuide will use the built-in quest objective map coordinates in most cases.  If you find this is not adequate and you are lost, can check with "LightHeaded":http://www.wowinterface.com/downloads/info7017-LightHeaded.html or "Wowhead":http://www.wowhead.com and "submit a bug":http://github.com/tekkub/TourGuide/blob/docs/submitting_bugs.markdown so notes can be added to the objective.\n\nIf you wish to use the "use item" frame from a keybind or your actionbar, make a macro: @/click TourGuideItemFrame@\n\nh2. Submitting bugs\n\nFor details on how to submit bugs, please read "this page":http://github.com/tekkub/TourGuide/blob/docs/submitting_bugs.markdown\n\nh2. How to create (or edit) guides\n\nTourGuide data files are fairly simple to create.\nThe simplest method is to copy an existing file and edit it how you want.\nPlease read "How to edit TourGuide guides":http://github.com/tekkub/TourGuide/blob/docs/writing_guides.markdown for help on the format and general guidelines.\nI ask that all submissions follow these guidelines, to present a consistent format to the user.\nI welcome all submissions, but reserve the right to edit them as I see fit, or reject ones that infringe upon other copyrighted guides.\n\nSee "this page":http://github.com/tekkub/TourGuide/blob/docs/submitting_bugs.markdown for details on how to fork my github repo to push your changes.\n\nh2. Links\n\n<b>Visit "my site":http://tekkub.net/ for more great addons<br>\nPlease report all bugs and feature requests to my "Github tracker":http://github.com/tekkub/TourGuide/issues<br>\nPlease direct all feedback and questions to my "Google Groups":http://groups-beta.google.com/group/tekkub-wow mailinglist</b>\n'
My Config Files 
Open source forum - done *different* b"fora\n====\n\n[fora][1] (yes, it's all lowercase letters) is forum / discussion board\nsoftware, done *differently*. If you'd like to discuss fora, make suggestions,\nor ask questions, you can do so in [our campfire room][2].\n\n**Note:** this project is currently non-operational, and is still in early\ndevelopment. Feel free to watch it here on GitHub, fork it and contribute\nyourself, or jump in the room and chat with us... but you can't download and\ninstall fora in it's current state.\n\n  [1]: <http://fora.yreality.net/> (fora homepage)\n  [2]: <http://elliottcable.campfirenow.com/10c4b> (fora campfire room)\n\nPhilosophy\n----------\n\n* No categories, completely dynamic via tags and tag sets instead of topics\n* No registration - every visitor is automatically assigned an account, and\nthey are automatically logged in to the correct account when visiting again\n* No community authentication - every user is assumed to be trustworthy (no\npasswords to log in, can edit anybody elses' posts, like a wiki - although\nversions are kept)\n* Member trust built on self-sufficient ratings, not mere membership\n\nWith fora, we hope to counter some of the basic anthropological problems\nassociated with the limitations of normal 'discussion-board', or forum\nsoftware. Such limitations and the said problems are discussed in more\ndepth [here][3].\n\n  [3]: <http://wakaba.c3.cx/shii/shiichan> (Discussion and comparision of forum software vs. 2ch-type software)\n\nGetting\n-------\n\nThe authoratative source for this project is available at\n<http://github.com/elliottcable/fora>. You can clone your own copy with the\nfollowing command:\n\n    git clone git://github.com/elliottcable/fora.git\n\nIf you want to make changes to the codebase, you need to fork your own github\nrepository for said changes. Send a pullrequest to [elliottcable][4]\nwhen you've got something ready for the master that you think should be\nintegrated into the root source.\n \nBugs or feature requests can be submitted to our [ticketing system][5].\n\n  [4]: <http://github.com/elliottcable> (elliottcable's github account)\n  [5]: <http://elliottcable.lighthouseapp.com/projects/9425-fora/overview> (fora on Lighthouse)\n\nRequirements\n------------\n\nTo run fora, you need the following gems:\n\n* merb-core\n* merb-more (may not be necessary)\n* datamapper (and associated do_postgres, do_mysql, etc)\n* merb_datamapper (from merb-plugins)\n\nTo develop and contribute to fora, you also need:\n\n* merb_rspec (from merb-plugins)\n* rspec\n* rake\n\nmerb edge\n---------\n\nTo easily install the current edge merbs, first install the merb-dev rakefile with sake as follows:\n\n    sudo gem install sake\n    mkdir -p ~/.ruby; cd ~/.ruby\n    sake -i http://github.com/ivey/merb-dev/tree/master/merb-dev.rake?raw=true\n    sake merb:clone\n    cd ~/.ruby/merb\n    sudo sake merb:gems:wipe\n    sudo sake merb:install merb:install:plugins"
Direct Connect bot written in Ruby b"DCBot\n=====\n\nDCBot is a Direct Connect bot written in Ruby.\nIt has an extensible plugin architecture backed by a database\nand comes with a plugin to manage requests.\n\nDependencies\n------------\n\n- RubyGems\n- ActiveRecord\n- EventMachine\n- libbz2\n\nUsage\n-----\n\nEdit dcbot_example.conf, rename it to dcbot.conf, and then run dcbot.rb.\nTyping text into standard input will send it as messages to hub chat.\n\nNotes\n-----\n\nAt this time, only one hub connection is supported. It should be easy to add multiple hubs,\nbut I didn't need it and I wasn't sure how to handle keyboard input in that case.\n\nAlso, please note that this is a fairly quick and dirty bot, so don't be surprised if some\nof the architecture is suboptimal.\n\nAuthor\n------\n\nKevin Ballard <kevin@sb.org>\n"
A short heavy stick b'GPL 3.0\n'
blogware that fits in your pocket b'micro is a simple blogging application based on our very own "micro theme":http://micro.seaofclouds.com for mephisto.  as blogware goes, micro is pretty simple - no themes, no plugins, no user accounts, no asset management, no separate admin interface - just pure post-it and share-it goodness.\n\np{text-align:center;font-size:160%}. micro is blogware that fits in your pocket.\n\ninspired by the more robust "mephisto blogging system":http://mephistoblog.com, and by bloggers everywhere, micro is powered by ruby, rails, jquery, haml, textile and users like you. enjoy.\n\n  git clone git@github.com:seaofclouds/micro.git\n  rake db:migrate\n\nh4. features\n\n* "flickr":http://flickr.com/ friendly width for photo sharing splendor\n* "hAtom":http://microformats.org/wiki/hatom microformats\n* dynamic width and fonts, pages scale with browser font size\n* SEO friendly\n* iphone friendly\n* built with rails 2.0\n* cross browser support, plays nice with "good or bad browsers":http://goodbrowserbadbrowser.com\n\nh4. requirements\n\n* ruby and rails friendly host or server\n* knowledge of ruby, haml, sass, css or willingness to learn\n* git for keeping up to date\n\nh4. license\n\n<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" class="fl mr1"> <img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a> micro is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported License</a>.\n\nh4. props\n\n* many thanks to "ryan bates":http://workingwithrails.com/person/6491-ryan-bates for his most excellent "Railscasts":http://railscasts.com/\n* to our boys, pj and chris, of "err free":http://errfree.com/. their work at "err the blog":http://errtheblog.com/ has proven priceless during the tireless nights of development\n* to "dru nelson":http://www.xxeo.com/ for his support on IM and tips in keeping things simple.\n* and to "fabio akita":http://www.akitaonrails.com/ for his "rails 2.0 blog tutorial":http://www.akitaonrails.com/2007/12/12/rolling-with-rails-2-0-the-first-full-tutorial which was a good starting point.'
Page caching extension of Shopify 
simple blogging theme for mephisto and blogger b"micro is an clean, minimalist theme for mephisto and blogger. \n\nhttp://micro.seaofclouds.com/\n\n-- LICENSE --\n\n(The MIT License)\n\nCopyright (c) 2008 seaofclouds\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
iCal To Do scheduler for Leopard 
jquey plugin: a mix between facebox &amp; catfish. message alert. b'h1. jQuery catface\n\nh2. Summary\n\n"Catface":http://github.com/jney/catface is a "jQuery":http://jquery.com plugin used to display div or remote html.\n\nTested on @Internet explorer 6@, @Internet explorer 7@, @Firefox 3@, @Safari@ and @Opera@\n\nh2. Requirement\n\n* jquery >= 1.2\n\nh2. Install\n\n* Include javascript @catface.js@ and css @catface.css@ in your page.\n* Include images directory in your project.\n* You can personnalize it @catface.css@, but be carefull. '
A python application for following the US primaries b'PyElection is a python program for following the 2008 US presidential primaries.\n\nYou can run it by executing the pyelection.py file.\n\nIt requires several external python libraries:\n    * PyGTK\n    * BeautifulSoup\n    * gobject\nYou also need to have GTK itself installed.\n'
A fork of todo.py that commits all changes into a git repository. 
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a "normal" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n'
Merb More: The Full Stack. Take what you need; leave what you don't. 
Merb Plugins: Even more modules to hook up your Merb installation 
The new Asterisk Manager Interface implementation that uses Ragel and EventMachine 
test 
a blog hub (a daemon that aggregate items and re-publish them on differents platforms) : an attempt for a one4all blogging system 
A RESTful Blog API written in Merb b'# PmpknPi\n\n[PmpknPi](http://pmpknpi.com) is a Merb blog system.\n\n### Features\n  \n  - Image uploading(& thumbnailing) via attachment_fu\n  - Write articles in Textile, Markdown, or HTML\n  - Users may vote on comments (no registration required)\n  - Comments may use Textile and are proteted using Whistler\n  - completely UJS using JQuery\n  - RESTful architecture\n\n### Dependencies\n\n  - merb 0.9.2\n  - active_record\n  - merb_activerecord\n  - BlueCloth\n  - RedCloth\n  - CodeRay\n  - merb\\_can\\_filter\n  - whistler\n  - image_science\n  \n### Get Started - clone,configure,migrate\n    \n    git clone git://github.com/sintaxi/pmpknpi.git\n    cd pmpknpi\n    cp config/database.sample.yml config/database.yml\n    rake db:migrate\n    merb\n    \n    *set your preferences in config/settings.yml\n\n## The MIT License  \n\nCopyright (c) 2008 Brock Whitten\n\nPermission is hereby granted, free of charge, to any person obtaining  \na copy of this software and associated documentation files (the  \n"Software"), to deal in the Software without restriction, including  \nwithout limitation the rights to use, copy, modify, merge, publish,  \ndistribute, sublicense, and/or sell copies of the Software, and to  \npermit persons to whom the Software is furnished to do so, subject to  \nthe following conditions:  \n\nThe above copyright notice and this permission notice shall be  \nincluded in all copies or substantial portions of the Software.  \n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  \nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  \nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  \nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE  \nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION  \nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  \nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  \n\n'
Generates common user authentication code for Rails/Merb, with a full test/unit and rspec suite and optional Acts as State Machine support built-in.  Added support for Oracle SSO authentication. b"Restful Authentication Generator\n====\n\nThis is a basic restful authentication generator for rails, taken \nfrom acts as authenticated.  Currently it requires Rails 1.2.6 or above.\n\nTo use:\n\n  ./script/generate authenticated user sessions \\\n\t\t--include-activation \\\n\t\t--stateful\n\nThe first parameter specifies the model that gets created in signup\n(typically a user or account model).  A model with migration is \ncreated, as well as a basic controller with the create method.\n\nThe second parameter specifies the sessions controller name.  This is\nthe controller that handles the actual login/logout function on the \nsite.\n\nThe third parameter (--include-activation) generates the code for a \nActionMailer and its respective Activation Code through email.\n\nThe fourth (--stateful) builds in support for acts_as_state_machine\nand generates activation code.  This was taken from:\n\nhttp://www.vaporbase.com/postings/stateful_authentication\n\nYou can pass --skip-migration to skip the user migration.\n\nIf you're using acts_as_state_machine, define your users resource like this:\n\n\tmap.resources :users, :member => { :suspend   => :put,\n                                     :unsuspend => :put,\n                                     :purge     => :delete }\n\nAlso, add an observer to config/environment.rb if you chose the \n--include-activation option\n\n  config.active_record.observers = :user_observer # or whatever you \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# named your model\n\nSecurity Alert\n====\n\nI introduced a change to the model controller that's been tripping \nfolks up on Rails 2.0.  The change was added as a suggestion to help\ncombat session fixation attacks.  However, this resets the Form \nAuthentication token used by Request Forgery Protection.  I've left\nit out now, since Rails 1.2.6 and Rails 2.0 will both stop session\nfixation attacks anyway."
Facebook-style lightbox, built in jQuery b'Please visit http://famspam.com/facebox/ or open index.html in your favorite browser.\n'
General Code Snippets 
Pagination library for Rails, Sinatra, Merb, DataMapper, and more b'# will_paginate\n\nwill_paginate is a pagination library that integrates with Ruby on Rails, Sinatra, Merb, DataMapper and Sequel.\n\nInstallation:\n\n``` ruby\n## Gemfile for Rails 3+, Sinatra, and Merb\ngem \'will_paginate\', \'~> 3.0.6\'\n```\n\nSee [installation instructions][install] on the wiki for more info.\n\n\n## Basic will_paginate use\n\n``` ruby\n## perform a paginated query:\n@posts = Post.paginate(:page => params[:page])\n\n# or, use an explicit "per page" limit:\nPost.paginate(:page => params[:page], :per_page => 30)\n\n## render page links in the view:\n<%= will_paginate @posts %>\n```\n\nAnd that\'s it! You\'re done. You just need to add some CSS styles to [make those pagination links prettier][css].\n\nYou can customize the default "per_page" value:\n\n``` ruby\n# for the Post model\nclass Post\n  self.per_page = 10\nend\n\n# set per_page globally\nWillPaginate.per_page = 10\n```\n\nNew in Active Record 3:\n\n``` ruby\n# paginate in Active Record now returns a Relation\nPost.where(:published => true).paginate(:page => params[:page]).order(\'id DESC\')\n\n# the new, shorter page() method\nPost.page(params[:page]).order(\'created_at DESC\')\n```\n\nSee [the wiki][wiki] for more documentation. [Ask on the group][group] if you have usage questions. [Report bugs][issues] on GitHub.\n\nHappy paginating.\n\n\n[wiki]: https://github.com/mislav/will_paginate/wiki\n[install]: https://github.com/mislav/will_paginate/wiki/Installation "will_paginate installation"\n[group]: http://groups.google.com/group/will_paginate "will_paginate discussion and support group"\n[issues]: https://github.com/mislav/will_paginate/issues\n[css]: http://mislav.github.io/will_paginate/\n'
Simple social graph javascript viewer.  Uses the Google Social Graph API 
vi wannebe written in ruby b'to install this package from these sources rubygems or rpa is currently required.\nfor rubygems install:\n   cd ruvi\n   gem build ruvi.gemspec\nfor rpa:\n   wget http://rpa-base.rubyforge.org/ports/ports.info -O ports.info\n   (in directory above ruvi)\n   rpa-buildport ruvi ports.info\nknown problems:\n   gnome-terminal interacts *horribly* with the curses frontend\n'
A static file dynamically generated website backend b'# Motivation\n\nNormally when I create a new website with code on it, I write it as static files.  I\'d take all the stuff that stayed the same on each page (header, footer, sidebar generally) and shove it into external files, which can then be included into each page manually.\n\nOf course you end up forgetting to add an `include()` here and there, and the website breaks until you fix it.  So I got fed up and started looking at full blown CMS\'s.\n\nAfter testing a couple out, I realised why I\'d hate them.  They are all *(generally)* database based.  Its a good idea for multiple people editing, etc, but its a pain in the arse to backup.  You have to export your data from the database & then backup that file.  Then you have to either remember to do that every so often, or when data is updated.\n\nPlus when you are testing you have to keep messing around with databases in setting them up and deleting them.  And I thought, "Why can\'t a website be file based, but not have to be so dependent on includes?"\n\nThen I started to realise something.  All web based CMS\'s that use a database work inherently different at a basic level to static file inclusion systems.  They pull the content **into** the layout, rather than the layout into the content.\n\nFor example, wordpress pulls the content straight out of the database in the form of posts & pages, and inserts it into the theme (layout) before rendering it to the browser.\n\nWith the including system, I am requesting the layout (header.php, footer.php, etc) from within the content (about.php, etc), so I am sucking the layout *into* the content.\n\nBut what, I thought, if there was a system that used files, but still pulled the content into the layout, so each file *only* contained the content for that page.\n\nAnd thus I wrote Soco.\n\n# Usage\n\n* Clone the git repo by running `git clone git://github.com/caius/soco.git`\n\n* Edit the content files in */content*\n'
[ABANDONED] New development on the Ruby bindings for the GNU Scientific Library b'This is a port of the GNU Scientific Library to the Ruby programming language.\n\nThe GNU Scientific Library is a collection of routines for numerical computing.\nTo find out more about GSL, please go to http://sources.redhat.com/gsl/\nThis version of ruby-gsl requires GSL 1.5.\n\nRuby is an interpreted scripting language for quick and easy object-oriented \nprogramming. \nTo find out more about Ruby, please go to http://www.ruby-lang.org/\n\nThings from GSL you can use in ruby-gsl:\n- some error handling (ch. 3 in the GSL documentation)\n- basic mathematical functions (ch. 4)\n- complex numbers (ch. 5)\n- functions for polynomial evaluation/roots (ch. 6)\n- most "special functions" (ch. 7)\n- vectors and matrices (ch. 8)\n- permutations (ch. 9)\n- combinations (ch. 10)\n- BLAS support (ch. 12)\n- linear algebra (ch. 13)\n- eigensystems (ch. 14)\n- numerical integration (ch. 16)\n- random number generation (ch. 17)\n- quasi-random sequences (ch. 18)\n- most random number distributions (ch. 19)\n- most statistical functions (ch. 20)\n- histograms (ch. 21)\n- Monte Carlo integration (ch. 23)\n- Simulated Annealing (not reliable) (ch. 24)\n- interpolation (ch. 26)\n- numerical differentiation (ch. 27)\n- Chebyshev approximation (ch. 28)\n- series acceleration (ch. 29)\n- Discrete Hankel Transforms (ch. 30)\n- 1-dimensional root-finding (ch. 31)\n- 1-dimensional minimization (ch. 32)\n- some functions for least-squares fitting (ch. 35)\n- physical constants (ch. 37)\n\nWe tried to keep the names/arguments/etc. as close to the original\nGSL functions so that reading the GSL documentation should suffice\nto use ruby-gsl. However in some places it might be more appropriate\nto convert some functions to a more rubyesque way.\n\nAs of version 0.1.2 we included some source code from Yoshiki Tsunesada\'s\nRuby/GSL. This way we will have some nice and complete GSL wrapper some day.\n\nIf you have any questions or spot errors please feel free to contact us.\nTesting and development is with Ruby 1.8.1 and GSL 1.5.\n'
YARD is a Ruby Documentation tool. The Y stands for "Yay!" b'# YARD: Yay! A Ruby Documentation Tool\n\n[![Homepage](http://img.shields.io/badge/home-yardoc.org-blue.svg)](http://yardoc.org)\n[![GitHub](http://img.shields.io/badge/github-lsegal/yard-blue.svg)](http://github.com/lsegal/yard)\n[![Documentation](http://img.shields.io/badge/docs-rdoc.info-blue.svg)](http://rubydoc.org/gems/yard/frames)\n[![Gitter Chat](http://img.shields.io/badge/chat-gitter.im-orange.svg)](https://gitter.im/lsegal/yard)\n\n[![Gem Version](https://badge.fury.io/rb/yard.svg)](http://github.com/lsegal/yard/releases)\n[![Build Status](https://travis-ci.org/lsegal/yard.svg?branch=master)](https://travis-ci.org/lsegal/yard)\n[![License](http://img.shields.io/badge/license-MIT-yellowgreen.svg)](#license)\n\n## Synopsis\n\nYARD is a documentation generation tool for the Ruby programming language.\nIt enables the user to generate consistent, usable documentation that can be\nexported to a number of formats very easily, and also supports extending for\ncustom Ruby constructs such as custom class level definitions. Below is a\nsummary of some of YARD\'s notable features.\n\n\n## Feature List\n\n**1. RDoc/SimpleMarkup Formatting Compatibility**: YARD is made to be compatible\nwith RDoc formatting. In fact, YARD does no processing on RDoc documentation\nstrings, and leaves this up to the output generation tool to decide how to\nrender the documentation.\n\n**2. Yardoc Meta-tag Formatting Like Python, Java, Objective-C and other languages**:\nYARD uses a \'@tag\' style definition syntax for meta tags alongside  regular code\ndocumentation. These tags should be able to happily sit side by side RDoc formatted\ndocumentation, but provide a much more consistent and usable way to describe\nimportant information about objects, such as what parameters they take and what types\nthey are expected to be, what type a method should return, what exceptions it can\nraise, if it is deprecated, etc.. It also allows information to be better (and more\nconsistently) organized during the output generation phase. You can find a list\nof tags in the {file:docs/Tags.md#taglist Tags.md} file.\n\nYARD also supports an optional "types" declarations for certain tags.\nThis allows the developer to document type signatures for ruby methods and\nparameters in a non intrusive but helpful and consistent manner. Instead of\ndescribing this data in the body of the description, a developer may formally\ndeclare the parameter or return type(s) in a single line. Consider the\nfollowing method documented with YARD formatting:\n\n     # Reverses the contents of a String or IO object.\n     #\n     # @param [String, #read] contents the contents to reverse\n     # @return [String] the contents reversed lexically\n     def reverse(contents)\n       contents = contents.read if contents.respond_to? :read\n       contents.reverse\n     end\n\nWith the above @param tag, we learn that the contents parameter can either be\na String or any object that responds to the \'read\' method, which is more\npowerful than the textual description, which says it should be an IO object.\nThis also informs the developer that they should expect to receive a String\nobject returned by the method, and although this may be obvious for a\n\'reverse\' method, it becomes very useful when the method name may not be as\ndescriptive.\n\n**3. Custom Constructs and Extensibility of YARD**: YARD is designed to be\nextended and customized by plugins. Take for instance the scenario where you\nneed to document the following code:\n\n    class List\n      # Sets the publisher name for the list.\n      cattr_accessor :publisher\n    end\n\nThis custom declaration provides dynamically generated code that is hard for a\ndocumentation tool to properly document without help from the developer. To\nease the pains of manually documenting the procedure, YARD can be extended by\nthe developer to handle the `cattr_accessor` construct and automatically create\nan attribute on the class with the associated documentation. This makes\ndocumenting external API\'s, especially dynamic ones, a lot more consistent for\nconsumption by the users.\n\nYARD is also designed for extensibility everywhere else, allowing you to add\nsupport for new programming languages, new data structures and even where/how\ndata is stored.\n\n**4. Raw Data Output**: YARD also outputs documented objects as raw data (the\ndumped Namespace) which can be reloaded to do generation at a later date, or\neven auditing on code. This means that any developer can use the raw data to\nperform output generation for any custom format, such as YAML, for instance.\nWhile YARD plans to support XHTML style documentation output as well as\ncommand line (text based) and possibly XML, this may still be useful for those\nwho would like to reap the benefits of YARD\'s processing in other forms, such\nas throwing all the documentation into a database. Another useful way of\nexploiting this raw data format would be to write tools that can auto generate\ntest cases, for example, or show possible unhandled exceptions in code.\n\n**5. Local Documentation Server**: YARD can serve documentation for projects\nor installed gems (similar to `gem server`) with the added benefit of dynamic\nsearching, as well as live reloading. Using the live reload feature, you can\ndocument your code and immediately preview the results by refreshing the page;\nYARD will do all the work in re-generating the HTML. This makes writing\ndocumentation a much faster process.\n\n\n## Installing\n\nTo install YARD, use the following command:\n\n    $ gem install yard\n\n(Add `sudo` if you\'re installing under a POSIX system as root)\n\nAlternatively, if you\'ve checked the source out directly, you can call\n`rake install` from the root project directory.\n\n**Important Note for Debian/Ubuntu users:** there\'s a possible chance your Ruby\ninstall lacks RDoc, which is occasionally used by YARD to convert markup to HTML.\nIf running `which rdoc` turns up empty, install RDoc by issuing:\n\n    $ sudo apt-get install rdoc\n\n\n## Usage\n\nThere are a couple of ways to use YARD. The first is via command-line, and the\nsecond is the Rake task.\n\n**1. yard Command-line Tool**\n\nYARD comes packaged with a executable named `yard` which can control the many\nfunctions of YARD, including generating documentation, graphs running the\nYARD server, and so on. To view a list of available YARD commands, type:\n\n    $ yard --help\n\nPlugins can also add commands to the `yard` executable to provide extra\nfunctionality.\n\n### Generating Documentation\n\n<span class="note">The `yardoc` executable is a shortcut for `yard doc`.</span>\n\nThe most common command you will probably use is `yard doc`, or `yardoc`. You\ncan type `yardoc --help` to see the options that YARD provides, but the\neasiest way to generate docs for your code is to simply type `yardoc` in your\nproject root. This will assume your files are\nlocated in the `lib/` directory. If they are located elsewhere, you can specify\npaths and globs from the commandline via:\n\n    $ yardoc \'lib/**/*.rb\' \'app/**/*.rb\' ...etc...\n\nThe tool will generate a `.yardoc` file which will store the cached database\nof your source code and documentation. If you want to re-generate your docs\nwith another template you can simply use the `--use-cache` (or -c)\noption to speed up the generation process by skipping source parsing.\n\nYARD will by default only document code in your public visibility. You can\ndocument your protected and private code by adding `--protected` or\n`--private` to the option switches. In addition, you can add `--no-private`\nto also ignore any object that has the `@private` meta-tag. This is similar\nto RDoc\'s ":nodoc:" behaviour, though the distinction is important. RDoc\nimplies that the object with :nodoc: would not be documented, whereas\nYARD still recommends documenting private objects for the private API (for\nmaintainer/developer consumption).\n\nYou can also add extra informative files (README, LICENSE) by separating\nthe globs and the filenames with \'-\'.\n\n    $ yardoc \'app/**/*.rb\' - README LICENSE FAQ\n\nIf no globs precede the \'-\' argument, the default glob (`lib/**/*.rb`) is\nused:\n\n    $ yardoc - README LICENSE FAQ\n\nNote that the README file can be specified with its own `--readme` switch.\n\nYou can also add a `.yardopts` file to your project directory which lists\nthe switches separated by whitespace (newlines or space) to pass to yardoc\nwhenever it is run. A full overview of the `.yardopts` file can be found in\n{YARD::CLI::Yardoc}.\n\n### Queries\n\nThe `yardoc` tool also supports a `--query` argument to only include objects\nthat match a certain data or meta-data query. The query syntax is Ruby, though\na few shortcuts are available. For instance, to document only objects that have\nan "@api" tag with the value "public", all of the following syntaxes would give\nthe same result:\n\n    --query \'@api.text == "public"\'\n    --query \'object.has_tag?(:api) && object.tag(:api).text == "public"\'\n    --query \'has_tag?(:api) && tag(:api).text == "public"\'\n\nNote that the "@tag" syntax returns the first tag named "tag" on the object.\nTo return the array of all tags named "tag", use "@@tag".\n\nMultiple `--query` arguments are allowed in the command line parameters. The\nfollowing two lines both check for the existence of a return and param tag:\n\n    --query \'@return\' --query \'@param\'\n    --query \'@return && @param\'\n\nFor more information about the query syntax, see the {YARD::Verifier} class.\n\n**2. Rake Task**\n\nThe second most obvious is to generate docs via a Rake task. You can do this by\nadding the following to your `Rakefile`:\n\n    YARD::Rake::YardocTask.new do |t|\n      t.files   = [\'lib/**/*.rb\', OTHER_PATHS]   # optional\n      t.options = [\'--any\', \'--extra\', \'--opts\'] # optional\n      t.stats_options = [\'--list-undoc\']         # optional\n    end\n\nAll the settings: `files`, `options` and `stats_options` are optional. `files` will default to\n`lib/**/*.rb`, `options` will represents any options you might want\nto add and `stats_options` will pass extra options to the stats command.\nAgain, a full list of options is available by typing `yardoc --help`\nin a shell. You can also override the options at the Rake command-line with the\nOPTS environment variable:\n\n    $ rake yard OPTS=\'--any --extra --opts\'\n\n**3. `yri` RI Implementation**\n\nThe yri binary will use the cached .yardoc database to give you quick ri-style\naccess to your documentation. It\'s way faster than ri but currently does not\nwork with the stdlib or core Ruby libraries, only the active project. Example:\n\n    $ yri YARD::Handlers::Base#register\n    $ yri File.relative_path\n\nNote that class methods must not be referred to with the "::" namespace\nseparator. Only modules, classes and constants should use "::".\n\nYou can also do lookups on any installed gems. Just make sure to build the\n.yardoc databases for installed gems with:\n\n    $ sudo yard gems\n\nIf you don\'t have sudo access, it will write these files to your `~/.yard`\ndirectory. `yri` will also cache lookups there.\n\n**4. `yard server` Documentation Server**\n\nThe `yard server` command serves documentation for a local project or all installed\nRubyGems. To serve documentation for a project you are working on, simply run:\n\n    $ yard server\n\nAnd the project inside the current directory will be parsed (if the source has\nnot yet been scanned by YARD) and served at [http://localhost:8808](http://localhost:8808).\n\n### Live Reloading\n\nIf you want to serve documentation on a project while you document it so that\nyou can preview the results, simply pass `--reload` (`-r`) to the above command\nand YARD will reload any changed files on each request. This will allow you to\nchange any documentation in the source and refresh to see the new contents.\n\n### Serving Gems\n\nTo serve documentation for all installed gems, call:\n\n    $ yard server --gems\n\nThis will also automatically build documentation for any gems that have not\nbeen previously scanned. Note that in this case there will be a slight delay\nbetween the first request of a newly parsed gem.\n\n\n**5. `yard graph` Graphviz Generator**\n\nYou can use `yard graph` to generate dot graphs of your code. This, of course,\nrequires [Graphviz](http://www.graphviz.org) and the `dot` binary. By default\nthis will generate a graph of the classes and modules in the best UML2 notation\nthat Graphviz can support, but without any methods listed. With the `--full`\noption, methods and attributes will be listed. There is also a `--dependencies`\noption to show mixin inclusions. You can output to stdout or a file, or pipe directly\nto `dot`. The same public, protected and private visibility rules apply to `yard graph`.\nMore options can be seen by typing `yard graph --help`, but here is an example:\n\n    $ yard graph --protected --full --dependencies\n\n\n## Changelog\n\nSee {file:CHANGELOG.md} for a list of changes.\n\n## License\n\nYARD &copy; 2007-2014 by [Loren Segal](mailto:lsegal@soen.ca). YARD is\nlicensed under the MIT license except for some files which come from the\nRDoc/Ruby distributions. Please see the {file:LICENSE} and {file:LEGAL}\ndocuments for more information.\n'
  Castanaut lets you write executable scripts for your screencasts. With a simple dictionary of stage directions, you can create complex interactions with a variety of applications. b'# Castanaut: Automate your screencasts.\n\nAuthor: Joseph Pearson  \nhttp://gadgets.inventivelabs.com.au/castanaut\n\n## DESCRIPTION\n\nCastanaut lets you write executable scripts for your screencasts. With a\nsimple dictionary of stage directions, you can create complex interactions\nwith a variety of applications. Currently, and for the foreseeable future,\nCastanaut supports Mac OS X 10.5 only.\n\n## SYNOPSIS\n\n### Writing screenplays\n\nYou write your screenplays as Ruby files. Castanaut has been designed to\nread fairly naturally to the non-technical, within Ruby\'s constraints.\n\nHere\'s a simple screenplay:\n\n    launch "Safari", at(10, 10, 800, 600)\n    type "http://www.inventivelabs.com.au"\n    hit Enter\n    pause 2\n    move to(100, 100)\n    move to(200, 100)\n    move to(200, 200)\n    move to(100, 200)\n    move to(100, 100)\n    say "I drew a square!"\n\nWith any luck we don\'t need to explain to you what this screenplay\ndoes. The only thing that might need some explanation is "say" -- this has a\nrobotic voice speak the given string. (Also: all numbers are pixel\nco-ordinates).\n\nAbout the robot: no, we don\'t recommend you use this in real screencasts for\na large audience. Most people find it a little offputting.\nYou are free to contravene our recommendation though. You\ncan tweak the robot in the Mac OS X Speech Preferences pane.\n\n### Running your screenplay\n\nSimply give the screenplay to the castanaut command, like this:\n\n    castanaut test.screenplay\n\nThis assumes you have a screenplay file called "test.screenplay" in the\ndirectory where you are running the command.\n\nOf course, it isn\'t always convenient to drop to the terminal to run your\nscreenplay. So there\'s also a method of executing your screenplays directly.\nYou need to add this line (the "shebang" line) at the top of your screenplay:\n\n    #!/usr/bin/env castanaut\n\nThen you need to set the screenplay to be executable by running this command\non it:\n\n    chmod a+x test.screenplay\n\nAgain, substitute "test.screenplay" for your screenplay\'s filename.\n\nAt this point, you should be able to double-click the screenplay, or invoke\nit with Quicksilver, or run it any other way that floats your boat.\n\n### Stopping the screenplay\n\nIf you want to abruptly terminate execution before the end of the screenplay,\nyou just need to run the \'castanaut\' command again -- with or without any\narguments.\n\nOf course, that might be easier said than done, if you haven\'t got full\ncontrol of the mouse or keyboard at the time. One recommendation is to assign\na system hot-key to invoke castanaut. I use a Quicksilver trigger for this,\nassigned to Shift-F1, that calls castanaut. You\'ll need the full path to\nthe command for this, which is usually /usr/bin/castanaut, but you can check\nit with the following command:\n\n    which "castanaut"\n\n### Running interactively with IRB\n\nYou can now run Castanaut interactively from IRB \xe2\x80\x94 to test commands, try stuff\nout, etc:\n\n    $ irb -r \'castanaut\'\n    >> irb Castanaut::Movie.spawn\n    >> move to(100, 100)\n    => "Moving mouse.\\n"\n\nNote that this technique creates an IRB subsession, so you\'ll have to exit out\nof that before exiting out of IRB. There\'s heaps you can do with subsessions -\nread up about them online.\n\n### What stage directions can I make?\n\nOut of the box, Castanaut performs mouse actions, keyboard actions,\nrobot speech and application launches.\n\nFor a complete overview of the built-in stage directions, see the\nCastanaut::Movie class.\n\n### Using plugins\n\nOf course, just using the built-in stage directions is a little bit awkward\nand verbose. Plugins allow you to extend the available dictionary with\nsome additional convenience actions. Typically a plugin is specific to an\napplication.\n\nCastanaut comes with several plugins, including\n\n* Castanaut::Plugin::Safari for interacting with the contents of web-pages\n* Castanaut::Plugin::Ishowu for recording screencasts using the iShowU\n  application from Shiny White Box.\n* Castanaut::Plugin::Textmate for opening files to specific line numbers.\n\nTo use a plugin, simply declare it:\n\n    plugin "safari"\n\n    launch "Safari", at(32, 32, 800, 600)\n    url "http://www.google.com"\n    pause 4\n    move to_element(\'input[name="q"]\')\n    click\n    type "Castanaut"\n    move to_element(\'input[type="submit"]\')\n    click\n    pause 4\n    say "Oh. I was hoping for more results."\n\n\nIn the example above, we use the two methods provided by the Safari module:\nurl, which causes Safari to navigate to the given url, and `to_element`, which\nreturns the co-ordinates of a page element (using CSS selectors) relative to\nthe screen.\n\n### Creating your own plugins\n\nAdvanced users can create their own plugins. Put them in a directory\ncalled "plugins" below the directory containing the screenplays that use\nthe plugin.\n\nTake a look at the plugins that Castanaut comes with for examples on creating\nyour own.\n\n## REQUIREMENTS\n\n* Mac OS X 10.5 or higher\n\nor\n\n* Mac OS X 10.4\n* [The Extras Suite application](http://www.kanzu.com/main.html#extrasuites)\n\n## INSTALL\n\nRun the following command to install Castanaut\n\n    gem install castanaut\n\nIf you\'re using Mac OS X 10.4 (Tiger) you will also need to download and\ninstall the XTool scripting additions.\n\nOnce installed, you should run the following command for two reasons:\n\n    castanaut\n\nReason 1 is to confirm that it is installed correctly. Reason 2 is to set up\nthe permissions on the utility that controls your mouse and keyboard during\nCastanaut movies. You may be asked for a password here.\n\nIf you just see a "ScreenplayNotFound" exception here, everything\'s good.\n\n## LICENSE\n\nCopyright (C) 2008-2011 Inventive Labs.\n\nReleased under the [WTFPL](http://sam.zoy.org/wtfpl).\n\nPortions released under the MIT License.\n\nSee COPYRIGHT.md for full licensing details.\n'
Ruby TextMate bundle b'Ruby TextMate bundle\n--------------------\n\nThe TextMate bundle that first appeared in the famous "Rails 15 minute video." This is it, many years later.\n\nInstallation\n============\n\nTo install via Git:\n\n    mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n    cd ~/Library/Application\\ Support/TextMate/Bundles\n    git clone git://github.com/drnic/ruby-tmbundle.git "Ruby.tmbundle"\n    osascript -e \'tell app "TextMate" to reload bundles\'\n\nSource can be viewed or forked via GitHub: [http://github.com/drnic/ruby-tmbundle](http://github.com/drnic/ruby-tmbundle)\n\nValidate and Save\n=================\n\nWhen you save a Ruby file, it will first validate the syntax and print any validation error as a tooltip.\n\n<img src="http://img.skitch.com/20100601-eiw1ugr2ma8xwxbecjfbbpfgpk.preview.jpg" alt="Validate and Save - No Rubinius" />\n\nYou can get more detailed syntax error information if you have Rubinius installed (and `rbx` in TextMate\'s $PATH).\n\n<img src="http://img.skitch.com/20100601-r66y9yr8nb14br4esi436prn1p.preview.jpg" alt="Validate and Save - Rubinius installed" />\n\nIf you have Homebrew installed:\n\n    brew install rubinius\n\nThen in TextMate, add your homebrew `bin` folder to the $PATH.\n\n* Go to TextMate\'s Preferences (Cmd+,)\n* Go to "Advanced", then "Shell Variables"\n* Edit the `PATH` variable, and add ":/path/to/homebrew/bin"\n\nFor example, if you have homebrew installed in `~/.homebrew` then you might add `:/Users/drnic/.homebrew/bin`\n\nSave a dodgy Ruby file and see the beautifully helpful syntax message.'
HTML TextMate bundle 
nFlux-Orb 
Restaurant mashup site b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
An easy way to create Permalinks. b"# Permalizer\n\nPermalizer adds functionality to the String Object so that clean URLs creation is made simple\n\nIt extend the string with permalize and permalize! which return permalized strings but\ndoesn't add the permalization process inside the string class, that process remains\nin the Permalink::Permalizer class.\n\n\n## Contributors\n\nMarcos Arias"
Sprinkle is a software provisioning tool you can use to build remote servers with. eg. to install a Rails, or Sinatra stack on a brand new slice directly after its been created b'# Sprinkle\n\nSprinkle is a software provisioning tool you can use to build remote servers with, after the base operating\nsystem has been installed. For example, to install a Rails or Merb stack on a brand new slice directly after\nits been created.\n\n[![Build Status](https://travis-ci.org/sprinkle-tool/sprinkle.png?branch=master)](https://travis-ci.org/sprinkle-tool/sprinkle) [![Code Climate](https://codeclimate.com/github/sprinkle-tool/sprinkle.png)](https://codeclimate.com/github/sprinkle-tool/sprinkle/)\n\n  * `#sprinkle` channel on the Freenode IRC Network\n  * <http://redartisan.com/2008/5/27/sprinkle-intro>\n  * <http://github.com/sprinkle-tool/sprinkle>\n  * <http://github.com/benschwarz/passenger-stack>\n  * <http://github.com/trevorturk/sprinkle-packages>\n  * <http://www.vimeo.com/2888665>\n  * <http://maxim.github.com/sprinkle-cheatsheet>\n  * <http://github.com/mingalar/sprinkle-packages>\n  * <http://github.com/stuartellis/spritz>\n  * <http://engineering.gomiso.com/2011/08/26/forget-chef-or-puppet-automate-with-sprinkle/>\n\n### Packages\n\nProperties of packages such as their name, type, dependencies, etc, and what packages apply to what machines\nis described via a domain specific language that Sprinkle executes (in fact one of the aims of Sprinkle is to\ndefine as concisely as possible a language for installing software).\n\nAn example:\n\n``` ruby\npackage :ruby do\n  description \'Ruby Virtual Machine\'\n  version \'1.8.6\'\n  source "ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-#{version}-p111.tar.gz"\n  requires :ruby_dependencies\n\n  verify do\n    has_file \'/usr/bin/ruby\'\n  end\nend\n```\n\nThis defines a package called `ruby`, that uses the source based installer to build Ruby 1.8.6 from source,\ninstalling the package `ruby_dependencies` beforehand. The package verifies it was installed correctly by verifying the file `/usr/bin/ruby` exists after installation. If this verification fails, the sprinkle script will gracefully stop.\n\nReasonable defaults are set by sprinkle, such as the install prefix, download area, etc, but can be customized\nglobally or per package (see below for an example).\n\nSince packages come in many forms (eg. gems, pre-compiled debs, compressed source tar.gz, etc), Sprinkle supports\nmany different installer types, giving you the most amount of flexibility of how you\'d like software installed.\nNew installer types can be added into the system easily.\n\nFor example, you could install Rails via gems, nginx via source, and mysql via APT, while retaining the flexibility\nof changing installer types as software is updated upstream.\n\nSprinkle also supports dependencies between packages, allowing you specify pre-requisites that need to be\ninstalled in order.\n\n### Policies\n\nPackages can be grouped into polices to define several packages that should be installed together.  An example:\n\n``` ruby\npolicy :rails, :roles => :app do\n  requires :rails, :version => "3.2"\n  requires :appserver\n  requires :database\n  requires :webserver\nend\n```\n\nThis defines a policy called Rails, that applies to machines of role `:app`. The policy includes the packages\nrails (version 3.2), appserver, database and webserver.\n\nThe appserver, database and webserver packages can also be virtual, prompting the user for selection if multiple choices for the virtual package exist.\n\nSprinkle is architected to be extendable in many ways, one of those areas is in its deployment of commands to\nremote hosts. Currently Sprinkle supports the use of Capistrano, Vlad, or a direct net/ssh connection to\nissue commands on remote hosts via ssh, but could also be extended to use any other command transport mechanism\ndesired. Sprinkle can also be configured to simply issue installation commands to provision the local system.\n\nSprinkle is a work in progress and I\'m excited to hear if anyone finds it useful - please feel free to\ncomment, ask any questions, or send in any ideas, patches, bugs. All most welcome.\n\nMarcus Crafter - <crafterm@redartisan.com>\n\n----\n\n## APPENDIX \n\n### A full example deployment\n\nA full example Sprinkle deployment script for deploying Rails (via gems), MySQL (via APT), Apache (via source)\nand Git (via source with dependencies from APT):\n\n``` ruby\n# Sprinkle Rails deployment script\n#\n# This is an example Sprinkle script, configured to install Rails from gems, Apache, Ruby and Git from source,\n# and mysql and Git dependencies from apt on an Ubuntu system. Installation is configured to run via\n# Capistrano (and an accompanying deploy.rb recipe script). Source based packages are downloaded and built into\n# /usr/local on the remote system.\n#\n# A sprinkle script is separated into 3 different sections. Packages, policies and deployment.\n#\n# Packages\n#\n#  Defines the world of packages as we know it. Each package has a name and\n#  set of metadata including its installer type (eg. apt, source, gem, etc). Packages can have\n#  relationships to each other via dependencies\n#\n# Policies\n#\n#  Names a group of packages (optionally with versions) that apply to a particular set of roles.\n#\n# Deployment\n#\n#  Defines script wide settings such as a delivery mechanism for executing commands on the target\n#  system (eg. capistrano), and installer defaults (eg. build locations, etc).\n\n# Packages\n\npackage :ruby do\n  description \'Ruby Virtual Machine\'\n  version \'1.8.6\'\n  source "ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-#{version}-p111.tar.gz"\n  requires :ruby_dependencies\nend\n\npackage :ruby_dependencies do\n  description \'Ruby Virtual Machine Build Dependencies\'\n  apt %w( bison zlib1g-dev libssl-dev libreadline5-dev libncurses5-dev file )\nend\n\npackage :mysql, :provides => :database do\n  description \'MySQL Database\'\n  apt %w( mysql-server mysql-client )\nend\n\npackage :apache, :provides => :webserver do\n  description \'Apache 2 HTTP Server\'\n  version \'2.2.9\'\n  source "http://apache.wildit.net.au/httpd/httpd-#{version}.tar.bz2" do\n    enable %w( mods-shared=all proxy proxy-balancer proxy-http rewrite cache headers ssl deflate so )\n    prefix "/opt/local/apache2-#{version}"\n    post :install, \'install -m 755 support/apachectl /etc/init.d/apache2\', \'update-rc.d -f apache2 defaults\'\n  end\n  requires :apache_dependencies\nend\n\npackage :apache_dependencies do\n  description \'Apache 2 HTTP Server Build Dependencies\'\n  apt %w( openssl libtool mawk zlib1g-dev libssl-dev )\nend\n\npackage :rubygems do\n  description \'Ruby Gems Package Management System\'\n  version \'1.2.0\'\n  source "http://rubyforge.org/frs/download.php/38646/rubygems-#{version}.tgz" do\n    custom_install \'ruby setup.rb\'\n  end\n  requires :ruby\nend\n\npackage :rails do\n  description \'Ruby on Rails\'\n  gem \'rails\'\n  version \'3.2\'\nend\n\npackage :mongrel do\n  description \'Mongrel Application Server\'\n  gem \'mongrel\'\n  version \'1.1.5\'\nend\n\npackage :mongrel_cluster, :provides => :appserver do\n  description \'Cluster Management for Mongrel\'\n  gem \'mongrel_cluster\' # :source => \'http://gems.github.com/\' for alternate gem server\n  version \'1.0.5\'\n  requires :mongrel\nend\n\npackage :git, :provides => :scm do\n  description \'Git Distributed Version Control\'\n  version \'1.5.6.3\'\n  source "http://kernel.org/pub/software/scm/git/git-#{version}.tar.gz"\n  requires :git_dependencies\nend\n\npackage :git_dependencies do\n  description \'Git Build Dependencies\'\n  apt \'git\', :dependencies_only => true\nend\n\n# Policies\n\n# Associates the rails policy to the application servers. Contains rails, and surrounding\n# packages. Note, appserver, database and webserver are all virtual packages defined above. If\n# there\'s only one implementation of a virtual package, it\'s selected automatically, otherwise\n# the user is requested to select which one to use.\n\npolicy :rails, :roles => :app do\n  requires :rails, :version => "3.2"\n  requires :appserver\n  requires :database\n  requires :webserver\n  requires :scm\nend\n\n# Deployment\n\n# Configures sprinkle to use capistrano for delivery of commands to the remote machines (via\n# the named \'deploy\' recipe). Also configures \'source\' installer defaults to put package gear\n# in /usr/local\n\ndeployment do\n\n  # mechanism for deployment\n  delivery :capistrano do\n    recipes \'deploy\'\n  end\n\n  # source based package installer defaults\n  source do\n    prefix   \'/usr/local\'           # where all source packages will be configured to install\n    archives \'/usr/local/sources\'   # where all source packages will be downloaded to\n    builds   \'/usr/local/build\'     # where all source packages will be built\n  end\n\nend\n```\n\nPlease see the examples directory for more complete examples of Sprinkle deployment scripts, and \nalso the [Passenger Stack github page](http://github.com/benschwarz/passenger-stack) and [video by \nBen Schwarz](http://www.vimeo.com/2888665).'
Lets you insert a Deezer player in your blog using Windows Live Writer 
IRB Power User Utility Belt b'== Utility Belt\n\nby Giles Bowkett (and many others)\n\nhttp://utilitybelt.rubyforge.org\n\n== DESCRIPTION\n  \nUtility Belt is a grab-bag of tricks, tools, techniques, trifles, and toys for IRB, including convenience methods, language patches, and useful extensions. It also includes a couple command-line widgets. Its primary inspirations were an awesome gem called Wirble and a blog post by Amy Hoy called "Secrets Of The Rails Console Ninjas".\n\n(http://slash7.com/articles/2006/12/21/secrets-of-the-rails-console-ninjas)\n\n== INSTALL\n\nsudo gem install utility_belt\n\n== FEATURES\n\n* Interactively edit IRB code in your preferred text editor\n* Read from and write to OS X clipboard\n* Post your code to Pastie with one command (OS X only)\n* Kick-ass Unix-style history buffer\n* Write command history to file or vi\n* Grep classes and methods for strings\n* Verbosity controls for regular IRB and Rails console\n* Finder shortcuts for Rails console\n* Upload shortcut for Amazon S3\n* Command-line Amazon S3 upload script\n* Command-line Google shortcut (OS X only)\n* Auto-indentation\n* _ special variable (like Unix shell var !!)\n* Extremely basic themes for Wirble syntax coloring\n* Pascal/JavaScript-style "with" statement\n* String#to_proc\n* Add and subtract Hashes with + and -\n* Grammatically-correct is_an? method - no more "is_a? Array" statements\n* One-character exit command\n\n== COMMUNITY EFFORT\n\nThe majority of this code was written by other people and compiled, nicked, nabbed, herded, gathered, copied, or pilfered by me (Giles Bowkett). See copyright notice for the credits. A lot of this code comes from blogs. Check out the source code for numerous links to the original posts the code came from. Thanks also to Bob Hutchison, Avdi Grimm, Marcus Derencius, Markus Prinz, Ben Bleything, Reginald Braithwaite-Lee, and Robert Berger for bug fixes, new features, documentation, and bug reports.\n\n== SYNOPSIS\n\nUtility Belt gives you a ton of new options and techniques in IRB. (You may find yourself putting its language patches in actual projects as well.) The way to use Utility Belt is to edit, or create, your .irbrc file. This is analogous to a Unix .bashrc, .tcshrc, .profile, or similar file.\n\nWindows users have a couple options. The easiest is to define an environment variable called IRBRC and set it to the full path of your irbrc (e.g. "C:\\Documents and Settings\\<username>\\_irbrc"). Presto, .irbrc for Windows. You could also set your HOME-Variable to any directory you want and put your ".irbrc" in there. (It needs to be called ".irbrc", "_irbrc" won\'t work). Since Windows Explorer won\'t let you create a file with a dot in the beginning, use any text editor (Notepad will do just fine) and "Save As" to save it as ".irbrc". (The quotation marks make the magic happen.) We don\'t recommend this if you\'re also using MSYS or Cygwin, as they use the same variable for their own purposes.\n\nAdding Utility Belt to your .irbrc is easy:\n\n  require \'rubygems\'\n  require \'utility_belt\'\n\nTo use the Amazon shortcuts, you also need to set some environment variables. See the section on S3 under "Usage" for more. Also, if your terminal has a light background, you\'ll need to enable the light-background syntax coloring theme - see the section on themes under "Usage" for more.\n\n== USAGE\n\nUsing each of Utility Belt\'s tools is different:\n\n== Interactively edit IRB code in your preferred text editor\n\nIf your preferred text editor is vi(m), emacs, or TextMate, there are built-in commands: vi, emacs, and mate, respectively. To use another editor, use this command:\n\n  edit_interactively(:the_name_of_my_editor)\n\nor\n\n  edit_interactively("the name of my editor")\n\nor\n\n  edit_interactively("/the/path/to/my/editor")\n\nIf you\'re wondering why the method name is so ridiculously long, there\'s a story there:\n\nhttp://gilesbowkett.blogspot.com/2007/12/utility-belt-vs-rails.html\n\n== Read from and write to OS X or Windows clipboard\n\nIn order to use Clipboard on Windows you must install the \'win32-clipboard\' gem.\n\nTo read:\n\n  Clipboard.read\n\nTo write:\n\n  Clipboard.write("something")\n\n== Post your code to Pastie with one command (OS X and Windows only)\n\nYou must first equip the UtilityBelt with pastie in your .irbrc:\n\n  UtilityBelt.equip(:pastie)\n  \nThis line will also automatically equip the Clipboard, which is required to use pastie.\n\nFirst copy some code into your clipboard, or put it there with the Clipboard.write() class method. Then use the command:\n\n  pastie\n\nor the shortcut version:\n\n  pst\n\nNote that this method currently auto-formats all code as Ruby. Support for other languages is possible but not implemented yet. Also, this code is OS X and Windows only because it uses the Clipboard. (A platform-agnostic version without the clipboard aspect is certainly possible.)\n\n== Unix-style history buffer\n\nUse "h" or "history" to view your command history, and "h! 123" to re-invoke command #123 in your buffer. "h!" with no args will run the last command.\n\n== Write command history to file or vi\n\nTo write your history to a file, use "history_write(\'/path/to/file\')". To edit your history in vi, use "history_to_vi" or its shortcut alias "hvi".\n\n== Grep classes and methods for strings\n\nClasses:\n\n  >> grep_classes("ixnum")\n  #=> ["Fixnum"]\n\n  >> grep_classes("num")\n  #=> ["Bignum", "Fixnum", "Numeric", "REXML::SyncEnumerator"]\n\nMethods:\n\n  >> "any arbitrary string".grep_methods("pretty")\n  #=> ["pretty_inspect", "pretty_print_instance_variables", "pretty_print_inspect", "pretty_print", "pretty_print_cycle"]\n\n  >> 32.grep_methods("*")\n  #=> ["*", "**"]\n\nAt some point it\'ll probably be a good idea to add regex support for these methods.\n\n== Verbosity controls for regular IRB and Rails console\n\nregular IRB: "verbose" or "v" / "quiet" or "q"\n\nRails: "log" method turns verbosity on, there isn\'t actually any method for turning it off. (Might add one at some point.)\n\n== Finder shortcuts for Rails console\n\n  user(:all) / user(1)\n\ninstead of\n\n  User.find(:all) / User.find(1)\n\nSupports arbitrarily complex finds.\n\n== Upload shortcut for Amazon S3\n\nFirst, define your secret keys in your environment variables:\n\nexport AMAZON_ACCESS_KEY_ID=\'foofoofoofoofoo\'\nexport AMAZON_SECRET_ACCESS_KEY=\'barbarbarbarbar\'\n\n(Obviously, replace those with actual values.)\n\nThen, you can use\n\n  aws_upload("bucket_name","filename")\n\nTo easily upload public-access files. This method will automatically connect to Amazon S3 for you, if your keys are defined in your environment variables. It also writes the resulting Amazon URL to your clipboard, if you\'re on OS X, so you can easily share the file with others. Note that you have to create the initial buckets manually - see amazon.rubyforge.org for details on that.\n\nA good way to use this is actually to have a default bucket, and create a further method in your .irbrc file:\n\n  def my_bucket_name(filename)\n    aws_upload("my_default_bucket",filename)\n  end\n\n== Command-line Amazon S3 upload script\n\nUtility Belt also includes amazon, a simple command-line uploader for S3. It requires that you set your Amazon environment variables (see above). The usage is:\n\n  amazon -b my_bucket_name filename other_filename\n\n(For any arbitrary number of filenames.)\n\nAnytime you want to upload a file to your default bucket on S3, for example, the "images" bucket for your blog - or the "mp3" bucket if you\'re running a blog like Projectionist - all you have to do is\n\n  amazon -b blog_files some_file.name\n\nOr\n\n  amazon --bucket blog_files some_file.name\n\nAnd you\'re good to go. Of course, if that were too many characters to type, you could always take it one step further with a shell script. For instance, in bash:\n\n  alias b1="amazon --bucket my_main_bucket $1"\n  alias b2="amazon --bucket my_other_bucket $1"\n\nAnd then you would only have to type:\n\n  b1 file.name\n\nAnd of course tab completion will handle all the typing of the file name, assuming you choose your file names deliberately ahead of time to make tab completion effective, in which case all you have to type is "b1 f[tab]" and bam.\n\n== Command-line Google shortcut (OS X only)\n\nTo pop open a new window in your default browser with Google search results for a given search term, do:\n\n  google "any given term"\n\nFor one-word terms, you can omit the quotes:\n\n  google term\n\nIf you already have the search term in your clipboard, you can just type:\n\n  google\n\n(The last approach is useful for unusual command-line error messages.)\n\n== Auto-indentation and tab completion\n\nJust type as normally. This just enables built-in but underused functionality in IRB. (The IRB default auto-indentation isn\'t perfect, but it clobbers the living hell out of no indentation at all.)\n\n== _ special variable (like Unix shell var !!)\n\nMore activation of built-in but underused functionality in IRB. _ functions like !! in Unix, with one subtle difference. Instead of re-issuing the previous command in your history, it gives you the last result of evaluating a command. This means when you start a new IRB session, _ won\'t go to your history, it\'ll just give you nil, and it means that some commands can\'t be repeated exactly. Nine out of ten times, however, it\'s pretty much the same thing.\n\nNote that when combined with the h! in the command history code, you basically have two synonyms for !! here. Neither one is an exact replica, but between the two of them, you should have what you need.\n\n== Extremely basic themes for Wirble syntax coloring\n\nUtility Belt incorporates Wirble as a dependency. Wirble provides syntax coloring. Utility Belt allows you to choose between two syntax coloring themes: Wirble\'s default, and an alternate color set for terminals with light backgrounds. The default theme is enabled by default (duh), but if you have a terminal with a light background, you can enable the light-background theme just by putting the following line of code in your .irbrc:\n\n  UtilityBelt::Themes.background(:light)\n\nTo revert back to the default, just use this:\n\n  UtilityBelt::Themes.background(:dark)\n\nTo specify an entirely new syntax color scheme, see the source code for this gem or for Wirble.\n\n== Pascal/JavaScript-style "with" statement\n\nI use this with RSpec\'s spec_helper. Instead of:\n\n  Spec::Runner.configure do |config|\n    config.use_transactional_fixtures = true\n    config.use_instantiated_fixtures  = false\n    config.fixture_path = RAILS_ROOT + \'/spec/fixtures\'\n    config.mock_with :flexmock\n  end\n\nI do this:\n\n  Spec::Runner.configure do |config|\n    with(config) do\n      use_transactional_fixtures = true\n      use_instantiated_fixtures  = false\n      fixture_path = RAILS_ROOT + \'/spec/fixtures\'\n      mock_with :flexmock\n    end\n  end\n\nNote however that this blew up once and I have no idea why. Caveat emptor, et cetera.\n\n== String#to_proc\n\nSyntactic sugar for functional programming.\n\n  (1..3).map(&\'*2\') => [2, 4, 6]\n  (1..3).map(&\'[-1, _, 0]\') => [[-1, 1, 0], [-1, 2, 0], [-1, 3, 0]]\n  (1..3).map(&\'x -> y -> x * y\').map(&\'[2]\') => [2, 4, 6]\n  (1..5).select(&\'>2\') => [3, 4, 5]\n  (1..3).map(&\'x -> y -> x * y\').map(&\'.call(2)\') => [2, 4, 6]\n  [5].map(&"(1.._).inject(&\'*\')") => [120]\n\nFor more detail see: http://weblog.raganwald.com/2007/10/stringtoproc.html\n\n== Add and subtract Hashes with + and -\n\n  {:a => :b} + {:c => :d} = {:a => :b, :c => :d}\n  {:a => :b, :c => :d} - {:c => :d} = {:a => :b}\n  {:a => :b, :c => :d} - :c = {:a => :b}\n\n  You could already do this with Arrays; now you can do it with Hashes as well. (I was kinda surprised the first time I tried to do this and realized I\'d have to write it myself.)\n\n== Grammatically-correct is_an? method - no more "is_a? Array" statements\n\n  >> [].is_an? Array\n  #=> true\n\nMost people don\'t care, but personally, "is_a? Array" drives me completely insane.\n\n== Object#not\n\nReplace this:\n\n  if !response.incomplete? && !response.invalid? && response.total > 0\n\nWith this:\n\n  if response.not.incomplete? && response.not.invalid? && response.total > 0\n\nSyntactic sugar for boolean conditions.\n\nMore detail here:\n\nhttp://blog.jayfields.com/2007/08/ruby-adding-not-method-for-readability.html\n\n== One-character exit command\n\nx\n\nBecause life is too short to type whole words.\n\n== REQUIREMENTS\n\n* ReadLine\n* Wirble\n* Amazon S3\n* Platform\n* Some features require OS X\n\n== LICENSE\n\n  (The MIT License)\n\n  Copyright (c) 2006-2007 Giles Bowkett\n  Portions Copyright (c) 2006-2007 Ben Bleything\n  Portions Copyright (c) 2006-2007 Reginald Braithwaite\n  Portions Copyright (c) 2006-2007 Gregory Brown\n  Portions Copyright (c) 2006-2007 Jamis Buck\n  Portions Copyright (c) 2006-2007 Mike Clark\n  Portions Copyright (c) 2006-2007 Jay Fields\n  Portions Copyright (c) 2005 David Heinemeier Hansson\n  Portions Copyright (c) 2006-2007 Ara T. Howard\n  Portions Copyright (c) 2006-2007 Pat Maddox\n  Portions Copyright (c) 2006-2007 Marcel Molina, Jr.\n  Portions Copyright (c) 2006-2007 Rick DeNatale\n  Portions Copyright (c) 2006-2007 Projectionist (Marcel Molina? Chad Fowler?)\n  Portions Copyright (c) 2006-2007 Dan Yoder\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \'Software\'), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Attempt to add SSL client certificate support to the restful_authenctication plugin b'by labria:\n\nThis is a fork of the restful_authentication plugin including client certificate logon.\nIt\'s still totally raw, has too much hardcoded stuff and lacks some things, but you know,\n"release early, release often" =)\nIt add a new option, --use-certificates\n\nFirst of all, create a dir named "cert" in your rails root. I frankly don\'t know how to do\nit from the generator, I\'ll fix this later.\n\nSecond, after installing the plugin, edit the config/initializers/cert_config.rb with some\nof your data. Please, don\'t change the paths just yet. Actually, you can leave the defaults,\nexcept for domainname and hostname, you better hadrcode those to the server where you\'ll be\nusing this. Now, run "rake cert:create_ca", this will create theCA needed to sign your user \ncertficates. If you don\'t have a server certificate for your domain, you can create a self-\nsigned one using "rake cert:server_cert", using the options from the bottom of cert_config.rb\n\nNow, you have to configure your server. This is the tricky part. I\'m using nginx, and here\'s\nwhat i did:\nIf the user comes with https without a cert, redirect him back to http. If he does have a\ncert, pass its subject string as the HTTP_X_SSL_CLIENT_S_DN header. You can see the config\nin one of my posts on the subject at http://blog.startika.com\nSo what you have to do, is to make your server pass the certificate string as X_SSL_CLIENT_S_DN\nto the app. I\'m not sure how it\'s done with other servers, please send me instructions =)\n\nSo, now you have a UsersController#get_cert action, which gives the user his certificate in\na p12 file, and the https://youserver.com/session/new page which auto-logons the user if he\npresents his certificate. Not much, but it\'s still nice to provide such things.\n\nIf you have any questions, comments, suggestions or correction please contact me any way \nyou please, by email at labria@startika.com, for example.\n\n\nOriginal readme follows.\nRestful Authentication Generator\n====\n\nThis is a basic restful authentication generator for rails, taken \nfrom acts as authenticated.  Currently it requires Rails 1.2.6 or above.\n\nTo use:\n\n  ./script/generate authenticated user sessions \\\n\t\t--include-activation \\\n\t\t--stateful\n\nThe first parameter specifies the model that gets created in signup\n(typically a user or account model).  A model with migration is \ncreated, as well as a basic controller with the create method.\n\nThe second parameter specifies the sessions controller name.  This is\nthe controller that handles the actual login/logout function on the \nsite.\n\nThe third parameter (--include-activation) generates the code for a \nActionMailer and its respective Activation Code through email.\n\nThe fourth (--stateful) builds in support for acts_as_state_machine\nand generates activation code.  This was taken from:\n\nhttp://www.vaporbase.com/postings/stateful_authentication\n\nYou can pass --skip-migration to skip the user migration.\n\nIf you\'re using acts_as_state_machine, define your users resource like this:\n\n\tmap.resources :users, :member => { :suspend   => :put,\n                                     :unsuspend => :put,\n                                     :purge     => :delete }\n\nAlso, add an observer to config/environment.rb if you chose the \n--include-activation option\n\n  config.active_record.observers = :user_observer # or whatever you \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# named your model\n\nSecurity Alert\n====\n\nI introduced a change to the model controller that\'s been tripping \nfolks up on Rails 2.0.  The change was added as a suggestion to help\ncombat session fixation attacks.  However, this resets the Form \nAuthentication token used by Request Forgery Protection.  I\'ve left\nit out now, since Rails 1.2.6 and Rails 2.0 will both stop session\nfixation attacks anyway.'
A utility to supplement GNU Screen, easing use of custom configurations, packaged as a RubyGem. b"The documentation is in Readme.textile, but you're better off reading it here: http://ruby-screen.rubyforge.org/\n"
Gem for parsing names into first, last, middle, prefix and suffix b"= name_parser\n\nhttp://github.com/bricooke/name_parser\n\n== DESCRIPTION:\n\nProvides a NameParser class that takes a single string and provides .first_name, .last_name, .initial functions for the parsed name\n\n== FEATURES/PROBLEMS:\n\n== SYNOPSIS:\n\n== REQUIREMENTS:\n\n== INSTALL:\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Brian Cooke\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
nonlinear robust optimizer of zone-based parametric GMVE coefficients in Matlab  
copy of ext_scaffold b"ExtScaffold\n===========\n\nScaffolds an entire resource, from model and migration to controller and\nviews, along with a full test suite, just like the standard Rails scaffold\ngenerator. The ext_scaffold generator uses the Ext Javascript framwork to \nbuild the GUI elements (forms and tables).\n\nPass the name of the model, either CamelCased or under_scored, as the first\nargument, and an optional list of attribute pairs.\n\nAttribute pairs are column_name:sql_type arguments specifying the\nmodel's attributes. Timestamps are added by default, so you don't have to\nspecify them by hand as 'created_at:datetime updated_at:datetime'.\n\nFor example, `ext_scaffold post title:string body:text published:boolean`\ngives you a model with those three attributes, a controller that handles\nthe create/show/update/destroy, Ext forms to create and edit your posts, and\nan Ext Grid index that lists them all, as well as a map.resources :posts\ndeclaration in config/routes.rb.\n\n\nPrerequisites\n=============\n\nYou need to download the Ext Javascript framework from\n\n`http://extjs.com/download`,\n\nand unzip it into `#{RAILS_ROOT}/public/ext`. Ext_scaffold was tested\nagainst version 2.0.1 of the Ext framework.\n\n\nInstallation\n============\n\n`script/plugin install http://rug-b.rubyforge.org/svn/ext_scaffold`\n\n\nExample\n=======\n\n`./script/generate ext_scaffold post` # no attributes, view will be anemic\n`./script/generate ext_scaffold post title:string body:text published:boolean`\n`./script/generate ext_scaffold purchase order_id:integer amount:decimal`\n\n\nCopyright (c) 2008 martin.rehfeld@glnetworks.de, released under the MIT license"
Rails application for building event lists and calendars using the Spongecell API b'=== Welcome to Spongewolf\nhttp://spongewolf.com\n\nThis is an example Rails application that uses the Spongecell API. It is intended to be as simple as possible. There is no database and javascript will be kept to a minimum.\n\nCurrently the primary function of Spongewolf is to create pretty calendar and event list widgets.\n\nThere are 3 widgets\n1. Flash List View\n2. Flash Social Network Widget (used by Shakira)\n3. HTML Boxed Calendar\n\n== Features\nCreating a Spongecell account\nViewing calendars\nViewing events\nCreating a pre-defined event\nCreating pre-defined widgets\n\n== Feature Requests\nCalendar CRUD\nEvent CRUD\nWidget CRUD\n\nDependencies\nhaml (must be included as a gem)\nRails 2.0 (inclued in vendor so it will run on Media Temple)\n\nReferences\nhttp://spongecell.com\nhttp://spongecell.com/api/help\n\nThe repository was created on February 26, 2008 git://github.com/ckhsponge/spongewolf.git\n\nFor questions, comments or answers contact spongewolf@spongecell.com\n\nThis product is *Beerware, if you like it buy yourself a beer.\n-Chris Hobbs, Spongecell\n\n*Beerware idea stolen from my BitTorrent client\n'
an amazing widget manager for an awesome window manager b'= An amazing widget manager for an awesome window manager\n\n* Feeds information to statusbars in the {awesome window manager}[http://awesome.naquadah.org/]\n* Framework for creating widgets\n* Centralized configuration\n\nWidgets included in the core:\n\n*AcAdapter*:: AC adapter status\n*Alsa*:: Various data for the ALSA mixer\n*Battery*:: Remaining battery power in percentage\n*CpuInfo*:: CPU Information\n*CpuUsage*:: CPU usage\n*Clock*:: Displays date and time\n*File*:: Information for a file\n*FileSystem*:: Various filesystem information\n*Gmail*:: GMail checker\n*Moc*:: Music On Console status\n*Mpd*:: MPD Information\n*Maildir*:: Mail count in maildirs\n*Memory*:: Various memory related data\n*NetTraffic*:: Network traffic information\n*Noop*:: Does nothing\n*Pacman*:: Available upgrades in the Pacman package manager\n*Raggle*:: Unread posts in raggle\n*Sup*:: Mail count in sup for the specified search terms\n\n== Installation procedures\n\nTo install, see <tt>ruby setup.rb --help</tt>. Quick and dirty:\n\n  # ruby setup.rb all\n\nIf you wish to install with Rubygems, build the gempackage and install it locally.\n\n  % gem build amazing.gemspec\n  # gem install amazing-0.1.gem\n\nYou can also install it remotely from the Rubyforge servers (not yet).\n\n  # gem install amazing\n\n== Configuration\n\nConfiguration of amazing is {documented at the wiki}[http://github.com/dag/amazing/wikis/configuration].\n\n== Git repositories\n\n*GitHub*:: http://github.com/dag/amazing\n*Gitorious*:: http://gitorious.org/projects/amazing\n\n== Mail list\n\n<b>amazing-talk</b>:: http://groups.google.com/group/amazing-talk\n\n== Issues\n*Lighthouse*:: http://amazing.lighthouseapp.com\n\n== Copying\n\nCopyright 2008 Dag Odenhall <dag.odenhall@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the "License").\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'
Ruby interface to the Merlin API b'== Notes\n\nThis code has come straight from a production Rails app. It will soon be a Rails plugin, but for now, I suggest putting it in the lib/ directory of your Rails project.\n\nYou must have a valid Merlin account to test or use this code.\n\n== ID data via Merlin\n\nTo use the IDDetail classes, load irb or script/console. You must "require \'id_detail\'" to proceed. Once you have the libraries required, there are a few simple statements to call the Merlin API given a SSN:\n\nsub = API::IDDetail::Subject.new("your SSN")\nsub.locate\n\nAfter calling the locate() method, the sub object will have a parsed set of data in its identity attribute - \'sub.identity\' to access.\n\n== Configuration\n\nThe id_detail directory must contain a file called \'config.yml\' using the following format:\n\n# Merlin API username and password\nusername: your_api_username\npassword: your_api_password\n\nIt is recommended that you symlink this file to the directory after deploy for security reasons. This file is also required for development mode - just fill with dummy data.\n\n== Tests\n\nTo run the rspec tests, make sure you are in the id_detail directory and type \'spec -cfs spec/\' - these tests do not hit the API directly, they use fixtures.'
Misc GUI widget factories for World of Warcraft addons 
Ruby interface to the IDology API b"== Notes\n\nThis code has come straight from a production Rails app. It will soon be a Rails plugin, but for now, I suggest putting it in the lib/ directory of your Rails project.\n\nYou must have a valid IDology account to test or use this API library.\n\n== ID Verification via IDology\n\nAssuming you have a local proxy setup to the development server - and the development server's IP is authorized to access the IDology API - here is a curl command to test whether or not the API is working correctly. In this example, the socks v5 proxy is using 'ssh -D localhost:1080' to setup a temporary proxy between the development machine and the development server. Note that the username / password must be correct.\n\nThis curl command will perform a search for 'Mickey Mouse' - a valid test record in the IDology system\n\ncurl -v --socks http://127.0.0.1:1080 -d username=test -d password=test -d firstName=mickey -d lastName=mouse -d address='15 MIDLAND AVE APT' -d city=paramus -d state=NJ -d zip=07652 https://the.idology.api.url\n\n\n== Configuration\n\nThe id_verification directory must contain a file called 'config.yml' using the following format:\n\n# IDology API username and password\nusername: your_api_username\npassword: your_api_password\n\nIt is recommended that you symlink this file to the directory after deploy for security reasons. This file is also required for development mode - just fill with dummy data.\n\n== Tests\n\nTo run the rspec tests, make sure you are in the lib/api/id_verification directory and type 'spec -cfs spec/' - these tests do not hit the API directly, they use fixtures.\n"
 b'README for LuaCLR 0.1 Alpha\n\n1. What is LuaCLR\n\nLuaCLR is a compiler for the Lua 5.1 language that targets the Microsoft\nCommon Language Runtime (CLR). Right now it also works on Mono, but\nthis is not guaranteed in the future. Also, the compiler is not self-hosting,\nwhich means it depends on the Lua interpreter, but as it\'s implemented in\na mix of Lua and C# it will be completely self-hosted when complete.\n\nThe compiler aims for completeness (implementing as much of Lua 5.1, including\nthe standard library, as possible) and speed (being faster than the Lua VM, and\napproaching LuaJIT). Also it should provide transparent interfacing between\nLua and the rest of the CLR (at least as good as what LuaInterface provides).\n\nThe current version is incomplete, and lacks most of the Lua standard library,\nas well as integration with the rest of the CLR. The design is also not fixed, and\nwill probably change in the near future.\n\nLuaCLR is free software. The contents of this distribution are Copyright\n2007-2008 Fabio Mascarenhas, and released through the MIT license.\n\n2. Installation\n\nJust do "make all" in Linux, or "nmake -f Makefile.win all" in Windows.\n\n3. Running\n\nRun the compile shell script/bat file to compile a Lua file. You should\nrun it from the root path of LuaCLR:\n\ncompile myscript.lua\n\nThis will generate a myscript.dll file. You can run it with run.exe:\n\nrun.exe myscript\n\nYou will probably see an error message, as there is a lot of functionality\nis still missing. :-)\n\n4. Credits\n\nLuaCLR is designed by Fabio Mascarenhas. You can contact the author\nat mascarenhas@acm.org.\n\n'
Core data server for BioBrick format 
BookEater.net 
Facon is a mocking library in the spirit of the Bacon spec library. Small, compact, and works with Bacon. b'Facon\n=====\n\nFacon is a mocking library in the spirit of the [Bacon](https://github.com/chneukirchen/bacon) spec library. Small, compact, and works with [Bacon](https://github.com/chneukirchen/bacon) and [MacBacon](https://github.com/alloy/MacBacon).\n\n[![Build Status](https://travis-ci.org/chuyeow/facon.png)](https://travis-ci.org/chuyeow/facon)\n\n[![Coverage Status](https://coveralls.io/repos/chuyeow/facon/badge.png)](https://coveralls.io/r/chuyeow/facon)\n\nSynopsis\n--------\n\nTo use Facon with [Bacon](https://github.com/chneukirchen/bacon), simply `require \'facon\'` and you\'re done.\n\nYou can now write [Bacon](https://github.com/chneukirchen/bacon) specs like this (in RSpec-like style):\n\n```ruby\n  require \'bacon\'\n  require \'facon\'\n\n  describe \'PersonController\' do\n    before do\n      @konata = mock(\'konata\', :id => 1, :name => \'Konata Izumi\')\n      @kagami = mock(\'kagami\', :id => 2, :name => \'Kagami Hiiragi\')\n    end\n\n    it "should find all people on GET to \'index\'" do\n      Person.should.receive(:find).with(:all).and_return([@konata, @kagami])\n\n      get(\'/people/index\')\n    end\n\n    it "should find the person with id of 1 on Get to \'show/1\'" do\n      Person.should.receive(:find).with(1).and_return(@konata)\n\n      get(\'/people/show/1\')\n    end\n\n    it "knows how many times we call a method" do\n      Person.should.receive(:find).at_least(3)\n\n      Person.list\n    end\n\n    it "can use at_most" do\n      Person.should.receive(:find).at_most(3)\n\n      Person.list\n    end\n  end\n```\n\nFor now, more examples can be found in the specs included with the Facon gem. I promise to get better examples into the documentation!\n\nSee Facon::Baconize for more documentation on using Facon with [Bacon](https://github.com/chneukirchen/bacon).\n\nRequirements\n------------\n\n* Ruby (check [Travis CI builds](https://travis-ci.org/chuyeow/facon) for which versions are supported)\n* [Bacon](https://github.com/chneukirchen/bacon) (optional, required for running specs)\n\nCompatibility with Bacon\n------------------------\n\nWhen used with Bacon, Facon uses some Bacon hooks, which unfortunately causes some compatibility issues with new versions of Bacon. Use this compatibility chart to find out which versions of Facon to install when running with Bacon.\n\n```\nFacon version -- Bacon version\n<= 0.3.x      -- 0.9 (only tested with 0.9 but might work with earlier versions of Bacon)\n0.4           -- 1.0, 1.1\n```\n\nInstallation\n------------\n\nSimply install the gem:\n  `gem install facon`\n\nOr add it to your Gemfile:\n  `gem \'facon\'`\n\nThe Source Code\n---------------\n\nYou can get the latest trunk from the Git repository on Github:\n  <https://github.com/chuyeow/facon>\n\nTodos\n-----\n\n* test/unit and RSpec integration.\n* Remove the `$facon_mocks` global.\n* Throw away unnecessary code.\n* Implement `exactly` expectation.\n\nContributors\n------------\n\n* [James Tucker](https://github.com/raggi) for #times, #once, #never expectation matchers.\n* [Peter Kim](https://github.com/petejkim) for [MacBacon](https://github.com/alloy/MacBacon) support.\n* [Yossef Mendelssohn](https://github.com/ymendel) for Ruby 1.9.2 compatibility fixes.\n* [Ivan Acosta-Rubio](https://github.com/ivanacostarubio) for at_most and at_least expectations.\n\nThanks to\n---------\n\n* [RSpec](http://rspec.info/) for creating spec/mocks, from which a lot of the code for Facon is stolen.\n* [Christian Neukirchen]((https://github.com/chneukirchen) for creating Bacon.\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2008 Cheah Chu Yeow\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/chuyeow/facon/trend.png)](https://bitdeli.com/free "Bitdeli Badge")\n[![Analytics](https://ga-beacon.appspot.com/UA-46828034-1/facon/readme)](https://github.com/igrigorik/ga-beacon)\n'
A Rakefile that makes static website creation and deploying stupid simple 
Initial source code for ruby nomic games b"This is a nomic, written in camping.\n\nrunnomic is an altered version of the camping server using mongrel only,\nrequiring everything necessary and then chrooting and setuiding to hopefully\nstop people messing with your system too much.\n\nTo run:\nInstall camping.\nMake sure you have diff and patch in your path.\nRun camping nomic.rb\n\nTo run semi-securely:\nSet up a chroot environment in which diff and patch can be run.\n\nldd /usr/bin/diff\nldd /usr/bin/patch\n\nmkdir lib\nmkdir bin\ncopy diff and patch into bin\ncopy the libs required for them into lib\nmake sure permissions are right\n\nedit runnomic to change to the right uid for the user you want to run as\n\nsudo ruby runnomic -d nomic.db nomic.rb\n\npoke some stuff 'til it works, probably involving copying more libs or just\ngiving up and copying the whole of /lib.\n\n\n"
A quick and dirty dependency finder for your Ruby projects b'README'
Alex Coles Portfolio b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
NO LONGER SUPPORTED - Ruby interface to the Clickatell SMS Gateway API b'5 Aug 2013 - This library is no longer supported. \n\nh1. Clickatell SMS Library\n\nTo use this gem, you will need sign up for an account at www.clickatell.com. Once you are registered and logged into your account centre, you should add an HTTP API connection to your account. This will give you your API_ID.\n\nh2. Basic Usage\n\nYou will need your API_ID as well as your account username and password.\n\n<pre>\n<code>\n  require \'rubygems\'\n  require \'clickatell\'\n\n  api = Clickatell::API.authenticate(\'your_api_id\', \'your_username\', \'your_password\')\n  api.send_message(\'447771234567\', \'Hello from clickatell\')\n</code>\n</pre>\n\nTo send a message to multiple recipients, simply pass in an array of numbers.\n\n<pre>\n<code>\n  api.send_message([\'447771234567\', \'447771234568\'], \'Hello from clickatell\')\n</code>\n</pre>\n\nh2. HTTP Proxy\n\nYou can configure the library to use a HTTP proxy when communicating with Clickatell.\n\n<pre>\n<code>\n  Clickatell::API.proxy_host     = \'my.proxy.com\'\n  Clickatell::API.proxy_port     = 1234\n  Clickatell::API.proxy_username = \'joeschlub\'\n  Clickatell::API.proxy_password = \'secret\'\n</code>\n</pre>\n\nh2. Command-line SMS Utility\n\nThe Clickatell gem also comes with a command-line utility that will allow you to send an SMS directly from the command-line.\n\nYou will need to create a YAML configuration file in your home directory, in a file called .clickatell that resembles the following:\n\n<pre>\n<code>\n  # ~/.clickatell\n  api_key: your_api_id\n  username: your_username\n  password: your_password\n</code>\n</pre>\n\nYou can then use the sms utility to send a message to a single recipient:\n\n<pre>\n<code>\n  sms 447771234567 \'Hello from clickatell\'\n</code>\n</pre>\n\nAlternatively, you can specify the username and password as a command line option. Run +sms+ without any arguments for a full list of options.\n\nThe sms utility also supports multiple, comma-separated recipients (up to 100).\n\n<pre>\n<code>\n  sms 447771111111,447772222222 "Hello everyone"\n</code>\n</pre>\n\nSee http://clickatell.rubyforge.org for further instructions.\n'
Haskell-style monad do-notation for Ruby b'Haskell-style monad do-notation for Ruby\n========================================\n\nExample:\n\n    require \'do_notation\'\n\n    class Array\n      include Monad\n\n      def self.unit x\n        [x]\n      end\n\n      def bind &f\n        map(&f).inject([], &:+)\n      end\n    end\n\n    Array.run do\n      x <- ["first", "second"]\n      y <- ["once", "twice"]\n\n      unit("#{x} cousin #{y} removed")\n    end\n\nThe above code returns the array:\n\n    ["first cousin once removed",\n     "first cousin twice removed",\n     "second cousin once removed",\n     "second cousin twice removed"]\n\nFor more examples, see the test suite.\n\nInstallation\n============\n\n    gem install do_notation\n\nBy Aanand Prasad (aanand.prasad@gmail.com)\n'
A Web Photo Gallery, written with Rails 2.0. Pictrails can manage several photo galleries. b'h1. Pictrails\n\nA Web Photo Gallery, written with Rails 2.1. Pictrails can manage several photo galleries.\n\nh2. Features\n\n * Create several Galleries\n * Create Galleries like child of another Gallery\n * Add several pictures in a Gallery\n * Create a gallery with define a directory in same server of pictrails if the\n   directory has several directories into, all of this directory are child of\n   master Gallery\n * Admin interface with login to add/edit/delete Galleries and Pictures\n * Define the thumbnails and pictures size in settings interface\n * Delete the cache page in settings interface\n * Define the number of pictures by pagination Gallery\n * Define the number of gallery by pagination of Gallery\'s list\n * Define a list of tag for pictures\n * View a sidebar with all gallery in it tree\n * Navigate with a breadcrumb\n * View a cloud tag of all gallery\n * Navigate by tag\n * Comments on each pictures\n\nh2. Requirements\n\nCurrently you need all of those things to get Pictrails to run:\n\n * Ruby On Rails 2.1.x\n * Ruby of 1.8.6 or greater\n * A database supported by Rails ActiveRecord (MySQL, DB2, SQLite3, ...)\n * Ruby drivers for your database (obviously out of the box with Rails)\n * Redcloth gem\n * A gem of an image-handling API like :\n ** ImageScience\n ** RMagick\n ** Mini-magick\n\nh2. Installing\n\nWith the tar.gz or any other archive:\n\n * Extract sources to a folder\n * Create a database.yml file in the config directory. You can copy the database.yml.example\n * Create your databases: <kbd>rake db:create:all</kbd>\n * Migrate your database: <kbd>rake db:migrate</kbd>\n * Start the server in production mode : <kbd>ruby script/server -e production</kbd>\n\nh2. Updating\n\nWith the tar.gz or any other archive:\n\n * Extract sources and replace all in the old folder\n * Stop the server\n * Migrate your database: <kbd>rake db:migrate</kbd>\n * Start the server in production mode : <kbd>ruby script/server -e production</kbd>\n\nh2. Demo Website\n\nA demo website of Pictrails is available to the "demo of pictrails":http://pictrails.shingara.fr\n\nThe "admin part":http://pictrails.shingara.fr/admin has like login/pass : admin/pictrails\n\nh2. Information about this project\n\nPictrails is actually consider like an Beta version, and is under development.\n\nAll contributions are welcome. \n\nI suck in design, I know it and I am sorry but I will really be happy if anyone could\nhelp me.\n\nIf you want to contribute, all work is made under a git repository. You can clone the \nsource with the following command :\n\n<kbd>git clone git://github.com/shingara/pictrails.git</kbd>\n\nAfter a clone you need update the submodule :\n\n<kbd>git submodule init && git submodule update</kbd>\n\nA "redmine development platform":http://dev.shingara.fr/projects/show/3 is\nused. Feel free to post your feature requests and defects report.\n\nh2. License\n\nThis code is free to use under the terms of the MIT license (provided with sources).\n'
Annotate ActiveRecord models as a gem b'== Annotate (aka AnnotateModels)\n\n{<img src="https://badge.fury.io/rb/annotate.svg" alt="Gem Version" />}[http://badge.fury.io/rb/annotate]\n{<img src="https://travis-ci.org/ctran/annotate_models.png" />}[https://travis-ci.org/ctran/annotate_models]\n{<img src="https://gemnasium.com/ctran/annotate_models.png" />}[https://gemnasium.com/ctran/annotate_models]\n\nAdd a comment summarizing the current schema to the top or bottom of each of\nyour...\n\n- ActiveRecord models\n- Fixture files\n- Tests and Specs\n- Object Daddy exemplars\n- Machinist blueprints\n- Fabrication fabricators\n- Thoughtbot\'s factory_girl factories, i.e. the (spec|test)/factories/<model>_factory.rb files\n- routes.rb file (for Rails projects)\n\nThe schema comment looks like this:\n\n   # == Schema Info\n   #\n   # Table name: line_items\n   #\n   #  id                  :integer(11)    not null, primary key\n   #  quantity            :integer(11)    not null\n   #  product_id          :integer(11)    not null\n   #  unit_price          :float\n   #  order_id            :integer(11)\n   #\n\n    class LineItem < ActiveRecord::Base\n      belongs_to :product\n     . . .\n\nIt also annotates geometrical columns, geom type and srid, when using\n+SpatialAdapter+, +PostgisAdapter+ or +PostGISAdapter+:\n\n   # == Schema Info\n   #\n   # Table name: trips\n   #\n   #  local           :geometry        point, 4326\n   #  path            :geometry        line_string, 4326\n\nAlso, if you pass the -r option, it\'ll annotate routes.rb with the output of\n+rake routes+.\n\n\n== Install\n\nInto Gemfile from rubygems.org:\n\n    gem \'annotate\'\n\nInto Gemfile from Github:\n\n    gem \'annotate\', github: \'ctran/annotate_models\'\n\nInto environment gems from rubygems.org:\n\n    gem install annotate\n\nInto environment gems from Github checkout:\n\n    git clone git://github.com/ctran/annotate_models.git annotate_models\n    cd annotate_models\n    rake build\n    gem install pkg/annotate-*.gem\n\n\n== Usage\n\n(If you used the Gemfile install, prefix the below commands with +bundle exec+.)\n\n=== Usage in Rails\n\nTo annotate all your models, tests, fixtures, and factories:\n\n    cd /path/to/app\n    annotate\n\nTo annotate just your models, tests, and factories:\n\n    annotate --exclude fixtures\n\nTo annotate just your models:\n\n    annotate --exclude tests,fixtures,factories,serializers\n\nTo annotate routes.rb:\n\n    annotate --routes\n\nTo remove model/test/fixture/factory/serializer annotations:\n\n    annotate --delete\n\nTo remove routes.rb annotations:\n\n    annotate --routes --delete\n\nTo automatically annotate every time you run +db:migrate+, either run +rails g annotate:install+ or add +Annotate.load_tasks+ to your `Rakefile`. See the [configuration in Rails](#configuration-in-rails) section for more info.\n\n=== Usage Outside of Rails\n\nEverything above applies, except that +--routes+ is not meaningful, and you will\nprobably need to explicitly set one or more +--require+ option(s), and/or one\nor more +--model-dir+ options to inform annotate about the structure of your\nproject and help it bootstrap and load the relevant code.\n\n\n== Configuration\n\nIf you want to always skip annotations on a particular model, add this string\nanywhere in the file:\n\n    # -*- SkipSchemaAnnotations\n\n=== Configuration in Rails\n\nTo generate a configuration file (in the form of a +.rake+ file), to set\ndefault options:\n\n    rails g annotate:install\n\nEdit this file to control things like output format, where annotations are\nadded (top or bottom of file), and in which artifacts.\n\nThe generated rakefile +lib/tasks/auto_annotate_models.rake+ also contains\n`Annotate.load_tasks`. This adds a few rake tasks which duplicate command-line\nfunctionality:\n\n    rake annotate_models                          # Add schema information (as comments) to model and fixture files\n    rake annotate_routes                          # Adds the route map to routes.rb\n    rake remove_annotation                        # Remove schema information from model and fixture files\n\nBy default, once you\'ve generated a configuration file, annotate will be\nexecuted whenever you run +rake db:migrate+ (but only in development mode).\nIf you want to disable this behavior permanently, edit the +.rake+ file and\nchange:\n\n    \'skip_on_db_migrate\'   => \'false\',\n\nTo:\n\n    \'skip_on_db_migrate\'   => \'true\',\n\nIf you want to run +rake db:migrate+ as a one-off without running annotate,\nyou can do so with a simple environment variable, instead of editing the\n+.rake+ file:\n\n    skip_on_db_migrate=1 rake db:migrate\n\n\n== Options\n\n    Usage: annotate [options] [model_file]*\n        -d, --delete                     Remove annotations from all model files or the routes.rb file\n        -p, --position [before|top|after|bottom]    Place the annotations at the top (before) or the bottom (after) of the model/test/fixture/factory/routes file(s)\n            --pc, --position-in-class [before|top|after|bottom]\n                                         Place the annotations at the top (before) or the bottom (after) of the model file\n            --pf, --position-in-factory [before|top|after|bottom]\n                                         Place the annotations at the top (before) or the bottom (after) of any factory files\n            --px, --position-in-fixture [before|top|after|bottom]\n                                         Place the annotations at the top (before) or the bottom (after) of any fixture files\n            --pt, --position-in-test [before|top|after|bottom]\n                                         Place the annotations at the top (before) or the bottom (after) of any test files\n            --pr, --position-in-routes [before|top|after|bottom]\n                                         Place the annotations at the top (before) or the bottom (after) of the routes.rb file\n            --ps, --position-in-serializer [before|top|after|bottom]\n                                         Place the annotations at the top (before) or the bottom (after) of the serializer files\n            --w, --wrapper STR           Wrap annotation with the text passed as parameter.\n                                         If --w option is used, the same text will be used as opening and closing\n            --wo, --wrapper-open STR     Annotation wrapper opening.\n            --wc, --wrapper-close STR    Annotation wrapper closing\n        -r, --routes                     Annotate routes.rb with the output of \'rake routes\'\n        -v, --version                    Show the current version of this gem\n        -m, --show-migration             Include the migration version number in the annotation\n        -i, --show-indexes               List the table\'s database indexes in the annotation\n        -k, --show-foreign-keys          List the table\'s foreign key constraints in the annotation\n        -s, --simple-indexes             Concat the column\'s related indexes in the annotation\n            --model-dir dir              Annotate model files stored in dir rather than app/models, separate multiple dirs with comas\n            --ignore-model-subdirects    Ignore subdirectories of the models directory\n            --sort                       Sort columns alphabetically, rather than in creation order\n        -R, --require path               Additional file to require before loading models, may be used multiple times\n        -e [tests,fixtures,factories,serializers],\n            --exclude                    Do not annotate fixtures, test files, factories, and/or serializers\n        -f [bare|rdoc|markdown],         Render Schema Infomation as plain/RDoc/Markdown\n            --format\n            --force                      Force new annotations even if there are no changes.\n            --timestamp                  Include timestamp in (routes) annotation\n            --trace                      If unable to annotate a file, print the full stack trace, not just the exception message.\n        -I, --ignore-columns REGEX       don\'t annotate columns that match a given REGEX (i.e., `annotate -I \'^(id|updated_at|created_at)\'`\n\n\n\n== Sorting\n\nBy default, columns will be sorted in database order (i.e. the order in which\nmigrations were run).\n\nIf you prefer to sort alphabetically so that the results of\nannotation are consistent regardless of what order migrations are executed in,\nuse +--sort+.\n\n\n== Markdown\n\nThe format produced is actually MultiMarkdown, making use of the syntax\nextension for tables.  It\'s recommended you use +kramdown+ as your parser if\nyou want to use this format.  If you\'re using +yard+ to generate documentation,\nspecify a format of markdown with +kramdown+ as the provider by adding this to\nyour +.yardopts+ file:\n\n    --markup markdown\n    --markup-provider kramdown\n\nBe sure to add this to your +Gemfile+ as well:\n\n    gem \'kramdown\', :groups => [:development], :require => false\n\n\n== WARNING\n\n<b>Don\'t add text after an automatically-created comment block.</b> This tool\nwill blow away the initial/final comment block in your models if it looks like\nit was previously added by this gem.\n\nBe sure to check the changes that this tool makes! If you are using Git,\nyou may simply check your project\'s status after running +annotate+:\n\n    $ git status\n\nIf you are not using a VCS (like Git, Subversion or similar), please tread\nextra carefully, and consider using one.\n\n== Links\n\n- Factory Girl: http://github.com/thoughtbot/factory_girl\n- Object Daddy: http://github.com/flogic/object_daddy\n- Machinist: http://github.com/notahat/machinist\n- Fabrication: http://github.com/paulelliott/fabrication\n- SpatialAdapter: http://github.com/pdeffendol/spatial_adapter\n- PostgisAdapter: http://github.com/nofxx/postgis_adapter\n- PostGISAdapter: https://github.com/dazuma/activerecord-postgis-adapter\n\n\n== License\n\nReleased under the same license as Ruby. No Support. No Warranty.\n\n== Authors\n\n{See AUTHORS.rdoc}[link:AUTHORS.rdoc].\n'
Create  b'Blueprint Layout\n===============\n\nblueprint_layout plugin is a code generator that\n\n\nExample\n=======\n\nscript/generate blueprint_layout\n\n\nCopyright (c) 2008 Juan Alvarez, released under the MIT license\n\n\n*******************************\nBlueprint CSS Framework Readme\n*******************************\n\n* URL:    code.google.com/p/blueprintcss\n* List:   groups.google.com/group/blueprintcss\n* News:   bjorkoy.com\n\n----------------------------------------------------------------\n\nWelcome to Blueprint! This is a CSS framework designed to \ncut down on your CSS development time. It gives you a solid \nfoundation to build your own CSS on. Here are some of the \nfeatures BP provides out-of-the-box:\n\n* An easily customizable grid\n* Sensible default typography\n* A typographic baseline\n* Perfected browser CSS reset\n* A stylesheet for printing\n* Absolutely no bloat!\n\n\nSetup instructions\n----------------------------------------------------------------\n\nHere\'s how you set up Blueprint on your site. \n\n1) Upload the "blueprint" folder in this folder to your server, \n   and place it in whatever folder you\'d like. A good choice \n   would be your CSS folder.\n\n2) Add the following three lines to every <head> section of your\n   site. Make sure the three href paths are correct (here, BP is in my CSS folder):\n\n   <link rel="stylesheet" href="css/blueprint/screen.css" type="text/css" media="screen, projection">\n   <link rel="stylesheet" href="css/blueprint/print.css" type="text/css" media="print">\t\n   <!--[if IE]><link rel="stylesheet" href="css/blueprint/lib/ie.css" type="text/css" media="screen, projection"><![endif]-->\n\n3) See screen.css for further configuration options, including \n   advanced functionality through plugins.\n   \n4) To use the compressed version on a live site, edit the href \n   paths above to point to the blueprint/compressed directory, \n   where you\'ll find compressed versions of screen.css and print.css.    \n   \n\nHow to use Blueprint\n----------------------------------------------------------------\n\nHere\'s a quick primer on how to use BP:\nhttp://code.google.com/p/blueprintcss/wiki/Tutorial\n\nEach CSS file is also heavily commented, so you\'ll \nlearn a lot by reading through them.\n\n\nFiles in Blueprint\n----------------------------------------------------------------\n\nThe framework has a few files you should check out. Every file\ncontains lots of (hopefully) clarifying comments.\n\n\nMain files:\n\n* blueprint/screen.css\n  This is the main file of the framework. It imports other CSS \n  files from the "lib" directory, and should be included on \n  every page. We also call it the the configuration file, \n  although you don\'t actually have to modify it.\n\n* blueprint/print.css\n  This file sets some default print rules, so that printed versions\n  of your site looks better than they usually would. It should be\n  included on every page.\n\n\nCore files:\n\n* blueprint/lib/grid.css\n  This file sets up the grid (it\'s true). It has a lot of classes\n  you apply to divs to set up any sort of column-based grid.\n\n* blueprint/lib/typography.css\n  This file sets some default typography. It also has a few\n  methods for some really fancy stuff to do with your text.\n\n* blueprint/lib/reset.css\n  This file resets CSS values that browsers tend to set for you.\n\n* blueprint/compressed/screen.css & \n  blueprint/compressed/print.css\n  A compressed version of the core and print files. Use this on \n  every live site. Use the link tags in the HTML to include these.\n\n* blueprint/lib/ie.css\n  Contains every hack for Internet Explorer,so that our core \n  files stay sweet and valid.\n\n\nOther:\n\n* blueprint/plugins/\n  Contains additional functionality in the form of simple plugins\n  for Blueprint. See individual readme files in the directory\n  of each plugin for further instructions.\n\n* tests/\n  Contains html files which tests most aspects of Blueprint.\n  Open tests/index.html for further instructions.\n\n\nCredits\n----------------------------------------------------------------\n\nMany parts of BP are directly inspired by other peoples work. \nYou may thank them for their brilliance. However, *do not* ask \nthem for support or any kind of help with BP.\n\n* Jeff Croft                [jeffcroft.com]\n* Nathan Borror             [playgroundblues.com]\n* Christian Metts           [mintchaos.com]\n* Wilson Miner              [wilsonminer.com]\n* The Typogrify Project     [code.google.com/p/typogrify]\n* Eric Meyer                [meyerweb.com/eric]\n* Angus Turnbull            [twinhelix.com]\n* Khoi Vinh                 [subtraction.com]\n\nQuestions, comments, suggestions or bug reports go to\nolav at bjorkoy dot com. \n\nThanks for your interest!\n'
Tema para wordpress 
Travis Vachon's clone of the Cosmo Subversion tree 
A Subversion post-commit hook that will edit FogBugz cases using Trac-like keywords b'README'
HTML Abstraction Markup Language - A Markup Haiku b'= Haml and Sass\n\nHaml and Sass are templating engines\nfor the two most common types of documents on the web:\nHTML and CSS, respectively.\nThey are designed to make it both easier and more pleasant\nto code HTML and CSS documents,\nby eliminating redundancy,\nreflecting the underlying structure that the document represents,\nand providing elegant, easily understandable, and powerful syntax.\n\n== Using\n\nThere are several ways to use Haml and Sass.\nThey can be used as a plugins for Rails or Merb,\nor embedded on their own in other applications.\nThe first step of all of these is to install the Haml gem:\n\n  gem install haml\n\nTo install Haml and Sass as a Rails plugin,\njust run <tt>haml --rails path/to/rails/app</tt>\nand both Haml and Sass will be installed.\nViews with the <tt>.haml</tt> (or <tt>.html.haml</tt> for edge)\nextension will automatically use Haml.\nSass is a little more complicated;\n<tt>.sass</tt> files should be placed in public/stylesheets/sass,\nwhere they\'ll be automatically compiled\nto corresponding CSS files in public/stylesheets when needed\n(the Sass template directory is customizable...\nsee the Sass module docs for details).\n\nFor Merb, <tt>.html.haml</tt> views will work without any further modification.\nTo enable Sass, you also need to add it add a dependency.\nTo do so, just add\n\n  dependency "haml"\n\nto config/dependencies.rb.\nThen it\'ll work just like it does in Rails.\n\nTo use Haml and Sass programatically,\ncheck out the RDocs for the Haml and Sass modules.\n\n== Formatting\n\n=== Haml\n\nThe most basic element of Haml\nis a shorthand for creating HTML tags:\n\n  %tagname{ :attr1 => \'value1\', :attr2 => \'value2\' } Contents\n\nNo end-tag is needed; Haml handles that automatically.\nAdding <tt>class</tt> and <tt>id</tt> attributes is even easier.\nHaml uses the same syntax as the CSS that styles the document:\n\n  %tagname#id.class\n\nIn fact, when you\'re using the <tt><div></tt> tag,\nit becomes <em>even easier</em>.\nBecause <tt><div></tt> is such a common element,\na tag without a name defaults to a div. So\n\n  #foo Hello!\n\nbecomes\n\n  <div id=\'foo\'>Hello!</div>\n\nHaml uses indentation\nto bring the individual elements to represent the HTML structure.\nA tag\'s children are indented beneath than the parent tag.\nAgain, a closing tag is automatically added.\nFor example:\n\n  %ul\n    %li Salt\n    %li Pepper\n\nbecomes:\n\n  <ul>\n    <li>Salt</li>\n    <li>Pepper</li>\n  </ul>\n\nYou can also put plain text as a child of an element:\n\n  %p\n    Hello,\n    World!\n\nIt\'s even possible to embed Ruby code into Haml documents.\nAn equals sign, <tt>=</tt>, will output the result of the code.\nA hyphen, <tt>-</tt>, will run the code but not output the result.\nYou can even use control statements\nlike <tt>if</tt> and <tt>while</tt>:\n\n  %p\n    Date/Time:\n    - now = DateTime.now\n    %strong= now\n    - if now > DateTime.parse("December 31, 2006")\n      = "Happy new " + "year!"\n\nHaml provides far more tools than those presented here.\nCheck out the reference documentation in the Haml module.\n\n=== Sass\n\nAt its most basic,\nSass is just another way of writing CSS.\nAlthough it\'s very much like normal CSS,\nthe basic syntax offers a few helpful features:\ntabulation indicates the attributes in a rule,\nrather than non-DRY brackets;\nand newlines indicate the end of an attribute,\nrather than a semicolon.\nFor example:\n\n  #main\n    :background-color #f00\n    :width 98%\n\nbecomes:\n\n  #main {\n    background-color: #f00;\n    width: 98% }\n\nHowever, Sass provides much more than a way to make CSS look nice.\nIn CSS, it\'s important to have accurate selectors,\nso your styles don\'t just apply to everything.\nHowever, in order to do this,\nyou need to use nested element selectors.\nThese get very ugly very quickly.\nI\'m sure everyone\'s had to write something like\n"#main .sidebar .top p h1 a",\nfollowed by\n"#main .sidebar .top p h1 a:visited" and\n"#main .sidebar .top p h1 a:hover".\nWell, Sass gets rid of that.\nLike Haml, it uses indentation to indicate the structure of the document.\nSo, what was:\n\n  #main {\n    width: 90%;\n  }\n  #main p {\n    border-style: solid;\n    border-width: 1px;\n    border-color: #00f;\n  }\n  #main p a {\n    text-decoration: none;\n    font-weight: bold;\n  }\n  #main p a:hover {\n    text-decoration: underline;\n  }\n\nbecomes:\n\n  #main\n    :width 90%\n    p\n      :border-style solid\n      :border-width 1px\n      :border-color #00f\n      a\n        :text-decoration none\n        :font-weight bold\n      a:hover\n        :text-decoration underline\n\nPretty nice, no? Well, it gets better.\nOne of the main complaints against CSS is that it doesn\'t allow constants.\nWhat if have a color or a width you re-use all the time?\nIn CSS, you just have to re-type it each time,\nwhich is a nightmare when you decide to change it later.\nNot so for Sass!\nYou can use the "!" character to set constants.\nThen, if you put "=" after your attribute name,\nyou can set it to a constant.\nFor example:\n\n  !note_bg= #55aaff\n\n  #main\n    :width 70%\n    .note\n      :background-color= !note_bg\n    p\n      :width 5em\n      :background-color= !note_bg\n\nbecomes:\n\n  #main {\n    width: 70%; }\n    #main .note {\n      background-color: #55aaff; }\n    #main p {\n      width: 5em;\n      background-color: #55aaff; }\n\nYou can even do simple arithmetic operations with constants,\nadding numbers and even colors together:\n\n  !main_bg= #46ar12\n  !main_width= 40em\n\n  #main\n    :background-color= !main_bg\n    :width= !main_width\n    .sidebar\n      :background-color= !main_bg + #333333\n      :width= !main_width - 25em\n\nbecomes:\n\n  #main {\n    background-color: #46a312;\n    width: 40em; }\n    #main .sidebar {\n      background-color: #79d645;\n      width: 15em; }\n\nTaking the idea of constants a bit further are mixins.\nThese let you group whole swathes of CSS attributes into a single\ndirective and then include those anywhere you want:\n\n  =blue-border\n    :border\n      :color blue\n      :width 2px\n      :style dotted\n\n  .comment\n    +blue-border\n    :padding 2px\n    :margin 10px 0\n\n  .reply\n    +blue-border\n\nbecomes:\n\n  .comment {\n    border-color: blue;\n    border-width: 2px;\n    border-style: dotted;\n    padding: 2px;\n    margin: 10px 0;\n  }\n\n  .reply {\n    border-color: blue;\n    border-width: 2px;\n    border-style: dotted;\n  }\n\nA comprehensive list of features is in\nthe documentation for the Sass module.\n\n== Indentation\n\nIndentation can be made up of one or more tabs or spaces.\nHowever, indentation must be consistent within a given document.\nHard tabs and spaces can\'t be mixed,\nand the same number of tabs or spaces must be used throughout.\n\n== Executables\n\nThe Haml gem includes several executables that are useful\nfor dealing with Haml and Sass from the command line.\n\n=== +haml+\n\nThe +haml+ executable transforms a source Haml file into HTML.\nSee <tt>haml --help</tt> for further information and options.\n\n=== +sass+\n\nThe +sass+ executable transforms a source Sass file into CSS.\nSee <tt>sass --help</tt> for further information and options.\n\n=== <tt>html2haml</tt>\n\nThe <tt>html2haml</tt> executable attempts to transform HTML,\noptionally with ERB markup, into Haml code.\nSince HTML is so variable, this transformation is not always perfect;\nit\'s a good idea to have a human check the output of this tool.\nSee <tt>html2haml --help</tt> for further information and options.\n\n=== <tt>css2sass</tt>\n\nThe <tt>css2sass</tt> executable attempts to transform CSS into Sass code.\nThis transformation attempts to use Sass nesting where possible.\nSee <tt>css2sass --help</tt> for further information and options.\n\n== Authors\n\nHaml and Sass are designed by Hampton Catlin (hcatlin) and he is the author\nof the original implementation. However, Hampton doesn\'t even know his way\naround the code anymore and mostly just concentrates on the language issues.\nHampton lives in Toronto, Ontario (though he\'s an American by birth) and\nis a partner at Unspace Interactive.\n\nNathan Weizenbaum is the primary maintainer and architect of the "modern" Ruby\nimplementation of Haml. His hard work has kept the project alive by endlessly\nanswering forum posts, fixing bugs, refactoring, finding speed improvements,\nwriting documentation, implementing new features, and getting Hampton\ncoffee (a fitting task for a boy-genius). Nathan lives in Seattle, Washington and\nwhile not being a student at University of Washington he consults for\nUnspace Interactive and Microsoft.\n\nIf you use this software, you must pay Hampton a compliment. And\nbuy Nathan some jelly beans. Maybe pet a kitten. Yeah. Pet that kitty.\n\nSome of the work on Haml was supported by Unspace Interactive.\n\nBeyond that, the implementation is licensed under the MIT License.\nOk, fine, I guess that means compliments aren\'t *required*.\n'
Utility for inlining unit tests with the code under test. b'=begin rdoc\n\n== Summary\nQuicktest - A utility for inlining ruby unit tests with the ruby code under test\n\n== Example\nrun with bin/quickspec\n\n=end rdoc\n\n  class Foo\n    def initialize\n      @bar = true\n    end\n    def quicktest\n      it "bar should be initialized to true" do\n        @bar.should == true\n      end\n    end\n\n    def self.hello arg\n      "hello" + arg\n    end\n    def self.quicktest meth\n      it "should prepend \'hello\' to its argument" do\n        meth["world"].should == \'hello world\' # error - no space \'helloworld\'\n      end\n    end\n  end\n\n=begin rdoc\n\nRunning quicktest on the source of this README file outputs the following:\n  .F\n\n  1)\n  \'Foo hello should prepend \'hello\' to its argument\' FAILED\n  expected: "hello world",\n       got: "helloworld" (using ==)\n  ./README:22:in `quicktest\'\n  /home/greg/quicktest/lib/quicktest.rb:65:in `instance_eval\'\n  /home/greg/quicktest/lib/quicktest.rb:65:in `run_tests\'\n\n  Finished in 0.008338 seconds\n\n  2 examples, 1 failure\n\n== Usage\n=== Install\n\n  gem install quicktest\n\n=== test code\nTo test a method, place another method called \'quicktest\' immediately after it\nthe quicktest method has one OPTIONAL argument:\n- a method object for the method under test\n\n=== execution\nrun with\n\n  spec -r quicktest file_to_test\n\nThere is a convenience script so that you can just run\n\n  quickspec file_to_test\n\n== Author and License\nCopyright (c) 2008 Greg Weber, http://gregweber.info\nLicensed under the MIT license\n\n== About\n\nThe typical test driven development workflow requires constant switching between the file containg the source code and the the file containg the tests. When creating code, it is much faster to be able to place tests immediately after the code you are writing.  After the code has been written, it may be a good idea to move it to another file.\n\nQuicktest is designed to support quick tests in a framework agnostic way.  Currently, only an rspec testrunner is available, but it is trivial to write one for another testing framework.\n\nQuicktest uses method tracing to know the method you are testing. By default the output of a failed test will show the object and method name.\n\n== Install\ngem install quicktest\n\n== Source\n=== browser\nhttp://github.com/gregwebs/quicktest/tree/master\n\n=== repository\ngit clone git://github.com/gregwebs/quicktest.git\n\n== Homepage\nhttp://gregweber.info/projects/quicktest.html\n\n== RDoc documentation\nincluded with the gem\n\n== Important Notes\n- def quicktest will instantiate an object for the class you are testing, which gives a convenient referenct to self in the quicktest method.  However, it calls new() without any parameters.  If you need parameters for new(), you will have to use def self.quicktest and call new() yourself\n\n== Configuration\n- when testing module instance methods, the module is included into an anonymous class.  By default, that class inherits from Object.  To change this you must define an object that the module will be included into by defining the following in the module:\n\n  def self.quicktest_include_into; String end\n\n- you can change the testing method name from quicktest to something else using the command line option\n\n  --quicktest better_testing_name\n\n== TroubleShooting\n- quicktest methods not working properly? if the class (or one of its ancestors) is overriding method tracing then including QuickTest::Tracer will fix it, but you should also fix the class or its ancestor.\n\n== Unimportant Notes\n=== production performance\nleaving test code in with your production code is not necessarily a good idea, but you can put\n\n  remove_method :quicktest\n\nat the bottom of a class to completely remove the quicktest method\n\n=== rationals\n* tests for scripts\nDefinitely very useful for one file scripts, or any type of code that does not have a well established project home where the tests will be.  You can distribute the tests with script so that anyone who wants to modify it can also modify the tests instead of assuming the original author did not write any.\nYou can have a flow of development where a \'quick and dirty\' script becomes well tested.  Here is a shell function that tests the file before every run.\n  function test_run () { quickspec $1 && $1 }\n* documentation\nTests are a form of documentation.  It can be argued that it is better to have all documentation include in the source\n\n* efficient TDD and prototyping\nWhen writing fresh code you now have the possibility to be directly next to the code under test without having to switch back and forth between files.  When you are done writing the new code, you can easily pull all the quicktest methods out and into a spec file.\n\n\n=== Origins\nQuicktest came out of my dabbling in the D programming language, which allows you to place testing blocks inline with your source code\n  unittest{\n   ...\n  }\n\nNormally, these blocks are ignored, but if you compile with a different switch, they are linked in and ran at the beginning of your program.\nOriginally, I made an exact copy of this, but among other things, it requires the placement of a line like\n  (def unittest;end) if not defined? unittest\nat the beginning of the file.  It would be nice if Ruby had a similar construct built in to the language.\n\n=== implementation\nQuicktest uses method tracing to know the method you are testing.  For the object under test, testing methods are included into it, and then the test is run.\n\n\n=end rdoc\n'
A cross platform media player using wxPython and pyglet 
Axiom is a free, open source computer algebra system b'"What matters the most is what you do for free" -- John Gorka\n\n"...even more important, for the progress of mathematics in the computer\n age, is the beaver, who will build the needed infrastructure of computer\n mathematics, that would eventually enable us to solve many outstanding\n open problems, and many new ones. Consequently, the developers of computer\n algebra systems, and creators of algorithms, are even more important than\n both birds and frogs." --Doron Zeilberger\n  (http://www.math.rutgers.edu/~zeilberg/Opinion95.html)\n\n \n\nYou\'ve unpacked the Axiom source code to some directory. In this\ndocument we\'ll call that directory /home/me/axiom. Note that the path\ncannot contain spaces. \n\n=======================================================================\n================= MAKING AXIOM ========================================\n=======================================================================\n\nAxiom builds a system-specific version based on a string we\'ll call\nthe SYSNAME. Currently recognized SYSNAME strings can be found on the\nAxiom website at:\n<http://axiom.axiom-developer.org/axiom-website/download.html>\n\nReplace SYSNAME below with the likely name of your system.\n\nWe also assume that you downloaded AXIOM to someplace. Suppose\nthat place is /home/me/axiom, then:\n\ncd /home/me/axiom                         << where you unpacked the sources\nexport AXIOM=/home/me/axiom/mnt/SYSNAME   << which axiom to build\nexport PATH=$AXIOM/bin:$PATH\nmake                                      << build the system\n\nA recent cause of likely build failures is SELinux.\nSee the faq file for possible solutions.\n\nWhen the make completes you\'ll have an executable called $AXIOM/bin/axiom\n\n=======================================================================\n================= INSTALLING AXIOM ====================================\n=======================================================================\n\nYou can install Axiom on your system by typing (as root):\n\nmake install\n\nThis will put Axiom into /usr/local/axiom \nand the axiom command in /usr/local/bin/axiom\n\nYou can change these defaults to anything thus:\n\nmake INSTALL=/home/me/myaxiom COMMAND=/home/me/bin/myaxiom install\n\n\n=====================================================================\n\nDocumentation can be found at various places in the system or on the\nAxiom website: <http://axiom.axiom-developer.org>\n\nThere is a book (available on Amazon.com):\nJenks, Richard D. and Sutor, Robert S. "Axiom, The Scientific Computation\nSystem" Springer-Verlag, NY, 1992, ISBN 0-387-97855-0\n\nThe book is automatically built as part of the make and lives in:\n\n(yourpath)/axiom/mnt/(sysname)/doc/bookvol0.pdf\n\nIn general every directory will contain a Makefile.dvi file.\nThese files document facts about how Axiom is built.\nThe directory mnt/linux/doc will contain .dvi files as they are written.\n\nAxiom is free and open source software. It is copyrighted code that\nis released under the Modified BSD license. Much debate about this\ntopic has already been archived on the axiom-legal and axiom-developer\nmailing lists. The mail archives are available at the Axiom website:\nhttp://savannah.gnu.org/projects/axiom\n\nQuestions and comments should be sent to:\naxiom-developer@nongnu.org\n\nTim Daly\ndaly@axiom-developer.org\n\n=====================================================================\n\nPhilosophy\n\nScratchpad was a large, general purpose computer algebra system that\nwas originally developed by IBM under the direction of Richard Jenks.\nThe project started in 1971 and evolved slowly.  Barry Trager was key\nto the technical direction of the project. Scratchpad developed over a\n20 year stretch and was basically considered as a research platform\nfor developing new ideas in computational mathematics. In the 1990s,\nas IBM\'s fortunes slid, the Scratchpad project was renamed to Axiom,\nsold to the Numerical Algorithms Group (NAG) in England and became a\ncommercial system.  As part of the Scratchpad project at IBM in\nYorktown I worked on all aspects of the system and eventually helped\ntransfer the product to NAG. For a variety of reasons it never became\na financial success and NAG withdrew it from the market in October,\n2001.\n\nNAG agreed to release Axiom as free software. The basic motivation was\nthat Axiom represents something different from other programs in a lot\nof ways. Primarily because of its foundation in mathematics the Axiom\nsystem will potentially be useful 30 years from now.  In its current\nstate it represents about 30 years and 300 man-years of research\nwork. To strive to keep such a large collection of knowledge alive\nseems a worthwhile goal.\n\nHowever, keeping Axiom alive means more than just taking the source\ncode and dumping it onto a public server. There are a lot of things\nabout the system that need to change if it is going to survive and\nthrive for the next 30 years.\n\nThe system is complex and difficult to build. There are few people who\nknow how it is structured and why it is structured that way. Somehow\nit needs to be documented deeply so others can contribute.\n\nThe mathematics is difficult. Unlike other free software you can\'t\njust reach for the old saying ``read the source code\'\'.  The source\ncode is plain, clear and about as close to the mathematical theory as\nis practical. Unfortunately the mathematical theory is enshrined in\nsome research library where few people will have access. Somehow this\nmust change. The research work, the mathematics, the published papers,\nand the source code have all got to be kept together for the next\ngeneration to read, understand and modify.\n\nThe mathematics is narrow and very focused. This was due to the fact\nthat, while Axiom is a great research platform, we only had a limited\nnumber of visitors at IBM Research. So there is very little in the way\nof, say, infinite group theory in Axiom. We can add it. Doing so will\nshow up shortcomings in the system.  For example, how do you represent\nan infinite object? There are many possible representations and they\ndepend on your goals. The system will have to change, expand, and,\nhopefully, become cleaner as more thought is applied. Scratchpad\nchanged continuously while it was being used for research and we\nexpect Axiom to do the same.\n\nThe language (spad) is designed to let you write algorithms that are\nvery close to the mathematics. However, the algorithms as presented in\nthe current system have never been shown or proven (an important\ndistinction) to be correct.  It is vital that we undertake the huge\neffort of verifying and validating the code. How else can we trust the\nresults and of what use is a system this complex without trust?\nSomehow we have to extend the system to integrate program proof\ntechniques.  That is, we have to make computational mathematics hold\nto the same standard as the rest of mathematics.\n\nAll of which seems to integrate into a requirement for better\ndocumentation. The key change which developers of Axiom will find with\nthis version is that the documentation is primary and the code is\nsecondary. Taking direction from Knuth and Dijkstra the system is now\nin a literate programming style. The hope is that the next generation\nof developers and users will be able to understand, maintain and\nextend the system gracefully. And that eventually papers submitted to\njournals (an Axiom Journal?) will be easily imported into the system\nwith their running code made available automatically.\n\nThere is no guarantee that this attempt to change the culture of\ncomputational mathematicians is going to succeed. But it is our firm\nbelief that current systems have reached a complexity plateau and we\nneed to find new techniques to push the envelope.\n\nIn general, we need to consider changes to the system with a 30 year\nhorizon rather than the current write-ship-debug mentality of software\ndevelopment. This is, after all, mathematics, the queen of the\nsciences. It deserves all of the time, talent and attention we can\nbring to bear on the subject.\n\nTim Daly -- September 3, 2002\n\nContributions\n\nAll of these people have, in some way or other, been associated with\nScratchpad and Axiom. If you contribute, add your name.  The names are\nin alphabetical order as we make no attempt to quantify the relative\nmerit of the contributions.\n\nIn books/bookvol5.pamphlet is a variable called credits\nwhich contains this list. Typing \n)credits \nat the axiom command prompt will prettyprint the list.\n\n"An alphabetical listing of contributors to AXIOM:"\n"Michael Albaugh        Cyril Alberga          Roy Adler"\n"Christian Aistleitner  Richard Anderson       George Andrews"\n"S.J. Atkins            Henry Baker            Martin Baker"\n"Stephen Balzac         Yurij Baransky         David R. Barton"\n"Thomas Baruchel        Gerald Baumgartner     Gilbert Baumslag"\n"Michael Becker         Nelson H. F. Beebe     Jay Belanger"\n"David Bindel           Fred Blair             Vladimir Bondarenko"\n"Mark Botch             Raoul Bourquin         Alexandre Bouyer"\n"Karen Braman           Peter A. Broadbery     Martin Brock"\n"Manuel Bronstein       Stephen Buchwald       Florian Bundschuh"\n"Luanne Burns           William Burge          Ralph Byers"\n"Quentin Carpent        Robert Caviness        Bruce Char"\n"Ondrej Certik          Tzu-Yi Chen            Cheekai Chin"\n"David V. Chudnovsky    Gregory V. Chudnovsky  Mark Clements"\n"James Cloos            Jia Zhao Cong          Josh Cohen"\n"Christophe Conil       Don Coppersmith        George Corliss"\n"Robert Corless         Gary Cornell           Meino Cramer"\n"Jeremy Du Croz         David Cyganski         Nathaniel Daly"\n"Timothy Daly Sr.       Timothy Daly Jr.       James H. Davenport"\n"David Day              James Demmel           Didier Deshommes"\n"Michael Dewar          Jack Dongarra          Jean Della Dora"\n"Gabriel Dos Reis       Claire DiCrescendo     Sam Dooley"\n"Lionel Ducos           Iain Duff              Lee Duhem"\n"Martin Dunstan         Brian Dupee            Dominique Duval"\n"Robert Edwards         Heow Eide-Goodman      Lars Erickson"\n"Richard Fateman        Bertfried Fauser       Stuart Feldman"\n"John Fletcher          Brian Ford             Albrecht Fortenbacher"\n"George Frances         Constantine Frangos    Timothy Freeman"\n"Korrinn Fu             Marc Gaetano           Rudiger Gebauer"\n"Van de Geijn           Kathy Gerber           Patricia Gianni"\n"Gustavo Goertkin       Samantha Goldrich      Holger Gollan"\n"Teresa Gomez-Diaz      Laureano Gonzalez-Vega Stephen Gortler"\n"Johannes Grabmeier     Matt Grayson           Klaus Ebbe Grue"\n"James Griesmer         Vladimir Grinberg      Oswald Gschnitzer"\n"Ming Gu                Jocelyn Guidry         Gaetan Hache"\n"Steve Hague            Satoshi Hamaguchi      Sven Hammarling"\n"Mike Hansen            Richard Hanson         Richard Harke"\n"Bill Hart              Vilya Harvey           Martin Hassner"\n"Arthur S. Hathaway     Dan Hatton             Waldek Hebisch"\n"Karl Hegbloom          Ralf Hemmecke          Henderson"\n"Antoine Hersen         Roger House            Gernot Hueber"\n"Pietro Iglio           Alejandro Jakubi       Richard Jenks"\n"William Kahan          Kyriakos Kalorkoti     Kai Kaminski"\n"Grant Keady            Wilfrid Kendall        Tony Kennedy"\n"Ted Kosan              Paul Kosinski          Klaus Kusche"\n"Bernhard Kutzler       Tim Lahey              Larry Lambe"\n"Kaj Laurson            George L. Legendre     Franz Lehner"\n"Frederic Lehobey       Michel Levaud          Howard Levy"\n"Ren-Cang Li            Rudiger Loos           Michael Lucks"\n"Richard Luczak         Camm Maguire           Francois Maltey"\n"Alasdair McAndrew      Bob McElrath           Michael McGettrick"\n"Edi Meier              Ian Meikle             David Mentre"\n"Victor S. Miller       Gerard Milmeister      Mohammed Mobarak"\n"H. Michael Moeller     Michael Monagan        Marc Moreno-Maza"\n"Scott Morrison         Joel Moses             Mark Murray"\n"William Naylor         Patrice Naudin         C. Andrew Neff"\n"John Nelder            Godfrey Nolan          Arthur Norman"\n"Jinzhong Niu           Michael O\'Connor       Summat Oemrawsingh"\n"Kostas Oikonomou       Humberto Ortiz-Zuazaga Julian A. Padget"\n"Bill Page              David Parnas           Susan Pelzel"\n"Michel Petitot         Didier Pinchon         Ayal Pinkus"\n"Frederick H. Pitts     Jose Alfredo Portes    Gregorio Quintana-Orti"\n"Claude Quitte          Arthur C. Ralfs        Norman Ramsey"\n"Anatoly Raportirenko   Albert D. Rich         Michael Richardson"\n"Guilherme Reis         Huan Ren               Renaud Rioboo"\n"Jean Rivlin            Nicolas Robidoux       Simon Robinson"\n"Raymond Rogers         Michael Rothstein      Martin Rubey"\n"Philip Santas          Alfred Scheerhorn      William Schelter"\n"Gerhard Schneider      Martin Schoenert       Marshall Schor"\n"Frithjof Schulze       Fritz Schwarz          Steven Segletes"\n"V. Sima                Nick Simicich          William Sit"\n"Elena Smirnova         Jonathan Steinbach     Fabio Stumbo"\n"Christine Sundaresan   Robert Sutor           Moss E. Sweedler"\n"Eugene Surowitz        Max Tegmark            T. Doug Telford"\n"James Thatcher         Laurent Thery          Balbir Thomas"\n"Mike Thomas            Dylan Thurston         Steve Toleque"\n"Barry Trager           Themos T. Tsikas       Gregory Vanuxem"\n"Bernhard Wall          Stephen Watt           Jaap Weel"\n"Juergen Weiss          M. Weller              Mark Wegman"\n"James Wen              Thorsten Werther       Michael Wester"\n"R. Clint Whaley        James T. Wheeler       John M. Wiley"\n"Berhard Will           Clifton J. Williamson  Stephen Wilson"\n"Shmuel Winograd        Robert Wisbauer        Sandra Wityak"\n"Waldemar Wiwianka      Knut Wolf              Yanyang Xiao"\n"Liu Xiaojun            Clifford Yapp          David Yun"\n"Vadim Zhytnikov        Richard Zippel         Evelyn Zoernack"\n"Bruno Zuercher         Dan Zwillinger"\n\nPervasive Literate Programming\n\nI think David Diamond said it best (Datamation, June 1976, pg 134):\n\nThe fellow who designed it is working far away.\nThe spec\'s not been updated for many a livelong day.\nThe guy who implemented it is promoted up the line.\nAnd some of the enhancements didn\'t match to the design.\nThey haven\'t kept the flowcharts, the manual\'s a mess.\nAnd most of what you need to know, you\'ll simply have to guess.\n\nand with respect to Axiom:\n\nThe research that it\'s based on is no longer to be had.\nAnd the theory that it\'s based on has changed by just a tad.\nIf we keep it all together then at least there is a hope.\nThat the people who maintain it will have a chance to cope.\n\nTo quote Fred Brooks, "The Mythical Man-month"\n\n  "A basic principle of data processing teaches the folly of trying to\n   maintain independent files in synchronization... Yet our practice in\n   programming documentation violates our own teaching. We typically\n   attempt to maintain a machine-readable form of a program and an\n   independent set of human-readable documentation, consisting of prose\n   and flowcharts ... The solution, I think, is to merge the files, to\n   incorporate the documentation in the source program."\n\n\n   "A common fallacy is to assume authors of incomprehensilbe code\n    will somehow be able to express themselves lucidly and clearly\n    in comments." -- Kevlin Henney\n\n   "A programmer who cannot explain their ideas clearly in natural\n    language is incapable of writing readable code." -- Tim Daly\n\nAs you can already see from this document the whole of the Axiom\neffort is structured around literate programs. Every directory has a\nMakefile.pamphlet file which explains details of that directory. The\nwhole source tree hangs from the Makefile tree. (Some of the\nMakefile.pamphlet files contain only text if executable code is not\nneeded).  Every source file is embedded in a pamphlet file.\n\nWhich begs the question: ``What is a pamphlet file?\'\'.  Basically it\nis a tex document with some additional markup tags that surround\nsource code. Pamphlet files are intended to document one particular\nsubject. Pamphlet files can be later combined into ``booklet\'\' files\nas one would embed chapters into books.\n\nWhich begs the question: ``Why bother with pamphlet files?\'\'.  Clearly\nyou didn\'t read the philosophy rant above. In more detail there have\nbeen two traditional methods of documenting source code. The first is\nto sprinkle random comments into the code.  This suffers from the\nproblem that the comments assume you already understand the purpose of\nthe code and why an enlightened comment like ``This oughta work\'\' is\nperfectly clear and compelling. The second method is to write a\ndocument as a separate file. They get written half-heartedly because\nthe lack of source code allows you to skip over explaining ugly\nimplementation details (where all of the real confusion lies). This\nform of documentation never gets updated and gradually becomes\nuninteresting history.\n\nPamphlet files overcome neither of these limitations if you don\'t make\nthe effort to do it right. Ask yourself the question ``What would\nKnuth do?\'\' or ``Will this be clear 30 years from now?\'\'.\n\nWhich begs the question: ``Why go to all this trouble?\'\'.  Because\nyou\'re having a conversation with people who are far removed from you\nin time, space, and understanding.  Because someone else will have to\nmaintain your code.  Because you are part of a community of\nmathematicians who hold you to high standards. Because if you can\'t\nexplain it clearly maybe YOU don\'t understand it or it isn\'t as clear\nas you think it is.\n\nLets imagine that we\'d like to receive a pamphlet file from a\ncolleague. It contains a new theory and spiffy new algorithm.  We\'d\nlike to be able to put the pamphlet file into the system and have\neverything magically happen to integrate the new pamphlet into the\nsystem. What would that imply? Well, lets assume that the pamphlet\nfile has certain required sections. We\'d like to get more than the\ntechnical paper and the code. We\'d also like to see the help\ninformation, test cases, example code, cross-references to other\npamphlets that would get automatically included, have the proof\navailable and automatically checkable, etc. In the best of all\npossible worlds we have a front-end system that knows nothing except\nhow to deconstruct and integrate properly formed pamphlet files. If\nthis were true we could be sure that all of the mathematics is\ndocumented and external to the system. There are no ``rabbits\'\' (as\nDijkstra called surprises or special knowledge) that we pull out of\nour hat. Conceptually, given an underlying Lisp system, it is clear we\ncan built such a system.\n\nThe General Directory Structure\n\nThe Top Level directory structure contains 7 directories which are\nexplained in detail below. Three of the directories (license, zips,\nand lsp) are not part of the essential core of Axiom.\n\nThe other four directories (src, int, obj, and mnt) comprise the\nsystem build environment. Each directory has a specific purpose. Lets\nlook at the essential directories first.\n\n$AXIOM\n  license\n  lsp\n    GCL\n  src\n    include\n    lib\n    scripts\n  int\n    doc\n  obj\n    tmp\n    noweb\n    SYS=(linux,...)\n  mnt\n    SYS=(linux,...)\n  zips\n\nThe src directory consists of human-written, system-independent\ncode. You can copy this directory (and the top-level makefiles) and\nhave a complete build system. Nothing in this directory is ever\nchanged by the Makefiles and it can be mounted in a read-only fashion\nduring the build process. An example file would be the lisp source\nfiles.\n\nThe int directory consists of machine-generated, system-independent\ncode. Consider this directory as a cache. Nothing in this directory is\nnecessary for a clean system build but once the build completes the\ninformation in this directory can significantly shorten rebuilds.\nSince this information is system-independent we can use the cache no\nmatter what architecture we target. An example file would be the dvi\nfiles generated from the tex sources.\n\nThe obj directory consists of machine-generated, system-dependent\ncode. This directory is "scratch" space for the compiler and other\ntools. Nothing in this directory is useful once the system is\nbuilt. An example file would be the .o files from the C compiler.\n\nThe mnt directory consists of machine-generated, system-dependent code\nthat will comprise the "shipped system". You can copy this directory\nand have a complete, running Axiom system. If the end user will see it\nor need it in any way it belongs here. Executables are generally built\nin obj and moved here. Example files would be the final executable\nimages, the input files, etc.\n\nThe four directories above make it possible to do a system build for\none system (say, a linux system) which will fill in the int\nsubdirectory. Then you can NFS mount the src and int directories\nread-only on a Solaris machine and do a solaris system build.  The\noriginal Axiom could build across many different architectures,\ncompilers, and operating systems.\n\nThe license directory\n\nThe license directory collects all of the licenses for material that\nis included in this distribution. Source files contain a line that\nrefers to one of these license files. Some people are of the belief\nthat including the full license text in every source file magically\nstrengthens the license but this is not so.  Imagine including the\nfull text of the copyright at the beginning of every section of a book.\n\nThe LICENSE.AXIOM file is a Modified BSD-style license that covers all\nof the files released as part of this distribution except as noted in\nparticular files. Copyright information that might have shown up in\nsource files that were released from NAG are also collected here and\nnoted at the top of the files they cover.\n\nThe zips directory\n\nThe zips directory contains particular distributions of\nnetwork-available software that is known to work with this release of\nAxiom. Newer versions may work and, if so, should be added to this\ndirectory. The makefiles that handle these files will unpack them into\nthe correct locations in the src directory tree. These files exist to\nincrease the stability of the distribution so we can guarantee that\nthe code works. We encourage testing the latest distributions so that\nwe can remain with the leading edge and give feedback to the\nindividual package developers if problems arise.\n\nThe lsp directory\n\nAxiom lives on top of Common Lisp, specifically Gnu Common Lisp (GCL)\n\nSteps to build Axiom\n\nThe Initial Distribution files\n\nThe initial distribution contains several top level files. These are:\n\n1) Makefile.pamphlet\n     This is the noweb source for the Makefile file. All changes to\n     the Makefile should occur here and the\n\n3) Makefile This is the actual Makefile that will create Axiom. \n\nIn general the distribution will contain the pamphlet files for each\nsource file and the source file itself. Modifications should be made\nand explained in the pamphlet files. The document command should be\nrun to rebuild the source file and the dvi file.\n\nSteps in the build process\n\nThe sequence of steps necessary to build a clean Axiom is simply:\n\n  export AXIOM=(path-including-this-directory)/mnt/SYSNAME\n  export PATH=$AXIOM/bin:$PATH\n  make\n\nIf this fails check the FAQ for possible problems and their fixes.\n\n'
A SimPy simulation for a fully Decentralised Economic ALlocation mechansim 
test b'testing 123 testing\nmore testing.\nmore testing. done in tmp2\n\ndoes this add evel knevel\n'
A simple game revolving around pushing circles around on a table like surface. b'License:\nKnuff is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nKnuff is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Knuff; if not, write to the Free Software\nFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nAuthors:\nJesper Thomschutz\nPetref Saraci\n\nSite:\nhttp://github.com/jesper/knuff/tree/master\n\nInstructions:\nMust be using a relatively new version of Qt (4.3 tested). qmake && make && ./knuff should get you up and running.\n'
A system for creating fast, reusable parsers b"\nGazelle: a system for building fast, reusable parsers\n\n<http://www.reverberate.org/gazelle/>\n\nPRELIMINARY WARNING\n===================\n\nWhile Gazelle is getting quite usable, the language and the APIs are still quite\nsubject to change.\n\nStill with me?  Great. :)\n\nBUILDING\n========\n\nYou need to have Lua installed to do anything interesting.  The C runtime\ndoesn't need Lua, but without Lua you can't compile any grammars.\n\nGazelle should build mostly out-of-the-box on UNIX-like systems if Lua 5.1 is\ninstalled, but you may need to tweak the Makefile to point to your local Lua\ninstallation.  Ubuntu Linux, Debian and Mac OS X are tested.  To install\ndependencies on Ubuntu or Debian, type:\n\n$ sudo aptitude install lua5.1 liblua5.1-0-dev\n\nTo build and install Gazelle, type:\n\n$ make\n$ make install\n\nYou can change the installation location as follows:\n\n$ make PREFIX=/usr/local\n$ make install PREFIX=/usr/local DESTDIR=/tmp\n\nThis will install Gazelle into /tmp/usr/local.\n\nTo build the documentation, you need to have asciidoc installed, as well\nas graphviz if you want to see the graphics. \n\n$ make doc\n\nAlternatively you can just read the manual on the Gazelle website.\n\nROADMAP OF THE SOURCE\n=====================\n\ncompiler/\n  what parses the grammar, turns it into state machines, and dumps into bytcode\ncompiler/bootstrap\n  compiler code that will not be needed once Gazelle is self-hosting\nlang_ext/\n  wrappers around the C runtime, for high-level languages (currently only Lua)\nruntime/\n  the tiny, fast, small-memory-footprint C runtime that actually does the parsing\nruntime/include\n  public header files for the runtime.\nsketches/\n  code that is either half-written or for debugging-only\ntests/\n  unit tests (not very many at the moment)\nutilities/\n  command-line utilities for doing useful things\n\nCONTACT\n=======\n\nFor questions, comments, etc. please post to the gazelle-users group.  I read\nand respond to posts on this list.\nhttp://groups.google.com/group/gazelle-users\n\nIf you need to contact me directly, I am:\nJoshua Haberman <joshua@reverberate.org>\n\n"
A fast version of recs-collate 
A Family Budget application b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
JavaScript jQuery.tmbundle 
A module that adds Markaby functionality to any class b'= Markable\n\nA module for adding Markaby to your classes.\n\n== Usage\n\nSimply include the module into a class and BOOM!  Your classes can output themselves in any format Markaby can generate.  Fun for the whole family.\n\nclass Sample\n  include Markable\n  \n  attr_reader :title, :text\n  def initialize(title, text)\n    @title, @text = title, text\n  end\n  \n  def format\n    mab do\n      html do\n        head do\n          title @title\n        end\n        body do\n          p @text\n        end\n      end\n    end\n  end\n  \nend\n\nOr, we can see how easy it is to use methods are partial templates:\n\nclass SampleWithHelpers\n  include Markable\n  \n  attr_reader :title, :text\n  def initialize(title, text)\n    @title, @text = title, text\n  end\n  \n  def format\n    mab do\n      html do\n        head do\n          title @title\n        end\n        body do\n          red_paragraph\n        end\n      end\n    end\n  end\n  \n  def red_paragraph\n    p :style => "red" do\n      @text\n    end\n  end\nend\n'
A binding between erlang and mzscheme. b'Erlenmeyer is a binding between MzScheme and Erlang, allowing\nErlang to open MzScheme processes as ports.\n'
An automatic way to convert videos and put them on your iPod b'What is Yikes?\n---------------\n\nYikes is a program that takes a source library and recreates the same library in\niPod Video format (iPod Video / iPod Touch / iPhone). It skips videos that are\nalready there, so you can set it up to run on a periodic basis.  \n\nHowever, the much more clever use is to run in the background, and Yikes will\nautomatically convert files at a specified interval,  as well as publish an RSS\nfeed that you can subscribe to in iTunes.\n\nSo when this is all finished, you\'ll set Yikes to run on startup, point it at\nyour videos, and add http://computername.local:4000/podcast as a podcast. If you\nhave set up a "Season Pass"-type automatic Bittorrent download of shows, this\nmeans that every day {The Daily Show, 30 Rock, whatever..} automatically gets\nsync\'ed to your {iPod, Zune, whatever}!\n\nGems you\'ll need:\n  * builder\n  * gettext\n  * ramaze\n\nMisc. gems you might need (building, etc):\n  * RSpec\n  * Rake\n  * RCov\n  * Pallet\n\nTo build:\n\trake && rake ffmpeg \t# Takes forever, only works on Mac/Linux\n\trake test    # If it works, you\'re good\n\nTo run:\n\truby lib/main.rb --help\n'
A binding between erlang and mzscheme. b'Erlenmeyer is a binding between MzScheme and Erlang, allowing\nErlang to open MzScheme processes as ports.\n'
some python related utilities like py2cc 
Open source photo gallery in Rails b'# TABLEAU\n\nhttp://github.com/bousquet/tableau/\n\nWorks with Rails 2.3.15\n'
A content management system developed in Django, jQuery and 960 
a visual approach to the us election 
A completely Lua-scriptable roguelike engine b"Tarn is a simple and flexible roguelike engine written in C that allows you to\ncompletely script the game in embedded Lua, and provides a few simple API\nfunctions to aid you.\n\nREQUIREMENTS\n  gcc, libtcod 1.4.0, lua 5.1\n\nDOCUMENTATION\n  http://github.com/jdp/tarn/wikis\n\nBUILD NOTES\n  You'll need to edit the LIBTCOD variable in the Makefile to point to where\n  you unzippled libtcod to. libtcod's Makefile doesn't include a `make install`\n  rule, so everything that gets made just stays in that folder. Rather than\n  manually copying+pasting, just edit the Tarn Makefile accordingly.\n"
jQuery is a fast, concise, JavaScript Library that simplifies how you traverse HTML documents, handle events, perform animations, and add Ajax interactions to your web pages. jQuery is designed to change the way that you write JavaScript. 
PHP SQL console/editor that never forgets a query b'h1. bazdig\n\nPHP SQL console/editor\n\n\nh3. features\n\n\n* unlimited history\n* history search\n* syntax coloring\n* schema browser\n* save queries as links (CTRL-D in Firefox)\n* save reports as HTML files (CTRL-S in Firefox)\n* save ALL your query history as an sqlite database\n* works with MySQL and sqlite (for now)\n\n\nh3. install\n\n# check that you have PHP5, PDO_sqlite and PDO_mysql\n# uncompress the tarball in your HTTP server DocumentRoot\n# go to http://-yourdomain-/bazdig\n'
`github` command line helper for simplifying your GitHub experience. b"# The GitHub Gem\n\nThis gem works hand-in-hand with GitHub's API to help you out.\n\nCatch us in the #github room on freenode if you want to get involved.  Or just fork and send a pull request.\n\n## Getting started\n\n    $ gem install github\n\nRun it:\n\n    $ github <command> <args>\n    $ gh <command> <args>\n\n## Requirements\n\nOnly installs pure JSON gem `json_pure` by default. If you are able to install the C-extension `json` gem, it will use that instead.\n\nTry:\n\n    gem install json github\n\n\n## Pulling Upstream Changes\n\nLet's say you just forked `github-gem` on GitHub from defunkt.\n\n    $ gh clone YOU/github-gem\n    $ cd github-gem\n    $ gh pull defunkt\n\nThis will setup a remote and branch for defunkt's repository at master. \nIn this case, a 'defunkt/master' branch.\n\nIf defunkt makes some changes you want, simply `github pull defunkt`.  This will\nleave you in the 'defunkt/master' branch after pulling changes from defunkt's\nremote.  After confirming that defunkt's changes were what you wanted, run `git\ncheckout master` and then `git merge defunkt/master` to merge defunkt's changes\ninto your own master branch.  In summary:\n\n    $ gh pull defunkt\n    $ gh checkout master\n    $ gh merge defunkt/master\n\nIf you've already reviewed defunkt's changes and just want to merge them into your \nmaster branch, use the `merge` flag:\n\n    $ gh pull --merge defunkt\n\n## Fetching and Evaluating Downstream Changes\n\nIf you are the maintainer of a project, you will often need to fetch commits\nfrom other developers, evaluate and/or test them, then merge them into the\nproject.\n\nLet's say you are 'defunkt' and 'mojombo' has forked your 'github-gem' repo,\nmade some changes and issues you a pull request for his 'master' branch.\n\nFrom the root of the project, you can do:\n\n    $ gh fetch mojombo master\n  \nThis will leave you in the 'mojombo/master' branch after fetching his commits.\nYour local 'mojombo/master' branch is now at the exact same place as mojombo's \n'master' branch. You can now run tests or evaluate the code for awesomeness.\n\nIf mojombo's changes are good, you'll want to merge your 'master' (or another\nbranch) into those changes so you can retest post-integration:\n\n    $ gh merge master\n  \nTest/analyze again and if everything is ok:\n  \n    $ gh checkout master\n    $ gh merge mojombo/master\n  \nThe latter command will be a fast-forward merge since you already did the\nreal merge previously.\n\n## Network Patch Queue\n\nThe github gem can also show you all of the commits that exist on any fork of your\nproject (your network) that you don't have in your branch yet.  In order to see\nthe list of the projects that have commits you do not, you can run:\n\n    $ gh network list\n\nWhich will show you all the forks that have changes.  If you want to see what those\nchanges are, you can run:\n\n    $ gh network commits\n\nwhich will show you something like this:\n\n    9582b9 (jchris/gist)             kevin@sb.org          Add gist binary                        4 months ago\n    c1a6f9 (jchris/gist~1)           kevin@sb.org          Tweak Rakefile spec tasks to be a bi   4 months ago\n    d3c332 (jchris/gist~2)           kevin@sb.org          Pull out two helpers into the shared   4 months ago\n    8f65ab (jchris/gist~3)           kevin@sb.org          Extract command/helper spec assistan   4 months ago\n    389dbf (jchris/gist~4)           kevin@sb.org          Rename ui_spec to command_spec         4 months ago\n    670a1a (jchris/gist~5)           kevin@sb.org          Hoist the specs into a per-binary sp   4 months ago\n    6aa18e (jchris/gist~6)           kevin@sb.org          Hoist commands/helpers into a per-co   4 months ago\n    ee013a (luislavena/master)       luislavena@gmail.com  Replaced STDOUT by $stdout in specs.   2 weeks ago\n    d543c4 (luislavena/master~3)     luislavena@gmail.com  Exclude package folder.                8 weeks ago\n    a8c3eb (luislavena/master~5)     luislavena@gmail.com  Fixed specs for open under Windows.    5 months ago\n    33d003 (riquedafreak/master)     enrique.osuna@gmail.  Make sure it exists on the remote an   5 weeks ago\n    157155 (riquedafreak/master~1)   enrique.osuna@gmail.  Updated specs.                         5 weeks ago\n    f44e99 (riquedafreak/master~3)   enrique.osuna@gmail.  Only work with a clean branch.         3 months ago\n\nThese are all the commits that you don't have in your current branch that have been\npushed to other forks of your project.  If you want to incorporate them, you can use:\n\n    $ gh cherry-pick ee013a\n\nfor example to apply that single patch to your branch.  You can also merge a branch, \nif you want all the changes introduced in another branch:\n\n    $ gh merge jchris/gist\n\nThe next time you run the 'github network commits' command, you won't see any of the \npatches you have cherry-picked or merged (or rebased).  If you want to ignore a \ncommit, you can simply run:\n  \n    $ gh ignore a8c3eb\n\nThen you won't ever see that commit again. Or, if you want to ignore a range of commits,\nyou can use the normal Git revision selection shorthands - for example, if you want\nto ignore all 7 jchris/gist commits there, you can run:\n\n    $ gh ignore ..jchris/gist\n\nYou can also filter the output, if you want to see some subset.  You can filter by project,\nauthor and date range, or (one of the cooler things) you can filter by whether the patch\napplies cleanly to your branch head or not.  For instance, I can do this:\n\n    $ ./bin/github network commits --applies\n\n    ca15af (jchris/master~1)         jchris@grabb.it       fixed github gemspecs broken referen   8 weeks ago\n    ee013a (luislavena/master)       luislavena@gmail.com  Replaced STDOUT by $stdout in specs.   2 weeks ago\n    157155 (riquedafreak/master~1)   enrique.osuna@gmail.  Updated specs.                         5 weeks ago\n    f44e99 (riquedafreak/master~3)   enrique.osuna@gmail.  Only work with a clean branch.         3 months ago\n\n    $ ./bin/github network commits --applies --project=riq\n\n    157155 (riquedafreak/master~1)   enrique.osuna@gmail.  Updated specs.                         5 weeks ago\n    f44e99 (riquedafreak/master~3)   enrique.osuna@gmail.  Only work with a clean branch.         3 months ago\n\nPretty freaking sweet.  Also, you can supply the --shas option to just get a list of \nthe shas instead of the pretty printout here, so you can pipe that into other \nscripts (like 'github ignore' for instance).\n\n\n## Issues\n\nIf you'd like to see a summary of the open issues on your project:\n\n    $ gh issues open\n\n    -----\n    Issue #135 (2 votes): Remove Node#collect_namespaces\n    *  URL: http://github.com/tenderlove/nokogiri/issues/#issue/135\n    *  Opened 3 days ago by tenderlove\n    *  Last updated about 1 hour ago\n  \n    I think we should remove Node#collect_namespaces.  Since namespace names are not unique, I don't know that this method is very useful.\n    -----\n    Issue #51 (0 votes): FFI: support varargs in error/exception callbacks\n    *  URL: http://github.com/tenderlove/nokogiri/issues/#issue/51\n    *  Opened 4 months ago by flavorjones\n    *  Last updated about 1 month ago\n    *  Labels: ffi, mdalessio\n  \n    we should open JIRA tickets for vararg support in FFI callbacks\n  \n    then we should format the libxml error messages properly in the error/exception callbacks\n    -----\n\nIf you want to additionally filter by time:\n\n    $ gh issues open --after=2009-09-14\n\nOr filter by label:\n\n    $ gh issues open --label=ffi\n\n## Contributors\n\n* defunkt\n* maddox\n* halorgium\n* kballard\n* mojombo\n* schacon\n* drnic\n\n"
A perl script for renaming music files dependent on their tags. 
Several scripts, useful for people using UNIX-like systems. b"randcowsay.sh\n=============\n\nInvokes fortune to generate a random funny message and renders it with cowsay.\nActually not really useful, but I am using it for my MOTD. ;)\n\nUsage: ./randcowsay.sh\n\n\nrun_when_online.py\n==================\n\nUses NetworkManager to idle until the network gets online and runs a given\ncommand. This is useful for example, if you are updating your system automized\nand don't want miss your daily update, if your network was offline at that time.\n\nUsage: ./run_when_online.py [-p <pid_file>] <command>\n\n\nxmessages_monitor.py\n====================\n\nMonitors the directory /var/log/xmessages (make sure you created it before). And\ncalls xmessage for each file in the directory and removing it after that. This\nenables you to log messages displayed to the currently logged in user, just by\ncreating text files in /var/log/xmessages, without detecting whether X is\nrunning and which user is currently logged in. Messages logged before running\nxmessages_monitor.py got displayed when you run xmessages_monitor.py the next\ntime, so you should ensure, xmessages_monitor.py is called after X started.\n\nUsage: ./xmessages_monitor.py\n"
An Bittorrent Client for Emacs b"Emacs BitTorrent\n================\n\nJust something I'm playing around with to get some\nexperience with Emacs Lisp.\n\n"
Roles/Traits for Python b'========================================\n``roleplay:`` Python does Roles\n========================================\n:Version: 0.8 \n\nRoleplay is an in-progress implementation of roles for Python. The current\nstate is that it passes the Perl6-Roles_ test suite, which is not the final\nauthority on Perl6 roles, but a Perl5 implementation.\n\n=======================================\nSynopsis\n=======================================\n\nCreating Roles\n______________\n\n>>> from roleplay.role import Role\n        \n>>> class LoadFrobulatorRole(Role):\n...     \'\'\'\n...         Simple role example.\n...     \'\'\'\n...\n...     # Roles can use the \'__requires__\' attribute to define a set\n...     # of attributes/methods the class using the role has to\n...     # define (or else it would get an exception).\n...     \n...     __requires__ = ["has_frobulator"]\n...\n...     def save_frobulator(self, data):\n...\n...         # Do something with data\n...         # .....\n...         print "saving frobulator..."\n...\n...\n\n>>> class SaveFrobulatorRole(Role):\n...     \'\'\'\n...         Another role example\n...     \'\'\'\n...\n...\n...     def load_frobulator(self, article_id):\n...\n...         # Do something with data\n...         # .....\n...         print "loading frobulator..."\n...\n...\n\nUsing Roles\n___________\n\n>>> from roleplay import has_role, does\n\n>>> class Article(object): \n...     \'\'\'\n...         This is our class using the roles.\n...     \'\'\'\n...\n...     def __init__(self):\n...         pass\n...\n...     def load_article(self, id):\n...\n...         if does(self, LoadFrobulatorRole):\n...             self.load_frobulator(id)\n...         # ... do other loading stuff ... #\n... \n...     def save_article(self, data):\n...         \n...         if does(self, SaveFrobulatorRole):\n...             self.save_frobulator(data)\n...         # ... do other saving stuff ... #\n...\n...\n...     # This is the requirement for RoleA.\n...     def has_frobulator(self):\n...         frobulator = config.lookup(\'frobulator\')\n...         return frobulator\n...\n...\n... has_role(Article, LoadFrobulatorRole, SaveFrobulatorRole)\n...\n...\n... article = Article()\n... \n... art = article.load_article(13)\n... article.save_article(art)\n...\n\n======================================\nInstallation\n======================================\n\nTo install:\n\n    >>> python ./setup.py install\n\n\nOr via easy_install:\n\n    >>> easy_install roleplay\n\n        \n=======================================\nAcknowledgements\n=======================================\n\nThanks to Rob Kinyon and Stevan Little for the Perl6-Roles_ test suite,\nhope you don\'t mind me porting it to python :)\n\n\n.. _Perl6-Roles: http://search.cpan.org/perldoc?Perl6::Role\n\n\n'
social media sharing web application b'== Welcome to mediabumper\n\nmediabumper is a Web application you can use to browse and enjoy your audio\nand video files. It has a focus on simplicity, usability and social features\nyou can expect from nowadays Web apps.\n\nThis software is still experimental and should be used by curious people only.\n\nIt is written in Ruby on Rails and released under the MIT license.'
UGE is a python text-based, rouge-like, game engine using OpenGL. b'Description\n-----------\n\nUGE is a faux text-based, rouge-like, game engine. It features rendering text glyphs using OpenGL. The license for UGE is GPLv2. Please see LICENSE \nfile for the complete license.\n\nPlease visit the GitHub site:\n\n    * http://github.com/jgworks/unnamed-game-engine/tree/master\n\nBinaries\n--------\n\nDownlod the binary release (for Windows):\n\n    * http://jgworks.googlepages.com/uge.zip\n\nSource\n------\n\nSource is provided as a git repository or source code download:\n\n    * git clone git://github.com/jgworks/unnamed-game-engine.git\n\nor\n\n    * http://jgworks.googlepages.com/uge-source.tar.gz\n\n\n\nRequirements\n------------\n\nFor the binary release there is nothing extra required. Everything is included in the download. For the source release a few things are needed:\n\n    * Python 2.5\n          o http://www.python.org\n    * pyglet\n          o http://www.pyglet.org\n\nTo make binary releases the following is requried:\n\n    * py2exe\n          o http://www.py2exe.org\n'
Random number generation for common lisp b'Random distributions for Common Lisp\n'
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a "normal" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n'
My PhD thesis 
Rails plugin adding a set of "db:console" tasks  b"DBConsole\n=========\n\nEver tried using 'psql' or 'mysql' on the command-line to connect to your Rails database,\nonly to find you forgot all those '-u' and '-h' parameters?\n\nThis plugin provides handy rake tasks for running DB console programs for the various databases\nin your database.yml.  It supports postgresql, mysql, sqlite and sqlite3 connections.\n\nThe plugin's home on the web is here:\n\n   http://www.sanityinc.com/                             - articles and news\n   http://git.sanityinc.com/?p=db_console.git;a=summary  - code and downloads\n\nSend feedback or patches by email to steve@sanityinc.com\n\n\nExamples\n========\n\n% rake db:console                  # Connect to your RAILS_ENV database\n% rake db:console:production       # Connect to the production database\n% rake db:console:test             # Connect to the test database\n% rake db:console:some_other_db    # Connect to some_other_db defined in database.yml\n% RAILS_ENV=test rake db:console   # Connect to the test database\n\n\n\nCopyright (c) 2007 Steve Purcell, released under the MIT license\n\nThanks to Larry Baltz.\n"
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a "normal" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n'
Quickly rename TV Series files 
utilities for implementing a modified pre-order traversal tree in django b'===========\nDjango MPTT\n===========\n\nUtilities for implementing Modified Preorder Tree Traversal with your\nDjango Models and working with trees of Model instances.\n\nFor installation instructions, see the file "INSTALL" in this\ndirectory; for instructions on how to use this application, and on what\nit provides, see the file "overview.txt" in the "docs/" directory.\n'
Convert a mizar article to common logic format 
Gemedit lets you quickly open up the source for a gem in your favorite editor. b'= Gemedit\n\nhttps://github.com/lmarlow/gemedit\n\nby Lee Marlow and contributors[https://github.com/lmarlow/gemedit/contributors]\n\n{<img src="http://travis-ci.org/lmarlow/gemedit.png" />}[http://travis-ci.org/lmarlow/gemedit]\n\n== DESCRIPTION:\n\nGemedit lets you quickly open up the source for a gem in your favorite editor.\n\nLooking through other people\'s code is a great way to learn.  I often use it\nwhen a gem\'s RDoc isn\'t as helpful as I\'d like or just want to see how someone\nput a library together.  Gemedit just makes it easier to get to the code.\n\n== INSTALLATION:\n\nGemedit is installed via RubyGems and is available as a gem command:\n\n  $ gem install gemedit\n\n== USAGE:\n\nIf you want to see how gemedit works just install it and run this:\n  $ gem edit gemedit\n\nGemedit tries to use your favorite editor from your <tt>$GEMEDITOR</tt>,\n<tt>$VISUAL</tt> or <tt>$EDITOR</tt> environment variable.  It will fall back\nto <em>everyone\'s</em> favorite editor: *vi*.  You can specify the editor with\nthe <tt>-e/--editor</tt> switch.  Run this to view the source for +rake+ in\nTextMate[http://macromates.com]:\n\n  $ gem edit -e mate rake\n\nAnd of course, help is available:\n  $ gem edit -h\n  $ gem edit --help\n\n== SOURCE REPOSITORY:\n\nThe source is currently on github[https://github.com/] at\nhttps://github.com/lmarlow/gemedit. Feel free to fork it and submit pull\nrequests.\n\n  $ git clone https://github.com/lmarlow/gemedit.git\n'
AASM - State machines for Ruby classes (plain Ruby, ActiveRecord, Mongoid, MongoMapper) b'# AASM - Ruby state machines\n\n[![Gem Version](https://badge.fury.io/rb/aasm.svg)](http://badge.fury.io/rb/aasm)\n[![Build Status](https://travis-ci.org/aasm/aasm.svg?branch=master)](https://travis-ci.org/aasm/aasm)\n[![Dependency Status](https://gemnasium.com/aasm/aasm.svg)](https://gemnasium.com/aasm/aasm)\n[![Code Climate](https://codeclimate.com/github/aasm/aasm/badges/gpa.svg)](https://codeclimate.com/github/aasm/aasm)\n\nThis package contains AASM, a library for adding finite state machines to Ruby classes.\n\nAASM started as the *acts_as_state_machine* plugin but has evolved into a more generic library\nthat no longer targets only ActiveRecord models. It currently provides adapters for\n[ActiveRecord](http://api.rubyonrails.org/classes/ActiveRecord/Base.html),\n[Mongoid](http://mongoid.org/), and [Mongomapper](http://mongomapper.com/) but it can be used for any Ruby class, no matter what\nparent class it has (if any).\n\n## Upgrade from version 3 to 4\n\nTake a look at the [README_FROM_VERSION_3_TO_4](https://github.com/aasm/aasm/blob/master/README_FROM_VERSION_3_TO_4.md) for details how to switch from version 3.x to 4.0 of _AASM_.\n\n## Usage\n\nAdding a state machine is as simple as including the AASM module and start defining\n**states** and **events** together with their **transitions**:\n\n```ruby\nclass Job\n  include AASM\n\n  aasm do\n    state :sleeping, :initial => true\n    state :running\n    state :cleaning\n\n    event :run do\n      transitions :from => :sleeping, :to => :running\n    end\n\n    event :clean do\n      transitions :from => :running, :to => :cleaning\n    end\n\n    event :sleep do\n      transitions :from => [:running, :cleaning], :to => :sleeping\n    end\n  end\n\nend\n```\n\nThis provides you with a couple of public methods for instances of the class `Job`:\n\n```ruby\njob = Job.new\njob.sleeping? # => true\njob.may_run?  # => true\njob.run\njob.running?  # => true\njob.sleeping? # => false\njob.may_run?  # => false\njob.run       # => raises AASM::InvalidTransition\n```\n\nIf you don\'t like exceptions and prefer a simple `true` or `false` as response, tell\nAASM not to be *whiny*:\n\n```ruby\nclass Job\n  ...\n  aasm :whiny_transitions => false do\n    ...\n  end\nend\n\njob.running?  # => true\njob.may_run?  # => false\njob.run       # => false\n```\n\nWhen firing an event, you can pass a block to the method, it will be called only if\nthe transition succeeds :\n\n```ruby\n  job.run do\n    job.user.notify_job_ran # Will be called if job.may_run? is true\n  end\n```\n\n### Callbacks\n\nYou can define a number of callbacks for your transitions. These methods will be\ncalled, when certain criteria are met, like entering a particular state:\n\n```ruby\nclass Job\n  include AASM\n\n  aasm do\n    state :sleeping, :initial => true, :before_enter => :do_something\n    state :running\n\n    after_all_transitions :log_status_change\n\n    event :run, :after => :notify_somebody do\n      before do\n        log(\'Preparing to run\')\n      end\n\n      transitions :from => :sleeping, :to => :running, :after => Proc.new {|*args| set_process(*args) }\n    end\n\n    event :sleep do\n      after do\n        ...\n      end\n      error do |e|\n        ...\n      end\n      transitions :from => :running, :to => :sleeping\n    end\n  end\n\n  def log_status_change\n    puts "changing from #{aasm.from_state} to #{aasm.to_state} (event: #{aasm.current_event})"\n  end\n\n  def set_process(name)\n    ...\n  end\n\n  def do_something\n    ...\n  end\n\n  def notify_somebody(user)\n    ...\n  end\n\nend\n```\n\nIn this case `do_something` is called before actually entering the state `sleeping`,\nwhile `notify_somebody` is called after the transition `run` (from `sleeping` to `running`)\nis finished.\n\nHere you can see a list of all possible callbacks, together with their order of calling:\n\n```ruby\nbegin\n  event           before\n  event           guards\n  transition      guards\n  old_state       before_exit\n  old_state       exit\n                  after_all_transitions\n  transition      after\n  new_state       before_enter\n  new_state       enter\n  ...update state...\n  event         success             # if persist successful\n  old_state       after_exit\n  new_state       after_enter\n  event           after\nrescue\n  event           error\nend\n```\n\nAlso, you can pass parameters to events:\n\n```ruby\n  job = Job.new\n  job.run(:running, :defragmentation)\n```\n\nIn this case the `set_process` would be called with `:defragmentation` argument.\n\nNote that when passing arguments to a state transition, the first argument must be the desired end state. In the above example, we wish to transition to `:running` state and run the callback with `:defragmentation` argument. You can also pass in `nil` as the desired end state, and AASM will try to transition to the first end state defined for that event.\n\nIn case of an error during the event processing the error is rescued and passed to `:error`\ncallback, which can handle it or re-raise it for further propagation.\n\nDuring the transition\'s `:after` callback (and reliably only then, or in the global\n`after_all_transitions` callback) you can access the originating state (the from-state)\nand the target state (the to state), like this:\n\n```ruby\n  def set_process(name)\n    logger.info "from #{aasm.from_state} to #{aasm.to_state}"\n  end\n```\n\n#### The current event triggered\n\nWhile running the callbacks you can easily retrieve the name of the event triggered\nby using `aasm.current_event`:\n\n```ruby\n  # taken the example callback from above\n  def do_something\n    puts "triggered #{aasm.current_event}"\n  end\n```\n\nand then\n\n```ruby\n  job = Job.new\n\n  # without bang\n  job.sleep # => triggered :sleep\n\n  # with bang\n  job.sleep! # => triggered :sleep!\n```\n\n\n### Guards\n\nLet\'s assume you want to allow particular transitions only if a defined condition is\ngiven. For this you can set up a guard per transition, which will run before actually\nrunning the transition. If the guard returns `false` the transition will be\ndenied (raising `AASM::InvalidTransition` or returning `false` itself):\n\n```ruby\nclass Cleaner\n  include AASM\n\n  aasm do\n    state :idle, :initial => true\n    state :cleaning\n\n    event :clean do\n      transitions :from => :idle, :to => :cleaning, :guard => :cleaning_needed?\n    end\n\n    event :clean_if_needed do\n      transitions :from => :idle, :to => :cleaning do\n        guard do\n          cleaning_needed?\n        end\n      end\n      transitions :from => :idle, :to => :idle\n    end\n  end\n\n  def cleaning_needed?\n    false\n  end\nend\n\njob = Cleaner.new\njob.may_clean?            # => false\njob.clean                 # => raises AASM::InvalidTransition\njob.may_clean_if_needed?  # => true\njob.clean_if_needed!      # idle\n```\n\nYou can even provide a number of guards, which all have to succeed to proceed\n\n```ruby\n    def walked_the_dog?; ...; end\n\n    event :sleep do\n      transitions :from => :running, :to => :sleeping, :guards => [:cleaning_needed?, :walked_the_dog?]\n    end\n```\n\nIf you want to provide guards for all transitions within an event, you can use event guards\n\n```ruby\n    event :sleep, :guards => [:walked_the_dog?] do\n      transitions :from => :running, :to => :sleeping, :guards => [:cleaning_needed?]\n      transitions :from => :cleaning, :to => :sleeping\n    end\n```\n\nIf you prefer a more Ruby-like guard syntax, you can use `if` and `unless` as well:\n\n```ruby\n    event :clean do\n      transitions :from => :running, :to => :cleaning, :if => :cleaning_needed?\n    end\n\n    event :sleep do\n      transitions :from => :running, :to => :sleeping, :unless => :cleaning_needed?\n    end\n  end\n```\n\n\n### Transitions\n\nIn the event of having multiple transitions for an event, the first transition that successfully completes will stop other transitions in the same event from being processed.\n\n```ruby\nrequire \'aasm\'\n\nclass Job\n  include AASM\n\n  aasm do\n    state :stage1, :initial => true\n    state :stage2\n    state :stage3\n    state :completed\n\n    event :stage1_completed do\n      transitions from: :stage1, to: :stage3, guard: :stage2_completed?\n      transitions from: :stage1, to: :stage2\n    end\n  end\n\n  def stage2_completed?\n    true\n  end\nend\n\njob = Job.new\njob.stage1_completed\njob.aasm.current_state # stage3\n```\n\n\n### Multiple state machines per class\n\nMultiple state machines per class are supported. Be aware though that _AASM_ has been\nbuilt with one state machine per class in mind. Nonetheless, here\'s how to do it:\n\n```ruby\nclass SimpleMultipleExample\n  include AASM\n  aasm(:move) do\n    state :standing, :initial => true\n    state :walking\n    state :running\n\n    event :walk do\n      transitions :from => :standing, :to => :walking\n    end\n    event :run do\n      transitions :from => [:standing, :walking], :to => :running\n    end\n    event :hold do\n      transitions :from => [:walking, :running], :to => :standing\n    end\n  end\n\n  aasm(:work) do\n    state :sleeping, :initial => true\n    state :processing\n\n    event :start do\n      transitions :from => :sleeping, :to => :processing\n    end\n    event :stop do\n      transitions :from => :processing, :to => :sleeping\n    end\n  end\nend\n\nsimple = SimpleMultipleExample.new\n\nsimple.aasm(:move).current_state\n# => :standing\nsimple.aasm(:work).current\n# => :sleeping\n\nsimple.start\nsimple.aasm(:move).current_state\n# => :standing\nsimple.aasm(:work).current\n# => :processing\n\n```\n\n_AASM_ doesn\'t prohibit to define the same event in more than one state machine. The\nlatest definition "wins" and overrides previous definitions. Nonetheless, a warning is issued:\n`SimpleMultipleExample: The aasm event name run is already used!`.\n\nAll _AASM_ class- and instance-level `aasm` methods accept a state machine selector.\nSo, for example, to use inspection on a class level, you have to use\n\n```ruby\nSimpleMultipleExample.aasm(:work).states\n# => [:standing, :walking, :running]\n```\n\n*Final note*: Support for multiple state machines per class is a pretty new feature\n(since version `4.3`), so please bear with us in case it doesn\'t work as expected.\n\n\n\n### ActiveRecord\n\nAASM comes with support for ActiveRecord and allows automatic persisting of the object\'s\nstate in the database.\n\n```ruby\nclass Job < ActiveRecord::Base\n  include AASM\n\n  aasm do # default column: aasm_state\n    state :sleeping, :initial => true\n    state :running\n\n    event :run do\n      transitions :from => :sleeping, :to => :running\n    end\n\n    event :sleep do\n      transitions :from => :running, :to => :sleeping\n    end\n  end\n\nend\n```\n\nYou can tell AASM to auto-save the object or leave it unsaved\n\n```ruby\njob = Job.new\njob.run   # not saved\njob.run!  # saved\n```\n\nSaving includes running all validations on the `Job` class. If you want make sure\nthe state gets saved without running validations (and thereby maybe persisting an\ninvalid object state), simply tell AASM to skip the validations. Be aware that\nwhen skipping validations, only the state column will be updated in the database\n(just like ActiveRecord `change_column` is working).\n\n```ruby\nclass Job < ActiveRecord::Base\n  include AASM\n\n  aasm :skip_validation_on_save => true do\n    state :sleeping, :initial => true\n    state :running\n\n    event :run do\n      transitions :from => :sleeping, :to => :running\n    end\n\n    event :sleep do\n      transitions :from => :running, :to => :sleeping\n    end\n  end\n\nend\n```\n\nIf you want to make sure that the _AASM_ column for storing the state is not directly assigned,\nconfigure _AASM_ to not allow direct assignment, like this:\n\n```ruby\nclass Job < ActiveRecord::Base\n  include AASM\n\n  aasm :no_direct_assignment => true do\n    state :sleeping, :initial => true\n    state :running\n\n    event :run do\n      transitions :from => :sleeping, :to => :running\n    end\n  end\n\nend\n```\n\nresulting in this:\n\n```ruby\njob = Job.create\njob.aasm_state # => \'sleeping\'\njob.aasm_state = :running # => raises AASM::NoDirectAssignmentError\njob.aasm_state # => \'sleeping\'\n```\n\n#### ActiveRecord enums\n\nYou can use\n[enumerations](http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html)\nin Rails 4.1+ for your state column:\n\n```ruby\nclass Job < ActiveRecord::Base\n  include AASM\n\n  enum state: {\n    sleeping: 5,\n    running: 99\n  }\n\n  aasm :column => :state, :enum => true do\n    state :sleeping, :initial => true\n    state :running\n  end\nend\n```\n\nYou can explicitly pass the name of the method which provides access\nto the enumeration mapping as a value of ```enum```, or you can simply\nset it to ```true```. In the latter case AASM will try to use\npluralized column name to access possible enum states.\n\nFurthermore, if your column has integer type (which is normally the\ncase when you\'re working with Rails enums), you can omit ```:enum```\nsetting --- AASM auto-detects this situation and enabled enum\nsupport. If anything goes wrong, you can disable enum functionality\nand fall back to the default behavior by setting ```:enum```\nto ```false```.\n\n### Sequel\n\nAASM also supports [Sequel](http://sequel.jeremyevans.net/) besides _ActiveRecord_, _Mongoid_, and _MongoMapper_.\n\n```ruby\nclass Job < Sequel::Model\n  include AASM\n\n  aasm do # default column: aasm_state\n    ...\n  end\nend\n```\n\nHowever it\'s not yet as feature complete as _ActiveRecord_. For example, there are\nscopes defined yet. See [Automatic Scopes](#automatic-scopes).\n\n### Mongoid\n\nAASM also supports persistence to Mongodb if you\'re using Mongoid. Make sure\nto include Mongoid::Document before you include AASM.\n\n```ruby\nclass Job\n  include Mongoid::Document\n  include AASM\n  field :aasm_state\n  aasm do\n    ...\n  end\nend\n```\n\n### MongoMapper\n\nAASM also supports persistence to Mongodb if you\'re using MongoMapper. Make sure\nto include MongoMapper::Document before you include AASM.\n\n```ruby\nclass Job\n  include MongoMapper::Document\n  include AASM\n\n  key :aasm_state,                   Symbol\n  aasm do\n    ...\n  end\nend\n```\n\n### Automatic Scopes\n\nAASM will automatically create scope methods for each state in the model.\n\n```ruby\nclass Job < ActiveRecord::Base\n  include AASM\n\n  aasm do\n    state :sleeping, :initial => true\n    state :running\n    state :cleaning\n  end\n\n  def self.sleeping\n    "This method name is already in use"\n  end\nend\n```\n\n```ruby\nclass JobsController < ApplicationController\n  def index\n    @running_jobs = Job.running\n    @recent_cleaning_jobs = Job.cleaning.where(\'created_at >=  ?\', 3.days.ago)\n\n    # @sleeping_jobs = Job.sleeping   #=> "This method name is already in use"\n  end\nend\n```\n\nIf you don\'t need scopes (or simply don\'t want them), disable their creation when\ndefining the `AASM` states, like this:\n\n```ruby\nclass Job < ActiveRecord::Base\n  include AASM\n\n  aasm :create_scopes => false do\n    state :sleeping, :initial => true\n    state :running\n    state :cleaning\n  end\nend\n```\n\n\n### Transaction support\n\nSince version *3.0.13* AASM supports ActiveRecord transactions. So whenever a transition\ncallback or the state update fails, all changes to any database record are rolled back.\nMongodb does not support transactions.\n\nIf you want to make sure a depending action happens only after the transaction is committed,\nuse the `after_commit` callback along with the auto-save (bang) methods, like this:\n\n```ruby\nclass Job < ActiveRecord::Base\n  include AASM\n\n  aasm do\n    state :sleeping, :initial => true\n    state :running\n\n    event :run, :after_commit => :notify_about_running_job do\n      transitions :from => :sleeping, :to => :running\n    end\n  end\n\n  def notify_about_running_job\n    ...\n  end\nend\n\njob = Job.where(state: \'sleeping\').first!\njob.run! # Saves the model and triggers the after_commit callback\n```\n\nNote that the following will not run the `after_commit` callbacks because\nthe auto-save method is not used:\n\n```ruby\njob = Job.where(state: \'sleeping\').first!\njob.run\njob.save! #notify_about_running_job is not run\n```\n\nIf you want to encapsulate state changes within an own transaction, the behavior\nof this nested transaction might be confusing. Take a look at\n[ActiveRecord Nested Transactions](http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html)\nif you want to know more about this. Nevertheless, AASM by default requires a new transaction\n`transaction(:requires_new => true)`. You can override this behavior by changing\nthe configuration\n\n```ruby\nclass Job < ActiveRecord::Base\n  include AASM\n\n  aasm :requires_new_transaction => false do\n    ...\n  end\n\n  ...\nend\n```\n\nwhich then leads to `transaction(:requires_new => false)`, the Rails default.\n\n\n### Column name & migration\n\nAs a default AASM uses the column `aasm_state` to store the states. You can override\nthis by defining your favorite column name, using `:column` like this:\n\n```ruby\nclass Job < ActiveRecord::Base\n  include AASM\n\n  aasm :column => \'my_state\' do\n    ...\n  end\n\nend\n```\n\nWhatever column name is used, make sure to add a migration to provide this column\n(of type `string`):\n\n```ruby\nclass AddJobState < ActiveRecord::Migration\n  def self.up\n    add_column :jobs, :aasm_state, :string\n  end\n\n  def self.down\n    remove_column :jobs, :aasm_state\n  end\nend\n```\n\n### Inspection\n\nAASM supports a couple of methods to find out which states or events are provided or permitted.\n\nGiven this `Job` class:\n\n```ruby\n# show all states\nJob.aasm.states.map(&:name)\n=> [:sleeping, :running, :cleaning]\n\njob = Job.new\n\n# show all permitted (reachable / possible) states\njob.aasm.states(:permitted => true).map(&:name)\n=> [:running]\njob.run\njob.aasm.states(:permitted => true).map(&:name)\n=> [:cleaning, :sleeping]\n\n# show all possible (triggerable) events (allowed by transitions)\njob.aasm.events.map(&:name)\n=> [:sleep]\njob.aasm.events(:reject => :sleep).map(&:name)\n=> []\n\n# list states for select\nJob.aasm.states_for_select\n=> [["Sleeping", "sleeping"], ["Running", "running"], ["Cleaning", "cleaning"]]\n```\n\n\n### Testing\n\nAASM provides some matchers for [RSpec](http://rspec.info): `transition_from`, `have_state`, `allow_event` and `allow_transition_to`. Add `require \'aasm/rspec\'` to your `spec_helper.rb` file and use them like this\n\n```ruby\n# classes with only the default state machine\njob = Job.new\nexpect(job).to transition_from(:sleeping).to(:running).on_event(:run)\nexpect(job).not_to transition_from(:sleeping).to(:cleaning).on_event(:run)\nexpect(job).to have_state(:sleeping)\nexpect(job).not_to have_state(:running)\nexpect(job).to allow_event :run\nexpect(job).to_not allow_event :clean\nexpect(job).to allow_transition_to(:running)\nexpect(job).to_not allow_transition_to(:cleaning)\n\n# classes with multiple state machine\nmultiple = SimpleMultipleExample.new\nexpect(multiple).to transition_from(:standing).to(:walking).on_event(:walk).on(:move)\nexpect(multiple).to_not transition_from(:standing).to(:running).on_event(:walk).on(:move)\nexpect(multiple).to have_state(:standing).on(:move)\nexpect(multiple).not_to have_state(:walking).on(:move)\nexpect(multiple).to allow_event(:walk).on(:move)\nexpect(multiple).to_not allow_event(:hold).on(:move)\nexpect(multiple).to allow_transition_to(:walking).on(:move)\nexpect(multiple).to_not allow_transition_to(:running).on(:move)\nexpect(multiple).to transition_from(:sleeping).to(:processing).on_event(:start).on(:work)\nexpect(multiple).to_not transition_from(:sleeping).to(:sleeping).on_event(:start).on(:work)\nexpect(multiple).to have_state(:sleeping).on(:work)\nexpect(multiple).not_to have_state(:processing).on(:work)\nexpect(multiple).to allow_event(:start).on(:move)\nexpect(multiple).to_not allow_event(:stop).on(:move)\nexpect(multiple).to allow_transition_to(:processing).on(:move)\nexpect(multiple).to_not allow_transition_to(:sleeping).on(:move)\n```\n\n## <a id="installation">Installation ##\n\n### Manually from RubyGems.org ###\n\n```sh\n% gem install aasm\n```\n\n### Or if you are using Bundler ###\n\n```ruby\n# Gemfile\ngem \'aasm\'\n```\n\n### Building your own gems ###\n\n```sh\n% rake build\n% sudo gem install pkg/aasm-x.y.z.gem\n```\n\n## Latest changes ##\n\nTake a look at the [CHANGELOG](https://github.com/aasm/aasm/blob/master/CHANGELOG.md) for details about recent changes to the current version.\n\n## Questions? ##\n\nFeel free to\n\n* [create an issue on GitHub](https://github.com/aasm/aasm/issues)\n* [ask a question on StackOverflow](http://stackoverflow.com) (tag with `aasm`)\n* send us a tweet [@aasm](http://twitter.com/aasm)\n\n## Maintainers ##\n\n* [Scott Barron](https://github.com/rubyist) (2006\xe2\x80\x932009, original author)\n* [Travis Tilley](https://github.com/ttilley) (2009\xe2\x80\x932011)\n* [Thorsten B\xc3\xb6ttger](http://github.com/alto) (since 2011)\n\n\n## Contributing ##\n\n1. Read the [Contributor Code of Conduct](https://github.com/aasm/aasm/blob/master/CODE_OF_CONDUCT.md)\n2. Fork it\n3. Create your feature branch (git checkout -b my-new-feature)\n4. Commit your changes (git commit -am \'Added some feature\')\n5. Push to the branch (git push origin my-new-feature)\n6. Create new Pull Request\n\n## Warranty ##\n\nThis software is provided "as is" and without any express or\nimplied warranties, including, without limitation, the implied\nwarranties of merchantibility and fitness for a particular\npurpose.\n\n## License ##\n\nCopyright (c) 2006-2015 Scott Barron\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Solves the mortal coil game (check http://hacker.org/coil/) 
This plugin allows you to create 'scenarios' which are collections of fixtures and ruby files that represent a context against which you can run tests. b'Copyright (c) 2007 Tom Preston-Werner\n\n=FixtureScenarios\n\nThis plugin allows you to create "scenarios" which are collections of fixtures\nand ruby files that represent a context against which you can run tests.\n\n==Disclaimer\n\nThis software is in Beta.\nSend feedback to tom at rubyisawesome dot com or find me (mojombo) on irc.freenode.net.\n\n==Installation\n\nFixtureScenarios should work on both 1.1.6 and edge rails.\nCurrently you must install this plugin from the subversion repository\n\n  script/plugin install http://fixture-scenarios.googlecode.com/svn/trunk/fixture_scenarios\n\n==WARNING\n\nBecause this plugin clears out fixture data between your test classes, you may\nsee some of your tests fail after installation. If this occurs, look at your\ntests to see if you didn\'t actually load a required fixture for that test\nclass. If you forgot to add it and your tests passed anyway (because of\nfixture contamination), just add the missing fixture(s) and you\'ll be good\nto go.\n\n==The Basics\n\nTo create a scenario, simply create a subdirectory under test/fixtures in your\nRails app. The name of the subdirectory will be the name of the scenario.\nInside this new directory, you can place fixture files, and/or Ruby files.\n\n  [RAILS_ROOT]\n  +-test/\n    +-fixtures/\n      +-brand_new_user/\n        +-users.yml\n  \n  # in users.yml\n  borges:\n    id: 1\n    name: Jorge Luis Borges\n    active: 1\n\nTo load the scenario for testing, you simply use the +scenario+ method instead\nof the normal +fixtures+ method.\n\n  require File.dirname(__FILE__) + \'/../test_helper\'\n\n  class UserTest < Test::Unit::TestCase\n    scenario :brand_new_user\n\n    def test_should_be_active\n      assert users(:borges).active?\n    end\n  end\n\nAll of the fixtures placed into your scenario directory will be loaded when\nyou invoke the +scenario+ method with your scenario name. In addition, any\nRuby files you place in the scenario directory will be run after the fixtures.\nYou can use a Ruby file to create non-database model instances, set up\nrelationships between fixtures (instead of creating fixtures for the join\ntables), or replace fixtures entirely by creating your database items with\nRuby code.\n\nIn this example, +scenario+ will actually load all fixtures from the fixture\ndirectory *and* your scenario directory. This is useful if you have some\nfixtures (such as lookup data) that you\'d like to have in most of your\nscenarios. To prevent the loading of fixtures in the fixtures root directory,\nuse the <tt>:root</tt> option. This can be very useful if you still have tests\nusing regular fixtures.\n\n  scenario :brand_new_user, :root => false\n  \nIf you\'ve just started FixtureScenarios on an existing project, adding\n:root => false to every scenario call will become tedious, so you can set\nthe option globally in your test_helper.rb (inside the Test::Unit::TestCase\nclass) like so:\n\n  self.scenarios_load_root_fixtures = false\n\nTo keep things DRY in your scenarios, you can extend or layer scenarios on top\nof each other. Following with our example, to create an "experienced user"\nscenario, we could create another subdirectory under the existing\n"brand_new_user" that would contain fixture/Ruby files that add upon the\n"brand new user" scenario.\n\n  [RAILS_ROOT]\n  +-test/\n    +-fixtures/\n      +-brand_new_user/\n        +-users.yml\n        +-experienced_user/\n          +-articles.yml\n\nNow when you load the +experienced_user+ scenario, it will load any\nfixture/Ruby files in "fixtures", then in "brand_new_user", then in\n"experienced_user"! Building off of your existing scenarios keeps data\nredundancy to a minimum, and makes it easy to change data for multiple\nscenarios simultaneously.\n\n==Testing your scenarios\n\nScenarios represent your assumptions about a given context. If these\nassumptions are wrong, your tests will be inaccurate. Your scenarios should be\nunit tested along with the rest of your application. This plugin allows you to\nplace scenario tests in a "scenario" directory under your "test" directory.\n\n  [RAILS_ROOT]\n  +-test/\n    +-scenario/\n      +-brand_new_user_test.rb\n      +-experienced_user_test.rb\n  \nYou can run these tests with rake.\n\n  rake test:scenarios  # run just scenario tests\n  rake                 # run unit, functional, integration, and scenario tests\n\nScenario tests will protect you from accidentally changing your assumptions in\na dangerous or transparent way when modifying existing scenarios.'
Process title support for Mongrel (GemPlugin) b'Mongrel process title GemPlugin\n===============================\n\nThis is a simple plugin for Mongrel which changes the process title to reflect\nwhat it\'s currently doing. You can then determine a given Mongrel server\'s \nstatus using "ps". \n\nFor example:\n\n  mongrel_rails [10010/2/358]: handling 127.0.0.1: HEAD /feed/cal/global/91/6de4\n                 |     | |     |        |          |\n                 |     | |     |        |          The current req (method / path)\n                 |     | |     |        |\n                 |     | |     |        The client IP\n                 |     | |     |\n                 |     | |     What it\'s doing\n                 |     | |     \n                 |     | Requests processed during server lifetime\n                 |     |\n                 |     Requests currently queued/being processed concurrently\n                 |\n                 The port that Mongrel is serving\n\nThis is almost entirely based on Alexander Staubo\'s Rails plugin with the same \nname:\n\nhttp://purefiction.net/mongrel_proctitle/\n\nThe main difference is that the GemPlugin will automatically be loaded by all\nmongrels without additional code changes or configuration.\n\nMonitoring Mongrels\n-------------------\n\nOnce the program is installed, you should be able to see the formatted process\ntitle by running:\n\n    $ ps -axwwo pid,command | grep mongrel_rails\n\nSee ps(1) for more options. You may want to include %cpu, rsz, %mem, or other\nfields in output.\n\nThere\'s also a `mongrel_top` executable included in the gem that works like\ntop(1) but displays only mongrel processes:\n\n    $ mongrel_top\n\nBy default, `mongrel_top` updates the display every 0.25 seconds and shows the\npid and process title. You can select a different interval and fields with the\n-s and -o arguments, respectively: \n\n    $ mongrel_top -s 0.1 -o pid,%cpu,rsz,command\n\nThe "command" field must be included.\n\nInstallation\n------------\n\nThis version of the plugin is packaged specifically as a Mongrel GemPlugin. Install \nusing:\n\n   gem install mongrel_proctitle --source=http://tomayko.com\n\nOnce installed, all new mongrels will automatically load the plugin during startup. If\nyou would prefer to control which mongrels load the plugin, do not install this gem.\nUse the directions below instead.\n\nInstalling into a specific Rails app only\n-----------------------------------------\n\nSee Alexander Staubo\'s original project:\n\nhttp://purefiction.net/mongrel_proctitle/\n\nShowing your application-specific revision/release in the title\n-------------------------------------------------------------------\n\nIn your application\'s start-up process, re-open Mongrel::Proctitler\nand define a get_app_revision method. In a Rails app, a good place\nto do this is in RAILS_ROOT/config/environments/production.rb. An\nexample get_app_revision method might look like:\n\n  def get_app_revision\n    `cat ./REVISION`.chomp\n  end\n\nLicense\n-------\n\nI\'ve included the LICENSE file from the original mongrel_proctitle distribution. It is\nthe "New and Simplified BSD License". More information on this license can be found at:\n\nhttp://www.opensource.org/licenses/bsd-license.php\n'
A JSON reader and writer library using GLib and GObject b'JSON-GLib\n===============================================================================\n\nJSON-GLib implements a full suite of JSON-related tools using GLib and GObject.\n\nUse JSON-GLib it is possible to parse and generate valid JSON data\nstructures using a DOM-like API. JSON-GLib also integrates with GObject to\nprovide the ability to serialize and deserialize GObject instances to and from\nJSON data types.\n\nJSON is the JavaScript Object Notation; it can be used to represent objects and\nobject hierarchies while retaining human-readability.\n\nGLib is a C library providing common and efficient data types for the C\ndevelopers.\n\nGObject is a library providing a run-time Object Oriented type system for C\ndevelopers. GLib and GObject are extensively used by the GTK+ toolkit and by the\nGNOME project.\n\nFor more information, see:\n\n * [JSON][json]\n * [GLib and GObject][glib]\n * [JSON-GLib][json-glib]\n\nREQUIREMENTS\n------------\nIn order to build JSON-GLib you will need:\n\n * pkg-config\n * gtk-doc \xe2\x89\xa5 1.13\n * GLib, GIO \xe2\x89\xa5 2.38\n\nOptionally, JSON-GLib depends on:\n\n * GObject-Introspection \xe2\x89\xa5 1.38\n * LCov \xe2\x89\xa5 1.6\n\nINSTALLATION\n------------\nTo build JSON-GLib just run:\n\n    $ ./configure\n    $ make all\n    # make install\n\nBUGS\n----\nJSON-GLib tracks bugs in the GNOME Bugzilla.\n\nIf you find a bug in JSON-GLib, please file an issue using\n[the appropriate form][bugzilla-enter-bug]. You can also check\n[the list of open bugs][bugzilla-bug-page].\n\nRequired information:\n\n * the version of JSON-GLib\n  * if it is a development version, the branch of the git repository\n * the JSON data that produced the bug (if any)\n * a small, self-contained test case, if none of the test units exhibit the\n   buggy behaviour\n * in case of a segmentation fault, a full stack trace with debugging\n   symbols obtained through gdb is greatly appreaciated\n\nRELEASE NOTES\n-------------\n * Prior to JSON-GLib 0.10, a JsonSerializable implementation could\n   automatically fall back to the default serialization code by simply\n   returning NULL from an overridden JsonSerializable::serialize-property\n   virtual function. Since JSON-GLib 0.10 this is not possible any more. A\n   JsonSerializable is always expected to serialize and deserialize all\n   properties. JSON-GLib provides public API for the default implementation\n   in case the serialization code wants to fall back to that.\n\nHACKING\n-------\nJSON-GLib is developed mainly inside a GIT repository available at:\n\n    https://git.gnome.org/browse/json-glib\n\nYou can clone the GIT repository with:\n\n    git clone git://git.gnome.org/json-glib\n\nIf you want to contribute functionality or bug fixes to JSON-GLib you can either\nnotify me to pull from your Git repository, or you can attach patches for review\nto a bug on [the bug tracking system][bugzilla] using\n\n    git format-patch master -k -s\n\nto generate the patches from each commit. Using [git-bz][git-bz] to automate\nthis process is strongly encouraged.\n\nPlease, try to conform to the coding style used by JSON-GLib, which is the same\nused by projects like GLib, GTK+, and Clutter. Coding style conformance is a\nrequirement for upstream acceptance.\n\nMake sure you always run the test suite when you are fixing bugs. New features\nshould come with a test unit. Patches that regress the test suite will be\nrejected.\n\nAUTHOR, COPYRIGHT AND LICENSING\n-------------------------------\nJSON-GLib has been written by Emmanuele Bassi\n\nJSON-GLib is released under the terms of the GNU Lesser General Public License,\neither version 2.1 or (at your option) any later version.\n\nSee the file COPYING for details.\n\nCopyright (C) 2007, 2008  OpenedHand Ltd\nCopyright (C) 2009, 2010, 2011, 2012  Intel Corp.\nCopyright (C) 2013  Emmanuele Bassi\n\n[json]: http://www.json.org "JSON"\n[glib]: http://www.gtk.org "GTK+"\n[json-glib]: https://wiki.gnome.org/Projects/JsonGlib "JSON-GLib wiki"\n[bugzilla]: https://bugzilla.gnome.org "GNOME Bugzilla"\n[bugzilla-bug-page]: https://http://bugzilla.gnome.org/browse.cgi?product=json-glib "GNOME Bugzilla - Browse: json-glib"\n[bugzilla-enter-bug]: https://bugzilla.gnome.org/enter_bug.cgi?product=json-glib "GNOME Bugzilla - Enter bug: json-glib"\n[git-bz]: http://blog.fishsoup.net/2008/11/16/git-bz-bugzilla-subcommand-for-git/\n'
Flickr like web application for pictures, build offline at Railscamp 2.0 in Bacchus Marsh, Australia b"Welcome to Piccr\n================\n\nPiccr is a Flickr style photo upload web application built in 24 hours by\nMarcus Crafter and Lachlan Hardy at Railscamp 2.0, in Bacchus Marsh,\nAustralia, 2007.\n\nRailscamp is a weekend where Rails and related technology aficionados gather\nfor 2 days of solid hacking, partying, guitar hero and general fun.\n\nThe past two events have been in camp sites with no internet access at all,\nand this has sparked a bunch of sites to be built, Piccr was created so that\npeople during the camp could upload any photos they'd like, taken during the\ncamp, for all to see.\n\nPiccr offers a forms and REST based API for uploading content which others\nhave also taken advantage of, during Railscamp Lachie Cox built a Cocoa\nfrontend that would let you submit photos via your Mac's inbuilt iSight at a\ntouch of a button.\n\nIt's a small Rails app, but please feel free to hack it, any patches more\nthan welcome! Enjoy!\n\n--\nMarcus Crafter <crafterm@redartisan.com>\n\n"
Classy web-development dressed in a DSL b'= Sinatra\n\nSinatra a DSL for quickly creating web-applications in Ruby with minimal effort.\n\n= Sample app:\n\n  # myapp.rb\n\n  require \'rubygems\'\n  require \'sinatra\'\n\n  get \'/\' do\n    \'Hello world!\'\n  end\n\nRuby this as <tt>ruby myapp.rb</tt> and view at <tt>http://localhost:4567</tt>\n\n= RESTful\n\n  get \'/\' do\n    .. show things ..\n  end\n  \n  post \'/\' do\n    .. create something ..\n  end\n  \n  put \'/\' do\n    .. update something ..\n  end\n  \n  delete \'/\' do\n    .. annihilate something ..\n  end\n  \n  head \'/\' do\n  \n  end\n\nNOTE:  <tt>put</tt> and <tt>delete</tt> are triggered when a <tt>_method</tt> param is set to PUT or DELETE and the HTTP_REQUEST_METHOD is a POST\n\n= Routes\n\nNOTE: Routes are looked up in order of declaration\n\nSimple\n\n  get \'/hi\' do\n    ...\n  end\n  \nWith params\n\n  get \'/:name\' do\n    # matches /sinatra and the like and sets params[:name]\n  end\n  \nSplat\'n\n\n  get \'/say/*/to/*\' do\n    # matches /say/hello/to/world\n    params["splat"] # => ["hello", "world"]\n  end\n\n  get \'/download/*.*\' do\n    # matches /download/path/to/file.xml\n    params["splat"] # => ["path/to/file", "xml"]\n  end\n  \nGet an agent!\n  \n  get \'/foo\', :agent => /Songbird (\\d\\.\\d)[\\d\\/]*?/ do\n    "You\'re using Songbird version #{params[:agent][0]}"\n  end\n\n  get \'/foo\' do\n    # matches non-songbird browsers\n  end\n\n= Static files\n\nPut all of your static content in the ./public directory\n\n  root\n    \\ public\n    \nIf a file exists that maps to the REQUEST_PATH then it is served and the request end; Sinatra will look for and event that matches the path otherwise\n\n= Views (if you need MVC)\n\nAll file-based views are looked up in:\n\n  root\n    | - views/\n    \n\n== Templates\n  \n=== Haml\n\n  get \'/\' do\n    haml :index\n  end\n  \nThis will render <tt>./views/index.haml</tt>\n\n=== Sass\n  get \'/stylesheet.css\' do\n    content_type \'text/css\', :charset => \'utf-8\'\n    sass :stylesheet\n  end\n  \nThis will render <tt>./views/stylesheet.sass</tt>\n\n=== Inline\n\n  get \'/\' do\n    haml \'%div.title Hello World\'\n  end\n  \nThis will render the inlined template string\n\n=== Accessing Variables\n\nTemplates are rendered in the context the current Sinatra::EventContext.  This means you get all instance/class variables and methods it has access to.\n\n  get \'/:id\' do\n    @foo = Foo.find(params[:id])\n    haml \'%h1== @foo.name\'\n  end\n\nSend local objects like:\n\n  get \'/:id\' do\n    localvar = Foo.find(params[:id])\n    haml \'%h1== localvar.name\', :locals => { :localvar => localvar }\n  end\n  \nThis is more ideal for rendering templates as partials from within templates\n\n== In file templates\n\nThis one is cool:\n\n  get \'/\' do\n    haml :index\n  end\n  \n  use_in_file_templates!\n  \n  __END__\n  \n  @@ layout\n  X\n  = yield\n  X\n  \n  @@ index\n  %div.title Hello world!!!!!\n  \nTry it!\n\n= You can do this too but it\'s not as cool\n\n  template :layout do\n    "X\\n=yield\\nX"\n  end\n\n  template :index do\n    \'%div.title Hello World!\'\n  end\n\n  get \'/\' do\n    haml :index\n  end\n\n=== Erb\n\nThis works like Haml except you use <tt>erb</tt> instead of <tt>haml</tt>\n\n=== Sass\n\nThis works like Haml except you use <tt>sass</tt> instead of <tt>haml</tt>. It\'s also a good idea to add <tt>content_type \'text/css\', :charset => \'utf-8\'</tt> before your call to <tt>sass</tt> so Sinatra returns the proper content type header with the file.\n\n=== Builder\n\nSee Sinatra::Builder\n\n= Helpers\n\nIt is ill-advised to create helpers on (main).  Use the handy <tt>helpers</tt> to install helper methods on Sinatra::EventContext for use inside events and templates.\n\nExample:\n\n  helpers do\n    \n    def bar(name)\n      "#{name}bar"\n    end\n    \n  end\n  \n  get \'/:name\' do\n    bar(params[:name])\n  end\n\n= Before filters\n\nThese are run in Sinatra::EventContext\n\n  before do\n    .. this code will run before each event ..\n  end\n  \n= Halt!\n\nTo immediately stop a request during a before filter or event use:\n  \n  throw :halt\n  \n=== Variations\n\nSet the body to the result of a helper method\n\n  throw :halt, :helper_method\n  \nSet the body to the result of a helper method after sending it parameters from the local scope\n  \n  throw :halt, [:helper_method, foo, bar]\n    \nSet the body to a simple string\n\n  throw :halt, \'this will be the body\'\n  \nSet status then the body\n\n  throw :halt, [401, \'go away!\']\n  \nSet the status then call a helper method with params from local scope\n\n  throw :halt, [401, [:helper_method, foo, bar]]\n\nRun a proc inside the Sinatra::EventContext instance and set the body to the result\n\n  throw :halt, lambda { puts \'In a proc!\'; \'I just wrote to $stdout!\' }\n\nCreate you own to_result\n\n  class MyResultObject\n    def to_result(event_context, *args)\n      event_context.body = \'This will be the body!\n    end\n  end\n  \n  get \'/\' do\n    throw :halt, MyResultObject.new\n  end\n\nGet the gist?  If you want more fun with this then checkout <tt>to_result</tt> on Array, Symbol, Fixnum, NilClass.\n\n= Configuration & Re-loading\n\nSinatra supports multiple environments and re-loading.  Re-loading happens on every request when in :development.  Wrap your configurations in <tt>configure</tt> (i.e. Database connections, Constants, etc.) to protect them from re-loading and to only work in certain environments.\n\nAll environments:\n\n  configure do\n  \n  end\n  \nProduction\n\n  configure :production do\n  \n  end\n  \nTwo at a time:\n\n  configure :production, :test do\n  \n  end\n  \nThis is also really nifty for error handling.\n\n= Error handling\n\n=== Not Found\n\nRemember:  These are run inside the Sinatra::EventContext which means you get all the goodies is has to offer (i.e. haml, erb, :halt, etc.)\n\nWhenever NotFound is raised this will be called\n\n  not_found do\n    \'This is nowhere to be found\'\n  end\n  \n=== Error\n\nBy default +error+ will catch Sinatra::ServerError\n\nSinatra will pass you the error via the \'sinatra.error\' in request.env\n\n  error do\n    \'Sorry there was a nasty error - \' + request.env[\'sinatra.error\'].name\n  end\n\nCustom error mapping:\n\n  error MyCustomError do\n    \'So what happened was...\' + request.env[\'sinatra.error\'].message\n  end\n\nthen if this happens:\n\n  get \'/\' do\n    raise MyCustomError, \'something bad\'\n  end\n\nyou gets this:\n\n  So what happened was... something bad\n  \none guess what this does ;)\n\n  not_found do\n    \'I have no clue what you\'re looking for\'\n  end\n\nTry it!\n\n  \nBecause Sinatra give you a default <tt>not_found</tt> and <tt>error</tt> do :production that are secure.  If you want to customize only for :production but want to keep the friendly helper screens for :development then do this:\n\n  configure :production do\n\n    not_found do\n      "We\'re so sorry, but we don\'t what this is"\n    end\n    \n    error do\n      "Something really nasty happened.  We\'re on it!"\n    end\n  \n  end\n  \n= Mime types\n\nWhen using send_file or static files you may have mime types Sinatra doesn\'t understand.  Use +mime+ in those cases.\n\n  mime :foo, \'text/foo\'\n\n= Using Rack Middleware\n\nSinatra rides on Rack[http://rack.rubyforge.org/], a minimal standard interface for Ruby web frameworks. One of Rack\'s most interesting capabilities for application developers is support for "middleware" -- components that sit between the server and your application monitoring and/or manipulating the HTTP request/response to provide various types of common functionality. What\'s more, middleware is portable between web frameworks, so middleware components developed under, e.g., Merb, can be used with Sinatra and vice versa.\n\nSinatra makes building Rack middleware pipelines a cinch via a top-level +use+ method:\n\n  require \'sinatra\'\n  require \'my_custom_middleware\'\n\n  use Rack::Lint\n  use MyCustomMiddleware\n\n  get \'/hello\' do\n    \'Hello World\'\n  end\n\nThe semantics of +use+ are identical to those defined for the Rack::Builder[http://rack.rubyforge.org/doc/classes/Rack/Builder.html] DSL (most frequently used from rackup files). For example, the +use+ method accepts multiple/variable args as well as blocks:\n\n  use Rack::Auth::Basic do |username, password|\n    username == \'admin\' && password == \'secret\'\n  end\n\nRack is distributed with a variety of standard middleware for logging, debugging, URL routing, authentication, and session handling. Sinatra uses many of of these components automatically based on configuration so you typically don\'t have to +use+ them explicitly.\n\n= Testing\n\n=== Methods\n\n  get_it path, params\n  get_it path, params.merge(:env => { \'HTTP_HOST\' => \'www.sinatrarb.com\' }) or\n  get_it path, params.merge(:env => { :host => \'www.sinatrarb.com\' })\n  \nRESTful:\n\n  post_it \'/foo\', \'<myxml></myxml>\', \'HTTP_ACCEPT\' => \'application/xml\'\n\nalso works with:\n\n  get_it, post_it, put_it, delete_it, head_it\n\n=== Test/Unit\n\n  require \'my_sinatra_app\'\n  require \'sinatra/test/unit\'\n  \n  class MyAppTest < Test::Unit::TestCase\n    \n    def test_my_default\n      get_it \'/\'\n      assert_equal \'My Default Page!\', @response.body\n    end\n    \n    def test_with_agent\n      get_it \'/\', :agent => \'Songbird\'\n      assert_equal \'You\'re in Songbird!\', @response.body\n    end\n    \n    ...\n    \n  end\n  \n=== Test/Spec\n\n  require \'my_sinatra_app\'\n  require \'sinatra/test/spec\'\n\n  context \'My app\'\n  \n    should "show a default page" do\n      get_it \'/\'\n      should.be.ok\n      body.should.equal \'My Default Page!\'\n    end\n    ...\n  \n  end\n  \n== Test helpers\n\nSee Sinatra::Test::Methods\n\n= Irb\n\nThis will be back in soon\n\n= Command line\n\nRun your sinatra file like:\n  \n  ruby myapp.rb [options]\n\nOptions are:\n\n  -h # help\n  -p # set the port (default is 4567)\n  -e # set the environment (default is development)\n  -x # turn on the mutex lock (default is off)\n\n= Contribute\n\n  cd where/you/keep/your/projects\n  git clone git://github.com/bmizerany/sinatra.git\n  cd your_project\n  ln -s ../sinatra/\n\nat the top of your sinatra.rb file\n\n  $:.unshift File.dirname(__FILE__) + \'/sinatra/lib\'\n  require \'sinatra\'\n\n  get \'/about\' do\n    "I\'m running on Version " + Sinatra::Version.combined\n  end\n'
The ~/.vim directory that we share at work b"This is my ~/.vim dir and _this_, dear reader, is a horse:\n\n                   ,\n                  / \\,,_  .'|\n               ,{{| /}}}}/_.'\n              }}}}` '{{'  '.\n            {{{{{    _   ;, \\\n         ,}}}}}}    /o`\\  ` ;)\n        {{{{{{   /           (\n        }}}}}}   |            \\\n       {{{{{{{{   \\            \\          ,-------------------------------.\n       }}}}}}}}}   '.__      _  |        /       HI                        \\\n       {{{{{{{{       /`._  (_\\ /       /      /   \\                        |\n        }}}}}}'      |    //___/   --= <   VVVI     HI-HI-HI                |\n    jgs `{{{{`       |     '--'         \\                   \\               |\n         }}}`                            \\                  HIM-HIM-HIM!!!  /\n                                          '--------------------------------'\n\nInstallation\n============\n\nClone the repo:\n`git clone https://github.com/scrooloose/vimfiles.git ~/.vim`\n\nGrab the plugin submodules:\n`cd ~/.vim && git submodule init && git submodule update`\n\n\nMake sure vim finds the vimrc file by either symlinking it:\n`ln -s ~/.vim/vimrc ~/.vimrc`\n\nor by sourcing it from  your own ~/.vimrc:\n`source ~/.vim/vimrc`\n"
Personal blog software written with Merb b'FightinJoe Merb + DataMapper + jQuery blogging system\n\n====\n\nA wise man once said, "every beginning Rails developer should\nwrite their own blog software." (Geoffrey Grosenbach - \nhttp://nubyonrails.com/articles/about-this-blog-memcached)\n\nI\'d extend this to say that every Rails developer should write\ntheir own blog software in Merb (or Sinatra, or Camping, or\nDjango, or any other alternative framework).\n\nThis is my ongoing investigation into alternatives to the norm.\nIt is a blogging app that solves my very-specific blogging needs.\nIt probably won\'t suit your needs, but you may find some insight\nby looking at the way that I\'ve done things.'
Ruby image manipulation library utilizing Core Image 
Screen capture tool for OSX b'Capture\n=======\n\nCapture is a command line screenshot capture tool for Mac OS X Leopard. It\nuses RubyCocoa to take a screenshot of your desktop and save it to a file.\n\n--\n\nMarcus Crafter <crafterm@redartisan.com>\n\n'
translation wiki 
Paper for special issue of European Journal of Philosophy b'README\n\nraz\n\nCreated by Mark Eli Kalderon on 2008-02-29\n\n# Introduction\n\nDirectory includes source of the paper "Respecting Value" a paper for a\nspecial issue of European Journal of Philosophy consisting of papers\noriginally presented at the One-Day Conference, "In Pursuit of Reason:\nEngaging Joseph Raz on Reason and Value", held at the Instute of Philosophy,\nSchool of Advanced Study, Friday 12th May 2006, Room ST274/275 Stewart House,\nRussell Square, London.\n\n# Contents\n\n1. NOTES\n2. README\n3. TODO\n4. raz.tex\n5. vc\n6. vc-git.awk'
Ruby extension to support execution of python 
Configure Rails To Use Gmail's SMTP 
System automation tool b'Documentation (and detailed install instructions) can be found \nonline at http://reductivelabs.com/trac/puppet/wiki/DocumentationStart .\n\nGenerally, you need the following things installed:\n\n* Ruby >= 1.8.1 (earlier releases might work but probably not)\n\n* The Ruby OpenSSL library.  For some reason, this often isn\'t included\n  in the main ruby distributions.  You can test for it by running\n  \'ruby -ropenssl -e "puts :yep"\'.  If that errors out, you\'re missing the\n  library.\n\n  If your distribution doesn\'t come with the necessary library (e.g., on Debian\n  and Ubuntu you need to install libopenssl-ruby), then you\'ll probably have to\n  compile Ruby yourself, since it\'s part of the standard library and not\n  available separately.  You could probably just compile and install that one\n  library, though.\n\n* The Ruby XMLRPC client and server libraries.  For some reason, this often\n  isn\'t included in the main ruby distributions.  You can test for it by\n  running \'ruby -rxmlrpc/client -e "puts :yep"\'.  If that errors out, you\'re missing\n  the library.\n\n* Facter => 1.1.1\n  You can get this from < http://reductivelabs.com/projects/facter >\n\n$Id$\n'
AshLeaf Media version of FamilyFellowship.com 
some Information Retrieval and Data Mining source I've been kicking around 
Some lilypond scores I work on. b'## Introduction\nThis project mainly exists as a working area for [Lilypond](http://lilypond.org/web) scores to be\nsubmitted to [Mutopia](http://www.mutopiaproject.org/). Enjoy!\n\n## How to Contribute\n- Use the music (and let us know if you do).\n- Tell a friend.\n- Submit errors or improvement ideas.\n  - Use the Mutopia Mailing list: [Gmane](http://news.gmane.org/gmane.music.mutopia.discuss).\n  - Email and other contact information are included with score source.\n  - See the [blog](http://open-scores.blogspot.com).\n- Submit improvements/fixes.\n  - Small fixes can be submitted through email.\n  - Fork the repository and make the change: [Github Guide](http://github.com/guides/fork-a-project-and-submit-your-modifications).\n\n## Status of Scores\n- Bach Italian Concerto - In progress...\n- Bach B Minor Mass BWV 232 - Bass Aria - [Mutopia](http://www.mutopiaproject.org/cgibin/piece-info.cgi?id=1462)\n- Beethoven Horn Sonata - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=919)\n- Beethoven Third Symphony - [Mutopia](http://www.mutopiaproject.org/cgibin/piece-info.cgi?id=1655)\n- Blanc Romance - Finished, not submitted to Mutopia.\n- Brahms Academic Festival Overture - In progress...\n- Brahms Horn Trio - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=833)\n- Brahms Symphony No.1 - In progress...\n- Bruneau Romance - Finished, not submitted to Mutopia.\n- Chabrier Larghetto for Horn and Orchestra - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=920)\n- Dukas Villanelle for Horn and Piano - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=902)\n- Glazunov Reveries - [Mutopia](http://www.mutopiaproject.org/cgibin/piece-info.cgi?id=1574)\n- Kopprasch 60 Horn Etudes for High Horn - In progress...\n- Kopprasch 60 Horn Etudes for Low Horn - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=1186)\n- Mozart Horn Concerto No.1 - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=918)\n- Mozart Horn Concerto No.2 - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=901)\n- Mozart Horn Concerto No.3 - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=1735)\n- Mozart Horn Concerto No.4 - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=1736)\n- Mozart Horn Quintet - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=1369)\n- Nielsen Canto Serioso - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=1056)\n- Reinecke Trio - In progress...\n- Saint-Saens Romance - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=1055)\n- Schubert Auf dem Strom - [Mutopia](http://mutopiaproject.org/cgibin/piece-info.cgi?id=1272)\n- Schubert Symphony No.8 - In progress...\n- Schumann Concert Piece - In progress...\n- Strauss, Franz Horn Concerto - In progress...\n- Strauss, Franz Nocturno - [Mutopia](http://www.mutopiaproject.org/cgibin/piece-info.cgi?id=1575)\n- Strauss Horn Concerto No.1 - In progress...\n- Strauss Till Eulenspiegel - In progress...\n- Tchaikovsky Symphony No.5 - In progress...\n- Weber Horn Concertino - In progress...\n\n'
Email Veracity is deprecated and has not been actively maintained for over 6 years. b"#### DEPRECATION NOTICE\n\nEmail Veracity was my very first open source project. Six years ago, it seemed\nlike a cool idea, but it's now pretty common knowledge that trying to validate\nemail addresses beyond a loose format check will likely yield false-positives.\nThe whole idea of including a library for that seems silly.\n\n***\n\n# Email Veracity 101\n\nLet's explore the different functionality that Email Veracity provides and some\nsimple ways you can integrate this functionality into your code\nwithout needing to rely on a flaky guy like me!\n\n### Validating an address for format\n\nTrying to explicitly validate an email address for total RFC compliance is\nextravagantly complex, so why bother? Send a verification email to ensure that\nthe user has provided a functioning address. If you still think that having a\nmore robust check is necessary, the\n[regex](https://github.com/heycarsten/email-veracity/blob/master/lib/email_veracity/config.rb#L25-L61)\nused in Email Veracity is from\n[here](http://fightingforalostcause.net/content/misc/2006/compare-email-regex.php)\nand is a pretty good compromise between obscene complexity and useful\nrobustness.\n\n```ruby\nemail = 'bizdude@example.biz'\n\nif email =~ /\\A[^@]+@[^@]+\\Z/\n  puts 'probably valid'\n  send_verification_to(email)\nelse\n  puts 'definately not valid'\nend\n```\n\n### Extracting the domain portion of an email address\n\nThere are libraries out there for formally parsing email addresses and you can\nuse those to get the domain portion of the email address, but we can also just\nuse a little regular expression.\n\n```ruby\nemail = 'megabiz@social-expert-megasite-seo.com'\nmatch = /@([\\w\\.\\-]+)\\Z/i =~ email\n\nif match\n  puts 'domain is: ' + match[1]\nelse\n  puts 'no domain found'\nend\n```\n\n### Looking up records on the domain\n\nI highly discourage using this method to actually validate email addresses\nin-line with a request; it will *absolutely* yield false-positives.\n\n```ruby\nrequire 'resolv'\n\nA  = Resolv::DNS::Resource::IN::A  # Address records\nMX = Resolv::DNS::Resource::IN::MX # Mail-exchange records\nNS = Resolv::DNS::Resource::IN::NS # Name server records\n\ndef lookup(host, type)\n  Resolv::DNS.new.getresources(host, type)\nend\n\na_records  = lookup('gmail.com', A)\nmx_records = lookup('gmail.com', MX)\nns_records = lookup('gmail.com', NS)\n\nputs a_records.map { |r| r.address.to_s }\nputs mx_records.map { |r| r.exchange.to_s }\nputs ns_records.map { |r| r.name.to_s }\n```\n\nCheck out the\n[Ruby Standard Library Documentation](http://www.ruby-doc.org/stdlib-2.0.0/libdoc/resolv/rdoc/Resolv/DNS.html)\nfor more ways to use Resolv::DNS in your project.\n"
Tempo is a simple team tracking application with a hint of social networking. It focuses on the simple use of a WYSIWYG editor over Wiki syntax so that business users can be involved in the process of editing content to share tribal knowledge as well as communicating project statuses. b'\xef\xbb\xbfTempo Readme'
Git mirror of the Weblocks web application framework for Common Lisp 
the code for the ppc port of event horizon cocoa game  
Merb Plugins: Even more modules to hook up your Merb installation 
DEVELOPMENT DISCONTINUED: Consider using Spree (repo: http://github.com/railsdog/spree) instead. b'MerbMart\n========\n\nMerbMart is an *open-source e-commerce engine* slice for the Merb framework.\nPlease see README.markdown.\n'
fork of git://gitorious.org/enki/mainline.git b"= Enki\n\nA ruby on rails blogging app for the fashionable developer.\n\nPreferences are for the masses. Any real coder knows the easiest and best way to customize something is by hacking code. Because you want your blog to be you, not bog standard install #4958 with 20 posts per page instead of 15. For this you need a clean, simple, easy to understand code base that stays out of your way. No liquid drops and templates hindering your path, no ugly PHP stylings burning your eyeballs.\n\n== Quick Start\n\n  git clone git://gitorious.org/enki/mainline.git\n  cd enki\n  git checkout -b myblog # Create a new work branch\n  cp config/database.example.yml config/database.yml\n  # Edit config/enki.yml and config/database.yml to taste\n  rake db:migrate\n  rake spec\n  ./script/server\n  # Load http://localhost:3000/admin in your browser\n\n== More info\n\nEnki is a compact, easily extendable base for your blog. It does this by being highly opinionated, for example:\n\n- Public facing views should adhere to standards (XHTML, Atom)\n- /yyyy/mm/dd/post-title is a good URL for your posts\n- Live comment preview should be provided by default\n- Google does search better than you or I\n- You don't need a plugin system when you've got decent source control\n- If you're not using OpenID you're a chump\n- Hacking code is the easiest way to customize something\n\n== Author\n\nXavier Shay\nxavier@rhnh.net\n\n== License\n\nGPL - See LICENSE\n\nIncludes code from http://simplelog.net/ (admin layout)\n"
Manage DNS Records and Zones for powerdnsd and others with django. b'"records at large" is a simple DNS-Management suite.\n\nAuthor: Thomas Kerpe <toke-ral@toke.de>\n\n\nThis Project is still in a very early stage. \nIt should work but needs source tweaking.\n\nFeel free to contribute.\n\nThe Licence is not yet decided but will be a BSD style Licence.\n'
Publish to enki with VIM. That's pretty neat. b"THIS TOTALLY DOESN'T WORK ANYMORE\n\nYAML support was removed from enki. \nSomething like AtomPub would be better.\n\n---\n\nVIM scripts to publish to enki\nvery rough and incomplete at the moment\nyou'll need to sub in your API key to common.rb\n\nxavier@rhnh.net\n"
Cheese is a set of ruby scripts available to all under the MIT license. They reduce the steps needed to administrate a web server using nginx, svn and mongrel. 
Here lies the code I created for my own nefarious purposes 
DEPRECATED! Use http://github.com/yolk/mite-rb instead. b"=== README\n\n== Usage\n\ngem 'miter'\nrequire 'miter'\n\nMiter::Base.auth(user, token)\n\nMiter::Projects.find(:all)\nMiter::Tasks.find(:first)\nMiter::Customers.find(:all, :params => { ... })\n"
persistent ssh connection and tunnel manager b'\n         Hem - persistent ssh connection and tunnel manager\n\nHem manages multiple background SSH connections using an ifconfig /\nrc style interface. It is most often used to setup persistent /\nlong-running port tunnels and control master connections. Hem monitors\nconnection upedness and can automatically bounce downed connection.\n\nHem is Free Software covered by the "New and Simplified BSD License". It\nwas originally written by Ryan Tomayko <r@tomayko.com>.\n\nPlease read the file INSTALL for installation and hacking instructions. Hem\nshould run on most flavors of Unix/Gnu that include a posix compatible sh\ninterpreter. Hem currently requires fairly recent version of OpenSSH\'s ssh(1) as\nwell as Carson Harding\'s autossh(1) (included with distribution).\n\nMore information on Hem is accessible from http://tomayko.com/src/hem/\nincluding full documentation, examples, and distributables. There is\nalso project tracking resources at http://github.com/rtomayko/hem/\n\nSee Also:\n\n  * OpenSSH: http://www.openssh.com/\n  * autossh: http://www.harding.motd.ca/autossh/\n'
IRC linkdump webpage 
A no longer maintained CMS that was used for various groups at Audenshaw School, namely audfairtrade.co.nr, audyamnesty.co.nr and adfa.co.nr b'********** About this Program **********\n\n********** Copyright and Contact **********\n\nThe php scripts that make up this website CMS - "This Program"\nCopyright (C) 2008 Benjamin Webb\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>\n\nIf you want to use this code for something that is for some reason\nnot compatible with this license or have any other comments,\nyou can contact me by e-mail and msn as bjwebb67@googlemail.com\nand on irc.freenode.net as user bjwebb. Also, I would love to know\nif anyone does do anything with this code.\n\n********** Installation **********\n\nCopy config.php.example to config.php and change the details there\nto the correct ones for your sql server. You can then create the\nsql tables by going to setup.php in your webbrowser and filling in\nthe fields.\n\n********** Pictures *********\n\nMake the directorys img and thumb, place and images you want into\nimg and then run ./pics.sh to generate the thumbnails.\n'
Scripts for the camarabuntu distrobtion 
social calendaring web app for conferences 
GentleREST is a lightweight web application framework for perfectionists. It is optimized for security, reliability, and speed, in that order.  NOTE: Abandoned in favor of Sinatra. b'GentleREST is a lightweight web application framework for perfectionists.\nIt is optimized for security, reliability, and speed, in that order.\n'
A Ruby-based parsing DSL based on parsing expression grammars. b'Support\n=======\n\nSupport for Treetop is provided through the mailing list you can join or browse here:\nhttp://groups.google.com/group/treetop-dev \n\nTutorial\n========\nLanguages can be split into two components, their *syntax* and their *semantics*. It\'s your understanding of English syntax that tells you the stream of words "Sleep furiously green ideas colorless" is not a valid sentence. Semantics is deeper. Even if we rearrange the above sentence to be "Colorless green ideas sleep furiously", which is syntactically correct, it remains nonsensical on a semantic level. With Treetop, you\'ll be dealing with languages that are much simpler than English, but these basic concepts apply. Your programs will need to address both the syntax and the semantics of the languages they interpret.\n\nTreetop equips you with powerful tools for each of these two aspects of interpreter writing. You\'ll describe the syntax of your language with a *parsing expression grammar*. From this description, Treetop will generate a Ruby parser that transforms streams of characters written into your language into *abstract syntax trees* representing their structure. You\'ll then describe the semantics of your language in Ruby by defining methods on the syntax trees the parser generates.\n\nParsing Expression Grammars, The Basics\n=======================================\nThe first step in using Treetop is defining a grammar in a file with the `.treetop` extension. Here\'s a grammar that\'s useless because it\'s empty:\n    \n    # my_grammar.treetop\n    grammar MyGrammar\n    end\n\nNext, you start filling your grammar with rules. Each rule associates a name with a parsing expression, like the following:\n\n    # my_grammar.treetop\n    # You can use a .tt extension instead if you wish\n    grammar MyGrammar\n      rule hello\n        \'hello chomsky\'\n      end\n    end\n\nThe first rule becomes the *root* of the grammar, causing its expression to be matched when a parser for the grammar is fed a string. The above grammar can now be used in a Ruby program. Notice how a string matching the first rule parses successfully, but a second nonmatching string does not.\n\n```ruby\n# use_grammar.rb\nrequire \'rubygems\'\nrequire \'treetop\'\nTreetop.load \'my_grammar\'\n# or just:\n# require \'my_grammar\'                     # This works because Polyglot hooks "require" to find and load Treetop files\n    \nparser = MyGrammarParser.new\nputs parser.parse(\'hello chomsky\')         # => Treetop::Runtime::SyntaxNode\nputs parser.parse(\'silly generativists!\')  # => nil\n```\nUsers of *regular expressions* will find parsing expressions familiar. They share the same basic purpose, matching strings against patterns. However, parsing expressions can recognize a broader category of languages than their less expressive brethren. Before we get into demonstrating that, lets cover some basics. At first parsing expressions won\'t seem much different. Trust that they are.\n\nTerminal Symbols\n----------------\nThe expression in the grammar above is a terminal symbol. It will only match a string that matches it exactly. There are two other kinds of terminal symbols, which we\'ll revisit later. Terminals are called *atomic expressions* because they aren\'t composed of smaller expressions.\n\nOrdered Choices\n---------------\nOrdered choices are *composite expressions*, which allow for any of several subexpressions to be matched. These should be familiar from regular expressions, but in parsing expressions, they are delimited by the `/` character. Its important to note that the choices are prioritized in the order they appear. If an earlier expression is matched, no subsequent expressions are tried. Here\'s an example:\n\n    # my_grammar.treetop\n    grammar MyGrammar\n      rule hello\n        \'hello chomsky\' / \'hello lambek\'\n      end\n    end\n\n```ruby    \n# fragment of use_grammar.rb\nputs parser.parse(\'hello chomsky\')         # => Treetop::Runtime::SyntaxNode\nputs parser.parse(\'hello lambek\')          # => Treetop::Runtime::SyntaxNode\nputs parser.parse(\'silly generativists!\')  # => nil\n```\nNote that once a choice rule has matched the text using a particular alternative at a particular location in the input and hence has succeeded, that choice will never be reconsidered, even if the chosen alternative causes another rule to fail where a later alternative wouldn\'t have. It\'s always a later alternative, since the first to succeed is final - why keep looking when you\'ve found what you wanted? This is a feature of PEG parsers that you need to understand if you\'re going to succeed in using Treetop. In order to memoize success and failures, such decisions cannot be reversed. Luckily Treetop provides a variety of clever ways you can tell it to avoid making the wrong decisions. But more on that later.\n\nSequences\n---------\nSequences are composed of other parsing expressions separated by spaces. Using sequences, we can tighten up the above grammar.\n\n    # my_grammar.treetop\n    grammar MyGrammar\n      rule hello\n        \'hello \' (\'chomsky\' / \'lambek\')\n      end\n    end\n\nNote the use of parentheses to override the default precedence rules, which bind sequences more tightly than choices.\n\nOnce the whole sequence has been matched, the result is memoized and the details of the match will not be reconsidered for that location in the input.\n\nNonterminal Symbols\n-------------------\nHere we leave regular expressions behind. Nonterminals allow expressions to refer to other expressions by name. A trivial use of this facility would allow us to make the above grammar more readable should the list of names grow longer.\n\n    # my_grammar.treetop\n    grammar MyGrammar\n      rule hello\n        \'hello \' linguist\n      end\n      \n      rule linguist\n        \'chomsky\' / \'lambek\' / \'jacobsen\' / \'frege\'\n      end\n    end\n\nThe true power of this facility, however, is unleashed when writing *recursive expressions*. Here is a self-referential expression that can match any number of open parentheses followed by any number of closed parentheses. This is theoretically impossible with regular expressions due to the *pumping lemma*.\n\n    # parentheses.treetop\n    grammar Parentheses\n      rule parens\n        \'(\' parens \')\' / \'\'\n      end\n    end\n\n\nThe `parens` expression simply states that a `parens` is a set of parentheses surrounding another `parens` expression or, if that doesn\'t match, the empty string. If you are uncomfortable with recursion, its time to get comfortable, because it is the basis of language. Here\'s a tip: Don\'t try and imagine the parser circling round and round through the same rule. Instead, imagine the rule is *already* defined while you are defining it. If you imagine that `parens` already matches a string of matching parentheses, then its easy to think of `parens` as an open and closing parentheses around another set of matching parentheses, which conveniently, you happen to be defining. You know that `parens` is supposed to represent a string of matched parentheses, so trust in that meaning, even if you haven\'t fully implemented it yet.\n\nRepetition\n----------\nAny item in a rule may be followed by a \'+\' or a \'*\' character, signifying one-or-more and zero-or-more occurrences of that item. Beware though; the match is greedy, and if it matches too many items and causes subsequent items in the sequence to fail, the number matched will never be reconsidered. Here\'s a simple example of a rule that will never succeed:\n\n    # toogreedy.treetop\n    grammar TooGreedy\n      rule a_s\n      \t\'a\'* \'a\'\n      end\n    end\n\nThe \'a\'* will always eat up any \'a\'s that follow, and the subsequent \'a\' will find none there, so the whole rule will fail. You might need to use lookahead to avoid matching too much. Alternatively, you can use an occurrence range:\n\n    # toogreedy.treetop\n    grammar TooGreedy\n      rule two_to_four_as\n      \t\'a\' 2..4\n      end\n    end\n\nIn an occurrence range, you may omit either the minimum count or the maximum count, so that "0.. " works like "*" and "1.. " works like \'+\'.\n\nNegative Lookahead\n------------------\n\nWhen you need to ensure that the following item *doesn\'t* match in some case where it might otherwise, you can use negat!ve lookahead, which is an item preceeded by a ! - here\'s an example:\n\n    # postcondition.treetop\n    grammar PostCondition\n      rule conditional_sentence\n        ( !conditional_keyword word )+ conditional_keyword [ \\t]+ word*\n      end\n\n      rule word\n        ([a-zA-Z]+ [ \\t]+) \n      end\n\n      rule conditional_keyword\n        \'if\' / \'while\' / \'until\'\n      end\n    end\n\nEven though the rule `word` would match any of the conditional keywords, the first words of a conditional_sentence must not be conditional_keywords. The negative lookahead prevents that matching, and prevents the repetition from matching too much input. Note that the lookahead may be a grammar rule of any complexity, including one that isn\'t used elsewhere in your grammar.\n\nPositive lookahead\n------------------\n\nSometimes you want an item to match, but only if the *following* text would match some pattern. You don\'t want to consume that following text, but if it\'s not there, you want this rule to fail. You can append a positive lookahead like this to a rule by appending the lookahead rule preceeded by an & character.\n\nSemantic predicates\n-------------------\n\nWarning: This is an advanced feature. You need to understand the way a packrat parser operates to use it correctly. The result of computing a rule containing a semantic predicate will be memoized, even if the same rule, applied later at the same location in the input, would work differently due to a semantic predicate returning a different value. If you don\'t understand the previous sentence yet still use this feature, you\'re on your own, so test carefully!\n\nSometimes, you need to run external Ruby code to decide whether this syntax rule should continue or should fail. You can do this using either positive or negative semantic predicates. These are Ruby code blocks (lambdas) which are called when the parser reaches that location. For this rule to succeed, the value must be true for a positive predicate (a block like &{ ... }), or false for a negative predicate (a block like !{ ... }).\n\nThe block is called with one argument, the array containing the preceding syntax nodes in the current sequence. Within the block, you cannot use node names or labels for the preceding nodes, as the node for the current rule does not yet exist. You must refer to preceding nodes using their position in the sequence.\n\n    grammar Keywords\n      rule sequence_of_reserved_and_nonreserved_words\n      \t( reserved / word )*\n      end\n\n      rule reserved\n        word &{ |s| symbol_reserved?(s[0].text_value) }\n      end\n\n      rule word\n        ([a-zA-Z]+ [ \\t]+) \n      end\n    end\n\nOne case where it is always safe to use a semantic predicate is to invoke the Ruby debugger, but don\'t forget to return true so the rule succeeds! Assuming you have required the \'ruby-debug\' module somewhere, it looks like this:\n\n      rule problems\n        word &{ |s| debugger; true }\n      end\n\nWhen the debugger stops here, you can inspect the contents of the SyntaxNode for "word" by looking at s[0], and the stack trace will show how you got there.\n'
Puppet is a declarative language for expressing system configuration, a client and server for distributing it, and a library for realizing the configuration. b'Documentation (and detailed install instructions) can be found \nonline at http://reductivelabs.com/trac/puppet/wiki/DocumentationStart .\n\nGenerally, you need the following things installed:\n\n* Ruby >= 1.8.1 (earlier releases might work but probably not)\n\n* The Ruby OpenSSL library.  For some reason, this often isn\'t included\n  in the main ruby distributions.  You can test for it by running\n  \'ruby -ropenssl -e "puts :yep"\'.  If that errors out, you\'re missing the\n  library.\n\n  If your distribution doesn\'t come with the necessary library (e.g., on Debian\n  and Ubuntu you need to install libopenssl-ruby), then you\'ll probably have to\n  compile Ruby yourself, since it\'s part of the standard library and not\n  available separately.  You could probably just compile and install that one\n  library, though.\n\n* The Ruby XMLRPC client and server libraries.  For some reason, this often\n  isn\'t included in the main ruby distributions.  You can test for it by\n  running \'ruby -rxmlrpc/client -e "puts :yep"\'.  If that errors out, you\'re missing\n  the library.\n\n* Facter => 1.1.1\n  You can get this from < http://reductivelabs.com/projects/facter >\n\n$Id$\n'
A proof-of-concept app to descend the "del.icio.us will eat itself" tree 
PHP5 Unit Testing Framework b"README - SnapTest\n=================\n\nCore Branch:\n[http://github.com/Jakobo/snaptest/tree/master](http://github.com/Jakobo/snaptest/tree/master)\n\nIssues: [http://github.com/Jakobo/snaptest/issues](http://github.com/Jakobo/snaptest/issues)\n\nIntroduction\n------------\nSnapTest is a powerful unit testing framework for PHP 5+, leveraging PHP's unique runtime language to simplify the unit test process without sacrificing the agility tests provide.\n\nSnapTest is a free software project licensed under the Mozilla Public License.\n\n**NOTE** Starting with SnapTest 1.2.0, SnapTest will be licensed under the BSD License.\n\nGetting Started\n---------------\n\nPlace Snap wherever you want, and run a self test:\n\n   1. if you have php in an obvious location (path, /usr/bin, /usr/local/bin, /opt/local/bin), run the command ./snaptest.sh ./ from inside the snaptest directory.\n   2. if php is not in an obvious location, you can run ./snaptest.sh ./ --php<path> where <path> indicates the location of your php binary.\n   3. if shell scripting for whatever reason isn't working, you can also use the PHP binary directly by calling <php> snaptest.php --path=<php> ./ where <php> is the location of your php binary. \n\nWhen ran, you should see output like the following:\n\n<code><pre>\nUser@Host ~/snaptest> ./snaptest.sh ./\n..............................................................................\n.................\n______________________________________________________________________\nTotal Cases:    37\nTotal Tests:    95\nTotal Pass:     95\nTotal Defects:  0\nTotal Failures: 0\n</pre></code>\n\nIf you don't get any failures (marked with an F followed by information about the error, you're ready to go!\n\nFrom here, check out [http://wiki.github.com/Jakobo/snaptest/base-unit-test-class](http://wiki.github.com/Jakobo/snaptest/base-unit-test-class) Step 2 to start writing your own tests.\n\nLicense\n-------\n  * SnapTest < 1.2.0 is licensed under the Mozilla Public license (MPL)\n\n  * SnapTest >= 1.2.0 is licensed under the new BSD License (please see LICENSE for full terms)"
Download free music from SXSW b"Download all the free tracks from 2008's SXSW.  There are a lot. Make sure you have some free space ;-)\n\nIt could be cleaned up, but it works for what I wanted.\n\nFor more info: \nhttp://daniel.collectiveidea.com/blog/2008/2/29/fill-your-ipod-with-sxsw-music\n"
my code for solving np complete problems in linear time b'haha just kidding\n'
rails plugin that marks a model as exclusive to a certain owner b'Given a user model and a resource model. A single user has multiple resources. We need an easy method to get all resources that belong to a given user. Enter acts_as_exclusive. A given resource is exclusive to a given user and shouldn\'t be accessible from a different user. Acts_as_exclusive is meant to be used by a higher level method (controller) to facilitate the need for exclusiveness of certain resources to a certain owners. test.\n\nclass User < AR::B\n\thas_many :properties\nend\n\nclass Property < AR::B\n\tbelongs_to :user\n\tacts_as_exclusive :conditions => "users.id=?"\nend\n\n\t***\n\nclass PropertiesController < AC\n\tdef index\n\t\t# finds all properties under owner - other\'s property is hidden\n\t\tProperty.find(:all_exclusive_to, :owner => @user.id)\n\tend\n...\n\nend\n'
An wonderful analog clock b'It is an analog clock displaying the system-time. It leverages the new visual\nfeatures offered by Xorg 7.0 in combination with a compositing-manager (e.g.\nlike xcompmgr or compiz), gtk+ 2.10.0, cairo 1.2.0, libglade 2.6.0 and librsvg\n2.14.0 to produce a time display with pretty-pixels.\n\nFor more up-to-date info, screenshots and screencasts take a look at the\nproject-homepage located at:\n\n\thttp://macslow.thepimp.net/cairo-clock\n\n'
Database abstraction layer in PHP5 
A simple, asynchronous, single-threaded memcached client written in java. b"# Building\n\nSpymemcached can be compiled using Apache Ant by running the following\ncommand:\n\n    ant\n\nThis will generate binary, source, and javadoc jars in the build\ndirectory of the project.\n\nTo run the Spymemcached tests against Membase Server run the\nfollowing command:\n\n    ant test -Dserver.type=membase\n\nTo test Spymemcached against Membase running on a different host\nuse the following command:\n\n    ant test -Dserver.type=membase \\\n        -Dserver.address_v4=ip_address_of_membase\n\n# Testing\n\nThe latest version of spymemcached has a set of command line arguments\nthat can be used to configure the location of your testing server. The\narguments are listed below.\n\n    -Dserver.address_v4=ipv4_address_of_testing_server\n\nThis argument is used to specify the ipv4 address of your testing\nserver. By default it is set to localhost.\n\n    -Dserver.address_v6=ipv6_address_of_testing_server\n\nThis argument is used to set the ipv6 address of your testing server.\nBy default it is set to ::1. If an ipv6 address is specified then an\nipv4 address must be specified otherwise there may be test failures.\n\n    -Dserver.port_number=port_number_of_memcached\n\nThis argument is used when memcahched is started on a port other than\n11211\n\n    -Dtest.type=ci\n\nThis argument is used for CI testing where certain unit tests might\nbe temporarily failing.\n\n# More Information\n\nFor more information about Spymemcached see the links below:\n\n## Project Page The\n\n[Spymemcached Project Home](http://code.google.com/p/spymemcached/)\ncontains a wiki, issue tracker, and downloads section.\n\n## Github\n\n[The gitub page](http://github.com/dustin/java-memcached-client)\ncontains the latest Spymemcached source.\n\n## Couchbase.org\n\nAt [couchbase.org](http://www.couchbase.org/code/couchbase/java) you\ncan find a download's section for the latest release as well as an\nextensive tutorial to help new users learn how to use Spymemcached.\n"
Yet Another Cleaner tool for Gentoo 
are you using a good browser or a bad browser? browser detection with ruby sinatra and javascript b"good browser, bad browser is a very simple ruby and javascript based browser detection scripts that power the  multilingual browser advocacy site: http://browserchallenge.com\n\nif you haven't already, download yourself a good browser from http://www.apple.com/safari/ or http://www.firefox.com, then tell your friends.\n\ntshirts forthcoming. maybe...\n\n=== contribute ===\n\nbring your code slinging skills to: http://github.com/seaofclouds/good-browser-bad-browser/ and help the cause!\n\nTRANSLATIONS > we recently added translations for english, chinese, german, spanish and french. please help us expand our set of translations by contributing your language. to submit a translation, visit http://gist.github.com/14732 and fork. then, translate from english to your language and save!\n\nCOUNTER > one goal of this project is to add a simple counter that gathers and displays statistics for good and bad browsers. the counter should work with the javascript widget, so when the widget loads on a page, the sinatra script gets pinged to update the counter. if you have any tips to make this work, make contact.\n\n=== installation ===\n\ngit clone git://github.com/seaofclouds/good-browser-bad-browser.git \n\nsinatra is now included in the vendor directory, so to keep it up to date, you can do:\n\ngit submodule init && git submodule update\n\n=== thanks ===\n\nmicrosoft, for their inspiration to advocate good browsers like firefox and safari.\nblake mizerany http://github.com/bmizerany, for sinatra. awesome, awesome sinatra.\ndennis hengeveld http://max.hengeveld.com/ for our chats about some browsers being lame.\neugenia jongewaard http://www.etnikastudio.com/ for her nudge to add translations.\nyuanyi zhang http://letrails.cn/ for the chinese translation. our first official translation!\ntilman zitzmann http://tint.de for his german translation\nFrancois Lafortune http://quickredfoxandkits.com/ for his french translation\nadam at http://refactormycode.com/ for his array wrangling skills.\n21st amendment, for their fantastic beer.\n\n=== contact ===\n\nplease send comments and questions to seaofclouds on twitter or github"
have_tag() without Rails' assert_select() b"= rspec_hpricot_matchers\n\nAn implementation of have_tag(), as in rspec_on_rails, but sitting atop\nNokogiri rather than merely wrapping assert_select().\n\nSo at one point it was on Hpricot. But it's not now. Misnomers are more\nfun. You're probably better off using something like Webrat::Matchers\nanyhow.\n\n\n== Installation\n\nTo use rspec_hpricot_matchers in your project, install the gem, and\nadd the following to your spec_helper.rb file:\n\n  require 'rspec_hpricot_matchers'\n  Spec::Runner.configure do |config|\n    config.include(RspecHpricotMatchers)\n  end\n\nSimilarly, to make the matchers available to stories, you can add the\nfollowing to your stories/helper.rb file:\n\n  require 'rspec_hpricot_matchers'\n  include RspecHpricotMatchers\n\n\n== Usage\n\nAs its first argument, have_tag() accepts any CSS or XPath selectors\nwhich are supported by Hpricot.\n\n    body.should have_tag('form[@action*=session]')\n    body.should have_tag('ul > li + li')\n\nExpectations can be placed upon the inner text of the matched element\nby providing another argument, which should be either a String or a\nRegexp:\n\n    body.should have_tag('h1', 'Welcome')\n    body.should have_tag('p', /a very important blurb/i)\n\nExpectations can be placed upon the number of matched elements by\npassing an options hash:\n\n    body.should have_tag('abbr', :count => 1)   # exactly one\n    body.should have_tag('dt',   :minimum => 4) # at least 4\n    body.should have_tag('dd',   :maximum => 4) # at most 4\n    body.should have_tag('a.outgoing', /rspec/i, :count => 2)\n\nThe :count key also accepts a Range, making the following equivalent:\n\n    body.should have_tag('tr',   :count => 3..5)\n    body.should have_tag('tr',   :minimum => 3,\n                                 :maximum => 5)\n\n\nThe usage of with_tag(), however, is no longer supported. Instead, a\nblock passed to have_tag() will have each matched element successively\nyielded to it. If none of the blocks return without raising an\nExpectationNotMetError, the outer have_tag() is treated as having failed:\n\n    body.should have_tag('thead') do |thead|\n      thead.should have_tag('th', :count => 5)\n    end\n\nThis also allows arbitrary expectations to be applied from within\nthe block, such as:\n\n    body.should have_tag('dl dd.sha1') do |dd|\n      dd.inner_text.length.should == 40\n    end\n\n\n== Notes\n\nCurrently, this implementation does not support substitution values\nas assert_select did (by way of HTML::Selector):\n\n    # Not yet supported:\n    body.should have_tag('li[class=?]', dom_class)\n    body.should have_tag('tr.person#?', /^person-\\d+$/)\n\nI personally rarely use these, and Hpricot's advanced selectors make\nthem mostly useless, as far as I can tell, so I am unlikely to\nimplement them myself.\n\nThis have_tag() further differs from the assert_select-based\nimplementation in that the nested have_tag() calls must *all* pass\non a single selected element in order to be true. This was a source\nof confusion in RSpec ticket #316. There is a spec covering this\ncase if you need an example.\n"
A buildbot GUI for OS X 
A ruby client for freebase 
Behaviour Driven Development framework for Ruby b'== RSpec has moved!\n\nThis is the repository for rspec-1.x, which is no longer maintained.\n\nSee http://rspec.info for an overview and any of the following repos for code:\n\n* http://github.com/rspec/rspec\n* http://github.com/rspec/rspec-core\n* http://github.com/rspec/rspec-mocks\n* http://github.com/rspec/rspec-expectations\n'
A ruby client for freebase b'= Freebase\nThis Ruby-on-Rails plugin provides access to the Freebase API\n(http://www.freebase.com). Freebase is a collaborative, semantic database\nsimilar to Wikipedia only for structured data. Freebase.com provides a\nJSON-over-HTTP API that this library uses.\n\nCurrently only reads are implemented. Contributions, API Suggestions, bug\nreports are welcome!\n\nThis code is ALPHA. The API will change, features will be added. It probably\nhas a bug or two in it. Use it at your own peril.\n\nAuthor:: Christopher Eppstein (mailto:chris@eppsteins.net)\nCopyright:: Copyright (c) 2007 Christopher Eppstein\nLicense:: Released under the MIT license\n\n== Installation\nInstall the plugin:\nscript/plugin install svn://rubyforge.org/var/svn/freebaseapi/trunk/freebase\n\nThen copy freebase.yml to your rails config directory\n\n== Usage Examples\nSee the following examples:\n* albums.rb[link:../examples/albums.rb]\n\n== Contributors\n* Pat Allan (mailto:pat@freelancing-gods.com) provided code snippets that\n  exemplified automatic freebase class creation when the class is first\n  referenced.\n\n'
An FF extension that builds FF extensions (most specifically for Flock Content Pack, but can be tweaked easily). 
The official `github` command line helper for simplifying your GitHub experience. b"The GitHub Gem\n=============\n\nThis gem'll work hand-in-hand with GitHub's API to help you out.\n\nCatch us in the #github room on freenode if you want to get involved.  Or just fork and send a pull request.\n\n===========\nGetting started\n===========\n\n  $ gem install github\n\nRun it:\n\n  $ github <command> <args>\n\n\n=============\nPulling Changes\n=============\n\nLet's say you just forked `github-gem` on GitHub from defunkt.\n\n  $ git clone git://github.com/YOU/github-gem.git\n  $ cd github-gem\n  $ github pull defunkt\n\nThis will setup a remote and branch for defunkt's repository at master. \nIn this case, a 'defunkt/master' branch.\n\nIf defunkt makes some changes you want, simply `github pull defunkt`.  This will\nleave you in the 'defunkt/master' branch after pulling changes from defunkt's\nremote.  After confirming that defunkt's changes were what you wanted, run `git\ncheckout master` and then `git merge defunkt/master` to merge defunkt's changes\ninto your own master branch.  In summary:\n\n  $ github pull defunkt\n  $ git checkout master\n  $ git merge defunkt/master\n\n\n==========\nContributors\n==========\n\n- defunkt\n- maddox\n- halorgium\n"
The Notation3 TextMate bundle seems to have been abandoned. I'm hosting it here and maybe hacking on it in future 
a git daemon running over the native protocol 
Functional is a library for functional programming in JavaScript. It defines the standard higher-order functions such as map, reduce (aka foldl), and select (aka filter). It also defines functions such as curry, rcurry, and partial for partial function application; and compose, guard, and until for function-level programming. b'Functional defines higher-order methods and functions for functional\nand function-level programming.  It also defines "string lambdas",\nthat allow strings such as `x+1` and `x -> x+1` to be used in some\ncontexts as functions.\n\nIt is licensed under the MIT License.\n\nFor more details, see http://osteele.com/sources/javascript/functional/ .\n\nCredits:\n- Oliver Steele -- original author\n- Dean Edwards -- Array.slice suggestion\n- henrah -- Function.lambda memoization\n- Raganwald -- Rhino compatibility\n- Jesse Hallett -- Spidermonkey shell compatibiilty\n- Florian Sch\xc3\xa4fer -- allow leading and trailing spaces in expressions\n- Angus Croll -- bug fix\n \n'
Sequentially is a library of temporal and frequency adverbs for JavaScript. It provides methods to queue a function for deferred or periodic execution, and to throttle the rate or number of times that a function can be called. You could think of it as a kind of memoization, where instead of caching the result it modifies when and whether a function is called. b"= Sequentially\n\nSequentially is a library of temporal and frequency adverbs for\nJavaScript.  It provides methods to queue a function for deferred or\nperiodic execution, and to throttle the rate or number of times that a\nfunction can be called.  You could think of it as a kind of\nmemoization, where instead of caching the result it modifies *when*\nand *whether* a function is called.\n\nThe {demo page}[http://osteele.com/sources/javascript/sequentially]\ncontains API documentation and interactive examples for most of the\nfunctions.  I've added a couple of functions more recently that aren't\non that page, but are in the specs[http://osteele.com/sources/javascript/sequentially/specs] instead:\n\n  Sequentially.trickle.forEach(array, fn, ms, k)\n\nCall +fn+ on each element of +array+, and finally call +k+.  The\nfunction is applied to a slice of elements until +ms+ has elapsed; the\ncaller then waits a frame before applying it to the next slice.\n\n\n  Sequentially.trickle.map(array, fn, ms, k)\n\nCall +fn+ on each element of +array+, collecting the results into an\narray that is returned and passed as an argument to +k+.  The function\nis applied to a slice of elements until +ms+ has elapsed; the caller\nthen waits a frame before applying it to the next slice.  The return\nvalue is initially empty.\n\n== License\n\nCopyright 2007-2008 by Oliver Steele.  All rights reserved.\nAvailable under the MIT License.\n"
Python FSA constructor, determinizer, and minimizer. b'FSA - Finite State Automaton processing in Python\r\n-------------------------------------------------\r\n\r\nThis package contains functions for manipulating Finite-State Automata\r\n(FSAs).  It includes functions for minimizing and determinizing FSAs,\r\ncomputing FSA intersections and unions, compiling a (non-POSIX)\r\nregular expression into an FSA, and compiling a set of regular\r\nexpression productions into a chart parser.\r\n\r\nSee the FSA_ module documentation for more information.\r\n\r\n.. _FSA: FSA.html\r\n'
Fluent programming (chained method calls) for JavaScript. b"= About\n\nFluently is a JavaScript toolkit for creating FluentInterfaces[http://martinfowler.com/bliki/FluentInterface.html].\n\nI use this to define the mocks, stubs, and expectations in LzTestKit[http://osteele.com/sources/openlaszlo/lztestkit].\n\n= Status\n\nAlpha.  I use this in other projects, but it's got a known bug (chained modifiers\nignore all but the last one), and the API isn't final.\n\n= Examples\n\nWith Fluently, you can do this:\n    var o = Fluently.make(function(define) {\n      define('fn1', function() {console.info('called fn1')});\n      define('fn2', function() {console.info('called fn2')});\n      define('fn3', function() {return 3});\n    });\nto define an object with chained methods, that can be invoked thus:\n  o.fn1().fn2() // calls fn1 and then fn2\n  o.fn2().fn1() // calls fn2 and then fn1\n  o.fn1().fn3() // returns 3 (an explicit 'return' breaks the chain)\n\nYou can also define modifiers, and aliases:\n    var o = Fluently.make(function(define) {\n      define('fn1', function() {console.info('called fn1')});\n      define('fn2', function() {console.info('called fn2')});\n      define.empty('and');\n      define.alias('fn3', 'fn1');\n      define.modifier('not');\n    });\n  \n  o.fn3(); // same as o.fn1()\n  o.fn1().and.fn2() // same as o.fn1().fn2()\n  o.fn1().and.not.fn2() // options.not is set when fn2 is called\n\nI've extracted a couple of files, from LzTestKit, into the examples[http://osteele.com/sources/javascript/fluently/examples/]\ndirectory.  These don't run on their own, but at least they show the\ncode in use.\n\nYou can also see a range of examples by viewing the specs[http://osteele.com/sources/javascript/fluently/specs/fluently-specs.js].\n\n= Download\n\nGet it here: {download-location}.\n\n= License\n\nFluently is licensed under the MIT License.\n\nThis package includes a distribution of jsspec, which is licensed under the LGPL.\n"
A mirror of the mephisto code-base b"= Installation\n\nSee public/install.html for setup instructions.\n\n= Timezones\n\nYou MUST export the environment variable TZ=UTC, or else the article dates\nand times will be invalid.\n\nThis would not be needed if rails used UTC for everything, but\nunfortunately it doesn't... eg: action_view/helpers/date_helper.rb uses\nTime::now instead of Timer::now.utc, and Time::mktime instead of\nTime::utc.\n\nXXX oh, we can't depend on the rails helpers at all, because they don't\n    translate the time from UTC (assuming the TZ env var is correctly\n    set) to site time, you've to roll our own, or monkey patch rails :/\n\n= Dependencies\n\nNote that Mephisto depends on fewer gems when RAILS_ENV=production than it\ndoes in a development environment.\n\nRun 'rake gems:install' to install the development gems.  In a production\nenvironment, run:\n\n  RAILS_ENV=production rake gems:install\n\n= License\n\nMephisto is distributed under the same license as Ruby on Rails. See\nhttp://www.opensource.org/licenses/mit-license.php\n"
A refactored Mephisto that has multiple spam detection engines. b"= Installation\n\nSee public/install.html for setup instructions.\n\n= Timezones\n\nYou MUST export the environment variable TZ=UTC, or else the article dates\nand times will be invalid.\n\nThis would not be needed if rails used UTC for everything, but\nunfortunately it doesn't... eg: action_view/helpers/date_helper.rb uses\nTime::now instead of Timer::now.utc, and Time::mktime instead of\nTime::utc.\n\nXXX oh, we can't depend on the rails helpers at all, because they don't\n    translate the time from UTC (assuming the TZ env var is correctly\n    set) to site time, you've to roll our own, or monkey patch rails :/\n\n= License\n\nMephisto is distributed under the same license as Ruby on Rails. See\nhttp://www.opensource.org/licenses/mit-license.php\n"
Pedal to the metal manual profiler b'Stickshift is a simple, manual-instrumenting call-tree profiler in as\nfew lines of code as possible.\n\n## Background\n\nThe idea is to be as minimally intrusive as possible, but also to be\nstupid simple and manual. You tell stickshift to only instrument the\nmethods you want, and it measures time spent in that method, as well\nas any time spent in any instrumented methods invoked by the method.\nAfter leaving the top-most method, a call tree with timings is dumped\nto $stdout.\n\nNote: You aren\'t allowed to instrument methods on the String class, or\nany object\'s #inspect method, because it can generate a recursive\nloop! For fine-grained profiling on any arbitrary class, use profiler\nor ruby-prof instead. You\'re also not allowed to instrument an\ninstrumented method.\n\n## Example\n\nConsider the following Rakefile:\n\n    task :sleep => :snooze do\n      sleep 1\n    end\n    task :snooze do\n      sleep 2\n    end\n    task :default => :sleep\n\n    require \'stickshift\'\n    ::Rake::Application.instrument :top_level\n    ::Rake::Application.instrument :[], :with_args => 0\n    ::Rake::Task.instrument :invoke, :execute, :inspect_self => true\n\nRunning \'rake\' will produce the following output. Method self time is\nshown along the left, while method total time is at the end of each\nline.\n\n       0ms >  Rake::Application#top_level < 3001ms\n       0ms >    Rake::Application#[]("default") < 0ms\n       0ms >    Rake::Task#invoke{<Rake::Task default => [sleep]>} < 3001ms\n       0ms >      Rake::Application#[]("sleep") < 0ms\n       0ms >      Rake::Application#[]("snooze") < 0ms\n    2000ms >      Rake::Task#execute{<Rake::Task snooze => []>} < 2000ms\n    1000ms >      Rake::Task#execute{<Rake::Task sleep => [snooze]>} < 1000ms\n       0ms >      Rake::Task#execute{<Rake::Task default => [sleep]>} < 0ms\n\n## Instrumentation\n\nStickshift adds a method named #instrument to the Module class that\ninstruments methods in the receiver module or class.\n\nIt accepts one or more method names, and an optional trailing hash of\noptions:\n\n* `:label => "label"` gives the instrumented method a custom label\n  instead of the default "Class#method" label.\n* `:with_args => 0` causes the first argument to the method to be\n  included in the label. Ranges can also be used.\n* `:inspect_self => true` causes the inspected object to be printed in\n  the label.\n* `:top_level => true` causes Stickshift to only be activated after\n  passing through this method. If any other non-top-level instrumented\n  method is called outside of a top-level method, it will not be timed\n  or reported.\n\n`#uninstrument` and `#uninstrument_all` methods are also available if\nyou wish to disable instrumentation.\n\n## Capture/Settings\n\n* `Stickshift.enabled` (default `true`) controls whether Stickshift is\n  on or not.\n* `Stickshift.output` (default `$stdout`) controls where output is\n  written. The object must respond to `#puts(*lines)`.\n'
Ruby frontend to the Feedburner Awareness API b'AwAPI docs at http://code.google.com/apis/feedburner/awareness_api.html\n\n== This Library\n\nThe Ruby Awareness API (rAwAPI) provides a ruby interface to the FeedBurner Awareness API (AwAPI)\n\n== What is "Awareness?"\n\nFeed Awareness describes the extent and frequency with which a publisher\'s feed and its content items are consumed, clicked on, and referred to by independent sources (i.e., "syndicated").\n\nThe following data characterizes Feed Awareness:\n\n    * Feed Circulation and Hits: Circulation is a daily measure of feed readership and popularity, recorded over the life of your feed. Hits are a raw measure of request traffic for your feed.\n    * Detailed Item Popularity: The popularity of each item published as determined by itemviews and clickthroughs.\n    * Item Syndication: Redisplay or repurposing of a feed\'s content on a third party website that generates traffic (as itemviews and clickthroughs).\n\nThe reports and charts you see when using The FeedBurner website are based on the same data. Using AwAPI, you can create your own analysis and tracking applications. It\'s your data. Display it your way!\n\n\n== Example\n\nrequire \'awareness_api\'\n\nopts = {:uri => \'CommonThread\'}\n\nputs AwarenessApi.get_feed_data(opts)\nputs AwarenessApi.get_item_data(opts)\nputs AwarenessApi.get_resyndication_data(opts)\n'
My photo album project. 
A chess hax in ruby b'Requirements\n================================================================================\n\n* the highline gem\n* the gtk2 ruby library if you intend to use the gtk interface\n* rspec for the tests\n\n\nPlaying\n================================================================================\n\n./chess --use-gtk\nwill start the game with the gtk2 interface\n\n./chess\nwill start the game with the ascii interface (reduced sex appeal)\n'
Short, sweet, standalone Javascript. 
django-threadedcomments is a simple yet flexible threaded commenting system for Django. b'=======================\ndjango_threadedcomments\n=======================\n\nThis is a simple yet flexible threaded commenting system for your Django \nprojects.\n\nFor installation instructions, see the file "INSTALL.txt" in this\ndirectory; for a tutorial on how to set up this system with a blog, see \n"docs/tutorial.txt".  For an API reference, see "docs/api.txt".\n\nVisit the google code page at http://django-threadedcomments.googlecode.com/'
Guitarzero is a high score management web application for Guitar Hero! b'Guitarzero\n==========\n\nGuitarzero is a camping application to manage your Guitar Hero high scores,\nwritten in 24 hours by Marcus Crafter, Lachlan Hardy, and Tim Lucas at\nRailscamp, in Gosford, Sydney, Australia.\n\n--\nMarcus Crafter, <crafterm@redartisan.com>\n'
A python implementation of Grapevine 
Crack Attack! is a fast-paced puzzle game inspired by the classic Super NES title Tetris Attack! b"Crack Attack!\n\nFor information on how to compile and run Crack Attack!, you are refered\nto the file 'INSTALL' and 'doc/index.html'.\n\nTo find more information about Crack Attack!, check out the project page at http://savannah.nongnu.org/projects/crack-attack\n"
Mama Filesystem: Market data financial information from a Wombat feedhandler provided by access via the native linux file access utils based on the FUSE api 
A chess hax in ruby 
Score Keeper is no longer maintained. See scority.com. b'= Score Keeper\n\nScore Keeper is a very simple web app for keeping score, rankings, etc. for games.\n\n== Features\n\n* Supports games with fixed team sizes of 1, 2 or 3.\n\n== Credits\n\nScore Keeper is created and maintained by Lars Sehested (www.larssehested.com)\n\nLayout by Robert Hein (www.roberthein.dk)'
Not scaffolding. Resourcing. Creates extremely customizable resource controllers with one line of code. b"resouce_this\n===========\n\nNot scaffolding. Resourcing. Creates extremely customizable resource controllers with one line of code.\n\n  class PostsController < ActionController::Base\n   resource_this\n  end\n\n...will generate the following code:\n\n  class PostsController < ActionController::Base\n    before_filter :load_post, :only => [ :show, :edit, :update, :destroy ]\n    before_filter :load_posts, :only => [ :index ]\n    before_filter :new_post, :only => [ :new ]\n    before_filter :create_post, :only => [ :create ]\n    before_filter :update_post, :only => [ :update ]\n    before_filter :destroy_post, :only => [ :destroy ]\n\n  protected\n    def load_post\n      @post = Post.find(params[:id])\n    end\n  \n    def new_post\n      @post = Post.new\n    end\n  \n    def create_post\n      returning true do\n        @post = Post.new(params[:post])\n        @created = @post.save\n      end\n    end\n  \n    def update_post\n      returning true do\n        @updated = @post.update_attributes(params[:post])\n      end\n    end\n  \n    def destroy_post\n      @post = @post.destroy\n    end\n  \n    def load_posts\n      @posts = Post.find(:all)\n    end\n  \n  public\n    def index\n      respond_to do |format|\n        format.html\n        format.xml  { render :xml => @posts }\n        format.js\n      end\n    end\n\n    def show          \n      respond_to do |format|\n        format.html\n        format.xml  { render :xml => @post }\n        format.js\n      end\n    end\n\n    def new          \n      respond_to do |format|\n        format.html { render :action => :edit }\n        format.xml  { render :xml => @post }\n        format.js\n      end\n    end\n\n    def create\n      respond_to do |format|\n        if @created\n          flash[:notice] = 'Post was successfully created.'\n          format.html { redirect_to @post }\n          format.xml  { render :xml => @post, :status => :created, :location => @post }\n          format.js\n        else\n          format.html { render :action => :new }\n          format.xml  { render :xml => @post.errors, :status => :unprocessable_entity }\n          format.js\n        end\n      end\n    end \n\n    def edit\n      respond_to do |format|\n        format.html\n        format.js\n      end\n    end\n\n    def update\n      respond_to do |format|\n        if @updated\n          flash[:notice] = 'Post was successfully updated.'\n          format.html { redirect_to @post }\n          format.xml  { head :ok }\n          format.js\n        else\n          format.html { render :action => :edit }\n          format.xml  { render :xml => @post.errors, :status => :unprocessable_entity }\n          format.js\n        end\n      end\n    end\n\n    def destroy          \n      respond_to do |format|\n        format.html { redirect_to :action => posts_url }\n        format.xml  { head :ok }\n        format.js\n      end\n    end\n  end\n\nNested Resources\n===========\n\n  class CommentsController < ActionController::Base\n    resource_this :nested => [:posts]\n  end\n\nThis generates a very similar controller to the one above with adjusted redirects and one additional before_filter / loader method pair to grab the parent resource. In this case:\n\n  before_filter :load_post\n  \n  def load_post\n    @post = Post.find(params[:post_id])\n  end\n  \nSorting, etc\n===========\n\n  class CommentsController < ActionController::Base\n    resource_this :finder_options => {:order => 'created_on'}\n  end\n  \n...or, for lazily evaluated sorting options:\n\n  class CommentsController < ActionController::Base\n    resource_this :finder_options => Proc.new { finder_options }\n    \n  protected\n  \n    def finder_options\n      order = case params[:sort]\n        when 'date_reverse'          then 'created_on desc'\n        else 'created_on'\n      end\n      {:order => order, :limit => params[:limit] || 10 }\n    end\n    \n  end\n\nwill_paginate\n===========\n\nwill_paginate support is baked right in:\n\n  class CommentsController < ActionController::Base\n    resource_this :will_paginate => true\n  end\n  \nThis works with the :finder_options option as well\n  \nOpinionated Software\n===========\n  \nThe separation of logic - DB operations in before_filters, rendering in the standard resource controller methods - makes this approach ridiculously easy to customize. Need to load an additional object for the :show action? Slap another before_filter on it. Need to change the path that the :update action redirects to? Override the :update action with your new rendering behavior.\n\nGenerator\n===========\n\nA resource_this generator is included - does the same thing as the 'resource' generator but adds 'resource_this' to the generated controller.\n\nQuestions? Comments? Flames? Patches?\n===========\njnewland@gmail.com\n\nCopyright\n===========\nCopyright (c) 2007 Jesse Newland, released under the MIT license"
RAD industrial control system framework 
Google Picasa Ruby interface and album mirror (to use picasa as an off-site image cms without hotlinking)  b'\nSync with Picasa\n================\n\nUseful if you want to allow Picasa to be used as a front-end for \nmanaging image assets.\n\nLots still to todo, including:\n\n *  Get this working on EM Httpclient2. Currently using Mechanize\n    for the SSL connection to fetch session cookie and Net:HTTP \n    for all api calls (due to the ease of setting authorisation \n    headers and http method). Mechanize is also used for fetching\n    and saving files.\n    Need to be able to configure EM client to use ssl, a goolge \n    auth header, application/atom+xml content-type and variable \n    http verbs (as dryly as possible).\n *  tests... hardly tested at all. Lots is probably broken!\n\nThis is just an initial version knocked together in a day or so\nto fulfill a requirement, I will be adding to it over the next \ndays and weeks.\n\nUsage (api is likely to change):\n=====\n\ndeclare some constants:\n\n[RAILS_ROOT]\nPICASA_ASSETS_PATH = [sync\'d images saved here]\nGOOGLE_EMAIL = \nGOOGLE_PASS = \nGOOGLE_USER = \n\nCreate a new album on Picasa and return its google id.\n\n  album = Picasync::Album.new("Summer Holiday")\n  album.create!\n  puts album.api_id\n \n  album = Picasync::Album.find_by_title("Summer Holiday")\n  album.delete!\n\n\n  albums = Picasync::Album.find(:all)\n\n  \nInclude all photographs in find:\n\n  albums = Picasync::Album.find(:all, :images)\n\nImages included by default for id/title find:\n\n  albums = Picasync::Album.find_by_title(\'title\')\n  albums = Picasync::Album.find_by_id(id)\n\n\nGenerate CSVs:\n\n  Picasync::Sync::CSV.new\n  \n    produces two csvs linked by foreign key:\n    (format has changed, both csvs now include picasa album/photo ids)\n\n    albums.csv\n\n      id,updated_at,title\n      1|2008-02-29T15:57:42.000Z|Foo\n      2|2008-02-29T10:52:51.000Z|Bar\n  \n    images.csv\n\n      album_id,album_title,updated_on,tiny,small,medium,large [local file names hashed from Picasa uri]\n      1|Foo|2008-02-29T15:57:42.000Z|dd7a4b8bc3a3.jpg|5a931bc7a07a.jpg|f5597e87ab07.jpg|ab441ebc79bc.jpg\n      2|Bar|2008-02-29T15:42:34.000Z|ffc41b6bb103.jpg|a04e32a71876.jpg|a1945a821036.jpg|05dae39288c8.jpg\n      2|Bar|2008-02-29T15:42:34.000Z|171195e2e0e9.jpg|849f7eefb72b.jpg|6316aa373cc5.jpg|146037f723de.jpg\n      2|Bar|2008-02-29T15:42:34.000Z|d87b6d955b02.jpg|5f7f0d5e3960.jpg|239ce36ddc49.jpg|13e01b353904.jpg\n      2|Bar|2008-02-29T15:42:34.000Z|f32130c1510a.jpg|b19c23e54f7d.jpg|5a350e4fdce2.jpg|6379545d4ef4.jpg   \n\nSync local with modified galleries on Picasa:\n\n  Picasync::Sync::All.new\n\nVarious options to store images manually:   \n\n  Picasync::Image.mirror(:all)\n  Picasync::Image.mirror(:album, album.id)\n  Picasync::Image.mirror(image.id, album.id)\n\nAlso:\n\n  images = Picasync::Image.find(:all, album.id)\n  image = Picasync::Image.find(img.id, album.id)\n \nLoop through albums and print local file name and remote google path \nfor medium-size version:\n  \n  albums = Picasync::Album.find(:all, :images)\n  albums.each do |album|\n    puts album.title\n    album.images.each do |image|\n      puts img.medium\n      puts img.medium_uri\n    end\n  end\n\n'
ODBC compatible MySQL Erlang port driver, using libmysqlclient. b'MySQL client port driver. Uses libmysqlclient, as opposed to sniffing\nwire protocol.\n\nSpawns one unix process per DB connection. This process has a knack\nfor exiting when anything goes even slighltly amiss. It also gets\nrestarted by a supervisor, so this might be a good thing.\n\nThis library tries to be ODBC compatible as much as possible. I have\nnever actually /used/ ODBC, but I can read man pages. If you know\nbetter, please let me know.\n\nMy objective is that if you know how to use ODBC in Erlang, then you\ncan use this library with only changing the connect syntax.\n'
A few tools I've written to aid development and production of my WordPress theme, Tarski. b"Tarski Utilities\n================\n\nThe files included in this repository constitute a toolset for working with\n[Tarski][tarski], a [WordPress][wp] theme. Hopefully they will prove useful to\nsomeone.\n\n\nTasks\n-----\n\n    rake changelog       # Generate a new changelog HTML file.\n    rake feed            # Update the version feed to notify Tarski users of\n                         # the new release.\n    rake hooks           # Generate the hooks documentation page.\n    rake plugin_version  # Add version data to the Tarski website plugin.\n    rake update          # Creates a zip archive, and updates the version feed\n                         # and changelog.\n    rake zip             # Create a zip file of the lastest release in the\n                         # downloads directory.\n\n\nRequired libraries\n------------------\n\nThese tools are written in Ruby, so they require the RubyGems packaging system\nand the following gems. [Git][git] is also a requirement.\n\n* [__Rake__][rake] to run the tasks.\n* [__Builder__][builder]: programmatic XML generation, required to create the\n  Tarski version feed.\n* [__RDiscount__][rdiscount]: Markdown format reader and writer, used to read\n  Tarski's changelog file.\n* [__RubyPants__][rubypants]: Nicer typography with [SmartyPants][smartypants].\n* [__Hpricot__][hpricot]: DOM scripting in Ruby for HTML and XML, used to parse\n  the Tarski changelog and generate a list of links to each version's entry in\n  the changelog.\n\n\n[tarski]:      http://tarskitheme.com/\n[wp]:          http://wordpress.org/\n[git]:         http://git-scm.com/\n[rake]:        http://http://rake.rubyforge.org/\n[yaml]:        http://www.yaml.org/\n[builder]:     http://builder.rubyforge.org/\n[rdiscount]:   http://github.com/rtomayko/rdiscount/\n[rubypants]:   http://chneukirchen.org/blog/static/projects/rubypants.html\n[smartypants]: http://daringfireball.net/projects/smartypants/\n[hpricot]:     http://code.whytheluckystiff.net/hpricot/\n[open_uri]:    http://www.ruby-doc.org/stdlib/libdoc/open-uri/rdoc/\n"
Warbler chirpily constructs .war files of your Ruby applications. b'= Warbler {<img src="https://badge.fury.io/rb/warbler.svg" alt="Gem Version" />}[http://badge.fury.io/rb/warbler] {<img src="https://travis-ci.org/jruby/warbler.png" />}[https://travis-ci.org/jruby/warbler]\n\nWarbler is a gem to make a Java jar or war file out of any Ruby, Rails or Rack\napplication. Warbler provides a minimal, flexible, Ruby-like way to bundle up\nall of your application files for deployment to a Java environment.\n\nWarbler provides a sane set of out-of-the box defaults that should allow most\nRuby applications to assemble and Just Work.\n\nVersion 1.4.x of Warbler supports versions of JRuby up to 1.7.x. The {2.x-dev branch}[https://github.com/jruby/warbler/tree/2.x-dev] contains work related to JRuby 9k.\n\n== Getting Started\n\n1. Install the gem: <tt>gem install warbler</tt>.\n\n2. Run warbler in the top directory of your application: <tt>warble</tt>.\n\n3. Choose one:\n\n* For a web project, deploy your +myapp.war+ file to your favorite Java application server.\n\n* For a standalone applications, just run it: <tt>java -jar myapp.jar</tt>.\n\n== Usage\n\nWarbler\'s +warble+ command is just a small wrapper around Rake with internally\ndefined tasks.\n\n    $ warble -T\n    warble compiled    # Feature: precompile all Ruby files\n    warble config      # Generate a configuration file to customize your archive\n    warble executable  # Feature: make an executable archive (runnable + an emb...\n    warble gemjar      # Feature: package gem repository inside a jar\n    warble pluginize   # Install Warbler tasks in your Rails application\n    warble runnable    # Feature: make a runnable archive (e.g. java -jar rails...\n    warble version     # Display version of Warbler\n    warble war         # Create the project war file\n    warble war:clean   # Remove the project war file\n    warble war:debug   # Dump diagnostic information\n\n\nType <tt>warble</tt> to create the jar or war file.\n\n== Features\n\nWarbler "features" are small Rake tasks that run before the creation of the war\nfile and make manipulations to the archive structure. For instance, the\n+executable+ feature makes your war file capable of running on its own,\nwithout a servlet container (using an embedded web server) :\n\n    warble executable war\n\nYou can either add features to the warbler command line:\n\n    warble FEATURE war\n\nor configure them in <tt>config/warble.rb</tt> to always be used.\n\n   config.features = %w(FEATURE)\n\nCurrently, the following features are available :\n\n* +gemjar+: This bundles all gems into a single gem file to reduce the\n  number of files in the .war. This is mostly useful for Google\n  AppEngine where the number of files per application has a limit.\n  (Note: not applicable for jar-based applications.)\n* +runnable+: This makes a (standard Java) runnable .war archive thus you can\n  execute binary bundled (gem) commands e.g. "rake". You should use the -S\n  switch to specify the binary followed by any arguments in takes e.g.\n  <tt>java -jar myrailsapp.war -S rake db:migrate</tt>.\n* +executable+: This bundles an embedded web server into the .war so that it\n  can either be deployed into a traditional java web server or run as a\n  standalone application using <tt>java -jar myapp.war</tt>.\n  (Note: jar-based applications are executable by default.)\n* +compiled+: This uses +jrubyc+ to precompile all .rb files in your application\n  to .class files and includes those in the .war instead of the Ruby sources.\n  NOTE: The war file will still contain .rb files, but they will be short stubs\n  containing the following code : <tt>load __FILE__.sub(/\\.rb$/, \'.class\')</tt>\n\nFeatures may form the basis for a third-party plugin system (in the future)\nif there is demand.\n\nNOTE: Feature tasks must be included in the same command invocation and\ninserted before the +war+ task in order to take effect. For example,\n<tt>warble compiled; warble war</tt> does not compile and obfuscate +.rb+\nsources because the second invocation of +warble+ does not run the +compiled+\nfeature and creates a basic war with the sources included, make sure you run :\n\n    warble compiled war\n\nor, if it\'s important that the war always be compiled, use the option above to\nput the feature in your <tt>config/warble.rb</tt>.\n\n== War or Jar?\n\nWar-based projects are for Rails, Merb, or Rack-based web applications.\nThey usually contain a +config/environment.rb+ file, a +config/init.rb+ file,\nor a +config.ru+ file.\nThe presence of these files are used to determine if the project is a web\napplication, and thus a Java EE compatible war file is built for the project.\n\nJar-based projects are for standalone Ruby applications. Usually a Ruby\napplication has a launcher script in the +bin+ directory and Ruby code\nin the <tt>lib</tt> directory. Warbler packages the application so that\n<tt>java -jar myapp.jar</tt> runs the launcher script.\n\n== Jar Files\n\n=== Gem Specification (gemspec) Files\n\nIf your project has a <tt>.gemspec</tt> file in the top directory, it will be\nused to configure the project\'s dependencies, launcher script, require paths,\nand the files to be included in the archive. For best results make sure your\ngemspec specifies all of the following attributes:\n\n* +executables+\n* +require_paths+\n* runtime dependencies added with +add_dependency+\n\nIf your project do not have a <tt>.gemspec</tt>, Warbler will attempt to guess\nthe launcher from the contents of the <tt>bin</tt> directory and use the\n<tt>lib</tt> directory as the lone require path. All files in the project\nwill be included in the archive.\n\n=== Bundler\n\nApplications that use Bundler[http://gembundler.com/], detected via presence of\na +Gemfile+, will have the gems packaged up into the archive along with the\nGemfile. The Bundler groups named ":development", ":test" and ":assets" will be\nexcluded by default, unless you specify with <tt>config.bundle_without</tt> in\n+config/warble.rb+.\n\nWarbler supports Bundler for gems and git repositories, but not for plain path\ncomponents. Warbler will warn when a +:path+ component is found in the +Gemfile+\nand will refuse to include it in the archive.\n\n=== JBundler (experimental)\n\nApplications that use JBundler[http://github.com/mkristian/jbundler], detected\nvia presence of a +Jarfile+, will have the jars packaged up into the archive. the JBundler gem is **not** needed for runtime since all jars are already part of the classloader.\n\n== War Files\n\n=== Rails applications\n\nRails applications are detected automatically and configured appropriately.\nThe following items are set up for you:\n\n* Your application runs in the +production+ environment by default.\n  Change it in +config/warble.rb+ (see below).\n* The Rails gem is packaged if you haven\'t vendored Rails (Rails <= 2.x).\n* Other gems configured in Rails.configuration.gems are packaged (2.1 - 2.3)\n* Multi-thread-safe execution (as introduced in Rails 2.2) is detected and\n  runtime pooling is disabled.\n\n=== Other Rack-based applications\n\nIf you have a +config.ru+ file in the top directory or one of the immediate\nsubdirectories of your application, it will be included and used as the rackup\nscript for your Rack-based application. You will probably need to specify\nframework and application gems in +config/warble.rb+ unless you\'re using Bundler\nto manage your gems. <tt>ENV[\'RACK_ENV\']</tt> will be set to +production+.\n\nSee {the examples in the jruby-rack project}[http://github.com/jruby/jruby-rack/tree/master/examples/]\nof how to configure Warbler to package Camping and Sinatra apps.\n\n=== Configuration auto-detect notes\n\n* Warbler will load the +environment+ Rake task in a Rails application to try\n  to detect some configuration. If you don\'t have database access in the\n  environment where you package your application, you may wish to set\n  <tt>Warbler.framework_detection = false</tt> at the top of +config.rb+.\n  In this case you may need to specify additional details such as booter, gems\n  and other settings that would normally be gleaned from the app configuration.\n* Is it possible to more generally detect what gems an application uses?\n  <tt>Gem.loaded_specs</tt> is available, but the application needs to be\n  loaded first before its contents are reliable.\n\n== Custom configuration\n\nIf the default settings are not appropriate for your application, you can\ncustomize Warbler\'s behavior. To customize files, libraries, and gems included\nin the .war file, you\'ll need a config/warble.rb file. There a two ways of\ndoing this. With the gem, simply run\n\n    warble config\n\nFinally, edit the +config/warble.rb+ to your taste. The generated file is\nfully-documented with the available options and default values.\n\n=== War layout\n\nThe default configuration puts application files (+app+, +config+, +lib+,\n+log+, +vendor+, +tmp+) under the .war file\'s +WEB-INF+ directory, and files in\n+public+ in the root of the .war file. Any Java .jar files stored in lib will\nautomatically be placed in +WEB-INF/lib+ for placement on the web app\'s\nclass-path.\n\n=== Web.xml\n\nJava web applications are configured mainly through this file, and Warbler\ncreates a suitable default file for you for use. However, if you need to\ncustomize it in any way, you have two options.\n\n1. If you just want a static web.xml file whose contents you manually\n   control, you may unzip the one generated for you in\n   <tt>yourapp.war:WEB-INF/web.xml</tt> to <tt>config/web.xml</tt> and\n   modify as needed. It will be copied into subsequent copies of the\n   war file for you.\n2. If you want to inject some dynamic information into the file, copy\n   the <tt>WARBLER_HOME/web.xml.erb</tt> to\n   <tt>config/web.xml.erb</tt>. Its contents will be evaluated for you\n   and put in the webapp. Note that you can also pass arbitrary\n   properties to the ERb template by setting\n   <tt>config.webxml.customkey</tt> values in your\n   <tt>config/warble.rb</tt> file.\n\nFor more information on configuration, see Warbler::Config.\n\n== Rakefile integration\n\nIf you\'d like to control Warbler from your own project\'s +Rakefile+,\nsimply add the following code somewhere in the +Rakefile+ :\n\n    require \'warbler\'\n    Warbler::Task.new\n\nIf you\'re using Bundler, you\'ll want to add Warbler to your +Gemfile+ :\n\n    group :development do\n      gem "warbler", :require => false\n    end\n\nNow you should be able to invoke <tt>rake war</tt> to create your war file.\n\n== Ruby 1.8 compatibility\n\nWarbler supports versions of JRuby that support Ruby 1.8, so Warbler\nitself continues to support Ruby 1.8. However, many gems are choosing\nto drop 1.8 support; one of these gems is\n{rubyzip}(https://github.com/rubyzip/rubyzip), which Warbler relies\non. If you need to use Warbler in a 1.8 environment, you will need to\nlock the <tt>rubyzip</tt> gem to a version before 1.0.0.\n\n== Troubleshooting\n\nIf Warbler isn\'t packaging the files you were expecting, use the +war:debug+\ntask to give you more insight into what\'s going on.\n\nIf you think you found a bug, please file one at\nhttps://github.com/jruby/warbler/issues.\n\n== Source\n\nYou can get the Warbler source using Git, in any of the following ways:\n\n   git clone git://git.caldersphere.net/warbler.git\n   git clone git://github.com/jruby/warbler.git\n\nYou can also download a tarball of Warbler source at\nhttps://github.com/jruby/warbler/tarball/master.\n\n== Development\n\nYou can develop Warbler with any implementation of Ruby. To write Warbler code\nand run specs, you need to have Bundler installed and run <tt>bundle</tt> once.\n\nAfter that, simply run <tt>rake</tt>.\n\n=== Integration Tests\n\nThere are a few integration tests in the `integration` directory that build WAR file\nwith Warbler, and run some basic smoke tests against them.  You can run these like so:\n\n    cd integration\n    export MAVEN_OPTS="-XX:MaxPermSize=128m"\n    mvn verify\n\nThe increased PermGen space is for the Rails4 test. And You\'ll need to have Maven 3.1.1 installed, of course:\nhttp://maven.apache.org/ Be aware the homebrew installs 3.0.5, which doesn\'t work (and I don\'t really know why).\n\n\n== License\n\nWarbler is provided under the terms of the MIT license.\n\nWarbler (c) 2013-2015 The JRuby project\n\nWarbler (c) 2010-2012 Engine Yard, Inc.\n\nWarbler (c) 2007-2009 Sun Microsystems, Inc.\n'
Very simplistic one-way file synchronization b"WARNING:\n\n\tdmsync is built for er specific purpose. Don't use it unless you know the\n\tlimitations of it (e.g. it ONLY uses timestamps to determine which file\n\tneeds to be transferred, which can easily overlook new hardlinks to old\n\tfiles - as the new hardlinks will have the timestamp of the old file,\n\tand it does not detect deleted files at all). Keep rsync nearby :)\n\n\tHowever I hope to continue improving it until its robust enough to be\n\ta more generic tool\n"
Flurry screensaver 
A dummy project that's HW for a class 
CI::Reporter is an add-on to popular test frameworks that allows you to generate XML reports b'CI::Reporter is an add-on to Ruby testing frameworks like Test::Unit\nor RSpec that allows you to generate XML reports of your test\nruns. The resulting files can be read by a continuous integration\nsystem that understands Ant\'s JUnit report XML format, thus allowing\nyour CI system to track test/spec successes and failures.\n\n[![Gem Version](https://badge.fury.io/rb/ci_reporter.svg)](http://badge.fury.io/rb/ci_reporter)\n[![Build Status](https://travis-ci.org/ci-reporter/ci_reporter.svg?branch=master)](https://travis-ci.org/ci-reporter/ci_reporter)\n[![Dependency Status](https://gemnasium.com/ci-reporter/ci_reporter.svg)](https://gemnasium.com/ci-reporter/ci_reporter)\n[![Code Climate](https://codeclimate.com/github/ci-reporter/ci_reporter.png)](https://codeclimate.com/github/ci-reporter/ci_reporter)\n\n## Usage\n\nCI::Reporter works with projects that use standard Rake tasks for\nrunning tests. In this fashion, it hooks into testing frameworks using\nenvironment variables recognized by these custom tasks to inject the\nCI::Reporter code into the test run.\n\nEach supported testing framework is provided by a separate gem:\n\n* [Cucumber][ci-cuke]\n* [Minitest][ci-mt]\n* [RSpec][ci-rspec]\n* [Spinach][ci-spin]\n* [Test::Unit][ci-tu]\n\n[ci-cuke]: https://github.com/ci-reporter/ci_reporter_cucumber\n[ci-mt]: https://github.com/ci-reporter/ci_reporter_minitest\n[ci-rspec]: https://github.com/ci-reporter/ci_reporter_rspec\n[ci-spin]: https://github.com/ci-reporter/ci_reporter_spinach\n[ci-tu]: https://github.com/ci-reporter/ci_reporter_test_unit\n\n### Upgrading from CI::Reporter 1.x\n\nCI::Reporter 1.x supported all the different test frameworks in a\nsingle gem. This was convenient, but caused issues as test frameworks\nreleased new, sometimes incompatibile, versions. CI::Reporter 2.x has\nbeen split into multiple gems, allowing each gem to specify the test\nframework versions it supports.\n\nTo upgrade to 2.x, remove `ci_reporter` from your Gemfile and replace\nit with one or more of the framework-specific gems above.\n\n## Jenkins setup\n\n1. Add the "Publish JUnit test result report" post-build step\nin the job configuration.\n\n2. Enter "test/reports/\\*.xml,spec/reports/\\*.xml" in the "Test report\nXMLs" field (adjust this to suit which tests you are running)\n\nReport files are written, by default, to the\n<code>test/reports</code>, <code>features/reports</code> or\n<code>spec/reports</code> subdirectory of your project.  If you wish\nto customize the location, simply set the environment variable\nCI_REPORTS (either in the environment, on the Rake command line, or in\nyour Rakefile) to the location where they should go.\n\n## Conditional reporting\n\nYou may not wish to always produce report files. There are two primary\nways to configure this:\n\n### With environment variables\n\nUse an environment variable in your Rakefile to control if CI:Reporter\nwill be invoked:\n\n```ruby\nif ENV[\'GENERATE_REPORTS\'] == \'true\'\n  require \'ci/reporter/rake/rspec\'\n  task :rspec => \'ci:setup:rspec\'\nend\n```\n\nYou can either inject this variable in your CI or simply call `rake`\nwith the environment variable set:\n\n```\nGENERATE_REPORTS=true rake rspec\n```\n\n### With CI-specific Rake tasks\n\nInstead of modifying your existing Rake tasks, create new ones:\n\n```ruby\nnamespace :ci do\n  task :all => [\'ci:setup:rspec\', \'rspec\']\nend\n```\n\nThen use this Rake target in CI:\n\n```\nrake ci:all\n```\n\n## Environment Variables\n\n* `CI_REPORTS`: if set, points to a directory where report files will\n  be written.\n* `CI_CAPTURE`: if set to value "off", stdout/stderr capture will be\n  disabled.\n'
JREXML is an add-on for JRuby that uses a Java pull parser library to speed up REXML. b"JREXML is an add-on for JRuby that uses a Java pull parser library to speed up REXML.\n\nREXML is, unfortunately, painfully slow running under JRuby at the moment due to the slowness of regular expression parsing. JREXML shoves a small wrapper around XPP3/MXP1 (http://www.extreme.indiana.edu/xgws/xsoap/xpp/mxp1/) into the guts of REXML, disabling the regular expression parser and providing close to a 10x speedup.\n\n== Install\n\nSimply install the gem under JRuby:\n\n    jruby -S gem install jrexml\n\nAnd require 'jrexml' to speed up REXML.\n\n    gem 'jrexml'\n    require 'jrexml'\n\n== Source\n\nYou can get the JREXML source using Git, in any of the following ways:\n\n    git clone git://git.caldersphere.net/jrexml.git\n    git clone http://git.caldersphere.net/jrexml.git\n    git clone git://github.com/nicksieger/jrexml.git\n\nYou can also download a tarball of the latest JREXML source at http://github.com/nicksieger/jrexml/tree/master.\n\n== License\n\nThis software is released under an MIT license.  For details, see the LICENSE.txt file included with the distribution.  The software is copyright (c) 2007 Nick Sieger <nicksieger@gmail.com>.\n\nThis product includes software developed by the Indiana University Extreme! Lab (http://www.extreme.indiana.edu/).  See the license in the file lib/xpp3.LICENSE.txt for details."
A ruby library and command line tool for parsing the results of various testing systems, including rpsec, junit, pyunit, cutest, quickCheck and more.   b'README for test-parser\n======================\n\n'
Pysolar is a collection of Python libraries for simulating the irradiation of any point on earth by the sun. It includes code for extremely precise ephemeris calculations. b'## Pysolar ##\n\nPysolar is a collection of Python libraries for simulating the irradiation of any point on earth by the sun. It includes code for extremely precise ephemeris calculations, and more.\n\n# Note: right now, the latest commits of Pysolar don\'t work with Python 2.x #\n\n* Release 0.6 works with 2.x: https://github.com/pingswept/pysolar/releases/tag/0.6 but 0.7 and later have a bunch of changes. They have been validated for Python 3.4, but releases 3.2 or earlier are missing features that the changes require. *\n\nAlso, the API has changed slightly:\n\n  * Pysolar now expects you to supply a **timezone-aware datetime**, rather than a naive datetime in UTC. If your results seem crazy, this is probably why.\n  * Function names are now `lowercase_separated_by_underscores`, in compliance with [PEP8](https://www.python.org/dev/peps/pep-0008/#function-names).\n\n## Installation ##\n\nAssuming you have Python 3.4 or higher installed, you can install Pysolar with `pip`:\n\n    sudo pip install pysolar\n\nDocumentation now appears at [docs.pysolar.org](http://docs.pysolar.org).\n\n## Contributions ##\n\nAll contributions go through pull requests on Github.\n\nEditing [the documentation](http://docs.pysolar.org) is particularly easy-- just click the "Edit on Github" link at the top of any page.\n\nCode contributions are welcome under the terms of the GPLv3 license. If you\'re unfamiliar with Github, you could start with [this guide to working on open source projects](https://guides.github.com/activities/contributing-to-open-source/).\n\n## Support ##\n\nYour first move should be to read the [documentation](http://docs.pysolar.org) and think. But you\'ve probably already tried that.\n\nYour second move is to ask a question on the [pysolar-discuss](http://lists.pysolar.org) mailing list. The original author of Pysolar, [Brandon Stafford](http://rascalmicro.com), monitors the mailing list. Please understand that I wrote (most of) Pysolar around a decade ago when I worked in the solar industry. Now, I\'m an electrical engineer who just maintains Pysolar as a fun hobby. The other people on the list are other users like you-- some are experts; some are amateurs. None of them are getting paid for this.\n\nTo subscribe to the mailing list, send a blank email to pysolar-discuss+subscribe@pysolar.org. After a few minutes, you\'ll get a confirmation message; reply to the confirmation to complete the subscription.\n\nIn order to post to the list, you have to subscribe. You also have to pass a threshold of civil discourse regulated by me.\n\nThe archive of the list is publicly available here: http://lists.pysolar.org/.\n\nIf you ever want to unsubscribe, send an email to pysolar-discuss+unsubscribe@pysolar.org and reply to the confirmation message. If you run into trouble, just send me an email at brandon@pingswept.org, and I\'ll remove your address manually.\n\nPlease report bugs to [the issue tracker on Github](https://github.com/pingswept/pysolar/issues); I am automatically notified when a new issue is opened.\n\n## License ##\n\nPysolar is licensed under [the GPLv3](https://www.gnu.org/licenses/gpl-3.0.html).\n'
Ruby WDDX gem. b'= WDDX\n\nhttp://wddx.rubyforge.org/\n\n== DESCRIPTION\n\nRuby API for the WDDX XML interchange format (see http://www.openwddx.org/) \n\nFrom http://www.openwddx.org/faq/:\n WDDX is an XML-based technology that enables the exchange of complex data between Web programming languages, \n creating what some refer to as \'Web syndicate networks\'. \n WDDX consists of a language-independent representation of data based on an XML 1.0 DTD, and a set of \n modules for a wide variety of languages that use WDDX. \n WDDX can be used with HTTP, SMTP, POP, FTP and other Internet protocols that support transferring textual data.\n\nWDDX Home: http://www.openwddx.org/\n\nThe Ruby WDDX Gem enables easy usage of WDDX in Ruby.\n\n== Author\n\nCopyright (C) 2005, 2006, 2007, 2008 by Stefan Saasen <s-NOSPAM-REMOVE@juretta.com> - http://juretta.com/\n\n== Installation\n\nJust run <tt>[sudo] gem install wddx</tt> to install the WDDX Gem.\n\n\n== SYNOPSIS\n\n=== Deserialization\nYou can very easily deserialize WDDX data from a file or from a string.\n\nSimple usage example:\n \n require \'rubygems\'\n require \'wddx\'        \n # data.xml contains <?xml version="1.0">\\\n # <wddxPacket version=\'1.0\'><header><comment>A comment</comment></header><data><string>Klaus Tester</string></data></wddxPacket> \n wddx = WDDX.load(File.open("data.xml"))\n puts wddx.comment # "A comment"\n puts wddx.data.class # String\n puts wddx.data # "Klaus Tester"\n \nWDDX.load accepts a string with xml content, a file object or any object that provides a +read+ method.\n packet =  WDDX.load(open("http://wddx.rubyforge.org/wddx.xml"))\nor\n packet =  WDDX.load(File.open("data.xml")) \nor\n packet =  WDDX.load(open("data.xml"))\nor\n xml = "<wddxPacket version=\'1.0\'><header/><data><number>123.667</number></data></wddxPacket>"\n packet = WDDX.load(xml)\n puts w.data # => 123.667\n \n xml = <<-EOF \n <wddxPacket version=\'1.0\'>\n <header/>\n <data>\n     <struct>\n         <var name=\'aNull\'>\n             <null/>\n         </var>\n         <var name=\'aString\'>\n             <string>a string</string>\n         </var>\n     </struct>\n    </data>\n  </wddxPacket> \n EOF\n w = WDDX.load(xml)\n p w.data # => {"aString"=>"a string", "aNull"=>nil}\n                                         \nIf the root element is a +struct+ you can use a shortcut version:\n \n w.data["aString"] # => "a string"\n\ncan be written as:\n\n w.aString # => "a string"\n\n\n=== Serialization\nThe core Ruby Classes +Symbol+, +String+, +Numeric+, +true+, +false+, +nil+, +Hash+, +Array+ and +Time+ can be serialized by calling\n+to_wddx+.\n\n require \'wddx\'\n "Stefan Saasen".to_wddx        # => "<wddxPacket version=\'1.0\'><header/><data>\\\n                                #     <string>Stefan Saasen</string></data></wddxPacket>"\n\n 123.667.to_wddx                # => "<wddxPacket version=\'1.0\'><header/><data>\\\n                                #     <number>123.667</number></data></wddxPacket>"\n\n Math::PI.to_wddx               # => "<wddxPacket version=\'1.0\'><header/><data>\\\n                                #   <number>3.14159265358979</number></data></wddxPacket>"\n\n [1000, "Klaus Tester"].to_wddx # => "<wddxPacket version=\'1.0\'><header/><data>\\\n                                #   <array length=\'2\'><number>1000</number>\\\n                                #   <string>Klaus Tester</string></array></data></wddxPacket>"\n\n=== WDDX.dump\nYou can use WDDX.dump to serialize Ruby objects.\n WDDX.dump("Hallo Welt") # => "<wddxPacket version=\'1.0\'><header/><data><string>Hallo Welt</string></data></wddxPacket>"\n\n\nCustom Ruby classes can be serialized by adding a +to_wddx_properties+ method (in the style of the YAML library) and calling WDDX.dump.\n\n class SerializeFromOutside\n   def initialize(a,b,c)\n     @a, @b, @c = a, b, c\n   end\n   \n   def to_wddx_properties\n     ["@a", "@c"]\n   end  \n end \n obj = SerializeFromOutside.new("This is a", "This is b", 123) \n WDDX.dump(obj) # => "<wddxPacket version=\'1.0\'><header/><data><struct><var name=\'a\'>\\\n                # <string>This is a</string></var><var name=\'c\'><number>123</number>\\\n                # </var></struct></data></wddxPacket>"\n\nIt is possible to include the WDDX module to get a behaviour similiar to the core Ruby classes.\n\n class MyObject\n   include WDDX\n   attr_accessor :name, :value, :price\n\n   def to_wddx_properties\n     ["@name", :custom_price]\n   end               \n\n   def custom_price\n     @price * 1.05\n   end\n end\n\n obj = MyObject.new("Stefan Saasen", 120)\n puts ob.to_wddx\n # => "<wddxPacket version=\'1.0\'><header/><data><struct><var name=\'name\'>\\\n # <string>Stefan Saasen</string></var><var name=\'custom_price\'><number>126.0</number>\\\n # </var></struct></data></wddxPacket>"     \n                                    \n== WDDX Data types\n\nWDDX defines some data types which can not be mapped to native ruby classes. WDDX::Binary represents a binary object (which is in fact a BASE64 encoded String). WDDX::RecordSet represents a RecordSet with data rows an column meta information.\n\n== Type mapping\nThe following table shows the data type mapping WDDX <=> Ruby.\n WDDX Type      Ruby Type\n ---------      ---------------------\n String         String\n Number         Numeric\n Boolean        TrueClass, FalseClass\n Datetime       Time\n Null           nil\n Binary         WDDX::Binary\n Array          Array\n Struct         Hash\n Recordset      WDDX::RecordSet\n\n\n== Rails Plugin\n\nYou can add the wddx gem to your rails application to be able to serialize ActiveRecord objects to WDDX.\n\nIn config/environment.rb add:\n require \'wddx\'\n\nExample:\n \n ...\n a_ar_obj.to_wddx # => <wddxPacket...\n\n\n== See\n\nHomepage:: http://rubyforge.org/projects/wddx/\nBlog:: http://juretta.com/\nBugtracker:: http://rubyforge.org/tracker/?group_id=2715\nWDDX:: http://www.openwddx.org/\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2005, 2006, 2007, 2008 by Stefan Saasen <s-NOSPAM-REMOVE@juretta.com> - http://juretta.com/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Adds a development toolbar to your site that makes it easy to tell the difference between development, staging, and production. b'CkFu\n====\n\nWhere does the name ck_fu come from? It\'s a play on attachment_fu and I think curse words are funny.\n\nThis will put a bar across the top of your screen (except in production unless :if is specified and true) that shows the environment, \ndatabases, revision, etc. Why do we need something like this? because the development and staging sites often look identical to the \nproduction site. This makes it easy to tell the difference between the sites at a glance.\n\nExample\n=======\n\n* Run rake ck_fu:copy_styles\n* Add ck_fu.css to your list of stylesheets\n* Add the following directly below your <body> tag\n<%= ck_fu %>\n\nMore Advanced Usage\n===================\n\n* ck_fu (default) will not show up in production\n<div class="test" id="ck_fu">Env: Test &sect; Current DB: myapp_dev</div>\n\n* If RAILS_ROOT/REVISION exists (created by capistrano when deploying) (can suppress with :revision => false)\n<div class="test" id="ck_fu">Env: Test &sect; Current DB: myapp_dev &sect; Revision: <rev></div>\n\n* If RAILS_ROOT/DATE exists (can suppress with :date => false)\n<div class="test" id="ck_fu">Env: Test &sect; Current DB: myapp_dev &sect; Deployed: <date></div>\nTo make this exist on the server, add something like the following to deploy.rb:\ntask :after_symlink, :roles => :web do\n  run "date > #{current_release}/DATE"\nend\n\n* Arbitrary links\nck_fu(:links => [[\'Public site\', root_path]])\n<div class="test" id="ck_fu">Env: Test &sect; Current DB: myapp_dev &sect; <a href="/">Public site</a></div>\n\n* Display based on some condition like the current_user is an admin\nck_fu(:if => current_user.try(:admin?)) - will display in production as well if the user is an admin.\n\nFor more information and screenshots, visit http://ck_fu.me\n\nCopyright (c) 2008 umlatte LLC, released under the MIT license\n'
Simple GUI for launching BZFlag b'BZLauncher (c) 2008 by Dennis Moellegaard Pedersen <dennis@moellegaard.dk>\nhttp://dennis.moellegaard.dk/projects/bzlauncher/\n\n * The BZLauncher code itself is released under MIT LICENSE (see MIT-LICENSE)\n * BZFlag Icon (the Red Tank) which is released under LGPL (http://www.bzflag.org)\n * All other icons is released under Creative Commons Attribution\n   Share-Alike (http://tango.freedesktop.org/)\n\nCompiling - linux\n-----------------\n * To compile BZLauncher you need wxwidgets 2.8.4 or better and GNU c/c++.\n * ./configure\n * make\n\nCompiling - Windows\n-------------------\n * To compile BZLauncher you need wxwidgets 2.8.4 and Microsoft Visual C++ 2005\n * Build wxWidgets (the non dll targets), and set one environment variable on\n   your system (system control panel -> advanced tab -> environment variables\n   button -> system variables) WX_WIDGETS DIR, to the root dir of your wx\n   install\n * Open the project: bzlauncher.sln\n * Compile!\n * The executable is found in the main directory\n'
LablGTK Comic book (CBR,CBZ) reader b'Coml is a Comic Book viewer.  \n\nIt works on page files in directories or archives (rar, zip, lha, 7z).  Each file may contain a single page or two facing pages.  Coml has a manga mode for Japanese comic books where the first page is on the right.  \n\nIts simple interface includes:\n\t<left arrow>, <up arrow>, <backspace> : previous page\n\t<right arrow>, <down arrow> : next page\n\t<space> : magic next (scrolls if needed)\n\tf, <F11> : toggle fullscreen\n\t<Esc>: exit fullscreen\n\tt : toggle twopage mode\n\tm : toggle manga mode\n\ts : zoom height and width\n\tw : zoom width\n\th : zoom height\n\t- : zoom out\n\t+ : zoom in\n\t= : zoom full (1:1)\n\tw : toggle wrapping at end of comic book\n\t1 : toggle twopage for the current page\n\t<Page Up> : go to the previous book\n\t<Page Down> : go to the next book\n\tg : go to a particular page\n\nRequirements for compilation:\n\tLablGTK2\n\tBatteries Included\n\nEnjoy!\n'
A tiny little uploader utility with password protection and an API. b'Uploader\n========\nA simple local file manager/uploader with simple, optional password protection and a barebones API for uploading.'
Merb Plugins: Even more modules to hook up your Merb installation 
A Gitk-like application written in RubyCocoa that looks like it belongs on a Mac.  See the wiki for downloads and screenshots. b'## GitNub\nA RubyCocoa app for getting quick information for a git repo.  Similar to GitK.\n \n### Requirements\n* Git, RubyCocoa, Leopard, RubyGems, open4\n\n### Quick Install\n1. Move GitNub.app to /Applications\n2. Move (or symlink) nub shell file to /usr/local/bin\n\n\n\n### How to Use\nIn your shell, move to a git directory and invoke `nub`.  You always use this \nhelper to invoke the application, otherwise you get nothing.\n\n\t\t$Caged@caged:~/dev/git/gitnub% nub\n\n\t\t\n### Building from Source\n1. Run `git submodule init` & `git submodule update` in the root directory.\n2. Run `rake build` or open GitNub.xcodeproj in Xcode - press Build\n3. Run `rake install` to move GitNub.app to /Applications and copy nub to /usr/local/bin.\n   \n### Major Contributors\n* Justin Palmer - Maintainer\n* Benjamin Stiglitz \n* Kevin Ballard\n* Dustin Sallings\n'
spatial_adapter with geo_generators b'=Spatial Adapter for Rails\nThis is the Spatial Adapter for Rails 0.1.1. It is a plugin for Rails which manages the MySql Spatial and PostGIS geometric columns in a transparent way (that is like the other base data type columns). It also provides a way to manage these columns in migrations. It replaces both the "PostGIS Adapter for Rails" and "MySql Spatial Adapter for Rails" plugins.\n\n===Dependencies\nYou need to install a version >= 0.1.1 of the GeoRuby gem (http://rubyforge.org/projects/georuby/) :\n\tgem install georuby\n\n\n===Installation\nAt the root of your Rails project, type :\n       script\\plugin install svn://rubyforge.org/var/svn/georuby/SpatialAdapter/trunk/spatial_adapter\nYou need to have SVN installed.\n\t\n\n===Operations\nGeometric columns in your ActiveRecord models now appear just like any other column of other basic data types. They can also be dumped in ruby schema mode and loaded in migrations the same way as columns of basic types.\n\n==== Migrations\n\nHere is an example of code for the creation of a table with a geometric column in PostGIS, along with the addition of a spatial index on the column : \n\tActiveRecord::Schema.define do\n\t  create_table "table_points", :force => true do |t|\n    \t    t.column "data", :string\n    \t    t.column "geom", :point, :null=>false, :srid => 123, :with_z => true\n  \t  end\n\t\n\t  add_index "table_points", "geom", :spatial=>true\n    \tend\n\nHere is a related statement valid for MySql version <= 5.0.16 :\n\tActiveRecord::Schema.define do\n\t  create_table "table_points", ;options=>"ENGINE=MyISAM", :force => true do |t|\n    \t    t.column "data", :string\n    \t    t.column "geom", :point, :null=>false\n  \t  end\n\t\n\t  add_index "table_points", "geom", :spatial=>true\n    \tend\nThe differences with the PostGIS version are because of the following reasons :\n- On all version of MySql, the :srid and :with_z would be ignored, since they are not supported.\n- On MySql versions <= 5.0.16, you have to add <tt>:options => "ENGINE=MyISAM"</tt> to the create_table statetement, since only MyISAM tables can have geometric columns.\n\n==== Model\n\nHere is the model you would use, in both MySql and PostGIS:\n\tclass TablePoint < ActiveRecord::Base\n\tend\nThat was easy! As you see, there is no need to declare a column as geometric. The plugin will get this information by itself.\n\n==== Access\n\nHere is an example of PostGIS row creation and access, using the model and the table defined above :\n\tpt = TablePoint.new(:data => "Hello!",:geom => Point.from_x_y_z(-1.6,2.8,-3.4,123))\n\tpt.save\n\tpt = TablePoint.find_first\n\tputs pt.geom.x #access the geom column like any other\n\nFor MySQL, it is slightly different since it does not support Z dimension or SRID :\n\tpt = TablePoint.new(:data => "Hello!",:geom => Point.from_x_y(-1.6,2.8))\n\tpt.save\n\tpt = TablePoint.find_first\n\tputs pt.geom.x #access the geom column like any other\n\n==== Fixtures\n\nIf you use fixtures for your unit tests, at some point, you will want to input a geometry. You could transform your geometries to a form suitable for YAML yourself everytime but the spatial adapter provides a method to do it for you: +to_yaml+. It works for both MySQL and PostGIS (although the string returned is different for each database). You would use it like this, if the geometric column is a point:\n\tfixture:\n\t id: 1\n\t data: HELLO\n\t geom: <%= Point.from_x_y(123.5,321.9).to_yaml %>\n\n==== Find_by\n\nfind_by_[column] has been redefined when column is of a geometric type. Instead of using the Rails default \'=\' operator, for which I can\'t see a definition for MySql spatial datatypes and which performs a bounding box equality test in PostGIS, it uses a bounding box intersection: && in PostGIS and MBRIntersects in MySQL, which can both make use of a spatial index if one is present to speed up the queries. You could use this query, for example, if you need to display data from the database: You would want only the geometries which are in the screen rectangle and you could use a bounding box query for that. Since this is a common case, it is the default. You have 2 ways to use the find_by_[geom_column]: Either by passing a geometric object directly, or passing an array with the 2 opposite corners of a bounding box (with 2 or 3 coordinates depending of the dimension of the data).\n\tPark.find_by_geom(LineString.from_coordinates([[1.4,5.6],[2.7,8.9],[1.6,5.6]]))\nor\n\tPark.find_by_geom([[3,5.6],[19.98,5.9]])\nIn PostGIS, since you can only use operations with geometries with the same SRID, you can add a third element representing the SRID of the bounding box to the array. It is by default set to -1:\n\tPark.find_by_geom([[3,5.6],[19.98,5.9],123])\n\n==== Geometric data types\n\nRuby geometric datatypes are currently made available only through the GeoRuby library (http://thepochisuperstarmegashow.com/ProjectsDoc/georuby-doc/index.html): This is where the <tt>Point.from_x_y</tt> in the example above comes from. It is a goal of a future release of the Spatial Adapter to support additional geometric datatype libraries, such as Ruby/GEOS, as long as they can support reading and writing of EWKB.\n\n\n===Warning\n- If you use a version of MySQL before 5.0.16, only tables using the MyISAM engine can support geometric columns. After MySQL 5.0.16, any engine (incuding INNODB) is supported. \n\n- Since ActiveRecord seems to keep only the string values directly returned from the database, it translates from these to the correct types everytime an attribute is read, which is probably ok for simple types, but might be less than efficient for geometries, since the EWKB string has to be parsed everytime. Also it means you cannot modify the geometry object returned from an attribute directly :\n       place = Place.find_first\n       place.the_geom.y=123456.7\n \n- Since the translation to a geometry is performed everytime the_geom is read, the change to y will not be saved! You would have to do something like this :    \n       place = Place.find_first\n       the_geom = place.the_geom\n       the_geom.y=123456.7\n       place.the_geom = the_geom\n\n\n===Changes since last version\n- The PostGIS adapter and the MySql Spatial adapter have been merged into one plugin. The correct files to load is determined using the type of connection defined in the environment.\n- Geometric columns can now be dumped just like other base data types. This means you can use the ruby schema mode, even if you use the plugin.\n- Support of M dimensions in migrations. The <tt>:dimension</tt> key in the column definition has disappeared and has been replaced by <tt>:with_z</tt> and <tt>:with_m</tt>.\n- Addition of unit tests. At the plugin root, Run <tt>rake test:mysql</tt> to run the mysql tests and <tt>rake test:postgis</tt> for the postgis ones. You will need to configure your connection in <tt>test/db/database_mysql.yml</tt> and <tt>test/db/database_postgis.yml</tt>. If you get errors on your platform, please report to mailto:guilhem.vellut+georuby@gmail.com.\n- Addition of a find_by methods with a special behaviour for geometries\n- Addition of a to_yaml method to use inside a YAML fixture\n\n===TODO\n- Support of other geometric datatype libraries in addition to GeoRuby\n- Tutorials\n\n===License\nThe Spatial Adapter for Rails is released under the MIT license.\n\n===Support\nAny questions, enhancement proposals, bug notifications or corrections can be sent to mailto:guilhem.vellut+georuby@gmail.com.'
A FireEagle OAuth Lib. b'This repo is primarily two javascript objects.  \n\nlib/oauthlib.js extends the oauth for javascript from\nhttp://oauth.googlecode.com/svn/code/javascript/\n\nlib/fe.js is a wrapper object to make oauth calls to fireeagle.\n\nSee http://fireeagle.yahoo.net for more info.\n'
Merb More: The Full Stack. Take what you need; leave what you don't. 
Merb Plugins: Even more modules to hook up your Merb installation 
My master thesis b'This is the master thesis of Dirk Breuer, student of Media Informatics at the\nUniversity of Applied Science Cologne.\n\nThis work is licensed under the Creative Commons Attribution-Noncommercial-No \nDerivative Works 3.0 Unported License. To view a copy of this license, visit \nhttp://creativecommons.org/licenses/by-nc-nd/3.0/ or send a letter to Creative \nCommons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.'
Markup utils for Django b'Markup Utils\n============\n\nThis a django application that adds markup-chain functionallity.\nAll you have to do is include markup_utils to your apps and add a\nMARKUP_CHAIN setting in your settings.py file.\n\nThe app also includes a build-in filter for code highlighting\nand simple replacing, see below\nfor details.\n\ne.x.\n\nsettings.py:\n\nINSTALLED_APPS = (\n    ...\n    \'markup_utils\',\n    ...\n)\n\nMARKUP_CHAIN = (\n    \'markdown.markdown\',\n    \'markup_utils.filters.code_highlighter\',\n    \'markup_utils.filters.simple_replace\',\n)\n\nUsage\n=====\n\n  * Through a python function:\n  \tfrom markup_utils.filters import markup_chain\n\tmarkup_chain(some_content)\n  * Through templatetags\n  \t{% include markuptags %}\n\t{{ object.body|markup_chain }}\n\nThe filters will be called in up to bottom order.\n\nSample use\n==========\nYou can achieve the same result by using any of the following methods.\nAlthough the first method can be extended to use the caching mechanism,\nwhich is very cool. Checkout this blog entry for details.\n\nhttp://www.eflorenzano.com/blog/post/django-tip-denormalization-alternative/\n\nUse it in the model\n-------------------\n\nmodels.py: \n\nfrom django.db import models\nfrom markup_utils.filters import markup_chain\n\nclass Post(models.Model):\n    body = models.TextField(\'body\')\n\n    def _get_body_html(self):\n      return mark_safe(markup_chain(self.body))\n    body_html = property(_get_body_html)\n\nmytemplate.html:\n\n{{ post.body_html }}\n\nUse it in the template\n----------------------\n\nmy_template.html:\n\n{% load markuptags %}\n{{ post.body|markup_chain }}\n\nCode highlighting\n=================\n\ncode_highlighter finds <pre class="language">...</pre> blocks and\nreplaces them with code highlighted blocks using pygments.\nYou can use css to format the code, some default css is included in\nstatic/codehighlight.css\n\nInner workings\n--------------\nMarkdown doesn\'t touch <pre> elements. So it\'s safe to pass our content\nto the markdown filter first and then pass it to code_highlighter.\n\n\nSimple replace\n==============\n\n`simple_replace` replaces html elements with a specified expression.\nAll you have to do is specify the elements and the replacing string in your\nsettings file:\n\nMARKUP_CHAIN = (\n    ...\n    \'markup_utils.filters.simple_replace\',\n    ...\n)\n\nMARKUP_SIMPLE_REPLACE = (\n    dict(element=\'span\',klass=\'dj-ticket\',\n        replace_with="<a href=\\"http://code.djangoproject.com/ticket/%(content)s\\">#%(content)s</a>"),\n    dict(...\n)\n\nReplaces `<span class="dj-ticket">6969</span>` with\n`<a href="http://code.djangoproject.com/ticket/6969">#6969</a>`\n\n'
generators to create rails mapping apps 
Lab4 in the VR1 course 
aplikacja wspomagajaca zarzadznie biblioteka 
A fast, libxml based, Ruby Atom library supporting the Syndication Format and the Publishing Protocol.  b'= rAtom\n\nrAtom is a library for working with the Atom Syndication Format and\nthe Atom Publishing Protocol (APP).\n\n* Built using libxml so it is _much_ faster than a REXML based library.\n* Uses the libxml pull parser so it has much lighter memory usage.\n* Supports {RFC 5005}[http://www.ietf.org/rfc/rfc5005.txt] for feed pagination.\n\nrAtom was originally built to support the communication between a number of applications\nbuilt by Peerworks[http://peerworks.org], via the Atom Publishing protocol.  However, it \nsupports, or aims to support, all the Atom Syndication Format and Publication Protocol\nand can be used to access Atom feeds or to script publishing entries to a blog supporting APP.\n\n{<img src="https://secure.travis-ci.org/seangeo/ratom.png?branch=master" alt="Build Status" />}[http://travis-ci.org/seangeo/ratom]\n\nAPI docs are {here}[http://rdoc.info/github/seangeo/ratom/frames].\n\n== Prerequisites\n\n* libxml-ruby, >= 1.1.2\n* rspec (Only required for tests)\n\nlibxml-ruby in turn requires the libxml2 library to be installed. libxml2 can be downloaded\nfrom http://xmlsoft.org/downloads.html or installed using whatever tools are provided by your\nplatform.  At least version 2.6.31 is required.\n\n=== Mac OSX\n\nMac OSX by default comes with an old version of libxml2 that will not work with rAtom. You\nwill need to install a more recent version.  If you are using Macports:\n\n  port install libxml2\n\nAlternatively, using Homebrew:\n\n  brew install libxml2\n\n== Installation\n\nYou can install via gem using:\n\n  gem install ratom\n  \n== Usage\n\nTo fetch a parse an Atom Feed you can simply:\n\n  require \'atom\'\n\n  feed = Atom::Feed.load_feed(URI.parse("http://example.com/feed.atom"))\n  \nAnd then iterate over the entries in the feed using:\n\n  feed.each_entry do |entry|\n    # do cool stuff\n  end\n  \nTo construct the following example Feed is from the Atom spec:\n\n  <?xml version="1.0" encoding="utf-8"?>\n  <feed xmlns="http://www.w3.org/2005/Atom">\n\n    <title>Example Feed</title> \n    <link href="http://example.org/"/>\n    <updated>2003-12-13T18:30:02Z</updated>\n    <author> \n      <name>John Doe</name>\n    </author> \n    <id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6</id>\n\n    <entry>\n      <title>Atom-Powered Robots Run Amok</title>\n      <link href="http://example.org/2003/12/13/atom03"/>\n      <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n      <updated>2003-12-13T18:30:02Z</updated>\n      <summary>Some text.</summary>\n    </entry>\n\n  </feed>\n  \nTo build this in rAtom we would do:\n\n  feed = Atom::Feed.new do |f|\n    f.title = "Example Feed"\n    f.links << Atom::Link.new(:href => "http://example.org/")\n    f.updated = Time.parse(\'2003-12-13T18:30:02Z\')\n    f.authors << Atom::Person.new(:name => \'John Doe\')\n    f.id = "urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6"\n    f.entries << Atom::Entry.new do |e|\n      e.title = "Atom-Powered Robots Run Amok"\n      e.links << Atom::Link.new(:href => "http://example.org/2003/12/13/atom03")\n      e.id = "urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a"\n      e.updated = Time.parse(\'2003-12-13T18:30:02Z\')\n      e.summary = "Some text."\n    end\n  end\n  \nTo output the Feed as XML use to_xml\n\n  > puts feed.to_xml\n  <?xml version="1.0"?>\n  <feed xmlns="http://www.w3.org/2005/Atom">\n    <id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6</id>\n    <title>Example Feed</title>\n    <updated>2003-12-13T18:30:02Z</updated>\n    <link href="http://example.org/"/>\n    <author>\n      <name>John Doe</name>\n    </author>\n    <entry>\n      <title>Atom-Powered Robots Run Amok</title>\n      <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n      <summary>Some text.</summary>\n      <updated>2003-12-13T18:30:02Z</updated>\n      <link href="http://example.org/2003/12/13/atom03"/>\n    </entry>\n  </feed>\n  \n\nSee Feed and Entry for details on the methods and attributes of those classes.\n\n=== Publishing\n\nTo publish to a remote feed using the Atom Publishing Protocol, first you need to create a collection to publish to:\n\n  require \'atom/pub\'\n  \n  collection = Atom::Pub::Collection.new(:href => \'http://example.org/myblog\')\n  \nThen create a new entry\n\n  entry = Atom::Entry.new do |entry|\n    entry.title = "I have discovered rAtom"\n    entry.authors << Atom::Person.new(:name => \'A happy developer\')\n    entry.updated = Time.now\n    entry.id = "http://example.org/myblog/newpost"\n    entry.content = Atom::Content::Html.new("<p>rAtom lets me post to my blog using Ruby, how cool!</p>")\n  end\n  \nAnd publish it to the Collection:\n\n  published_entry = collection.publish(entry)\n\nPublish returns an updated entry filled out with any attributes to server may have set, including information\nrequired to let us update to the entry.  For example, lets change the content and republished:\n\n  published_entry.content =  Atom::Content::Html.new("<p>rAtom lets me post to and edit my blog using Ruby, how cool!</p>")\n  published_entry.updated = Time.now\n  published_entry.save!\n\nTo update an existing Entry:\n\n  existing_entry = Entry.load_entry(URI.parse("http://example.org/afeedentry.atom"))\n\n  existing_entry.title = "I have discovered rAtom"\n  existing_entry.updated = Time.now\n  existing_entry.save!\n\nYou can also delete an entry using the <tt>destroy!</tt> method, but we won\'t do that will we?.\n    \n=== Extension elements\n\nAs of version 0.3.0, rAtom support simple extension elements on feeds and entries.  As defined in the Atom Syndication Format,\nsimple extension elements consist of XML elements from a non-Atom namespace that have no attributes or child elements, i.e.\nthey are empty or only contain text content.  These elements are treated as a name value pair where the element namespace\nand local name make up the key and the content of the element is the value, empty elements will be treated as an empty string.\n\nTo access extension elements use the [] method on the Feed or Entry. For example, if we are parsing the follow Atom document\nwith extensions:\n\n  <?xml version="1.0"?>\n  <feed xmlns="http://www.w3.org/2005/Atom" xmlns:ex="http://example.org">\n    <title>Feed with extensions</title>\n    <ex:myelement>Something important</ex:myelement>\n  </feed>\n  \nWe could then access the extension element on the feed using:\n\n  > feed["http://example.org", "myelement"]\n  => ["Something important"]\n  \nNote that the return value is an array. This is because XML allows multiple instances of the element. \n\nTo set an extension element you append to the array:\n\n  > feed[\'http://example.org\', \'myelement\'] << \'Something less important\'\n  => ["Something important", "Something less important"]\n  \nYou can then call to_xml and rAtom will serialize the extension elements into xml.\n\n  > puts feed.to_xml\n  <?xml version="1.0"?>\n  <feed xmlns="http://www.w3.org/2005/Atom">\n    <myelement xmlns="http://example.org">Something important</myelement>\n    <myelement xmlns="http://example.org">Something less important</myelement>\n  </feed>\n  \nNotice that the output repeats the xmlns attribute for each of the extensions, this is semantically the same the input XML, just a bit\nugly.  It seems to be a limitation of the libxml-Ruby API. But if anyone knows a work around I\'d gladly accept a patch (or even advice).\n\n==== Custom Extension Classes \n\nAs of version 0.5.0 you can also define your own classes for a extension elements.  This is done by first creating an alias\nfor the namespace for the class and then using the +element+ method on the Atom::Feed or Atom::Entry class to tell rAtom\nto use your custom class when it encounters the extension element.\n\nFor example, say we have the following piece Atom XML with a structured extension element:\n\n  <?xml version=\'1.0\' encoding=\'UTF-8\'?>\n  <entry xmlns=\'http://www.w3.org/2005/Atom\' xmlns:custom=\'http://custom.namespace\'>\n    <id>https://custom.namespace/id/1</id>\n    <link rel=\'self\' type=\'application/atom+xml\' href=\'https://custom.namespace/id/1\'/>\n    <custom:property name=\'foo\' value=\'bar\'/>\n    <custom:property name=\'baz\' value=\'bat\'/>\n  </entry>\n\t\nAnd we want the +custom:property+ elements to be parsed as our own custom class called Custom::Property that is\ndefined like this:\n\n  class Custom::Property\n    attr_accessor :name, :value\n    def initialize(xml)\n      # Custom XML handling\n    end\n  end\n\t\nWe can tell rAtom about our custom namespace and custom class using the following method calls:\n\n  Atom::Entry.add_extension_namespace :custom, "http://custom.namespace"\n  Atom::Entry.elements "custom:property", :class => Custom::Property\n\t\nThe first method call registers an alias for the "http://custom.namespace" namespace and the second method call\ntell rAtom that when it encounters a custom:property element within a Feed it should create an instance of Custom::Property\nand pass the XML Reader to the constructor of the instance.  It is then up to the constructor to populate the objects attributes \nfrom the XML. Note that the alias you create using +add_extension_namespace+ can be anything you want, it doesn\'t need\nto match the alias in the actual XML itself.\n\nThe custom property will then be available as a method on the rAtom class.  In the above example:\n\n  @feed.custom_property.size == 2\n  @feed.custom_property.first.name == \'foo\'\n  @feed.custom_property.first.value == \'bar\'\n\t\nThere is one caveat to this.  By using this type of extension support you are permanently modifying the rAtom classes.\nSo if your application process one type of atom extension and you are happy with permanently modified rAtom classes,\nthe extra extensibility might work for you.  If on the other hand you process lots of different types of extension you might\nwant to stick with simpler extension mechanism using the [namespace, element] method described above.\n \n(Thanks to nachokb for this feature!!)\n\n=== Basic Authentication\n\nAll methods that involve HTTP requests now support HTTP Basic Authentication.  Authentication credentials are passed\nas :user and :pass parameters to the methods that invoke the request. For example you can load a feed with HTTP Basic Authentication using:\n\n  Atom::Feed.load_entry(URI.parse("http://example.org/feed.atom"), :user => \'username\', :pass => \'password\')\n\nLikewise all the Atom Pub methods support similar parameters, for example you can publish an Entry to a Feed with authentication\nusing:\n\n  feed.publish(entry, :user => \'username\', :pass => \'password\')\n\nOr destroy an entry with:\n\n  entry.destroy!(:user => \'username\', :pass => \'password\')\n\nrAtom doesn\'t store these credentials anywhere within the object model so you will need to pass them as arguments to every\nmethod call that requires them.  This might be a bit of a pain but it does make things simpler and it means that I\'m not responsible\nfor protecting your credentials, although if you are using HTTP Basic Authentication there is a good chance your credentials aren\'t\nvery well protected anyway.\n\n=== AuthHMAC authentication\n\nAs of version 0.5.1 rAtom also support authentication via HMAC request signing using the AuthHMAC[http://auth-hmac.rubyforge.org] gem.  This is made available using the :hmac_access_id and :hmac_secret_key parameters which can be passed to the same methods as the HTTP Basic credentials support.\n\n=== SSL\n\nAs of version 0.6.9, rAtom supports fetching feeds via https. This is done by using URLs with the SSL protocol. Publishing support is still limited to http, but patches are welcome.\n\n== TODO\n\n* Support partial content responses from the server.\n* Support batching of protocol operations.\n* All my tests have been against internal systems, I\'d really like feedback from those who have tried rAtom using existing blog software that supports APP.\n* Handle all base uri tests.\n* Add slug support.\n\n== Source Code\n\nThe source repository is accessible via GitHub:\n\n  git clone git://github.com/seangeo/ratom.git\n\nThe project now uses Bundler for dependency management so, just do \n\n  bundle install\n\nto get going.\n\n== Contact Information\n\nThe project page is at http://github.com/seangeo/ratom. Please file any bugs or feedback\nusing the trackers and forums there.\n\n== Authors and Contributors\n\nrAtom was developed by Peerworks[http://peerworks.org] and written by Sean Geoghegan.\n\n'
Ruby Interface for Google Docs API. b'Sync with Google Docs\n=====================\n\nconverting html docs to markdown.\n\nMuch todo.\n\nrequire \'lib/gdocsync\'\n\n[RAILS_ROOT =] \nGOOGLE_EMAIL = \'...\'\nGOOGLE_PASS = \'...\'\nGOOGLE_USER = \'...\'\n\ndocs = Gdocsync::Document.find(:all)\ndoc = Gdocsync::Document.find_by_title("Foo")\n\nInclude document body:\n\ndocs = Gdocsync::Document.find(:all, :fetch)\ndoc = Gdocsync::Document.find_by_title("Foo", :fetch)\n\ndoc.raw #raw html body\ndoc.safe_html #sans script and form tags\ndoc.textile #raw => textile => any left-over html escaped.\np doc.clothe #as textile, and back to sanitised html via RedCloth\n\nFor interfacing with Picasa, see:\nhttp://github.com/broughcut/picasync\n'
Library for creating SVG files in pure Ruby code. b"ruby-svg\n========\n\nThis is the beginning of a library for creating SVG documents with Ruby.\n\nSomething I started on when I was bored, and didn't get very far before I was bored again.\n\nFeel free to fork and continue work, please send me a pullrequest if you get something worthwhile going.\n\n~ elliottcable.name"
A Swing GUI showing market data quotes from a Wombat data source 
Webrat - Ruby Acceptance Testing for Web applications b'= Webrat {<img src="https://codeclimate.com/badge.png" />}[https://codeclimate.com/github/brynary/webrat]\n\n- http://rdoc.info/github/brynary/webrat/master/frames\n- http://groups.google.com/group/webrat\n- http://webrat.lighthouseapp.com/\n- http://github.com/brynary/webrat\n- #webrat on Freenode\n\n== Description\n\nWebrat lets you quickly write expressive and robust acceptance tests for a Ruby\nweb application. \n\n== Features\n\n* Browser Simulator for expressive, high level acceptance testing without the\n  performance hit and browser dependency of Selenium or Watir (See Webrat::Session)\n* Use the same API for Browser Simulator and real Selenium tests using\n  Webrat::Selenium when necessary (eg. for testing AJAX interactions)\n* Supports multiple Ruby web frameworks: Rails, Merb and Sinatra\n* Supports popular test frameworks: RSpec, Cucumber, Test::Unit and Shoulda\n* Webrat::Matchers API for verifying rendered HTML using CSS, XPath, etc.\n\n== Example\n\n  class SignupTest < ActionController::IntegrationTest\n  \n    def test_trial_account_sign_up\n      visit home_path\n      click_link "Sign up"\n      fill_in "Email", :with => "good@example.com"\n      select "Free account"\n      click_button "Register"\n    end\n    \n  end\n  \nBehind the scenes, Webrat will ensure:\n\n* If a link, form field or button is missing, the test will fail.\n* If a URL is invalid, the test will fail.\n* If a page load or form submission is unsuccessful, the test will fail.\n\n== Installing Nokogiri\n\nUsers of Debian Linux (e.g. Ubuntu) need to run:\n\n  sudo apt-get install libxslt1-dev libxml2-dev.\n\nOtherwise the Nokogiri gem, which Webrat depends on, won\'t install properly.\n\n== Install for Rails\n\nTo install the latest release as a gem:\n\n  sudo gem install webrat\n  \nTo install the latest code as a plugin: (_Note:_ This may be less stable than using a released version)\n\n  script/plugin install git://github.com/brynary/webrat.git\n\nIn your test_helper.rb or env.rb (for Cucumber) add:\n\n  require "webrat"\n  \n  Webrat.configure do |config|\n    config.mode = :rails\n  end\n  \n== Install with Merb\n\nMerb 1.0 has built-in, seamless Webrat support. Just start using\nmethods from Webrat::Session in your specs.\n\n== Authors\n\n- Maintained by {Bryan Helmkamp}[mailto:bryan@brynary.com]\n- Original code written by {Seth Fitzsimmons}[mailto:seth@mojodna.net]\n- Initial development was sponsored by EastMedia[http://www.eastmedia.com]\n- Many other contributors. See attributions in History.txt\n\n== License\n\nCopyright (c) 2007-2008 Bryan Helmkamp, Seth Fitzsimmons.\nSee MIT-LICENSE.txt in this directory.'
Ruby on Rails plugin to provide notification when you need to run migrations b'MigrationConcordance\n====================\n\nby Josh Susser <josh@hasmanythrough.com>\n\nproject page: http://github.com/joshsusser/migration_concordance\nproject repo: git://github.com/joshsusser/migration_concordance.git\n\nThis plugin extends Rails migrations to provide notification when you need to run migrations. It\nwill detect both new migrations and modifications to previously run migrations. It is primarily of\nuse for team development, but is also useful when deploying a release to a new environment to\ndetermine when migrations need to be run. This plugin does not run migrations automatically, but\nwill notify you whenever you need to run them.\n\nTo integrate with your application:\n\n1) Add the following line to the end of your config/environment.rb file:\n\n    puts ActiveRecord::Migrator.check_concordance\n\n2) Add the file db/migration_snapshot.yml to your SCM ignore list (for example, the svn:ignore\nproperty or .gitignore file). Putting the snapshot file under version control defeats the whole\npurpose of this feature.\n\nAny time you load your application\'s environment, it will indicate whether you need to run\nmigrations to bring your schema into concordance with the migration files. This notification will\nhappen when you run script/server, tests, the console, or any rake task that depends on the\nenvironment. If you want to check on migration status, you can run "rake environment" to print the\nnotification.\n\nBackground\n==========\n\nMigrationConcordance works by taking a snapshot of the state of an appliation\'s migrations every\ntime you run "rake db:migrate". It creates a file in db/migration_snapshot.yml that holds a list\nof all current migrations and their MD5 hashes. Therefore, if you migrate to a migration that is\nnot the latest (using rake db:migrate VERSION=<version>), you won\'t get any more notifications\neven if you aren\'t on the latest version. It assumes you know what you are doing and won\'t keep\nnagging you to migrate after you\'ve migrated somewhere already.\n\nCopyright (c) 2008 Josh Susser, released under the MIT license\n'
Behaviour Driven Development framework for Ruby b'= RSpec\n\n* http://rspec.info\n* http://rubyforge.org/projects/rspec\n* http://github.com/dchelimsky/rspec/wikis\n* mailto:rspec-users@rubyforge.org\n* mailto:rspec-devel@rubyforge.org\n\n== DESCRIPTION:\n\nRSpec is a Behaviour Driven Development framework for writing executable code\nexamples.\n\n== FEATURES:\n\n* Spec::Example provides a framework for organizing executable code examples\n* Spec::Expectations adds #should and #should_not to every object\n* Spec::Matchers provides Expression Matchers for use with #should and #should_not\n* Spec::Mocks is a full featured mock object/stubbing library\n\n== SYNOPSIS:\n\n  describe Account do\n    context "transfering money" do\n      it "deposits transfer amount to the other account" do\n        source = Account.new(50, :USD)\n        target = mock(\'target account\')\n        target.should_receive(:deposit).with(Money.new(5, :USD))\n        source.transfer(5, :USD).to(target)\n      end\n\n      it "reduces its balance by the transfer amount" do\n        source = Account.new(50, :USD)\n        target = stub(\'target account\')\n        source.transfer(5, :USD).to(target)\n        source.balance.should == Money.new(45, :USD)\n      end\n    end\n  end\n  \n  $ spec spec/account_spec.rb --format nested\n  Account\n    transfering money\n      deposits transfer amount to the other account\n      reduces its balance by the transfer amount\n    \n  2 examples, 0 failures\n\n== INSTALL:\n\n  [sudo] gem install rspec\n\n or\n\n clone, build, install - See http://wiki.github.com/dchelimsky/rspec'
Augment is a system for gathering metadata from code and displaying it. b'augment\n    by Phil Hagelberg (c) 2007\n    http://augment.rubyforge.org\n\n== Description\n  \nAugment is a framework for gathering metadata from code and displaying\nit. This metadata would include test failures, test coverage levels,\ncomplexity metrics, and others. Display frontends will be pluggable so\nas to interface with many editors.\n\n== Usage\n\nThe +augment+ executable gathers metadata in the form of layers for a\ngiven file via a backend. Some backends gather data for a file other\nthan the original one passed in. (The test backend will store data for\nthe test if you pass in the implementation.)\n\nExample:\n\n$ augment test lib/foo.rb # will store metadata for test/test_foo.rb\n\nYou can also use the +augment+ executable to display stored\nmetadata. The simplest frontend is +color+ which outputs the\nlayers via ANSI color codes to the shell:\n\n$ augment color test/test_foo.rb\n\nMost other frontends are editor-specific.\n\n== Design\n\nAugment is designed to be generalized; if you want to collect\ndifferent kinds of data you can just write a new backend. If you want\nto display the data in an unsupported editor or output format, you can\nwrite a new frontend.\n\n=== Backends\n\nEach backend takes a filename or glob and outputs the metadata about\nthat file into the .augment directory, created in the project root.\nMetadata is stored as layer information in JSON. Each backend also\nneeds an initiator command to kick off the process that gathers the\nmetadata, with the exception of auto-initiating backends like autotest.\n\n=== Frontends\n\nMost frontends are implemented within an editor or IDE. They watch\nthe .augment directory for changes and apply them to the open buffers\nwhen they happen.  The user can choose what augmentations he wants\ndisplayed either globally or on a per-file basis. He can also control\nwhen backend initiators should be started, though usually these will\nbe kicked off automatically upon saving a file.\n\n=== Layers\n\nA layer consists of a single piece of metadata about a file. This is\nexpressed in terms of the range it applies to in the file, its color,\nand the message associated with it.\n\n== Support\n\nBackends:\n\n* Tests (miniunit)\n* Rspec (planned)\n* Heckle (planned)\n* Rcov (planned)\n* Flog (planned)\n* Performance (planned)\n\nFrontends:\n\n* ANSI color codes (for shells)\n* HTML\n* Emacs\n* Textmate (planned)\n* Vim (planned, need help)\n\n== Issues\n  \n* A bit short on frontends and backends.\n\n== License\n\nThis is free software; you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free\nSoftware Foundation; either version 3, or (at your option) any later\nversion.\n\nThis file is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nGeneral Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this software; see the file COPYING. If not, write to the\nFree Software Foundation at this address:\n\n  Free Software Foundation\n  51 Franklin Street, Fifth Floor\n  Boston, MA 02110-1301\n  USA\n'
Webrat - Ruby Acceptance Testing for Web applications b'= Webrat - Ruby Acceptance Testing for Web applications\n\n- http://gitrdoc.com/brynary/webrat\n- http://groups.google.com/group/webrat\n- http://webrat.lighthouseapp.com/\n- http://github.com/brynary/webrat\n- #webrat on Freenode\n\n== Description\n\nWebrat lets you quickly write expressive and robust acceptance tests for a Ruby\nweb application. \n\n== Features\n\n* Browser Simulator for expressive, high level acceptance testing without the\n  performance hit and browser dependency of Selenium or Watir (See Webrat::Session)\n* Use the same API for Browser Simulator and real Selenium tests using\n  Webrat::Selenium when necessary (eg. for testing AJAX interactions)\n* Supports multiple Ruby web frameworks: Rails, Merb and Sinatra\n* Supports popular test frameworks: RSpec, Cucumber, Test::Unit and Shoulda\n* Webrat::Matchers API for verifying rendered HTML using CSS, XPath, etc.\n\n== Example\n\n  class SignupTest < ActionController::IntegrationTest\n  \n    def test_trial_account_sign_up\n      visit home_path\n      click_link "Sign up"\n      fill_in "Email", :with => "good@example.com"\n      select "Free account"\n      click_button "Register"\n    end\n    \n  end\n  \nBehind the scenes, Webrat will ensure:\n\n* If a link, form field or button is missing, the test will fail.\n* If a URL is invalid, the test will fail.\n* If a page load or form submission is unsuccessful, the test will fail.\n\n== Installing Nokogiri\n\nUsers of Debian Linux (e.g. Ubuntu) need to run:\n\n  sudo apt-get install libxslt1-dev libxml2-dev.\n\nOtherwise the Nokogiri gem, which Webrat depends on, won\'t install properly.\n\n== Install for Rails\n\nTo install the latest release as a gem:\n\n  sudo gem install webrat\n  \nTo install the latest code as a plugin: (_Note:_ This may be less stable than using a released version)\n\n  script/plugin install git://github.com/brynary/webrat.git\n\nIn your test_helper.rb or env.rb (for Cucumber) add:\n\n  require "webrat"\n  \n  Webrat.configure do |config|\n    config.mode = :rails\n  end\n  \n== Install with Merb\n\nMerb 1.0 has built-in, seamless Webrat support. Just start using\nmethods from Webrat::Session in your specs.\n\n== Authors\n\n- Maintained by {Bryan Helmkamp}[mailto:bryan@brynary.com]\n- Original code written by {Seth Fitzsimmons}[mailto:seth@mojodna.net]\n- Initial development was sponsored by EastMedia[http://www.eastmedia.com]\n- Many other contributors. See attributions in History.txt\n\n== License\n\nCopyright (c) 2007-2008 Bryan Helmkamp, Seth Fitzsimmons.\nSee MIT-LICENSE.txt in this directory.'
Allows models to have associations and instance bools based on past recent and future b"HasManyTenses\n===================\nEvery model in Rails should have a created_at field. This plugin allows you to use that field to get association collections like model.collection.recent, future, past and instance booleans like mode.past? model.future? model.recent?\n\nPrerequisites\n=============\nRails 1.2.6+\nModel must have created_at\n\nInstalling the plugin\n=====================\n  -- Get the plugin:\n    git clone git@github.com:peimei/has_many_tenses.git vendor/plugins/has_many_tenses\n  \n  -- To get access to the instance methods just add has_many_tenses to your model\n     You can also modify the recency comparer via has_many_tenses(:recency => 30.minutes.ago)\n      \n  -- To use the association proxies do something like:\n      has_many :comments, :order => 'created_at ASC', :dependent => :destroy, \n        :extend => RailsJitsu::HasManyTenses::SingletonMethods\n\n  NOTES:\n  ======\n  This plugin was born from helping angelo0000 on #rubyonrails trying to dry up his code and seeing how far we could push it.\n\nCopyright (c) 2007 E. James O'Kelly, released under the MIT license\nwww.railsjitsu.com"
Rake task to assist with bootstrapping a Rails project database 
A collection of RSpec matchers to be used with the Ruby on Rails project b'rspec-on-rails-matchers\n=======================\n\nSetup\n------\n\nDependencies:\n-------------\n\n  * rspec\n  * rspec_on_rails\n\nOverview\n--------\n\nAdds the following RSpec matchers:\n\n  * Associations:\n    Verify that the association has been defined. (doesn\'t verify that the association works!)\n\n    object.should have_many(:association)\n    example: @post.should have_many(:comments)\n    TM snippet: [mshm + tab] (Model Should Have Many)\n\n    object.should belong_to(:association)\n    example: @comment.should belong_to(:post)\n    TM snippet: [msbt + tab]\n\n    object.should have_one(:association)\n    user.should have_one(:social_security_number)\n    TM snippet: [msho + tab]\n\n    object.should have_and_belong_to_many(:association)\n    project.should have_and_belong_to_many(:categories)\n    TM snippet: [mshabtm + tab]\n\n\n  * Validations:\n    Verify that a validation has been defined. (doesn\'t test the validation itself)\n\n    object.should validate_presence_of(:attribute)\n    TM snippet: [msvp + tab]\n\n    object.should validate_confirmation_of(:attribute)\n    TM snippet: [msvc + tab]\n\n    object.should validate_uniqueness_of(:attribute)\n    TM snippet: [msvu + tab]\n\n    object.should validate_length_of(:attribute, :within => 5..10)\n    object.should validate_length_of(:attribute, :is => 5)\n    TM snippet: [msvl + tab]\n\n  * Observers:\n    Verify that the observer is observing a class. (doesn\'t verify that the observation works)\n    \n    object.should observe(:model)\n    example: GroupObserver.should observe(Group)\n\n  * Views:\n    Verifies that the views contains some tags.\n\n    response.should have_form_posting_to(url_or_path)\n    TM snippet: [hfpt + tab]\n\n    response.should have_form_putting_to(url_or_path)\n    \n    response.should have_text_field_for(:attribute)\n    TM snippet: [htff + tab]\n\n    response.should have_label_for(:attribute)\n    TM snippet: [hlf + tab]\n\n    response.should have_password_field_for(:attribute)\n    TM snippet: [hpff + tab]\n\n    response.should have_checkbox_for(:attribute)\n    TM snippet: [hcf + tab]\n\n    response.should have_submit_button\n    TM snippet: [hsb + tab]\n\n    response.should have_link_to(url_or_path, "optional_text")\n    TM snippet: [hlt + tab]\n\n    * nested view tests:\n      for instance:\n\n      response.should have_form_posting_to(url_or_path) do\n        with_text_field_for(:attribute)\n      end\n\n      with_text_field_for(:attribute)\n      TM snippet: [wtff + tab]\n\n      with_label_for(:attribute)\n      TM snippet: [wlf + tab]\n\n      with_password_field_for(:attribute)\n      TM snippet: [wpff + tab]\n\n      with_checkbox_for(:attribute)\n      TM snippet: [wcf + tab]\n\n      with_submit_button\n      TM snippet: [wsb + tab]\n\n      with_link_to(url_or_path, "optional_text")\n      TM snippet: [wlt + tab]\n\nUsage:\n------\n\nIn your view spec:\n\n    it "should render new form" do\n        render "/users/new.html.erb"\n\n        response.should have_form_posting_to(users_path) do\n          with_text_field_for(:user_name)\n          with_text_area_for(:user_address)\n          with_text_field_for(:user_login)\n          with_text_field_for(:user_email)\n          with_submit_button\n        end\n    end\n\nIn your model spec:\n\n    describe User do\n      before(:each) do\n        @user = User.new\n      end\n\n      it "should have many posts" do\n        @user.should have_many(:posts)\n      end\n\n      it "should belong to a group" do\n        @user.should belong_to(:group)\n      end\n\n      it do\n        @user.should validate_presence_of(:email)\n      end\n\n      it do\n        @user.should validate_uniqueness_of(:email)\n      end\n\n      it do\n        @user.should validate_uniqueness_of(:login)\n      end\n\n      it do\n        @user.should validate_presence_of(:login)\n      end\n\n      it do\n        @user.should validate_presence_of(:name)\n      end\n\n      it do\n        @user.should validate_length_of(:password, :between => 4..40)\n      end\n\n      it do\n        @user.should validate_confirmation_of(:password)\n      end\n\n    end\n\nCore Contributors\n-----------------\n\n  * Josh Knowles <joshknowles@gmail.com>\n  * Bryan Helmkamp <bryan@brynary.com>\n  * Matt Aimonetti <mattaimonetti@gmail.com>\n\nContributors\n-------------\n\n  * ckknight\n  * Matt Pelletier\n  * Luke Melia\n\nCopyright (c) 2008 The Plugin Development Team, released under the MIT license'
Master/Slave delegation for ActiveRecord models for reads/writes b'ActiveDelegate\n==============\n\nProvides ActiveRecord with the ability to talk to multiple databases from a single model.\n\n# app/models/master_database.rb\nclass MasterDatabase < ActiveRecord::Base\n  handles_connection_for :master_database # <-- this matches the key from our database.yml\nend\n\n# app/models/animal.rb\nclass Animal < ActiveRecord::Base\n  delegates_connection_to :master_database, :on => [:create, :save, :destroy]\nend\n\nTODO: Add more documentation\n'
A blogposting plugin for Tomboy b'\nTomboyBlogposter README\n\nCopyright (C) 2007-2008 Robin Sonefors <ozamosi@flukkost.nu>\n\nThe file TomboyBlogposter.xsl is \nCopyright (C) 2004-2007 The Tomboy Project and\nCopyright (C) 2007 Robin Sonefors <ozamosi@flukkost.nu>\n\nPlease send questions and suggestions to\n<ozamosi@flukkost.nu>.\n\nTomboyBlogposter is licensed under the LGPL, see COPYING for more details.\n\n----\n\nTomboyBlogposter is a plugin for the note taking application Tomboy to post\nyour notes to your Wordpress blog.\n\n----\n\nThe TomboyBlogposter homepage is located at http://flukkost.nu/blog/tomboyblogposter\n\n'
Tempfile like behaviour for directories b"tempdir\n=======\n\n\nSummary\n-------\nLike tempfile, but for directories.\n\n\nContact\n-------\nIf you have suggestions or patches - or want to drop me a comment:\n  Naitik Shah <naitik.shah [_a_t_] yahoo [_d_o_t] com>\n\n\nInstallation\n------------\n  # gem install tempdir\n\n\nUsage\n-----\n\nWARNING: The temp directory will be automatically 'rm -rf'ed. So dont store\nnon-temporary things in there. If a block is given, this will happen as soon as\nthe block has finished executing. Otherwise then the finalizer is called on the\nreturned object.\n\nExamples:\nrequire 'tempdir'\ndir = Tempdir.new('my-basename')\nputs dir.path\n\nTempdir.new('my-basename') { |d| puts d.path }\n"
Webrat - Ruby Acceptance Testing for Web applications b'= Webrat - Ruby Acceptance Testing for Web applications\n\n- http://gitrdoc.com/brynary/webrat\n- http://groups.google.com/group/webrat\n- http://webrat.lighthouseapp.com/\n- http://github.com/brynary/webrat\n- #webrat on Freenode\n\n== Description\n\nWebrat lets you quickly write expressive and robust acceptance tests for a Ruby\nweb application. \n\n== Features\n\n* Browser Simulator for expressive, high level acceptance testing without the\n  performance hit and browser dependency of Selenium or Watir (See Webrat::Session)\n* Use the same API for Browser Simulator and real Selenium tests using\n  Webrat::Selenium when necessary (eg. for testing AJAX interactions)\n* Supports multiple Ruby web frameworks: Rails, Merb and Sinatra\n* Supports popular test frameworks: RSpec, Cucumber, Test::Unit and Shoulda\n* Webrat::Matchers API for verifying rendered HTML using CSS, XPath, etc.\n\n== Example\n\n  class SignupTest < ActionController::IntegrationTest\n  \n    def test_trial_account_sign_up\n      visit home_path\n      click_link "Sign up"\n      fill_in "Email", :with => "good@example.com"\n      select "Free account"\n      click_button "Register"\n    end\n    \n  end\n  \nBehind the scenes, Webrat will ensure:\n\n* If a link, form field or button is missing, the test will fail.\n* If a URL is invalid, the test will fail.\n* If a page load or form submission is unsuccessful, the test will fail.\n\n== Installing Nokogiri\n\nUsers of Debian Linux (e.g. Ubuntu) need to run:\n\n  sudo apt-get install libxslt1-dev libxml2-dev.\n\nOtherwise the Nokogiri gem, which Webrat depends on, won\'t install properly.\n\n== Install for Rails\n\nTo install the latest release as a gem:\n\n  sudo gem install webrat\n  \nTo install the latest code as a plugin: (_Note:_ This may be less stable than using a released version)\n\n  script/plugin install git://github.com/brynary/webrat.git\n\nIn your test_helper.rb or env.rb (for Cucumber) add:\n\n  require "webrat"\n  \n  Webrat.configure do |config|\n    config.mode = :rails\n  end\n  \n== Install with Merb\n\nMerb 1.0 has built-in, seamless Webrat support. Just start using\nmethods from Webrat::Session in your specs.\n\n== Authors\n\n- Maintained by {Bryan Helmkamp}[mailto:bryan@brynary.com]\n- Original code written by {Seth Fitzsimmons}[mailto:seth@mojodna.net]\n- Initial development was sponsored by EastMedia[http://www.eastmedia.com]\n- Many other contributors. See attributions in History.txt\n\n== License\n\nCopyright (c) 2007-2008 Bryan Helmkamp, Seth Fitzsimmons.\nSee MIT-LICENSE.txt in this directory.'
agile project management 
A yahtzee game, written in ruby. 
A yahtzee game, written in ruby. 
WSDL generator for PHP based on WSDL_Gen plus nice additions like Soap Headers support, enums, and other soap types. 
  Castanaut lets you write executable scripts for your screencasts. With a simple dictionary of stage directions, you can create complex interactions with a variety of applications.This fork will concentrate on increasing comatablility with older versions of Mac OS, specifically 10.4 (Tiger). b'= Castanaut: Automate your screencasts.\n\n    Author: Joseph Pearson\n    http://gadgets.inventivelabs.com.au/castanaut\n\n== DESCRIPTION:\n\nCastanaut lets you write executable scripts for your screencasts. With a \nsimple dictionary of stage directions, you can create complex interactions \nwith a variety of applications. Currently, and for the foreseeable future, \nCastanaut supports Mac OS X 10.5 only.\n\n== SYNOPSIS:\n\n=== Writing screenplays\n\nYou write your screenplays as Ruby files. Castanaut has been designed to \nread fairly naturally to the non-technical, within Ruby\'s constraints.\n\nHere\'s a simple screenplay:\n\n  launch "Safari", at(10, 10, 800, 600)\n  type "http://www.inventivelabs.com.au"\n  hit Enter\n  pause 2\n  move to(100, 100)\n  move to(200, 100)\n  move to(200, 200)\n  move to(100, 200)\n  move to(100, 100)\n  say "I drew a square!"\n\nWith any luck we don\'t need to explain to you what this screenplay\ndoes. The only thing that might need some explanation is "say" -- this has a \nrobotic voice speak the given string. (Also: all numbers are pixel \nco-ordinates).\n\nAbout the robot: no, we don\'t recommend you use this in real screencasts for\na large audience. Most people find it a little offputting.  \nYou are free to contravene our recommendation though. You\ncan tweak the robot in the Mac OS X Speech Preferences pane.\n\n=== Running your screenplay\n\nSimply give the screenplay to the castanaut command, like this:\n\n  castanaut test.screenplay\n\nThis assumes you have a screenplay file called "test.screenplay" in the \ndirectory where you are running the command.\n\nOf course, it isn\'t always convenient to drop to the terminal to run your\nscreenplay. So there\'s also a method of executing your screenplays directly.\nYou need to add this line (the "shebang" line) at the top of your screenplay:\n\n#!/usr/bin/env castanaut\n\nThen you need to set the screenplay to be executable by running this command\non it:\n  \n  chmod a+x test.screenplay\n\nAgain, substitute "test.screenplay" for your screenplay\'s filename.\n\nAt this point, you should be able to double-click the screenplay, or invoke\nit with Quicksilver, or run it any other way that floats your boat.\n\n=== Stopping the screenplay\n\nIf you want to abruptly terminate execution before the end of the screenplay,\nyou just need to run the \'castanaut\' command again -- with or without any \narguments.\n\nOf course, that might be easier said than done, if you haven\'t got full \ncontrol of the mouse or keyboard at the time. One recommendation is to assign\na system hot-key to invoke castanaut. I use a Quicksilver trigger for this,\nassigned to Shift-F1, that calls castanaut. You\'ll need the full path to\nthe command for this, which is usually /usr/bin/castanaut, but you can check \nit with the following command:\n\n  which "castanaut"\n\n\n=== What stage directions can I make?\n\nOut of the box, Castanaut performs mouse actions, keyboard actions,\nrobot speech and application launches.\n\nFor a complete overview of the built-in stage directions, see the \nCastanaut::Movie class.\n\n=== Using plugins\n\nOf course, just using the built-in stage directions is a little bit awkward\nand verbose. Plugins allow you to extend the available dictionary with\nsome additional convenience actions. Typically a plugin is specific to an\napplication.\n\nCastanaut comes with several plugins, including Castanaut::Plugin::Safari for\ninteracting with the contents of web-pages, and Castanaut::Plugin::Ishowu for\nrecording screencasts using the iShowU application from Shiny White Box.\n\nTo use a plugin, simply declare it:\n\n  plugin "safari"\n\n  launch "Safari", at(32, 32, 800, 600)\n  url "http://www.google.com"\n  pause 4\n  move to_element(\'input[name="q"]\')\n  click\n  type "Castanaut"\n  move to_element(\'input[type="submit"]\')\n  click\n  pause 4\n  say "Oh. I was hoping for more results."\n  \n\nIn the example above, we use the two methods provided by the Safari module:\nurl, which causes Safari to navigate to the given url, and to_element, which\nreturns the co-ordinates of a page element (using CSS selectors) relative to\nthe screen.\n\n=== Creating your own plugins\n\nAdvanced users can create their own plugins. Put them in a directory \ncalled "plugins" below the directory containing the screenplays that use\nthe plugin.\n\nTake a look at the plugins that Castanaut comes with for examples on creating\nyour own.\n\n== REQUIREMENTS:\n\n* Mac OS X 10.5\n\nor\n\n* Mac OS X 10.4\n* The Extras Suite application <http://www.kanzu.com/main.html#extrasuites>\n\n== INSTALL:\n\nRun the following command to install Castanaut\n\n  sudo gem install castanaut\n\nIf you\'re using Mac OS X 10.4 (Tiger) you will also need to download and install the XTool scripting additions.\n\nOnce installed, you should run the following command for two reasons:\n\n  castanaut\n\nReason 1 is to confirm that it is installed correctly. Reason 2 is to set up\nthe permissions on the utility that controls your mouse and keyboard during\nCastanaut movies. You may be asked for a password here.\n\nIf you just see a "ScreenplayNotFound" exception here, everything\'s good.\n\n== LICENSE:\n\nCopyright (C) 2008 Inventive Labs.\n\nReleased under the WTFPL: http://sam.zoy.org/wtfpl.\n\nPortions released under the MIT License.\n\nSee Copyright.txt for full licensing details.\n'
IRB extenions for Power Users b'== Utility Belt\n\nby Giles Bowkett (and many others)\n\nhttp://utilitybelt.rubyforge.org\n\n== DESCRIPTION\n  \nUtility Belt is a grab-bag of tricks, tools, techniques, trifles, and toys for IRB, including convenience methods, language patches, and useful extensions. It also includes a couple command-line widgets. Its primary inspirations were an awesome gem called Wirble and a blog post by Amy Hoy called "Secrets Of The Rails Console Ninjas".\n\n(http://slash7.com/articles/2006/12/21/secrets-of-the-rails-console-ninjas)\n\n== INSTALL\n\nsudo gem install utility_belt\n\n== FEATURES\n\n* Interactively edit IRB code in your preferred text editor\n* Read from and write to OS X clipboard\n* Post your code to Pastie with one command (OS X only)\n* Kick-ass Unix-style history buffer\n* Write command history to file or vi\n* Grep classes and methods for strings\n* Verbosity controls for regular IRB and Rails console\n* Finder shortcuts for Rails console\n* Upload shortcut for Amazon S3\n* Command-line Amazon S3 upload script\n* Command-line Google shortcut (OS X only)\n* Auto-indentation\n* _ special variable (like Unix shell var !!)\n* Extremely basic themes for Wirble syntax coloring\n* Pascal/JavaScript-style "with" statement\n* String#to_proc\n* Add and subtract Hashes with + and -\n* Grammatically-correct is_an? method - no more "is_a? Array" statements\n* One-character exit command\n\n== COMMUNITY EFFORT\n\nThe majority of this code was written by other people and compiled, nicked, nabbed, herded, gathered, copied, or pilfered by me (Giles Bowkett). See copyright notice for the credits. A lot of this code comes from blogs. Check out the source code for numerous links to the original posts the code came from. Thanks also to Bob Hutchison, Avdi Grimm, Marcus Derencius, Markus Prinz, Ben Bleything, Reginald Braithwaite-Lee, and Robert Berger for bug fixes, new features, documentation, and bug reports.\n\n== SYNOPSIS\n\nUtility Belt gives you a ton of new options and techniques in IRB. (You may find yourself putting its language patches in actual projects as well.) The way to use Utility Belt is to edit, or create, your .irbrc file. This is analogous to a Unix .bashrc, .tcshrc, .profile, or similar file.\n\nWindows users have a couple options. The easiest is to define an environment variable called IRBRC and set it to the full path of your irbrc (e.g. "C:\\Documents and Settings\\<username>\\_irbrc"). Presto, .irbrc for Windows. You could also set your HOME-Variable to any directory you want and put your ".irbrc" in there. (It needs to be called ".irbrc", "_irbrc" won\'t work). Since Windows Explorer won\'t let you create a file with a dot in the beginning, use any text editor (Notepad will do just fine) and "Save As" to save it as ".irbrc". (The quotation marks make the magic happen.) We don\'t recommend this if you\'re also using MSYS or Cygwin, as they use the same variable for their own purposes.\n\nAdding Utility Belt to your .irbrc is easy:\n\n  require \'rubygems\'\n  require \'utility_belt\'\n\nTo use the Amazon shortcuts, you also need to set some environment variables. See the section on S3 under "Usage" for more. Also, if your terminal has a light background, you\'ll need to enable the light-background syntax coloring theme - see the section on themes under "Usage" for more.\n\n== USAGE\n\nUsing each of Utility Belt\'s tools is different:\n\n== Interactively edit IRB code in your preferred text editor\n\nIf your preferred text editor is vi(m), emacs, or TextMate, there are built-in commands: vi, emacs, and mate, respectively. To use another editor, use this command:\n\n  edit_interactively(:the_name_of_my_editor)\n\nor\n\n  edit_interactively("the name of my editor")\n\nor\n\n  edit_interactively("/the/path/to/my/editor")\n\nIf you\'re wondering why the method name is so ridiculously long, there\'s a story there:\n\nhttp://gilesbowkett.blogspot.com/2007/12/utility-belt-vs-rails.html\n\n== Read from and write to OS X clipboard\n\nTo read:\n\n  MacClipboard.read\n\nTo write:\n\n  MacClipboard.write("something")\n\n== Post your code to Pastie with one command (OS X only)\n\nFirst copy some code into your clipboard, or put it there with the MacClipboard.write() class method. Then use the command:\n\n  pastie\n\nor the shortcut version:\n\n  pst\n\nNote that this method currently auto-formats all code as Ruby. Support for other languages is possible but not implemented yet. Also, this code is OS X only because it uses the MacClipboard. (A platform-agnostic version without the clipboard aspect is certainly possible.)\n\n== Unix-style history buffer\n\nUse "h" or "history" to view your command history, and "h! 123" to re-invoke command #123 in your buffer. "h!" with no args will run the last command.\n\n== Write command history to file or vi\n\nTo write your history to a file, use "history_write(\'/path/to/file\')". To edit your history in vi, use "history_to_vi" or its shortcut alias "hvi".\n\n== Grep classes and methods for strings\n\nClasses:\n\n  >> grep_classes("ixnum")\n  #=> ["Fixnum"]\n\n  >> grep_classes("num")\n  #=> ["Bignum", "Fixnum", "Numeric", "REXML::SyncEnumerator"]\n\nMethods:\n\n  >> "any arbitrary string".grep_methods("pretty")\n  #=> ["pretty_inspect", "pretty_print_instance_variables", "pretty_print_inspect", "pretty_print", "pretty_print_cycle"]\n\n  >> 32.grep_methods("*")\n  #=> ["*", "**"]\n\nAt some point it\'ll probably be a good idea to add regex support for these methods.\n\n== Verbosity controls for regular IRB and Rails console\n\nregular IRB: "verbose" or "v" / "quiet" or "q"\n\nRails: "log" method turns verbosity on, there isn\'t actually any method for turning it off. (Might add one at some point.)\n\n== Finder shortcuts for Rails console\n\n  user(:all) / user(1)\n\ninstead of\n\n  User.find(:all) / User.find(1)\n\nSupports arbitrarily complex finds.\n\n== Upload shortcut for Amazon S3\n\nFirst, define your secret keys in your environment variables:\n\nexport AMAZON_ACCESS_KEY_ID=\'foofoofoofoofoo\'\nexport AMAZON_SECRET_ACCESS_KEY=\'barbarbarbarbar\'\n\n(Obviously, replace those with actual values.)\n\nThen, you can use\n\n  aws_upload("bucket_name","filename")\n\nTo easily upload public-access files. This method will automatically connect to Amazon S3 for you, if your keys are defined in your environment variables. It also writes the resulting Amazon URL to your clipboard, if you\'re on OS X, so you can easily share the file with others. Note that you have to create the initial buckets manually - see amazon.rubyforge.org for details on that.\n\nA good way to use this is actually to have a default bucket, and create a further method in your .irbrc file:\n\n  def my_bucket_name(filename)\n    aws_upload("my_default_bucket",filename)\n  end\n\n== Command-line Amazon S3 upload script\n\nUtility Belt also includes amazon, a simple command-line uploader for S3. It requires that you set your Amazon environment variables (see above). The usage is:\n\n  amazon -b my_bucket_name filename other_filename\n\n(For any arbitrary number of filenames.)\n\nAnytime you want to upload a file to your default bucket on S3, for example, the "images" bucket for your blog - or the "mp3" bucket if you\'re running a blog like Projectionist - all you have to do is\n\n  amazon -b blog_files some_file.name\n\nOr\n\n  amazon --bucket blog_files some_file.name\n\nAnd you\'re good to go. Of course, if that were too many characters to type, you could always take it one step further with a shell script. For instance, in bash:\n\n  alias b1="amazon --bucket my_main_bucket $1"\n  alias b2="amazon --bucket my_other_bucket $1"\n\nAnd then you would only have to type:\n\n  b1 file.name\n\nAnd of course tab completion will handle all the typing of the file name, assuming you choose your file names deliberately ahead of time to make tab completion effective, in which case all you have to type is "b1 f[tab]" and bam.\n\n== Command-line Google shortcut (OS X only)\n\nTo pop open a new window in your default browser with Google search results for a given search term, do:\n\n  google "any given term"\n\nFor one-word terms, you can omit the quotes:\n\n  google term\n\nIf you already have the search term in your clipboard, you can just type:\n\n  google\n\n(The last approach is useful for unusual command-line error messages.)\n\n== Auto-indentation and tab completion\n\nJust type as normally. This just enables built-in but underused functionality in IRB. (The IRB default auto-indentation isn\'t perfect, but it clobbers the living hell out of no indentation at all.)\n\n== _ special variable (like Unix shell var !!)\n\nMore activation of built-in but underused functionality in IRB. _ functions like !! in Unix, with one subtle difference. Instead of re-issuing the previous command in your history, it gives you the last result of evaluating a command. This means when you start a new IRB session, _ won\'t go to your history, it\'ll just give you nil, and it means that some commands can\'t be repeated exactly. Nine out of ten times, however, it\'s pretty much the same thing.\n\nNote that when combined with the h! in the command history code, you basically have two synonyms for !! here. Neither one is an exact replica, but between the two of them, you should have what you need.\n\n== Extremely basic themes for Wirble syntax coloring\n\nUtility Belt incorporates Wirble as a dependency. Wirble provides syntax coloring. Utility Belt allows you to choose between two syntax coloring themes: Wirble\'s default, and an alternate color set for terminals with light backgrounds. The default theme is enabled by default (duh), but if you have a terminal with a light background, you can enable the light-background theme just by putting the following line of code in your .irbrc:\n\n  UtilityBelt::Themes.background(:light)\n\nTo revert back to the default, just use this:\n\n  UtilityBelt::Themes.background(:dark)\n\nTo specify an entirely new syntax color scheme, see the source code for this gem or for Wirble.\n\n== Pascal/JavaScript-style "with" statement\n\nI use this with RSpec\'s spec_helper. Instead of:\n\n  Spec::Runner.configure do |config|\n    config.use_transactional_fixtures = true\n    config.use_instantiated_fixtures  = false\n    config.fixture_path = RAILS_ROOT + \'/spec/fixtures\'\n    config.mock_with :flexmock\n  end\n\nI do this:\n\n  Spec::Runner.configure do |config|\n    with(config) do\n      use_transactional_fixtures = true\n      use_instantiated_fixtures  = false\n      fixture_path = RAILS_ROOT + \'/spec/fixtures\'\n      mock_with :flexmock\n    end\n  end\n\nNote however that this blew up once and I have no idea why. Caveat emptor, et cetera.\n\n== String#to_proc\n\nSyntactic sugar for functional programming.\n\n  (1..3).map(&\'*2\') => [2, 4, 6]\n  (1..3).map(&\'[-1, _, 0]\') => [[-1, 1, 0], [-1, 2, 0], [-1, 3, 0]]\n  (1..3).map(&\'x -> y -> x * y\').map(&\'[2]\') => [2, 4, 6]\n  (1..5).select(&\'>2\') => [3, 4, 5]\n  (1..3).map(&\'x -> y -> x * y\').map(&\'.call(2)\') => [2, 4, 6]\n  [5].map(&"(1.._).inject(&\'*\')") => [120]\n\nFor more detail see: http://weblog.raganwald.com/2007/10/stringtoproc.html\n\n== Add and subtract Hashes with + and -\n\n  {:a => :b} + {:c => :d} = {:a => :b, :c => :d}\n  {:a => :b, :c => :d} - {:c => :d} = {:a => :b}\n  {:a => :b, :c => :d} - :c = {:a => :b}\n\n  You could already do this with Arrays; now you can do it with Hashes as well. (I was kinda surprised the first time I tried to do this and realized I\'d have to write it myself.)\n\n== Grammatically-correct is_an? method - no more "is_a? Array" statements\n\n  >> [].is_an? Array\n  #=> true\n\nMost people don\'t care, but personally, "is_a? Array" drives me completely insane.\n\n== Object#not\n\nReplace this:\n\n  if !response.incomplete? && !response.invalid? && response.total > 0\n\nWith this:\n\n  if response.not.incomplete? && response.not.invalid? && response.total > 0\n\nSyntactic sugar for boolean conditions.\n\nMore detail here:\n\nhttp://blog.jayfields.com/2007/08/ruby-adding-not-method-for-readability.html\n\n== One-character exit command\n\nx\n\nBecause life is too short to type whole words.\n\n== REQUIREMENTS\n\n* ReadLine\n* Wirble\n* Amazon S3\n* Platform\n* Some features require OS X\n\n== LICENSE\n\n  (The MIT License)\n\n  Copyright (c) 2006-2007 Giles Bowkett\n  Portions Copyright (c) 2006-2007 Ben Bleything\n  Portions Copyright (c) 2006-2007 Reginald Braithwaite\n  Portions Copyright (c) 2006-2007 Gregory Brown\n  Portions Copyright (c) 2006-2007 Jamis Buck\n  Portions Copyright (c) 2006-2007 Mike Clark\n  Portions Copyright (c) 2006-2007 Jay Fields\n  Portions Copyright (c) 2005 David Heinemeier Hansson\n  Portions Copyright (c) 2006-2007 Ara T. Howard\n  Portions Copyright (c) 2006-2007 Pat Maddox\n  Portions Copyright (c) 2006-2007 Marcel Molina, Jr.\n  Portions Copyright (c) 2006-2007 Rick DeNatale\n  Portions Copyright (c) 2006-2007 Projectionist (Marcel Molina? Chad Fowler?)\n  Portions Copyright (c) 2006-2007 Dan Yoder\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \'Software\'), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Oxygen cursors. With Oxygen love. b'How to generate all the pngs and the SVGs and the cursor files:\n\nmkdir build\ncd build\ncmake ../src\nmake [-j <n>] [theme-<color>|package-<color>]\n\nWhere <n> is the number of jobs to run in parallel (man make), and <color> is the color you want generated if you want just one of them.\n\nThe build system is still young, with rough edges (e.g. doesn\'t check if inkscape is found). Hopefully it will work,\nbut there may still be problems.\n\nAll of what you see here is to be considered a work in progress, and therefore must be considered as unreleased.\n\nInformation on the graphics: Riccardo "ruphy" Iaconelli <riccardo@kde.org>\nInformation on the build system: Matthew Woehlke <mw_triad@users.sourceforge.net> and Diego \'Flameeyes\' Petten\xc3\xb2.\nPreferred place to get help: #oxygen on irc.freenode.net (http://freenode.net/)\n'
rubyisbeautiful experimental patches to merb-core b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a "normal" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n'
A Userscript for Fluid that streamlines the twitter interface to make it usable in a flexible (but mostly thin) Fluid instance b"Fluid Twitter\n===============\n\nA Userscript for Fluid that streamlines the twitter interface to\nmake it usable in a flexible (but mostly thin) Fluid instance\n\n\nInstallation\n===============\n(Assuming you've already downloaded Fluid from Fluidapp.com)\n\n1. Create a new Fluid SSB\n-- URL: http://twitter.com/home (you could also use http://twitter.com/username, but home will redirect you to the login as necessary)\n2. Run the Fluid SSB you just created\n3. In the menu, navigate to Userscripts -> Open Userscripts Folder\n4. Paste fluid_twitter.user.js into the SSB's Userscript folder\n5. In the menu of your SSB navigate to Userscripts -> Reload All Userscripts\n6. Navigate to Userscripts -> Fluid Twitter to toggle it's enablement (is that a word?)\n7. Use Cmd-R to reload SSB window\n\nYou Win!\n\nCaveats\n===============\n* As of FluidInstance 0.8.2, SSB's will not persist the enablement of your Userscripts. Translation: you will have to enable Fluid Twitter every time you open your SSB\n\nTODO\n===============\n* Have Fluid Twitter to a JSON request to see if your friends timeline has been updated before reloading the window. This will require a way to persist username (and possibly password)."
my blog as a CGI written in C b'\n   @AllTom: This is my favorite waste of time EVER!\n     - phrakture\n\nHow much free time do you need to make a blog using C and the standard\nlibrary? The real question is: how deeply insane do you have to be to\npull it off?\n'
James Conroy-Finn is the new maintainer. Please visit his repository ( http://github.com/jcf/git-tmbundle ) for the new official home of the git-TextMate bundle. Thank you!
 b'h1. The Git Textmate Bundle.\n\nRelease 1.8.0 [2009-07-31]\n\n"James Conroy-Finn":http://github.com/jcf is the new maintainer of this bundle. If you have cloned the bundle from Tim Harper\'s repository, please update your git config settings to point to his repository:\n\n<pre>\n  cd ~/Library/Application\\ Support/TextMate/Bundles/Git.tmbundle\n  git config remote.origin.url git://github.com/jcf/git-tmbundle.git\n</pre>\n\nThanks -- the management\n\nh2. Installation\n\n<pre>\n  mkdir -p ~/Library/Application\\ Support/TextMate/Bundles\n  cd ~/Library/Application\\ Support/TextMate/Bundles\n  git clone git://github.com/jcf/git-tmbundle Git.tmbundle\n</pre>\n\n* In the TextMate preferences, advanced tab, shell variables, set the TM_GIT variable to point to your installation of git (ie <code>/usr/local/bin/git</code>)\n* Many shortcuts are available from the Git-shortcut (Ctrl-Shift-G).  Subversion commands are Command-Option-g.  Less frequent commands are accessed via the menu.\n* Update your bundle by running the "Update Git Bundle" command.\n\nh2. Support\n\n* "Issue tracker":http://github.com/jcf/git-tmbundle/issues\n* "Repository":http://github.com/jcf/git-tmbundle\n\nThe "Mailing list":http://groups.google.com/group/git-tmbundle has now been closed. Please feel free to report issues using the "Issue tracker":http://github.com/jcf/git-tmbundle/issues.\n\nh2. Who:\n\nh3. Maintainer, Lead Developer:\n\n* January 2010 - present: "James Conroy-Finn":http://jamesconroyfinn.com/\n\nh3. Previous Maintainers\n\n* January 2008 - December 2009: "Tim Harper":http://tim.theenchanter.com/ (with "Lead Media Partners":http://leadmediapartners.com).\n\nh2. Git-tmbundle superstars\n\nThe Git TextMate Bundle wouldn\'t be possible without the contributions of the following fine gentlemen:\n\nh3. Major Contributions\n\n* <b>Allan Odgaard</b> - Started the bundle, got it rolling. Many patches. Oh, and TextMate :-).\n* <b>Sam Granieri</b> - GitK, Many of the git-svn commands, Git initialize repository command, menu layouting, create-tag.\n* <b>Johan S&oslash;rensen</b> - Contributing the CSS styling.\n\nh3. Patches, etc\n\n* <b>Tommi Asiala</b> - README file submission\n* <b>Lawrence Pit</b> - Performance Enhancements\n* <b>Jay Soffian</b> - Bug report with patch (missing environment variables)\n* <b>Humberto Di&oacute;genes</b> - Git-svn fetch command\n* <b>Lee Marlow</b>\n* <b>Geoff Cheshire</b> - Textile\'d the README to make it look good on GitHub\n* <b>Martin K\xc3\xbchl</b> - Patch to allow committing into a git repository that\'s not the project root\n* <b>Diego Barros</b> - new config options, usability improvements\n* <b>Thomas Aylott</b> - Git commit language folding\n* <b>Michael Sheets</b> - Usability improvements\n* <b>Henrik Nyh</b> - Git 1.6 commit message compatibility and spelling corrections\n* <b>Slava Kravchenko</b> - Ruby 1.9 compatibility\n\nPlease feel free to send a pull request if you\'ve added any functionality to this bundle that you think the rest of the git-loving, TextMate-using world would appreciate!\n'
a fork of the mfx's dose2 demo b'\n\nResolution-independant modifications by Gautier Portet <kassoulet gmail com> - 2008-02-12 \n\nyou can use the following command line options:\n  -fullscreen    change to fullscreen mode, default resolution is 640x480.\n  -strech        use current video mode (eg. 1280x800).\n  -WIDTHxHEIGHT  change display size.\n  -nofill        do not fill when copying buffer, be sure to check fillcopy in main.c\n                 to see how clever this code is...\n\nand now, the original infofile that came with source release\n---\n\nthis is the full source release of "dose 2" by mfx. a little endian cleaning\nand fixing for non-pc platforms was done my marq/fit (marq@iki.fi). should be \neasy to compile on any modern os that has sdl (www.libsdl.org). tested and \nruns fine on ppc-linux, x86-linux, sgi and mac os x.\n\nand now follows the original infofile that came with dose 2\n---\n\nmfx 2001 commercial crap posse presents\n\ndose 2 : valetta\n\n\ndisclaimer:\n\nthis demo does not feature any racism. (tested on 2x italians, \nlaughed their asses off) if you think it does, you are stupid.\n\n\nfeaturing:\n\nemperor of code 216 and design deity uncle-x\nhouse music god little bitchard and cartoon prince manticore\n\nadditional credits might be given to video serf nosfe,\nsampo "little bitchards friend" and intro leader rainmaker.\n\ncontact: \n216 jwuolijo@cs.helsinki.fi \nuncle-x naleskin@cs.helsinki.fi \nmanticore apaarni@urova.fi \nlittle bitchard arto@genera.fi\n\n\n\nrequires a linux: (massembly organizers decided that dos has nothing\nto do with demoscene or naything..) a machine with sufficient\nprocessing power might also be useful.\nuses sdl (simple directmedia layer) v1.2 for sound and music. maybe\ngraphics too. so it should work with just about anything where\nsomething works at all. \nsudo modprobe sb \nsudo modprobe blaablaafb\nkillall esd\nexport SDL_VIDEODRIVER=foo\nexport SDL_AUDIODRIVER=faa\n./a.out\n\nfainal version may come with even dos suppo (yea, left)\n\nand yes we know the lyrics go "two pieces of toast" and yet we show you\nsome nice pizzza. it\'s more italian or something or something.\n\n\n\ngreets:\n\nkooma, haujobb, dcs, spinning kids, calodox, flo, iso, phn, unique,\nexceed, wamma, rno, retro-ac, mass, komplex, trsi, pWp, fobia design,\ncycla, farbrauch, dekadence, byterapers, damones, damage, rtp\nand all the rest we forgot, mistyped or typed twice...\n\nmfx statistics:\n\n216, uncle-x, synteesi, rainmaker, dead meat, little bitchard,\ndixan, manticore, pyromaniac, ellyn, clifford m., nosfe &\nroi "i won\'t choose a handle so bite me" blask\n\n-girl i house ya!-\n\n\nkiitos paskasta, sy\xef\xbf\xbdk\xef\xbf\xbd\xef\xbf\xbd rahaa.\n'
Sistema de gestión de herramientas b'Mejorado\n'
Merb More: The Full Stack. Take what you need; leave what you don't. 
Merb Plugins: Even more modules to hook up your Merb installation 
dotfiles, handy scripts, and new-system configuration stuff b'Notes\n-----\nRun before using home/.gitignore:\n\n    $ git config --global core.excludesfile ~/.gitignore\n\n----\n\nSome Vim plugins require extra setup:\n\n - CoffeeTags requires the `coffeetags` gem to be installed globally (beware `rvm`!):\n\n        brew gem install coffeetags\n\n - Tern requires installation, as well:\n\n        cd ~/.vim/bundle/tern_for_vim\n        npm install\n\n - Command-T requires compilation; and this must be done against the same version of Ruby that the\n   current Vim is compiled against: (Check both MacVim and command-line `vim`!)\n   `:ruby puts "#{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}"`. Re-build both Vims with the same Ruby; and\n   then `rvm` (or similar) to that Ruby to build Command-T. (More information is available [in the\n   docs.][command-t]\n\n        cd ~/.vim/bundle/command-t/ruby/command-t\n        ruby extconf.rb\n        make\n\n - `sparkup` [has to have its vim docs re-generated][sparkup]:\n\n        cd ~/.vim/bundle/sparkup\n        make vim-pathogen\n\n   [command-t]: <https://github.com/wincent/Command-T>\n   [sparkup]: <https://github.com/rstacruz/sparkup/blob/master/vim/README.txt>\n\n----\n\nThe Terminal preferences (hotkeys etc) require Karabiner and Seil be installed, and that the fonts\nfrom the `Extras/` directory also be installed. *After* all of those are installed, the\nconfigurations can be symlinked from my Dropbox:\n\n    ln -s \'~/Documents/Dropbox/Library/karabiner.private.xml\' \'/Users/ec/Library/Application Support/Karabiner/\'\n    ln -s \'~/Documents/Dropbox/Library/com.apple.Terminal.plist\' \'~/Library/Preferences/\'\n    ln -s \'~/Documents/Dropbox/Library/GlobalPreferences.plist\' \\\n       \'~/Library/Preferences/.GlobalPreferences.plist\'\n\n(May require existing files be removed, or directories be created, first.)\n'
Native iPhone app to push pictures to Flickr 
dead :(  think of this as a museum. b"= Installation\n\nSee public/install.html for setup instructions.\n\n= Timezones\n\nYou MUST export the environment variable TZ=UTC, or else the article dates\nand times will be invalid.\n\nThis would not be needed if rails used UTC for everything, but\nunfortunately it doesn't... eg: action_view/helpers/date_helper.rb uses\nTime::now instead of Timer::now.utc, and Time::mktime instead of\nTime::utc.\n\nXXX oh, we can't depend on the rails helpers at all, because they don't\n    translate the time from UTC (assuming the TZ env var is correctly\n    set) to site time, you've to roll our own, or monkey patch rails :/\n\n= Dependencies\n\nNote that Mephisto depends on fewer gems when RAILS_ENV=production than it\ndoes in a development environment.\n\nRun 'rake gems:install' to install the development gems.  In a production\nenvironment, run:\n\n  RAILS_ENV=production rake gems:install\n\n= License\n\nMephisto is distributed under the same license as Ruby on Rails. See\nhttp://www.opensource.org/licenses/mit-license.php\n"
Generic support for extracting GMail-style search keywords/values from strings b'Keyword Search\n==============\n\n[![Build Status](https://travis-ci.org/bruce/keyword_search.png)](https://travis-ci.org/bruce/keyword_search)\n\nDescription\n-----------\n\nGeneric library to parse GMail-style search strings for keyword/value pairs;\nsupports definition of valid keywords and handling of quoted values.\n\nRequirements\n------------\n\nNone.\n\nFeatures\n--------\n\nThe library features a very simple, easy-to-use API.\n\n * Define handlers for supported keywords with blocks\n * Define the default keyword (values not part of a keyword/value pair)\n * Handle negation\n\nPlease see the example provided below.\n\nSynopsis\n--------\n\nHere\'s an example using ActiveRecord (though the library is generic, and can\nbe used for any Ruby project).  The library isn\'t limited to search terms, as\nshown in this example; how you use it is up to you.\n\nFirst, let\'s build up some variables we\'ll be populating for a SQL query.\n\n```ruby\nclauses = []\narguments = []\n```\n\nNow let\'s set an example string to parse.  Presumably you\'d get this from\na form (ie, `params[:terms]`) or some other form of input.\n\n```ruby\nterms = \'account has:attachment since:2006-12-03 -description:crazy\'\n```\n\nNow let\'s do the search, defining the handlers to deal with each keyword.\n\n```ruby\nKeywordSearch.search(terms) do |with|\n\n  # This sets the keyword handler for bare words in the string,\n  # ie "account" in our example search terms\n  with.default_keyword :title\n\n  # Here\'s what we do when we encounter a "title" keyword\n  with.keyword :title do |values|\n    clauses << "title like ?"\n    arguments << "%#{values.join(\' \')}%"\n  end\n\n  # For "has," we check the value provided (and only support "attachment")\n  with.keyword :has do |values|\n    clauses << \'has_attachment = true\' if values.include?(\'attachment\')\n  end\n\n  # Here we do some date parsing\n  with.keyword :since do |values|\n    date = Date.parse(values.first) # only support one\n    clauses << \'created_on >= ?\'\n    arguments << date.to_s\n  end\n\n  # If a second parameter is defined for a block, you can handle negation.\n  # In this example, we don\'t want results whose description includes\n  # the word "crazy"\n  with.keyword :description do |values, positive|\n    clauses << "description #{\'not\' unless positive} like ?"\n    arguments << "%#{values.join(\' \')}%"\n  end\n\nend\n```\n\nImmediately after the block is defined, the string is parsed and handlers\nfire.  Due to the magic of closures, we now have populated variables we can\nuse to build a real SQL query.\n\n```ruby\nquery = clauses.map { |c| "(#{c})" }.join(\' AND \')\nconditions = [query, *arguments]\nresults = Message.all(:conditions => conditions)\n```\n\nInstallation\n------------\n\n```\ngem install keyword_search\n```\n\nLicense\n-------\n\nSee LICENSE.\n\nLegal Notes\n-----------\n\nGMail is copyright Google, Inc.'
Treat an ActiveRecord model as a file attachment, storing its patch, size, content type, etc. b'attachment-fu\n=============\n\nattachment_fu is a plugin by Rick Olson (aka technoweenie <http://techno-weenie.net>) and is the successor to acts_as_attachment.  To get a basic run-through of its capabilities, check out Mike Clark\'s tutorial <http://clarkware.com/cgi/blosxom/2007/02/24#FileUploadFu>.\n\n\nattachment_fu functionality\n===========================\n\nattachment_fu facilitates file uploads in Ruby on Rails.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are three storage options for files uploaded through attachment_fu:\n  File system\n  Database file\n  Amazon S3\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml and the Database file storage requires an extra table.\n\n\nattachment_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the \'meta\') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # path to store the uploaded files.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 backend.  \n                      # Setting this sets the :storage to :file_system.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, and :s3.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => \'application/pdf\'\n    has_attachment :content_type => [\'application/pdf\', \'application/msword\', \'text/plain\']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => [\'application/pdf\', :image], :resize_to => \'x50\'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\'\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\', \n                   :content_type => :image, :resize_to => [50,50]\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\',\n                   :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :s3\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachment_fu migrations\n========================\n\nFields for attachment_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the \'type\' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model \'Avatar\' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => \'320x200>\',\n                            #                  :thumbnails => { :small => \'10x10>\',\n                            #                                   :thumb => \'100x100>\' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> \'small\'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachment_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachment_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachment_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include \':multipart => true\' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => "create" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system and s3 storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachment_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachment_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file \'/path/to/readme.txt\', :type => \'plain/text\', :disposition => \'inline\'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = \'Attachment was successfully created.\'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n'
Textilize plugin for rails, based on PermalinkFu b'TextilizeFu\n\n  class Article < ActiveRecord::Base\n    textilize :body\n  end\n\nThis will convert the body from textile into html and store the result in body_html\n\nBased primarily off permalink_fu from Rick Olsen (technoweenie)'
Remote multi-server automation tool b'= Capistrano\n\nCapistrano is a utility and framework for executing commands in parallel on multiple remote machines, via SSH. It uses a simple DSL (borrowed in part from Rake, http://rake.rubyforge.org/) that allows you to define _tasks_, which may be applied to machines in certain roles. It also supports tunneling connections via some gateway machine to allow operations to be performed behind VPN\'s and firewalls.\n\nCapistrano was originally designed to simplify and automate deployment of web applications to distributed environments, and originally came bundled with a set of tasks designed for deploying Rails applications. The deployment tasks are now (as of Capistrano 2.0) opt-in and require clients to explicitly put\n"load \'deploy\'" in their recipes.\n\n== Dependencies\n\n* Net::SSH and Net::SFTP (http://net-ssh.rubyforge.org)\n* Needle (via Net::SSH)\n* HighLine (http://highline.rubyforge.org)\n\nIf you want to run the tests, you\'ll also need to have the following dependencies installed:\n\n* Mocha (http://mocha.rubyforge.org)\n\n== Assumptions\n\nCapistrano is "opinionated software", which means it has very firm ideas about how things ought to be done, and tries to force those ideas on you. Some of the assumptions behind these opinions are:\n\n* You are using SSH to access the remote servers.\n* You either have the same password to all target machines, or you have public keys in place to allow passwordless access to them.\n\nDo not expect these assumptions to change.\n\n== Usage\n\nIn general, you\'ll use Capistrano as follows:\n\n* Create a recipe file ("capfile" or "Capfile").\n* Use the +cap+ script to execute your recipe.\n\nUse the +cap+ script as follows:\n\n    cap sometask\n\nBy default, the script will look for a file called one of +capfile+ or +Capfile+. The +someaction+ text indicates which task to execute. You can do "cap -h" to see all the available options and "cap -T" to see all the available tasks.\n\n== KNOWN ISSUES\n\n* Using "put" to upload a file to two or more hosts when a gateway is in effect has a good chance of crashing with a "corrupt mac detected" error. This is due to a bug in Net::SSH.\n* Running commands may rarely hang inexplicably. This appears to be specific only to certain platforms. Most people will never see this behavior.'
ActiveRecord connection proxy for master/slave connections b'masochism\n=========\n\n<div style="width:240px; padding:2px; border:1px solid silver; float:right; margin:0 0 1em 2em; background:white">\n  <img src="http://farm1.static.flickr.com/111/295426387_a39c5c8954_m.jpg" alt="Scream" />\n  <p style="text-align:center">photo by <a href="http://flickr.com/people/alphadesigner/" title="Flickr: ArtWerk">ArtWerk</a></p>\n</div>\n\nThe masochism plugin provides an easy solution for Ruby on Rails applications to work in a\nreplicated database environment. It works by replacing the `connection` object accessed by\nActiveRecord models by ConnectionProxy that chooses between master and slave when\nexecuting queries. Generally all writes go to master.\n\n\nQuick setup\n-----------\n\nFirst, setup your database.yml:\n\n    # default configuration (slave)\n    production: &defaults\n      adapter: mysql\n      database: app_production\n      username: webapp\n      password: ********\n      host: localhost\n\n    # setup for masochism (master)\n    master_database:\n      <<: *defaults\n      host: master.example.com\n\nTo enable masochism, this is required:\n\n    # enable masochism\n    ActiveReload::ConnectionProxy.setup!\n\nExample usage:\n    \n    # in environment.rb\n    config.after_initialize do\n      if Rails.env.production?\n        ActiveReload::ConnectionProxy::setup!\n      end\n    end\n\n\nConsiderations\n--------------\n\n### Thinking Sphinx\n\nThinking Sphinx inspects the `connection` object to determine the database adapter.\nBecause masochism works by putting the connection proxy in its place, TS will be confused\nabout `ActiveReload::ConnectionProxy` and abort. A possible workaround is to monkeypatch TS right to **hardcode** our adapter after masochism has been enabled:\n\n    # ConnectionProxy from masochism confuses TS\n    ThinkingSphinx::Index.class_eval do\n      def adapter() :mysql end\n    end\n\n    ThinkingSphinx::AbstractAdapter.class_eval do\n      def self.detect(model)\n        ThinkingSphinx::MysqlAdapter\n      end\n    end\n\n### Litespeed web server or Phusion Passenger (mod\\_rails)\n\nIf you are using the Litespeed web server or Passenger (mod\\_rails), child processes are initialized on creation,\nwhich means any setup done in an environment file will be effectively ignored. [A brief\ndiscussion of the problem is posted here](http://litespeedtech.com/support/wiki/doku.php?id=litespeed_wiki:rails:memcache).\n\nOne solution for Litespeed/Passenger users is to check the connection at your first request and do\nthe `setup!` call if your connection hasn\'t been initialized, like:\n\n    # in ApplicationController\n    prepend_before_filter do |controller|\n      unless ActiveRecord::Base.connection.is_a? ActiveReload::ConnectionProxy\n        ActiveReload::ConnectionProxy.setup!\n      end\n    end\n\n\nAdvanced\n--------\n\nThe ActiveReload::MasterDatabase model uses a \'master\\_database\' setting that can either be\ndefined for all of your environments, or for each environment as a nested declaration.\n\nThe ActiveReload::SlaveDatabase model uses a \'slave\\_database\' setting that can only be\ndefined per environment.\n\nExample:\n\n    login: &login\n      adapter: postgresql\n      host: localhost\n      port: 5432\n    \n    production:\n      database: production_slave_database_name\n      <<: *login\n    \n    master_database:\n      database: production_master_database_name\n      <<: *login\n    \n    staging:\n      database: staging_database_name\n      host: slave-db-pool.local\n      <<: *login\n      master_database: \n        database: staging_database_name\n        host: master-db-server.local\n        <<: *login\n    \n    qa:\n      database: qa_master_database_name\n      host: qa-master\n      <<: *login\n      slave_database:\n        database: qa_slave_database_name\n        host: qa-slave\n        <<: *login\n    \n    development: # Does not use masochism\n      database: development_database_name\n      <<: *login\n \nIf you want a model to always use the Master database, you can inherit\n`ActiveReload::MasterDatabase`. Any models with their own database connection will not be\naffected.\n\n### More control at setup\n\nBy default, masochism `setup!` is a shorthand for this:\n\n    ActiveReload::ConnectionProxy.setup_for ActiveReload::MasterDatabase, ActiveRecord::Base\n\nThe first argument is the model that has the master database connection established; the\nsecond argument is the model whose `connection` gets hijacked by ConnectionProxy. But we\ndon\'t have to touch `ActiveRecord::Base` at all:\n\n    # set up MyMaster\'s connection as the master database connection for User:\n    ActiveReload::ConnectionProxy.setup_for MyMaster, User\n\n### The controller filter\n\nIf you have any actions you know require the master database for both reads and writes,\nsimply do the following:\n\n    # in a controller:\n    around_filter ActiveReload::MasterFilter, :only => [:show, :edit, :update]\n'
Themes for AsciiDoc and a framework for assembling them ... b'\n                               AsciiDoc Themes\n                   < http://tomayko.com/src/adoc-themes/ >\n\nAsciiDoc is a (mostly humane) text document format for writing short\ndocuments, articles, books and man pages. Its toolchain is capable of\nproducing HTML4, XHTML, DocBook, man, and LaTeX. Many projects use AsciiDoc,\nincluding the Git content tracker.\n\nAsciiDoc generates basically good semantic markup, is styled with external\nCSS, and includes support for themeing. The default theme included in\nAsciiDoc is functional but is somewhat lacking in typographic\nconsistencies; it is also quite blue.\n\nThis package includes a variety of additional themes and a framework for\nassembling them. See the HACKING file included with this package for more\ninformation.\n'
ActiveRecord connection proxy for master/slave connections b"masochism\n==============\n\nThe masochism plugin provides an easy solution for Ruby on Rails applications to\nwork in a replicated database environment. Connection proxy sends some database\nqueries (those in a transaction, update statements, and ActiveRecord::Base#reload) \nto a master database, and the rest to the slave database. \n\nThe ActiveReload::MasterDatabase model uses a 'master_database' setting in \ndatabase.yml to serve as the master database.\n\n  # config/database.yml\n  login: &login\n    adapter: postgresql\n    host: localhost\n    port: 5432\n\n  production:\n    database: slave_database_name\n    <<: *login\n    \n  master_database:\n    database: master_database_name\n    <<: *login\n\nTo setup:\n\nWhether you want this in production only, or maybe just your deployment server, \nis up to you. Just call the following method in your desired environment file.\n\n  ActiveReload::ConnectionProxy.setup!\n\nSome suggestions:\n\n  * in a config/initializer\n  * config.after_initialize block\n\nIf you want a model to always use the Master database, you can inherit \nActiveRelaod::MasterDatabase.  Any models with their own database connection\nwill not be affected.\n\nSetting up your own proxies:\n\n  # Sets up MyMaster's connection as the master database connection for User.\n  ActiveReload::ConnectionProxy.setup_for MyMaster, User\n  \n"
simple identity map for active record.  eager loading associations FTL b"ActiveRecordContext\n===================\n\nSimple ActiveRecord context for caching AR objects.  It caches all records from #find queries\nthat aren't readonly, and that don't have eagerly loaded associations. It only looks in the context\non simple Foo.find(id) queries with no conditions.  It's designed to work as an alternative to eager\nloading associations.  It will also help all the extra find calls for models that access their associations\nin callbacks/validations.\n\nIt only uses the context when it's activated.  To activate, you can set a controller around_filter:\n\n  around_filter :set_context\n  \n  def set_context\n    ActiveRecord::Base.with_context do\n      yield\n    end\n  end\n  \nSet Technoweenie::ActiveRecordContext.log_context_activity = true to turn on debug logging."
ActiveRecord plugin allowing you to hide and restore records without actually deleting them. b'# ActsAsParanoid\n\n[![Build Status](https://travis-ci.org/ActsAsParanoid/acts_as_paranoid.png?branch=master)](https://travis-ci.org/ActsAsParanoid/acts_as_paranoid)\n\nA Rails plugin to add soft delete.\n\nThis gem can be used to hide records instead of deleting them, making them recoverable later.\n\n## Support\n\n**This branch targets Rails 4.x.**\n\nIf you\'re working with another version, switch to the corresponding branch, or require an older version of the acts_as_paranoid gem.\n\n## Usage\n\nYou can enable ActsAsParanoid like this:\n\n```ruby\nclass Paranoiac < ActiveRecord::Base\n  acts_as_paranoid\nend\n```\n\n### Options\n\nYou can also specify the name of the column to store it\'s *deletion* and the type of data it holds:\n\n- `:column      => \'deleted_at\'`\n- `:column_type => \'time\'`\n\nThe values shown are the defaults. While *column* can be anything (as long as it exists in your database), *type* is restricted to:\n\n- `boolean`\n- `time` or\n- `string`\n\nIf your column type is a `string`, you can also specify which value to use when marking an object as deleted by passing `:deleted_value` (default is "deleted"). Any records with a non-matching value in this column will be treated normally (ie: not deleted).\n\n### Filtering\n\nIf a record is deleted by ActsAsParanoid, it won\'t be retrieved when accessing the database. So, `Paranoiac.all` will **not** include the deleted_records. if you want to access them, you have 2 choices:\n\n```ruby\nParanoiac.only_deleted # retrieves the deleted records\nParanoiac.with_deleted # retrieves all records, deleted or not\n```\n\nWhen using the default `column_type` of `\'time\'`, the following extra scopes are provided:\n\n```ruby\ntime = Time.now\n\nParanoiac.deleted_after_time(time)\nParanoiac.deleted_before_time(time)\n\n# Or roll it all up and get a nice window:\nParanoiac.deleted_inside_time_window(time, 2.minutes)\n```\n\n### Real deletion\n\nIn order to really delete a record, just use:\n\n```ruby\nparanoiac.destroy!\nParanoiac.delete_all!(conditions)\n```\n\nYou can also permanently delete a record by calling `destroy` or `delete_all` on it **twice**. If a record was already deleted (hidden by ActsAsParanoid) and you delete it again, it will be removed from the database. Take this example:\n\n```ruby\np = Paranoiac.first\np.destroy # does NOT delete the first record, just hides it\nParanoiac.only_deleted.where(:id => p.id).destroy # deletes the first record from the database\n```\n\n### Recovery\n\nRecovery is easy. Just invoke `recover` on it, like this:\n\n```ruby\nParanoiac.only_deleted.where("name = ?", "not dead yet").first.recover\n```\n\nAll associations marked as `:dependent => :destroy` are also recursively recovered. If you would like to disable this behavior, you can call `recover` with the `recursive` option:\n\n```ruby\nParanoiac.only_deleted.where("name = ?", "not dead yet").first.recover(:recursive => false)\n```\n\nIf you would like to change this default behavior for one model, you can use the `recover_dependent_associations` option\n\n```ruby\nclass Paranoiac < ActiveRecord::Base\n    acts_as_paranoid :recover_dependent_associations => false\nend\n```\n\nBy default, dependent records will be recovered if they were deleted within 2 minutes of the object upon which they depend.  This restores the objects to the state before the recursive deletion without restoring other objects that were deleted earlier.  The behavior is only available when both parent and dependant are using timestamp fields to mark deletion, which is the default behavior. This window can be changed with the `dependent_recovery_window` option:\n\n```ruby\nclass Paranoiac < ActiveRecord::Base\n    acts_as_paranoid\n    has_many :paranoids, :dependent => :destroy\nend\n\nclass Paranoid < ActiveRecord::Base\n    belongs_to :paranoic\n\n    # Paranoid objects will be recovered alongside Paranoic objects\n    # if they were deleted within 10 minutes of the Paranoic object\n    acts_as_paranoid :dependent_recovery_window => 10.minutes\nend\n```\n\nor in the recover statement\n\n```ruby\nParanoiac.only_deleted.where("name = ?", "not dead yet").first.recover(:recovery_window => 30.seconds)\n```\n\n### Validation\nActiveRecord\'s built-in uniqueness validation does not account for records deleted by ActsAsParanoid. If you want to check for uniqueness among non-deleted records only, use the macro `validates_as_paranoid` in your model. Then, instead of using `validates_uniqueness_of`, use `validates_uniqueness_of_without_deleted`. This will keep deleted records from counting against the uniqueness check.\n\n```ruby\nclass Paranoiac < ActiveRecord::Base\n    acts_as_paranoid\n  \tvalidates_as_paranoid\n  \tvalidates_uniqueness_of_without_deleted :name\nend\n\np1 = Paranoiac.create(:name => \'foo\')\np1.destroy\n\np2 = Paranoiac.new(:name => \'foo\')\np2.valid? #=> true\np2.save\n\np1.recover #=> fails validation!\n```\n\n### Status\nYou can check the status of your paranoid objects with the `deleted?` helper\n\n```ruby\nParanoiac.create(:name => \'foo\').destroy\nParanoiac.with_deleted.first.deleted? #=> true\n```\n\n### Scopes\n\nAs you\'ve probably guessed, `with_deleted` and `only_deleted` are scopes. You can, however, chain them freely with other scopes you might have. This\n\n```ruby\nParanoiac.pretty.with_deleted\n```\n\nis exactly the same as\n\n```ruby\nParanoiac.with_deleted.pretty\n```\n\nYou can work freely with scopes and it will just work:\n\n```ruby\nclass Paranoiac < ActiveRecord::Base\n\tacts_as_paranoid\n\tscope :pretty, where(:pretty => true)\nend\n\nParanoiac.create(:pretty => true)\n\nParanoiac.pretty.count #=> 1\nParanoiac.only_deleted.count #=> 0\nParanoiac.pretty.only_deleted.count #=> 0\n\nParanoiac.first.destroy\n\nParanoiac.pretty.count #=> 0\nParanoiac.only_deleted.count #=> 1\nParanoiac.pretty.only_deleted.count #=> 1\n```\n\n### Associations\n\nAssociations are also supported. From the simplest behaviors you\'d expect to more nifty things like the ones mentioned previously or the usage of the `:with_deleted` option with `belongs_to`\n\n```ruby\nclass Parent < ActiveRecord::Base\n  has_many :children, :class_name => "ParanoiacChild"\nend\n\nclass ParanoiacChild < ActiveRecord::Base\n  acts_as_paranoid\n  belongs_to :parent\n\n  # You may need to provide a foreign_key like this\n  belongs_to :parent_including_deleted, :class_name => "Parent", foreign_key => \'parent_id\', :with_deleted => true\nend\n\nparent = Parent.first\nchild = parent.children.create\nparent.destroy\n\nchild.parent #=> nil\nchild.parent_including_deleted #=> Parent (it works!)\n```\n\n## Caveats\n\nWatch out for these caveats:\n\n\n-   You cannot use scopes named `with_deleted` and `only_deleted`\n-   You cannot use scopes named `deleted_inside_time_window`, `deleted_before_time`, `deleted_after_time` **if** your paranoid column\'s type is `time`\n-   You cannot name association `*_with_deleted`\n-   `unscoped` will return all records, deleted or not\n\n# Acknowledgements\n\n* To [Rick Olson](https://github.com/technoweenie) for creating acts_as_paranoid\n* To [cheerfulstoic](https://github.com/cheerfulstoic) for adding recursive recovery\n* To [Jonathan Vaught](https://github.com/gravelpup) for adding paranoid validations\n* To [Geoffrey Hichborn](https://github.com/phene) for improving the overral code quality and adding support for after_commit\n* To [flah00](https://github.com/flah00) for adding support for STI-based associations (with :dependent)\n* To [vikramdhillon](https://github.com/vikramdhillon) for the idea and initial implementation of support for string column type\n* To [Craig Walker](https://github.com/softcraft-development) for Rails 3.1 support and fixing various pending issues\n* To [Charles G.](https://github.com/chuckg) for Rails 3.2 support and for making a desperately needed global code refactoring\n* To [Gon\xc3\xa7alo Silva](https://github.com/goncalossilva) for supporting this gem prior to v0.4.3\n* To [Jean Boussier](https://github.com/byroot) for initial Rails 4.0.0 support\n* To [Matijs van Zuijlen](https://github.com/mvz) for Rails 4.1 and 4.2 support\n\nSee `LICENSE`.\n'
ActiveRecord plugin for versioning your models. b'= acts_as_versioned\n\nThis library adds simple versioning to an ActiveRecord module.  ActiveRecord is required.\n\n== Resources\n\nInstall\n\n* gem install acts_as_versioned\n\n<3 GitHub\n\n* http://github.com/technoweenie/acts_as_versioned\n\nGemcutter FTW\n\n* http://gemcutter.org/gems/acts_as_versioned\n\nSubversion\n\n* http://svn.github.com/technoweenie/acts_as_versioned.git\n\nSpecial thanks to Dreamer on ##rubyonrails for help in early testing.  His ServerSideWiki (http://serversidewiki.com) \nwas the first project to use acts_as_versioned <em>in the wild</em>.'
ActiveRecord plugin for automatically converting fields to permalinks. b"PermalinkFu\n\nThis is a simple plugin extracted from Mephisto for creating permalinks from attributes.\n\n  class Article < ActiveRecord::Base\n    has_permalink :title\n  end\n\nThis will escape the title, making it fit to use in a URL in the after_validation callback.\n\nUse PermalinkFu.escape to escape a string manually if you like.\n\nIf you're having issues with Iconv, you can manually tweak PermalinkFu.translation_to PermalinkFu.translation_from.\nThese are set to nil if Iconv is not loaded.  You can also manually set them to nil if you don't want to use iconv.\n\n[Added 3.13.2008 by Pat Nakajima] You can now add conditions to #has_permalink like so:\n\n\tclass Article < ActiveRecord::Base\n\t  has_permalink :title, :if => Proc.new { |article| article.needs_permalink? }\n\tend\n\nUse the :if or :unless options to specify a Proc, method, or string to be called or evaluated. The permalink\nwill only be generated if the option evaluates to true.\n\n\n[Added 3.11.2009 by Martin Emde] Make permalink_fu update your permalink everytime the dependent field(s) change.\n\n\tclass Article < ActiveRecord::Base\n\t  has_permalink :title, :update => true\n\tend\n\nThis will update your permalink every time title changes. Rails versions with _changed? methods will reduce the checks for uniqueness to only when the permalink field is changed.\n\nWithout :update set to true, your permalink will be set one time and subsequent changes to the field\n(title in this example) will not affect the permalink field. To regenerate the permalink field,\nset it to nil or a blank string within your model.\n\nOld versions of rails without _changed? attribute support will result in the permalink field being regenerated every save.\n\n[Bug Fixed 3.11.2009] Permalink was not being checked for uniqueness when set directly with permalink= on rails versions with _changed?\n"
Replacement for ActiveRecord fixtures using an extremely flexible ruby-based approach. b"model_stubbing\n==============\n\nCreates in-memory versions of models for testing.  This attempts to solve a\nfew problems with ActiveRecord Fixtures:\n\nSpeed - There's no hit to the database and no cleanup between tests.\nFlexibility - You can define a global set of stubs, or define custom ones\n  for specific tests/specs\n\nA lot of these ideas were taken from various approaches to fixtures and mocking\nthat I've seen:\n\nfixture scenarios (http://errtheblog.com/post/7708)\nunit_record (http://www.dcmanges.com/blog/rails-unit-record-test-without-the-database)\nRspec and #mock_model\n\nExemplar (http://www.bofh.org.uk/articles/2007/08/05/doing-the-fixture-thing)\nI actually saw Exemplar after I wrote the initial version, but they do seem similar.\n\nI honestly don't know if this is a better way or anything, I'm just experimenting with\na different approach.  Oh, and apparently this is an implementation of the ObjectMother \n(http://www.martinfowler.com/bliki/ObjectMother.html) pattern?\n\n  # test/unit example\n  # test/unit support not fully implemented yet\n  require 'model_stubbing'\n\n  class FooTest < Test::Unit::TestCase\n    define_models do\n      time 2007, 6, 1\n    \n      model Role do\n        stub :owner, :name => 'owner'\n        stub :author, :name => 'author'\n      end\n    \n      model User do\n        stub :name => 'bob', :admin => false\n        stub :admin, :admin => true # inherits from default fixture\n        stub :author, :roles => [all_stubs(:author_role)]\n        stub :owner, :roles => [all_stubs(:author_role), all_stubs(:owner_role)]\n      end\n    \n      model Post do\n        # uses admin user fixture above\n        stub :title => 'initial', :user => all_stubs(:admin_user), \n          :published_at => current_time + 5.days\n      end\n    end\n    \n    def test_foo\n      @user   = users(:default) # default user stub\n      @admin  = users(:admin)\n      @custom = users(:default, :age => 25) # custom attributes, \n                                            #but not equal to @user any more\n                                            \n      @post   = posts(:default)\n      @post.user # equal to @admin above\n      \n      current_time # stubbed to be 6/1/2007 using mocha or rspec\n    end\n  end\n\n  # rspec example\n  require 'model_stubbing'\n\n  describe Foo do\n    ...\n  end\n\nTODO\n====\n\n* Support other mocking frameworks besides rspec and mocha?\n\n* Support Sequel, DataMapper, etc?  I use AR, but I'm willing to abstract\n  some of that out in case someone wants to support another ORM."
ActionView helpers for showing relative time spans like "Jan 1 - 5" or "Jan 1 - Feb 5" 
Discontinued, see https://github.com/dimelo/viking b'= Description\nThis is a fork of Technoweenie\'s Rails plugin, Viking. It is meant to bring \nViking to other Ruby web frameworks by gem-ifying the plugin, and extending it \nwith a few of the additions that were generated by the Collective project \n(http://github.com/meekish/collective).\n\nFor more information on how to use this gem, check out the well documented \ncode, and the "website":http://vikinggem.rubyforge.org/\n\n= License\n\n(The MIT License)\n\nCopyright (c) 2008 James Herdman\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'
Mozilla JavaScript Engine (SpiderMonkey) bindings for Ruby 
Customization App for Macbooks with MultiTouch support 
GTD-Inspired Task Viewer using Leopard's Todo Server 
Simple Meditation Timer with MP4-Export Capabilities 
There is only one way to go 
A quick & dirty git-powered Sinatra wiki b'h1. git-wiki\n\n_because who needs cool names when you use git?_\n\nh2. Requirements\n\n* rubygems\n* sinatra\n* grit\n* redcloth\n* rubypants\n* ultraviolet (uv) - requires "Oniguruma":http://www.geocities.jp/kosako3/oniguruma/\n'
An Extensible Wiki/CMS in Lua b'WARNING: ABANDONED SOFTWARE, YMMV\n=================================\n\nSputnik was a fun project but it has not been maintained since 2012 and\nnone of the primary contributors have plans to maintain it in the future.\n\nINTRODUCTION\n============\n\nSputnik is a wiki/cms written in Lua. It is intended to be primarily used\nas a web application, but could also be accessed programmatically.\nSee http://spu.tnik.org/ for more information.  \n\nSputnik is free / open source software, distributed under the MIT License.\nSome optional plugins are distributed under other free software licenses.\nSee attached LICENSE.txt for more information.\n\n(c) 2007-2012 Yuri Takhteyev (most of the code)\nSome of the code is (c) other authors. (See LICENSE.txt for details.)\n\nContact: <qaramazov@gmail.com>\n\n\nINSTALLATION\n============\n\nIf you are simply looking to install Sputnik using the easiest method, you\nprobably shouldn\'t be reading this. The simplest way to install Sputnik is by\nusing one of our installers that relies on LuaRocks. If you want to try this\noption, go to http://spu.tnik.org/en/Installation and follow the instructions\ngiven there.\n\nSimilarly, if you do want to install the latest version from our source\ncode repository, see http://spu.tnik.org/en/Source.\n\nIf you really want to install Sputnik by hand using the source code in this\ndirectory, see "Manual Installation and Use" below. Meanwhile, let\'s look at\nwhat we\'ve got in this directory.\n\n\nSOURCE CODE ORGANIZATION\n========================\n\nThis directory contains a number of sub-directories, representing "rocks"\n- collections of Lua modules that can be installed as a unit using LuaRocks.\nEach rock directory has a subdirectory called "lua" which has the actual Lua\ncode, organized into modules. One rock may define multiple modules. So, we\nhave for example\n\n    sputnik/lua/sputnik/init.lua\n       |     |     |       |      \n       |     |     |     submodule\n       |     |   module   \n       | lua code\n     rock     \n\nThe minimal set of rocks that you will need to run Sputnik is:\n\n    sputnik - the core of Sputnik\n    saci - Saci, a versioned document management system behind Sputnik\n\nThere are also some rocks representing optional plugins:\n\n    sputnik-medialike - a plugin offering support for mediawiki markup\n    sputnik-tickets - a bug tracking plugin\n    sputnik-mbox - a plugin enabling archival of mailing list\n\nSome of those optional plugins may be out of date. A few other ones are\navailable in the "out-of-date-but-potentially-useful" directory:\n\n    sputnik-pod - a plugin offering support for POD markup\n    sputnik-search-google - a plugin for google search\n    versium-svn - stores your data in subversion (needs updating)\n    sputnik-examples - a basic set of demos\n    sputnik-luausers - a demo showing Lua-Users wiki data loading into Sputnik\n    sputnik-tests - some old tests\n\nThose are quite certainly out of date.\n\nMANUAL INSTALLATION AND USE\n===========================\n\nIf you really want to install Sputnik by hand using the source code in this\ndirectory, you will need the following dependencies:\n\n1. Lua5.1\n2. Binary Lua libraries: luasocket, lbase64, MD5, lpeg, luafilesystem* \n3. Pure-lua Lua libraries: cosmo, coxpcall, wsapi, diff, markdown*\n\nNote: luafilesystem and markdown are not strictly speaking required, but are\nassumed by the _default_ storage system and markup module.\n\nYou may also want to install the "optional but highly recommended" modules:\n\n    xssfilter - a filter against cross-site scripting\n    recaptcha - a Lua API for recaptcha (http://recaptcha.net)\n\nFor a basic Sputnik installation, you will need to copy the following\ndirectories to where your Lua can find it.\n\n    sputnik/lua/*\n    saci/lua/*\n\nYou should then use the script sputnik/bin/sputnik.lua to generate a WSAPI-\ncompatible launcher script:\n\n    sputnik.lua make-cgi\n\nproduces "sputnik.ws", which is a Lua script that defines a WSAPI application.\n\nYou can run Sputnik on any server for which there is a WSAPI bridge. The\neasiest, however, is Xavante, a pure-lua web server. To do this, install\nXavante libraries where Lua can find them and run Sputnik as follows:\n\n    sputnik.lua start-xavante sputnik.ws\n\nFor other options see the wiki and WSAPI documentation.\n\n'
HAML Templating for Mephisto b'= Haml template renderer for Mephisto\n\nuse ".haml" for layout and template files.\n\n= Installation\nscript/plugin install -x http://svn.nanorails.com/plugins/mephisto_haml_templates/'
Gajim is a xmpp (Jabber) client written in python. This repo is a git-svn clone of svn://svn.gajim.org/gajim/trunk / http://trac.gajim.org/browser/ b'see README.html\n'
Playing about with JQuery drag&drop for Callflow Designer b'TODO'
The acts_as_subscribeable plugin is a generator and plugin to allow the subscription based email notification  b"ActsAsSubscribeable\n===================\n\nThe acts_as_subscribeable plugin is a generator and plugin to allow the subscription based email notification \n(or other system if you choose to implement it differently) of changes in the model you specify as a subscribeable\nobject. The associations are polymorphic and can pertain to any model type.\n\nPrerequisites\n=============\nRails 1.2.6+\nA User model that includes a field called email (Restful Auth compatible!)\n\nInstalling the plugin\n=====================\n  -- Get the plugin:\n    ./script/plugin install svn://railsjitsu.com/var/svn/repos/acts_as_subscribeable/trunk/\n  -- Run:\n    ./script/generate acts_as_subscribeable_installation\n  -- Add a has_many :subscriptions to your User model\n  -- Configure the mailer initializer placed in /config/initializers/mailer.rb for your mail server\n\n  NOTES:\n  ======\n  This will install the migration file and mailer initializer for the plugin.\n\nGenerating Subscribebale Models\n===============================\n  -- Create a model\n  -- Add the hook:\n    acts_as_subscribeable\n  \n  -- Run:\n    ./script/generate subscribeable_model MODEL_NAME\n\n  -- Add your observer hook in your environment.rb file\n    config.active_record.observers = :MODEL_NAME_observer  \n\n  NOTES:\n  ======\n  This will generate an observer and mailer for your model and hook in the observer. It defaults to an after_update \n  callback but you can add as many as you need or customize the observer to watch a parent model to alert on child \n  creation instead.\n\nCustomizing your email notification\n===============================\n  -- Customize the generated send_email_notification.html.erb file in your MODEL_NAME_mailer views directory to suit your needs  and the MODEL_NAME_mailer.rb mailer in your Models directory.\n\nCopyright (c) 2007 E. James O'Kelly, released under the MIT license\nwww.railsjitsu.com"
Xparky 
Talk is a small, Clutter-based presentation application b'Talk - A small, technical keynote I wrote for FOSDEM 2008\n\nTalk is written in Python and uses Clutter and GTK+.\n\n'
This is Russian translation of Samba3 HOWTO 
Database Form Page Extension for Radiant CMS b'= Database Form Extension for Radiant\r\n\r\nThe Database Form extension enables Radiant users to build form pages that\r\nwill save visitor responses to a database table. Those responses can then\r\nbe exported for consumption in some other application (CRM, etc).\r\n\r\nInstall the extension, run the rake radiant:extensions:database_form:migrate\r\ntask, and the rake radiant:extensions:database_form:update task. These\r\ntasks will add the necessary database table to your Radiant installation\r\nand copy over the JavaScript that\'s required for client-side validation.\r\n\r\nOnce you\'ve done this, log into the Radiant admin and set the page type\r\nof the page where you\'ll build the form to DatabaseFormPage. Then create\r\nyour form using tags. Here\'s an example of usage:\r\n\r\n    <r:database:form name="requestinfo" redirect_to="/contact/thank-you">\r\n      Name:<br/>\r\n      <r:database:text name="name"/><br/>\r\n      Email:<br/>\r\n      <r:database:text name="email"/><br/>\r\n      Primary Interest:<br/>\r\n      <r:database:select name="primary_interest">\r\n        <r:database:option name="work"/>\r\n        <r:database:option name="fun!"/>\r\n      </r:database:select><br/>\r\n      <r:database:submit value="Submit"/>\r\n      <r:database:reset value="Reset"/>\r\n    </r:database:form>\r\n\r\nAs shown above, you can use the redirect_to attribute to specify where the\r\nvisitor should be redirected to after submitting the form.\r\n\r\nThe entire inventory of tags includes:\r\n\r\n  <r:database:form name="" redirect_to="" validate="">...</r:database:form>\r\n  <r:database:text name="" validate=""/>\r\n  <r:database:password name="" validate=""/>\r\n  <r:database:checkbox name="" validate=""/>\r\n  <r:database:hidden name="" validate=""/>\r\n  <r:database:textarea name="" validate=""/>\r\n  <r:database:radio name="" validate=""/>\r\n  <r:database:radiogroup name="" validate="">...</r:database:radiogroup>\r\n  <r:database:select name="" validate="">...</r:database:select>\r\n  <r:database:option name=""/>\r\n  <r:database:us_states/>\r\n  <r:database:ca_provinces/>\r\n  <r:database:countries/>\r\n  <r:database:submit/>\r\n  <r:database:reset/>\r\n  \r\nNote that most tags support client-side validation. Thanks to Andrew Tetlaw\r\nfor his spiffy Prototype-based validation JavaScript. If you wish to include\r\nvalidation in your form, you must set the validate attribute in the form tag.\r\nYou can then choose from a variety of validation routines for the form\r\nelements, including: required, validate-number, validate-digits, \r\nvalidate-alpha, validate-alphanum, validate-date, validate-email,\r\nvalidate-url, validate-currency-dollar, validate-selection, and\r\nvalidate-one-required. You\'ll also need to include prototype in your layout,\r\nof course (IMPORTANT; without it validation won\'t work).\r\n\r\n<r:database:form name="contact" validate="true">\r\n  <r:database:text name="name" validate="required"/>\r\n  <r:database:text name="email" validate="required validate-email"/>\r\n</r:database:form>\r\n\r\nIf you care to, you can style these validations using CSS:\r\n\r\ninput.validation-failed, textarea.validation-failed {\r\n        border: 1px solid #900;\r\n        color: #900;\r\n}\r\n.validation-advice {\r\n        margin: 5px 0;\r\n        padding: 5px;\r\n        background-color: #900;\r\n        color: #FFF;\r\n        font-weight: bold;\r\n}\r\n\r\nThe Database Forms extension also adds a tab to Radiant\'s admin\r\ninterface which can be used to export user form data. You can select\r\nby form name (the name you assigned to a form in its tag) and date\r\nranges. XML is the only supported export format at this time.\r\n\r\nMaybe we\'ll sexy this up some day and make listings browsable through\r\nthe admin but the most common use case is probably exporting data, and\r\nthat\'s what we needed at the time, so it is what it is. If you\'d like\r\nto extend it, we definitely welcome submissions.\r\n\r\nThis extension is based on the Mailer extension by Matt McCray and \r\n(originally) Sean Cribbs. It was inspired by a post on SuperGloo\'s blog\r\nhttp://code.supergloo.com/2007/12/12/radiant-cms-database-form-extension\r\nbut should be a bit more flexible than what was described there,\r\nallowing you to add arbitrary forms at will without adding database \r\ntables (model attributes for the FormResponse model are serialized\r\nand stored in a content text area).\r\n\r\nDeveloped by Nick Plante for Ubikorp Internet Services. \r\nTested on Radiant 0.6.4.\r\n\r\nhttp://github.com/zapnap/database_form\r\n\r\nhttp://blog.zerosum.org\r\nhttp://www.ubikorp.com\r\n'
A small ruby program for unit-testing one's life  b'Daylist\n=======\n\nA small checklister for personnal use. Launch it, answer each question and get\nthe percentage of stuff done.\n\nExample\n-------\n\n```bash\n$ ruby daylist.rb example.txt\nYou\xe2\x80\xa6\nBrushed teeth at least once ?\n```\n\nAnd after answering `y` or `n` and pressing enter after a few questions you\nwould get:\n\n```bash\n$ ruby daylist.rb example.txt\nYou\xe2\x80\xa6\nBrushed teeth at least once ? y\nWashed dishes at least once ? n\nAte a veggie meal ? n\nResults:\n \xe2\x9c\x94 Brushed teeth at least once\n \xe2\x9c\x97 Washed dishes at least once\n \xe2\x9c\x97 Ate a veggie meal\n1 passed, 2 failed, 33%\n```\n\nCreate a list\n-------------\n\nFill a text file with todo items. Use `#` for comments. Example :\n\n    # My weekly list!\n    Went to the gym\n    Helped an open-source project\n    Called Mom\n\nAnother example is the big [Cleen Sweep|http://betterme.org/cleansweep.html],\nattached as `cleensweep.txt`.\n'
Add validations directly to instances of your AR model, not just at the class-level b'InstanceValidations\n===================\n\nActiveRecord lets you define validations at the class level.  This plugin lets you define validations for ActiveRecord instances.  Take the following ActiveRecord class:\n\n  class Chicken < ActiveRecord::Base\n    include InstanceValidations\n    # Has two columns, name and home_town.  Only validate name\n    validates_presence_of :name\n  end\n\nAll instances of Chicken will require a name in order to be valid.  If you don\'t define any instance validations, you\'ll get the expected behavior:\n\n  chicken = Chicken.new\n  chicken.valid?     => false, will have an error on name\n  \nIf you do specify instance validations, the class validations are ignored and only instance validations are used:\n\n  chicken_without_a_name = Chicken.new\n  class << chicken_without_a_name\n    validates_presence_of :home_town\n  end\n  chicken_without_a_name.valid?                 # => false, will have an error on home_town but not name\n  chicken_without_a_name.home_town = "Roostershire"\n  chicken_without_a_name.valid?                 # => true\n  \n  \nWritten by Pat Maddox.  Released under the MIT License.\nsvn://evang.eli.st/public/plugins/instance_validations\n'
Generic board game suite b"Tagua - A generic board game application\n===========================================\n\nTagua is a powerful board game application which supports several\ntypes of games, and has a powerful plugin system which makes it\neasy to add more. Just let your imagination decide. =)\n\nGames implemented up to now:\n- Chess\n- Shogi\n- Minichess\n- Minishogi\n- Tori shogi\n- Sho shogi\n\n===========================================\nWhy the name\n\nTagua is the name of a plant where vegetal ivory is extracted.\nIvory because of it's wide usage while making board games, vegetal\nbecause we love animals and elephants. <3\n\n===========================================\n\nFor more information, visit http://www.tagua-project.org\n\nThere's a mailing list on Google Groups about tagua development:\nhttp://groups.google.com/group/tagua-devel\n\nFeel free to come and ask questions about the development of\nthe game, writing rules for new games, or anything else.\n\nWe want you. =)\n\nLove!\n\n- The Tagua team\n"
Disables observers during testing, allowing you to write model tests that are completely decoupled from the observer. Also lets you enable observers for a certain block of code, so that you can write observer tests b'= no_peeping_toms\n\nThis plugin disables observers in your specs, so that model specs can run in complete isolation.\n\n== Installation\n\nAdd to your Gemfile:\n\n  gem \'no_peeping_toms\', :git => \'git://github.com/patmaddox/no-peeping-toms.git\'\n\nand run `bundle install`.\n\nno_peeping_toms >= 2.0.0 only supports on Rails 3.  If you need Rails 2 support, use 1.1.0: `gem install no_peeping_toms -v 1.1.0`\n\n== Usage\n\nTo disable observers, place the following code in your test.rb, or spec_helper.rb, or wherever:\n\n  ActiveRecord::Observer.disable_observers\n\nYou can easily reenable observers:\n\n  ActiveRecord::Observer.enable_observers\n\nYou can choose to run some code with specific observers turned on.  This is useful when spec\'ing an observer.  For example, if you write the following observer:\n\n  class PersonObserver < ActiveRecord::Observer\n    def before_update(person)\n      old_person = Person.find person.id\n      if old_person.name != person.name\n        NameChange.create! :person => person, :old_name => old_person.name, :new_name => person.name\n      end\n    end\n  end\n\nYou can spec the Person class in complete isolation.\n\n  describe Person, " when changing a name" do\n    before(:each) do\n      @person = Person.create! :name => "Pat Maddox"\n    end\n\n    # By default, don\'t run any observers\n    it "should not register a name change" do\n      lambda { @person.update_attribute :name, "Don Juan Demarco" }.should_not change(NameChange, :count)\n    end\n\n    # Run only a portion of code with certain observers turned on\n    it "should register a name change with the person observer turned on" do\n      ActiveRecord::Observer.with_observers(:person_observer) do\n        lambda { @person.update_attribute :name, "Don Juan Demarco" }.should change(NameChange, :count).by(1)\n      end\n\n      lambda { @person.update_attribute :name, "Man Without a Name" }.should_not change(NameChange, :count)\n    end\n  end\n\n== Credits\n\n* Brandon Keepers\n* Corey Haines\n* Drew Olson\n* Jeff Siegel\n* Zach Dennis\n* Andy Lindeman\n* Ryan McGeary\n\nCopyright (c) 2007-2011 Pat Maddox, released under the MIT license.\n'
Plugin generator that uses RSpec stubs instead of Test::Unit. Also sets up database connections for testing against an isolated database. b'For usage docs:\n\n  ./script/generate rspec_plugin\n\nBased off the Rails plugin generator.\ndatabase.yml/schema.rb/spec_helper.rb based off of Chapter 8 of "Rails Plugins: Extending Rails Beyond the Core" by James Adam'
ActiveRecord connection proxy for master/slave connections b"masochism\n==============\n\nThe masochism plugin provides an easy solution for Ruby on Rails applications to\nwork in a replicated database environment. Connection proxy sends some database\nqueries (those in a transaction, update statements, and ActiveRecord::Base#reload) \nto a master database, and the rest to the slave database. \n\nThe ActiveReload::MasterDatabase model uses a 'master_database' setting in \ndatabase.yml to serve as the master database.\n\n  # config/database.yml\n  login: &login\n    adapter: postgresql\n    host: localhost\n    port: 5432\n\n  production:\n    database: slave_database_name\n    <<: *login\n    \n  master_database:\n    database: master_database_name\n    <<: *login\n\nTo setup:\n\nWhether you want this in production only, or maybe just your deployment server, \nis up to you. Just call the following method in your desired environment file.\n\n  ActiveReload::ConnectionProxy.setup!\n\nSome suggestions:\n\n  * in a config/initializer\n  * config.after_initialize block\n\nIf you want a model to always use the Master database, you can inherit \nActiveRelaod::MasterDatabase.  Any models with their own database connection\nwill not be affected.\n\nSetting up your own proxies:\n\n  # Sets up MyMaster's connection as the master database connection for User.\n  ActiveReload::ConnectionProxy.setup_for MyMaster, User\n  \n"
This is Russian translation of Samba3 HOWTO 
Download NZBs from an RSS feed b'DESCRIPTION\n--------------------------------------------------------------------------------\nAutomatically download NZBs matching a given pattern from an RSS feed. Intended\nto be used with hellanzb and tvnzb feeds.\n\nREQUIREMENTS\n--------------------------------------------------------------------------------\n - A recent Python. Tested with 2.5, but older versions may work as well\n - feedparser (http://feedparser.org/)\n - Some program that will download NZBs placed in a directory. I use hellanzb\n\nINSTALLATION\n--------------------------------------------------------------------------------\n - Copy rssnzb.py to your system.\n - Edit the settings at the top of the file\n - Create the directory you pointed RSSNZB_DIR to\n - Create two empty files in that directory named "downloaded" and "patterns"\n - Make sure the user that will run rssnzb has write access to "downloaded" and\n   DOWNLOAD_DIR\n - Create a list of regex patterns and put them in "patterns". One pattern per\n   line.\n - Create a cron job to run at whatever interval suits your needs, no more often\n   than once an hour (otherwise you might annoy the web server admin)\n   @hourly /path/to/rssnzb.py\n\nNOTES\n--------------------------------------------------------------------------------\nThe "downloaded" file contains a list of all NZBs that have already been\ndownloaded. This is to prevent NZBs from getting downloaded twice. It\'s hackish\nand doesn\'t scale well, but it works.\n\nIf you\'re using tvnzb\'s feed you\'ll probably want to match on the beginning of\nthe title. For example, if you wanted to grab all episodes of The Simpsons, you\nwould write a pattern like this:\n^The.Simpsons\ntvnzb tends to be fairly consistent in their naming of the files, so you\nshouldn\'t have too much trouble coming up with a list of patterns that works.\n\nTODO\n--------------------------------------------------------------------------------\nThere isn\'t any error checking. Somebody should fix that.\n'
DEPRECATED! Use http://github.com/yolk/mite-rb instead. b"=== README\n\n== Usage\n\ngem 'miter'\nrequire 'miter'\n\nMiter::Base.auth(account, apikey)\n\nMiter::Project.find(:all)\nMiter::Task.find(:first)\nMiter::Customer.find(:all, :params => { ... })\n"
A java servlet filter that implements the rack interface for calling ruby web applications b'Rack Interface Filter is a simple filter that can be deployed to a servlet container. On startup, the filter \ninstantiates a JRuby instance, bootstraps a ruby web framework, then instantiates a rack adaptor for that framework.\nWhen an request comes in, the filter translates the request to a RubyHash and passes it to the rack adaptor\'s call method.\n\nThis is very much a work in progress, and the only framework with which it has been used is Merb. There is currently no\nsupport for bundling up a ruby web application as a war file, though it shouldn\'t be hard to add.\n\nTo test this with a merb application, add a WEB-INF directory to the public directory:\n\n/MerbApp\n  /app\n  /config\n  /public\n    /WEB-INF\n      /classes\n      /lib\n        bsf.jar\n        commons-logging-1.x.jar\n        jruby.jar        \n        RackInterface-0.x.jar\n      web.xml\n  Rakefile\n  /spec\n\n\nSample web.xml:\n\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">\n<web-app>\n    <display-name>Rack Test</display-name>\n\n    <distributable/>\n    \n    <filter>\n    \t<filter-name>RackInterface</filter-name>\n    \t<filter-class>com.zumisoft.rack.RackFilter</filter-class>\n      <init-param>\n        <param-name>framework</param-name>\n        <param-value>merb</param-value>\n      </init-param>\n  \t</filter>\n  \n  \t<filter-mapping>\n    \t<filter-name>RackInterface</filter-name>\n    \t<url-pattern>/*</url-pattern>\n  \t</filter-mapping>\n        \n    <session-config>\n      <session-timeout>30</session-timeout> \n    </session-config>\n</web-app>\n\n\nTo test this with tomcat, create the file\n\n$CATALINA_HOME/conf/Catalina/localhost/ROOT.xml:\n\n<?xml version="1.0" encoding="UTF-8"?>\n<Context docBase="/path/to/merb/app/public" path="" />\n\n\nFrom here, you should have the merb app deployed to the root of the server (though it should be possible to map it to \nsome other url).\n\nStart up tomcat, and try to hit the app.\n\nThe placement of WEB-INF, the general assumptions about directory layouts, and war packaging are all fluctuating at the moment. This layout seemed like the quickest way to get a test with Merb running.\n\nThere are a few issues already. For one, sometimes the rack adaptor is returning a <File> object as the third element\nin the response tuple. I\'m not sure what to do about that yet. If strings are returned, everything works. As a workaround\nfor that, you can specify ignore paths ("/images", "/stylesheets", "/javascript", "/favicon.ico" by default). If a reuest\nis made for a url that starts with an ignore path, it\'s passed to the servlet container\'s default servlet. Right now, this is just passing through requests for static content. My guess is that the default servlet is better at handling static content anyway,\nbut this behavior might have to change. You could also use the ignore path to allow requests to flow through to other servlets or\nfilters to stack ruby web apps or regular java servlets.\n\nAs a disclaimer, I clearly have no idea what I\'m doing. Any help or suggestions would be great.\n'
Streams ascii pron to telnet clients b"DESCRIPTION\n--------------------------------------------------------------------------------\nRuns a daemon that sends ascii pron back to the client (usually telnet or some\nform of TCP socket like netcat).\n\nREQUIREMENTS\n--------------------------------------------------------------------------------\n - A recent Python. Tested with 2.5, but older versions may work as well\n - PRON!\n\nINSTALLATION\n--------------------------------------------------------------------------------\n - Edit the asciipron.py file to suit your needs. The included version of this\n   file will start two listening servers on port 6969 and 9696 using different\n   directories as a source for the pron.\n - Make sure all the directories you've pointed things at exist\n - Copy the provided pron files to the target directories or generate your own\n   pron with the convertToAscii.py script.\n - Run asciipron.py and telnet to one of the configured ports. Enjoy the show.\n\nNOTES\n--------------------------------------------------------------------------------\nThe convertToAscii.py script requires PIL and goopy because I'm too lazy to\nwrite a stddev function. The convert script will output either 'good' or 'bad'\nafter it has finished the conversion, indicating whether or not this image\ntranslated well to ascii... In some cases, the converted image is illegible.\nThis is less of a problem if you are creating ascii images with more columns.\n\nThe makeporn.sh script will iterate through a directory and run all the images\nthrough convertToAscii.py, sorting the resulting files into separate directories\nbased on whether or not the image was 'good'.\n\nTODO\n--------------------------------------------------------------------------------\n - There isn't any error checking\n - The server doesn't daemonize\n - Logging is crude at best\n - There's probably a denial of service vulnerability here somewhere\n - It would be nice to have a separate config file\n"
MythTV protocol impementation in Python b"DESCRIPTION\n--------------------------------------------------------------------------------\nA relatively simple to use Python module that speaks the mythtv protocol.\n\nREQUIREMENTS\n--------------------------------------------------------------------------------\n - A recent Python. Tested with 2.5, but older versions may work as well\n - MythTV backend to connect to\n\nINSTALLATION\n--------------------------------------------------------------------------------\n - Copy myth/ to python's site-packages directory\n - Change the target address in test.py\n - Run test.py\n - Type 'help' for a list of commands\n\nNOTES\n--------------------------------------------------------------------------------\n - This is NOT a complete protocol implementation, but new commands should be\n   relatively easy to add.\n - Only protocol version 31 is supported... The code can probably be adapted to\n   newer versions by updating the ProgramInfo object in myth.types to match the\n   programinfo struct in the mythtv codebase.\n\nTODO\n--------------------------------------------------------------------------------\nIdeally, this package should be updated to work with newer versions of the\nmythtv protocol, but the mythtv devs have started working on replacing the QT\nserialization based protocol with an XML based protocol, in order to make it\nmore flexible and easier to use by third-party applications, negating the need\nfor this library.\n"
An cross platform opensource virtual school book b'SchoolBook is a cross platform opensource virtual school book written in\npython and pygtk.\n\nThe goal of SchoolBook is to create a cross platform opensource virtual school\nbook that allows students to replace their hard copy school book.\n\nSchoolBook is written for high school students but should tend to the needs of\nyounger and older students also, compatability modes may be introduced in the\nfuture.\n\nNews\n====\nSee NEWS file\n\nTODO\n====\nSee TODO file\n\nDependencies\n============\n>=python-2.5.1\n>=pygtk-2.12.1\n>=sqlite-3.5.9\n\nNote: These are just the lowest versions I have tested with, they may work on\nless recent versions than listed above.\n\nCopyright\n=========\nSee COPYING\n\nBUGS\n====\nIf you find any bugs, for now contact Patrick Ohearn <pat@ge3k.net>\n\nContact\n=======\nPatrick Ohearn <pat@ge3k.net>\n'
Displays IP Trace information when you hover over a link in Firefox. 
OAuth stuff for J2ME clients (with some Fire Eagle-specific bits) b'This is repo primarily a JAR file and source.  \n\nBuild: dist/FE_OAuth.jar\n\nSource: src/*\n\nSee http://fireeagle.yahoo.net for more info.\n'
specify attributes within an ActiveRecord model that can be set but not modified b'\n\nImmutableAttributes\n===================\n\nWhen you want to prevent certain attributes from being changed once set you can declare them as immutable:\n\nclass MyModel < ActiveRecord::Base\n  attr_immutable :permalink, :param_identifier\nend\n\nWhen MyModel.find(:first).permalink = \'anything\' is called it will raise an ImmutableAttributeError\nMyModel.new.permalink = \'works!\' will properly set the value because the record is unsaved.\n\nIf you\'d only like this to happen for certain conditions, and want to handle other attribute-writers, too (like update_attribute), you can use the validation.\n\nvalidates_immutable :permalink\n\nConfiguration options for the validation:\n* :message - A customer error message (default is: "can\'t be changed")\n* :if - Specifies a method, proc, or string to call to determine if the validation should occure (e.g., :if => :allow_validation or :if => Proc.new{|user| user.signup_step > 2}. The method, proc or string should return or evaluate to a true or false value.\n* :unless - Specifies a method, proc, or string to call to determine if the validation should not occure (e.g., :unless => :skip_validation or :unless => Proc.new{|user| user.signup_step <= 2}. The method, proc or string should return or evaluate to a true or false value.\n\nCreated by Jack Danger Canty @ http://6brand.com\nReleased under the same licence as Rails (MIT)\n\n'
Rails Plugin - soft-delete your ActiveRecord records. It's like an explicit version of ActsAsParanoid b'# PermanentRecords (Rails 3.1+)\n\n[http://github.com/JackDanger/permanent_records/](http://github.com/JackDanger/permanent_records/)\n\nThis gem prevents any of your ActiveRecord data from being destroyed.\nAny model that you\'ve given a "deleted_at" datetime column will have that column set rather than let the record be deleted.\n\n## What methods does it give me?\n\n```ruby\nUser.find(3).destroy          # Sets the \'deleted_at\' attribute to Time.now\n                              # and returns a frozen record. If halted by a\n                              # before_destroy callback it returns false instead\n\nUser.find(3).destroy(:force)  # Executes the real destroy method, the record\n                              # will be removed from the database.\n\nUser.destroy_all              # Soft-deletes all User records.\n\nUser.delete_all               # bye bye everything (no soft-deleting here)\n```\nThere are also two scopes provided for easily searching deleted and not deleted records:\n\n```ruby\nUser.deleted.find(...)        # Only returns deleted records.\n\nUser.not_deleted.find(...)    # Only returns non-deleted records.\n```\n\nNote: Your normal finds will, by default, _include_ deleted records. You\'ll have to manually use the ```not_deleted``` scope to avoid this:\n\n```ruby\nUser.find(1)                  # Will find record number 1, even if it\'s deleted.\n\nUser.not_deleted.find(1)      # This is probably what you want, it doesn\'t find deleted records.\n```\n\n## Can I easily undelete records?\n\nYes. All you need to do is call the \'revive\' method.\n\n```ruby\nUser.find(3).destroy         # The user is now deleted.\n\nUser.find(3).revive          # The user is back to it\'s original state.\n```\n\nAnd if you had dependent records that were set to be destroyed along with the parent record:\n\n```ruby\nclass User < ActiveRecord::Base\n  has_many :comments, :dependent => :destroy\nend\n\nUser.find(3).destroy         # All the comments are destroyed as well.\n\nUser.find(3).revive          # All the comments that were just destroyed\n                             # are now back in pristine condition.\n```\n\nForcing deletion works the same way: if you hard delete a record, its dependent records will also be hard deleted.\n\n## Can I use default scopes?\n\n```ruby\ndefault_scope where(:deleted_at => nil)\n```\n\nIf you use such a default scope, you will need to simulate the `deleted` scope with a method\n\n```ruby\ndef self.deleted\n  self.unscoped.where(\'deleted_at IS NOT NULL\')\nend\n```\n\n## Is Everything Automated?\n\nYes. You don\'t have to change ANY of your code to get permanent archiving of all your data with this gem.\nWhen you call `destroy` on any record  (or `destroy_all` on a class or association) your records will\nall have a deleted_at timestamp set on them.\n\n## Upgrading from 3.x\n\nThe behaviour of the `destroy` method has been updated so that it now returns\n`false` when halted by a before_destroy callback. This is in line with behaviour\nof ActiveRecord. For more information see\n[#47](https://github.com/JackDanger/permanent_records/issues/47).\n\n## Productionizing\n\nIf you operate a system where destroying or reviving a record takes more\nthan about 3 seconds then you\'ll want to customize\n`PermanentRecords.dependent_record_window = 10.seconds` or some other\nvalue that works for you.\n\nPatches welcome, forks celebrated.\n\nCopyright 2015 Jack Danger Canty @ [https://jdanger.com](https://jdanger.com) released under the MIT license\n'
Rails Plugin - a Ruby way to manage your stylesheets and javascripts.  Don't put all your assets in your layout; define what you need where you need them. b'= SweetAssets\n\nhttp://github.com/JackDanger/sweet_assets\n\n== Description\n\n  Automate adding stylesheets and javascripts to your controller actions\n\n== Example\n\n  Any controller will include the stylesheet and javascript source files named after named after the contorller if the file exists:\n  \n    class UsersController < ApplicationController\n      ...\n    end\n    \n    http://mysite.com/users/ will have /stylesheets/users.css and /javascripts/users.js included if they exist.\n    \n  Any controller can specify any other file to be added as a stylesheet:\n  \n    class UsersController < ApplicationController\n      style_like :homes\n      script_like :gargantuan\n    end\n    \n    http://mysite.com/users/ will have users.css, homes.css and gargantuan.js included\n    \n  Any asset that needs to take precedence over others (i.e. should be linked after the other stylesheets) can be used with a bang (!)\n  \n    class UsersController < ApplicationController\n      style_like :distort_reality!, :homes, :trees\n      script_like :basic_script, :super_enhancement!\n    end\n    \n    http://mysite.com/users/ will have homes.css, and trees.css and basic_script.js linked before the <title> tag.\n    distort_reality.css and super_enhancement.js will be linked after the <title> tag.\n    Note: the controller-named assets (users.css and users.js in this case) will always\n    be applied with precedence.\n\n  If you need better control over where these assets appear you can use the same options as you would for a before_filter\n    \n    class UsersController < ApplicationController\n      style_like :homes!, :only => :show\n      script_like :trees, :except => [:index, :show]\n    end\n\n  All linked assets will be cached into a single asset if caching is enabled.\n\nCopyright (c) 2007 Jack Danger Canty of adPickles Inc, released under the MIT license\n'
Rails Plugin - a RailsEngines-based CMS extension for any Rails project b'SimplePages\n===========\n\nAllows your app to have a controller full of generic html pages that are served by Rails.\n\nRather than mix traditional flat-file pages into a Rails app or attempt to create\nwhole controllers just for a single rhtml view you can now manage pages that act like flat-files\nbut are editable via a web browser.\n\n'
Rails Plugin - memoize and store to the db a record attribute generated by any expression or SQL query. b'Cached Values\n=\n\n[http://github.com/JackDanger/cached_values/](http://github.com/JackDanger/cached_values/)\n\nCache the result of any Ruby expression or SQL into an ActiveRecord attribute. Expire and update automatically.\n\nINSTALL:\n===\n\n* as gem: sudo gem install cached_values\n* as plugin: ./script/plugin install git://github.com/JackDanger/cached_values.git\n\nUSAGE:\n===\n\nYou can calculate values with a single line in any ActiveRecord model.  To actually save those values you\'ll need to create\nan attribute in your schema.  By default the cached_value instance will look for an attribute with the same name as itself.\nYou can override this by specifying a :cache => :some_attribute option\n\nA very simple case in which cached_values works just like the .count method on a has_many association:\n\n    class Leprechaun < ActiveRecord::Base\n      caches_value :total_gold_coins, :sql => \'select count(*) from gold_coins where leprechaun_id = #{id}\'\n    end\n  \n    Company.find(4).total_employees # => 45\n\nA more sophisticated example:\n\n    class Leprechaun < ActiveRecord::Base\n      has_many :lucky_charms\n      has_many :deceived_children, :through => :lucky_charms\n      caches_value :total_children_remaining_to_be_deceived, :sql => \'... very complicated sql here ...\'\n    end\n  \n    Leprechaun.find(14).total_children_remaining_to_be_deceived # => 6,692,243,122\n\nThe values can be of any type.  The plugin will attempt to cast SQL results to the type corresponding with their database cache\nbut calculations in Ruby are left alone.\n\nYou can also calculate the value in Ruby using a string to be eval\'ed or a Proc.  Both are evaluated\nin the context of the record instance.\n\n    class Leprechaun < ActiveRecord::Base\n      caches_value :total_gold, :eval => "some_archaic_and_silly_calculation(gold_coins)"\n      caches_value :total_lucky_charms, :eval => Proc.new {|record| record.calculate_total_lucky_charms }\n    end\n\nThe cache is customizable, you can specify which attribute should be used as a cache:\n  \n    caches_value :runic_formula, :sql => \'...\'          # uses \'runic_formula\' column if it exists\n    caches_value :standard_deviation_of_gold_over_time, # uses \'std\' column if it exists\n                 :sql => \'...\', :cache => \'std\'\n    caches_value :id, :sql => \'...\', :cache => false    # does NOT persist to db, just memoize in memory.  This avoids overwriting the attribute of the same name.\n\nActiveRecord callbacks can be used to reload (update cache and reload instance) at certain times:\n  \n    caches_value :standard_deviation, :sql => \'...\', :reload => [:before_save, :after_destroy]\n    caches_value :runic_formula, :sql => \'...\', :reload => :after_create\n\n\nPatches welcome, forks celebrated.\n\nCopyright (c) 2007 Jack Danger Canty @ [http://j\xc3\xa5ck.com](http://j\xc3\xa5ck.com), released under the MIT license\n'
Real-time web-server visualization using OpenGL and a force directed layout b"1. Install qt4-development packages and qmake\n   (sudo apt-get install qt4-dev-tools)\n2. qmake -unix -recursive -o Makefile gltrail.pro && make\n3. cp gltrail.ini-example gltrail.ini\n   (and replace with your information)\n4. ./bin/gltrail gltrail.ini\n   ./bin/gltrail --digg\n   ./bin/gltrail --twitter\n\nNote: You'll need public-key ssh access set up to your servers,\n      as I haven't found a good/free cross-platform ssh library.\n\nKeys:\n   ESC = exit\n SPACE = cycle between line modes (off, all, >10% of max traffic)\n     S = show/hide stats\n     B = cycle between size modes (rate, links in, links out,\n                                   links total, hits)\n     V = show repulsive forces\n     N = toggle discharge/receive forces\n\n"
A system to keep up-to-date with your favorite TV shows b'Torresmos TV\n============\n\nThis is a set of Perl scripts to build a private TV station based on series\ndownloaded with BitTorrent.\n\n'
Koowaldah OS kernel b'To you the brave ones.\n'
A nested scaffold generator for rSpec and rails b'RspecNestedScaffold\n===================\n\nThis plugin will generate a fully spec-ed nested resource scaffold.\n\n\nExample\n=======\n\n./script/generate rspec_nested_scaffold --owner=User Entry body:text\n\n\nTODO\n====\n[ ] generate the appropriate nested route\n\nCopyright (c) 2008 Jeremy Friesen, released under the MIT license\n'
Mofo is a fast and simple microformat parser, based on a concise DSL and Hpricot. b'  mofo.          \n- a ruby microformat parser -\n                     engine\n                     dsl\n                     helper\n                     toy\n\n= Get Started Immediately\n\n  $ irb -rubygems \n  >> require \'mofo\'\n  => true\n\n  >> fireball = HCard.find \'http://flickr.com/people/gruber/\'\n  => #<HCard:0x6db898 ... >\n\n  >> fireball.nickname\n  => "gruber"\n\n  >> fireball.url\n  => "http://daringfireball.net/"\n\n  >> fireball.n.family_name\n  => "Gruber"\n\n  >> fireball.title\n  => "Raconteur"\n\n  >> fireball.adr.locality\n  => "Philadelphia"\n\n  >> fireball.logo\n  => "http://static.flickr.com/9/buddyicons/44621776@N00.jpg?1117572751"\n\n= Grab It\n\n  $ git clone git://github.com/defunkt/mofo.git\n  $ open http://github.com/defunkt/mofo\n\n= Microwhozit?\n\n  Microformats are tiny little markup definitions built on top of, usually, \n  HTML or XHTML.  \n\n  You have a blog.  You have recent posts on your blog\'s index page.  You have\n  an Atom feed.  You have recent posts on your blog\'s Atom feed.  See where I\'m\n  going with this?\n\n  The hAtom microformat (or uformat) can be embedded in your existing HTML by\n  setting CSS classes with semantic meaning inside of your posts.  A class to signify\n  a post is contained within this div, a class to signify the contents of this\n  h3 are the post\'s title, a class to signify the contents of this span is the\n  blog post\'s author, etc.\n\n  You can then use a microformat parser (like, say, mofo) to extract this information\n  as you would from an Atom feed.  Hell, you can even convert hAtom to Atom.  It\'s an\n  insta-feed!  No extra code required!\n\n  You\'re already doing the work, you see.  Microformats are everywhere.  We just need\n  to set them free.\n\n  Check it:\n\n    <div class="post">\n      <h3>Megadeth Show Last Night</h3>\n      <span class="subtitle">Posted by Chris on June 4th</span>\n      <div class="content">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  Right?  Normal.  Here\'s the same post marked up with hAtom:\n\n    <div class="post hentry">\n      <h3 class="entry-title">Megadeth Show Last Night</h3>\n      <span class="subtitle">Posted by <span class="author vcard fn">Chris</span> on \n      <abbr class="updated" title="2006-06-04T10:32:10Z">June 4th</abbr></span>\n      <div class="content entry-content">Went to a show last night.  Megadeth.  It was alright.</div>\n    </div>\n\n  All I did was add the hentry, entry-title, and entry-content classes to existing containers.  Then I\n  went ahead and wrapped the date in an <abbr> tag giving it a title in the microformat-standard way.  Finally\n  I put a div around Chris signifying it as the author field of the hEntry and making it a valid hCard by\n  including the vcard and fn classes.  It\'s really not all that hard.  Did I mess it up?  Maybe, but I\'m sure I got\n  close.  And I didn\'t even use a reference.  Practice.\n\n  How\'d we parse this, tho?\n\n    $ irb -rubygems\n    >> require \'mofo\'\n    => true\n\n    >> post = HEntry.find \'http://milesofstyle.org/posts/351-megadeth-show-last-night.html\'\n    => #<HEntry:0x6db898 ... > \n\n    >> post.entry_title\n    => "Megadeth Show Last Night"\n\n    >> post.properties\n    => ["entry_content", "updated", "author", "entry_title"]\n\n    >> post.updated\n    => Sun Jun 04 10:32:10 UTC 2006\n\n    >> post.updated.class\n    => Time\n\n    >> post.author\n    => #<HCard:0x6e7b98 @properties=["fn"], @fn="Chris">\n\n    >> post.author.fn\n    => "Chris"\n\n    >> post.entry_content\n    => "Went to a show last night.  Megadeth.  It was alright."\n\n  That\'s, like, stupid easy.  If HEntry.find gets back more than one hEntry, you\'ll get an array.\n\n= Mofo#find\n\n  Everything revolves around the #find method.  Sound familiar?  Yeah.\n\n    >> Microformat.find "http://valid-url.com"\n    >> Microformat.find "/path/to/existing/file"\n    >> Microformat.find :text => "microformat text"\n   \n  Also, #find can be told explicitly to find all (returning an array on failure) or only find\n  the first (returning nil on failure).\n\n    >> Microformat.find :all => "/existing/file"\n    => [ array of microformat objects ] \n\n    >> Microformat.find :first => "/existing/file"\n    => microformat object\n\n    >> Microformat.find "/existing/file"\n    => either an array of objects or just one object\n\n  :all and :first go outside of :text.\n\n    >> Microformat.find :all => { :text => \'mfin text\' } \n\n  That\'s it.  Some microformats take specific options.\n\n= Microformats\n\n  Here are the currently implemented microformats, along with a site you\n  can use them on today.  We want more, better, faster, stat.\n\n  formats:\n  - hCard     [ flickr profiles    ]\n  - hCalendar [ upcoming.org       ]\n  - hReview   [ cork\'d reviews     ] \n  - hEntry    [ err the blog posts ]\n  - hResume   [ linkedin.com       ]\n  - xoxo      [ chowhound.com      ]\n  - geo       [ upcoming.org       ]\n  - adr       [ upcoming.org       ]\n  - xfn       [ linkedin.com       ]\n\n  patterns:\n  - rel-tag \n  - rel-bookmark\n  - include-pattern\n\n= Ruby on Rails\n\nmofo doubles as a Rails plugin.  Just drop it into vendor/plugins and you are good to go, with all the \navailable microformat parsers loaded into your application.\n\nmofo classes are YAML and Marshal approved.  This means you can cache them with DRb or memcached, or store\nthem in a session.\n\n= More Info\n\n  >> http://microformats.org/ \n  => "The homepage, check"\n  >> http://microformats.org/wiki/\n  => "The wiki, check"\n  >> http://blog.labnotes.org/category/microformats/\n  => "Assaf Arkin knows his MFin\' stuff"\n  >> http://allinthehead.com/\n  => "Drew McClellan, Microformat wizard"\n  >> http://mofo.rubyforge.org/\n  => "mofo HQ"\n\n= Other Parsers\n\n  >> Scrapi\n  => http://rubyforge.org/projects/scrapi/\n  >> uformats\n  => http://rubyforge.org/projects/uformats\n\n= Contributors\n\n  >> Steve Ivy\n  >> Olle Jonsson\n  >> Christian Carter\n  >> Grant Rodgers\n  >> Denis Defreyne\n  >> Andrew Turner\n  >> Mark Murphy\n\n= Author\n\n  >> Chris Wanstrath\n  => chris[at]ozmm[dot]org\n'
A binding for the Fire Eagle API in Python 
Redmine plugin to allow users to email tickets to the Redmine issue tracking system b"= Ticket emailer plugin for Redmine\n\nA plugin to allow users to email new tickets / issues to Redmine's issue tracking system on a per-project level.\n"
Don't use this. It's slow and requires ruby and sake. Use this: http://github.com/wesabe/git-tools b'h1. Sake-Git\n\n*NOTE:* These tasks are being deprecated in favor of thor-git, availble at http://github.com/cypher/thor-git. I\'m continuing to work on them there, but decided to switch from @sake@ to @thor@ because @sake@, as cool as it is, still uses @rake@. Check out @thor@ at http://github.com/wycats/thor.\n\nHere are a few Sake tasks to make developing with Git easier (and some corresponding Git aliases to \nmake invoking them easier). Install them with:\n\n<pre>\n$ rake install\n</pre>\n\nOr, if you don\'t want to actually download this stuff, just use Sake:\n\n<pre>\n$ sake -i "http://github.com/eventualbuddha/sake-git/tree/master/git.rake?raw=true"\n</pre>\n\nh2. Common Commands\n\n<pre>\n$ sake git:update\n</pre>\n\nUpdates your current git repository, autodetecting whether you have a regular ol\' git project or a\ngit-svn project. I recommend aliasing it @git up@.\n\n<pre>\n$ sake git:push\n</pre>\n\nCommits any changes in your current branch not yet pushed upstream _and_ ports \'em over to master. I use @git ci@ for this one.\n\n<pre>\n$ sake git:open [NAME=mynewbranch]\n</pre>\n\nCreates a new branch off master. Think of this as opening an issue, or a new path of development. I use @git open@ for this one, allowing you to call it like so:\n\n<pre>\n$ git open mynewbranch\n</pre>\n\nYou can even call it without the branch name and it\'ll ask you for it:\n\n<pre>\n$ git open\n* Name your branch: mynewbranch\n</pre>\n\n<pre>\n$ sake git:close [NAME=mynewbranch]\n</pre>\n\nThis is open\'s brother, and should be used when you finish something and have already moved it to\nmaster or upstream. If you haven\'t yet, don\'t worry - this won\'t eat your data. Like open, this one I alias to @git close@.\n\nh2. Credits\n\nThanks to Coda Hale and everyone else at Wesabe for trying these out when I first wrote them and\ncontributing tasks of their own, and to the Rubinius folks for giving me the idea in the first place.\n'
J2ME MIDlet that uses JSR179 to get loc and pushes to FE b"Here's a very simple J2ME app that updates Fire Eagle using user-entered text \nor lat/lon from GPS-enabled phones (using JSR 179).\n\nIt won't work if your phone doesn't support JSR 179 (but it should be pretty easy to cut it down to run\non any phone)\n\nExecutables are available in /dist. You can download to PC and Bluetooth to your phone \n(you can take the JAD, though really only the JAR is needed). \nOr you can try to directly load the JAR to your phone via http://tinyurl.com/yqdfez\n\nOnce you get it installed, you may want to set permissions so that it doesn't constantly hassle you\nfor permission to connect to the network or access location services.  On Nokia S60 phones\nyou can adjust permissions through Tools->App. mgr (select the FireEagle app and scroll around\nto find Network access and Positioning)\n\nIt uses a library for doing OAuth stuff.  The JAR for that is in /lib (source code coming soon).\nThe javadoc for FE_OAuth.jar is not great yet -- if you're curious, a good starting place is\nthe javadoc for FireEagleConsumer (and the MIDlet is a pretty good example of how to use FireEagleConsumer.\n\n"
random shell scripts 
 b'** THIS PROJECT IS NOT MAINTAINED **\n\nEarth - it\'s really, really big\n\nEarth allows you to find files across a large network of machines and track\ndisk usage in real time. It consists of a daemon that indexes filesystems in\nreal time and reports all the changes back to a central database. This can then\nbe queried through a simple, yet powerful, web interface. Think of it like\nSpotlight or Beagle but operating system independent with a central database\nfor multiple machines with a web application that allows novel ways of\nexploring your data.\n\nEarth is initially focused on managing the explosion of data that occurs in\ndigital visual effects work.\n\nEarth is free and open source software. It is licensed under the The\nGNU General Public License (GPL) version 2. See the file COPYING for details.\n\nThe plugin "Faster Nested Set", which is distributed as part of this project is\nlicensed separately under the GNU Lesser General Public License (LGPL) version 3.\nSee the file vendor/plugins/faster_nested_set/COPYING for details.\n\nFor more info see:\nhttp://open.rsp.com.au/projects/earth\n'
Generator framework for your own Ruby framework b'= RubiGen - Ruby Generator Framework\n\n* http://drnic.github.com/rubigen\n\n== DESCRIPTION:\n\nA framework to allow Ruby applications to generate file/folder stubs \n(like the `rails` command does for Ruby on Rails, and the \'script/generate\'\ncommand within a Rails application during development).\n\n== Background\n\nRubiGen is originally extracted from Ruby on Rails (specifically the rails_generator\nfrom its railties gem).\n\nThe rails_generator was hardcoded with Rails-specific dependencies (`RAILS_ROOT`), \nRails generators (\'app\' = Rails application; \'model\' = Rails model+tests+migration),\nand generally assumed it was the only generator framework within the Ruby world (it was).\nSo, any RubyGem whose name ended with \'_generator\' was assumed to be a generator for\na Rails application.\n\nBut if you are developing an Adhearsion application, then you may want a different set of generators.\nIf you are developing a RubyGem, then you will want a different set of generators.\n\nRubiGen exists to give different development environments their own generator framework.\n\n=== Thanks go to...\n\nJeremy Kemper wrote the original Rails Generator, which is 95% of the basis of RubiGen. He\'s awesome.\n\n== Installation\n\nRubiGen is only required at development time, and normally isn\'t required at deployment time\n(unless your application uses it to generate files at runtime).\n\nOn your development machine:\n\n    sudo gem install rubigen\n    \n== Usage\n\nRubiGen comes with a stand-alone executable to allow you to invoke generators:\n\nFor example, to run the rails\' `model` generator:\n\n    rubigen rails model Person name:string\n\nwould replace the normal\n\n    script/generate model Person name:string\n\nRubiGen has been traditionally integrated into another project, such as `rails`, `newgem` or `camping`,\nrather than be used on its own.\n\nThese frameworks might use RubiGen for two reasons:\n  \n1. To generate an initial stub for developers, e.g. `rails` generated a stub to write a Rails application.\n   `newgem` generates a stub to write a RubyGem.\n   BTW - RubiGen has a builtin application `ruby_app` which generates a bare-bones Ruby application\n   stub (lib, test, and script folders, plus a Rakefile, and a script/generate script)\n2. To generate components within their development areas, e.g. Rails had its `script/generate`\n   script within each Rails application, which hooked back into the rails_generator to lookup\n   and execute generators.\n\nSo, there are two steps to integrating RubiGen into your framework:\n\n1. Use it to generate an initial stub for the developers of your framework. This would create the folders \n   (`lib/app`, `test`, `script`, `doc`, `log`, etc) and starting files (`Rakefile`, \n   `README.txt`, `test/test_helper.rb` etc). Importantly, it would generate a `script/generate` file.\n   The `script/generate` file (example below) will allow developers of your framework to \n   generate components/extensions within the framework.\n   RubiGen allows you to restrict which generators are available. For example, within\n   RubyGem development environment (as generated by `newgem`), the `script/generator`\n   only shows `rubygem`-related generators. Rails could restrict `script/generator`\n   to only show Rails related generators\n2. Your framework RubyGem (e.g. `newgem` or `rails`) needs to add `rubigen` as a \n   dependency, so that users of your RubyGem can access the generator framework.\n   \n= Creating generators\n\nThere are two types of generators:\n\n1. Application Generators - used by developers of your framework to get started. \n   Generally, you will create one Application Generator for your framework.\n   It generates a base stub (such as the `rails` stub for new Rails applications)\n   for your framework users.\n2. Component Generators - used by developers to extend their application.\n   You may include 1+ built-in generators with your framework.\n   Developers can also write generators for your framework, and like Rails\' generator\n   install them in various places and have access to their via RubiGen.\n   \n== Creating an Application Generator for your Framework\n\nWithout RubiGen, to give your users a head start and create a stub for them, you will \ncopiously use `mkdir_p` and `File.open`. Your script will either be primitive (only\ncreate the bare folders and very few files) or it will be very long and unreadable\n(ok, perhaps I\'m just talking about the `newgem` script, which I am dubiously responsible\nfor... :P).\n\nWith RubiGen, you can create stubs using powerful, yet simple, syntax. Templates are\nextracted into a `templates` folder, and activating the generator from a script requires\nonly a few lines of code.\n\nThese are the `newgem` files related to its Application Generator.\n\n    bin/\n      bin/newgem        # Application Generator script; Usage: newgem gemname [options]\n    app_generators/\n      app_generators/newgem/\n        app_generators/newgem/newgem_generator.rb\n        app_generators/newgem/USAGE\n        app_generators/newgem/templates/\n          app_generators/newgem/templates/app.rb\n          app_generators/newgem/templates/History.txt\n          app_generators/newgem/templates/... lots and lots of templates\n\nThe `bin/newgem` script is very simple, and looks like:\n\n    require \'rubygems\'\n    require \'rubigen\'\n\n    if %w(-v --version).include? ARGV.first\n      require \'newgem/version\'\n      puts "#{File.basename($0)} #{Newgem::VERSION}"\n      exit(0)\n    end\n\n    require \'rubigen/scripts/generate\'\n    RubiGen::Base.use_application_sources!\n    RubiGen::Scripts::Generate.new.run(ARGV, :generator => \'newgem\')\n\nYou can copy and paste this for your own generator script, and place it in your RubyGem\'s `bin` folder.\nChange `newgem` to your RubyGem\'s name in the script above (and in all the folders listed above too)\n\nNOTE: If you leave `newgem` there, then it will execute the `newgem_generator.rb` generator; \nas the generators are loaded from all RubyGem\'s having `/app_generators` folders.\n\nSo, for your RubyGem, you need to keep the `/app_generators` folder (as you are creating an \nApplication Generator, not a Component Generator), but change `newgem` to `your gem name` in\nall the subfolders and files. ESPECIALLY `newgem_generator.rb` -> `yourgem_generator.rb`,\nas this is how the generator is discovered (via `RubiGen::Base.use_application_sources!`).\n\nAll the generator work is performed within `yourgem_generator.rb`. A stub for it will be:\n\n    require \'rbconfig\'\n\n    class YourgemGenerator < RubiGen::Base\n      DEFAULT_SHEBANG = File.join(Config::CONFIG[\'bindir\'],\n                                  Config::CONFIG[\'ruby_install_name\'])\n\n      default_options   :shebang => DEFAULT_SHEBANG,\n                        :an_option => \'some_default\'\n  \n      attr_reader :app_name, :module_name\n  \n      def initialize(runtime_args, runtime_options = {})\n        super\n        usage if args.empty?\n        @destination_root = args.shift\n        @app_name     = File.basename(File.expand_path(@destination_root))\n        @module_name  = app_name.camelize\n        extract_options\n      end\n\n      def manifest\n        # Use /usr/bin/env if no special shebang was specified\n        script_options     = { :chmod => 0755, :shebang => options[:shebang] == DEFAULT_SHEBANG ? nil : options[:shebang] }\n        windows            = (RUBY_PLATFORM =~ /dos|win32|cygwin/i) || (RUBY_PLATFORM =~ /(:?mswin|mingw)/)\n\n        record do |m|\n          # Root directory and all subdirectories.\n          m.directory \'\'\n          BASEDIRS.each { |path| m.directory path }\n      \n          # Root\n          m.template_copy_each %w( Rakefile )\n          m.file_copy_each     %w( README.txt )\n\n          # Test helper\n          m.template   "test_helper.rb",        "test/test_helper.rb"\n\n          # Scripts\n          %w( generate ).each do |file|\n            m.template "script/#{file}",        "script/#{file}", script_options\n            m.template "script/win_script.cmd", "script/#{file}.cmd", \n              :assigns => { :filename => file } if windows\n          end\n       \n        end\n      end\n\n      protected\n        def banner\n          <<-EOS\n    Create a stub for #{File.basename $0} to get started.\n\n    Usage: #{File.basename $0} /path/to/your/app [options]"\n    EOS\n        end\n\n        def add_options!(opts)\n          opts.separator \'\'\n          opts.separator "#{File.basename $0} options:"\n          opts.on("-v", "--version", "Show the #{File.basename($0)} version number and quit.")\n        end\n    \n      # Installation skeleton.  Intermediate directories are automatically\n      # created so don\'t sweat their absence here.\n      BASEDIRS = %w(\n        doc\n        lib\n        log\n        script\n        test\n        tmp\n      )\n    end\n\nEasy peasy.\n\n== Creating a Component Generator for your Framework\n\n'
The e-commerce framework built in Django 
New Gem Generator for RubyGems b"= New Gem Generator\r\n\r\n* http://newgem.rubyforge.org\r\n\r\n== DESCRIPTION:\r\n\r\nQuickly bundle any Ruby libraries into a RubyGem and share it with the world, your colleagues, or perhaps just with yourself amongst your projects.\r\n\r\nRubyGems are centrally stored, versioned, and support dependencies between other gems, so they are the ultimate way to bundle libraries, executables, associated tests, examples, and more.\r\n\r\nWithin this gem, you get one thing - <code>newgem</code> - an executable to create your own gems. Your new gems will include designated folders for Ruby code, test files, executables, and even a default website page for you to explain your project, and which instantly uploads to RubyForge website (which looks just like this one by default)\r\n  \r\n== BASIC USAGE:\r\n\r\nGo to the folder where you want to create your new gem folder structure, and run the <code>newgem</code> command to generate your gem scaffolding.\r\n\r\n  cd ~/ruby_projects\r\n  $ newgem wizzo\r\n          create  \r\n          create  doc\r\n          create  lib\r\n          create  script\r\n          create  tasks\r\n          create  lib/wizzo\r\n          create  History.txt\r\n          create  Rakefile\r\n          create  README.rdoc\r\n          create  PostInstall.txt\r\n          create  lib/wizzo.rb\r\n      dependency  install_test_unit\r\n          create    test\r\n          create    test/test_helper.rb\r\n          create    test/test_wizzo.rb\r\n      dependency  install_website\r\n          create    website/javascripts\r\n          create    website/stylesheets\r\n          create    config\r\n          exists    script\r\n          exists    tasks\r\n          create    website/index.txt\r\n          create    website/index.html\r\n          create    config/website.yml.sample\r\n          create    script/txt2html\r\n      dependency    plain_theme\r\n          exists      website/javascripts\r\n          exists      website/stylesheets\r\n          create      website/template.html.erb\r\n          create      website/stylesheets/screen.css\r\n          create      website/javascripts/rounded_corners_lite.inc.js\r\n      dependency  install_rubigen_scripts\r\n          exists    script\r\n          create    script/generate\r\n          create    script/destroy\r\n          create  script/console\r\n          create  Manifest.txt\r\n          readme  readme\r\n    Important\r\n    =========\r\n\r\n    * Open Rakefile\r\n    * Update missing details (gem description, dependent gems, etc.)\r\n\r\nYou can generate test::unit or rspec test stubs via the -T, --test-with options (shoulda coming soon)\r\n\r\n== SYNOPSIS:\r\n\r\nNow modify the constants at the top of *config/hoe.rb*, with your name, email and the location where you'll host your website for the gem. The defaults are tied to RubyForge for uploading the gems and the website.\r\n\r\n== REQUIREMENTS:\r\n\r\n* hoe\r\n* rubyforge\r\n\r\n== INSTALL:\r\n\r\nThe <code>newgem</code> application is distributed itself as a RubyGem and is available immediately after installation.\r\n\r\n  sudo gem install newgem\r\n\r\nAlternately, download the gem and install manually.\r\n\r\n== TICKETS:\r\n\r\nTickets or suggestions can be raised at http://drnic.lighthouseapp.com/projects/18881-newgem/overview\r\n\r\n== DOES IT WORK?\r\n\r\nMuch of newgem's behaviour is covered by functional tests (see features at http://github.com/drnic/newgem/tree/master/features).\r\n\r\nWith each commit to the master branch of the git repository, these functional tests and the unit tests are run via a continuous integration server. \r\n\r\nCurrent build status: http://runcoderun.com/drnic/newgem\r\n\r\n== TUTORIALS:\r\n\r\n* Home page is a full tutorial - http://newgem.rubyforge.org\r\n* Original blog article and tutorial - http://drnicwilliams.com/2006/10/11/generating-new-gems/\r\n* Tutorial: Publishing RubyGems with Hoe - http://nubyonrails.com/articles/2007/06/15/tutorial-publishing-rubygems-with-hoe by Geoffrey Grosenbach\r\n* Using New Gem Generator in Windows - http://codeconversations.blogspot.com/2007/07/using-new-gem-generator-in-windows_8009.html by Jorge Cangas\r\n* Building a Ruby Gem - http://bogojoker.com/blog/2008/05/building-a-ruby-gem/ by Joseph Pecoraro (includes a Problems/Troubleshooting section!!)\r\n\r\n== LICENSE:\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2006-2008 Dr Nic Williams\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n"
Composite Primary Keys support for Active Record b'= Composite Primary Keys for ActiveRecords\r\n\r\n== Summary\r\n\r\nActiveRecords infamously doesn\'t support composite primary keys.\r\nThis gem, composite_primary_keys, or CPK for short, extends ActiveRecord\r\nto support composite keys.\r\n\r\n== Installation\r\n\r\n    gem install composite_primary_keys\r\n\r\nIf you are using Rails add the following to your Gemfile:\r\n\r\n  gem \'composite_primary_keys\', \'=x.x.x\' (see next section about what verison to use)\r\n\r\n== Versions\r\n\r\nEvery major version of ActiveRecord has included numerous internal changes.  As a result,\r\nCPK has to be rewritten for each version of ActiveRecord.  To help keep\r\nthings straight, here is the mapping:\r\n\r\n    Version 8.x is designed to work with ActiveRecord 4.2.x\r\n    Version 7.x is designed to work with ActiveRecord 4.1.x\r\n    Version 6.x is designed to work with ActiveRecord 4.0.x\r\n    Version 5.x is designed to work with ActiveRecord 3.2.x\r\n    Version 4.x is designed to work with ActiveRecord 3.1.x\r\n\r\nRun the following command to list available versions:\r\n\r\n    gem list composite_primary_keys -ra\r\n\r\n== The basics\r\n\r\nA model with composite primary keys is defined like this:\r\n\r\n  class Membership < ActiveRecord::Base\r\n    self.primary_keys = :user_id, :group_id\r\n    belongs_to :user\r\n    belongs_to :group\r\n    has_many :statuses, :class_name => \'MembershipStatus\', :foreign_key => [:user_id, :group_id]\r\n  end\r\n\r\nNote the addition of the line:\r\n\r\n    self.primary_keys = :user_id, :group_id\r\n\r\n\r\nA model associated with a composite key model is defined like this:\r\n\r\n  class MembershipStatus < ActiveRecord::Base\r\n    belongs_to :membership, :foreign_key => [:user_id, :group_id]\r\n  end\r\n\r\nThat is, associations can include composite keys too.  All Rails association types are supported. Nice.\r\n\r\n== Usage\r\n\r\nOnce you\xe2\x80\x99ve created your models to specify composite primary keys (such as the Membership class)\r\nand associations (such as MembershipStatus#membership), you can uses them like any normal model\r\nwith associations.\r\n\r\nBut first, lets check out our primary keys.\r\n\r\n  MembershipStatus.primary_key # => "id"    # normal single key\r\n  Membership.primary_key  # => [:user_id, :group_id] # composite keys\r\n  Membership.primary_key.to_s # => "user_id,group_id"\r\n\r\nNow we want to be able to find instances using the same syntax we always use for ActiveRecords\xe2\x80\xa6\r\n\r\n  MembershipStatus.find(1)    # single id returns single instance\r\n  => <MembershipStatus:0x392a8c8 @attributes={"id"=>"1", "status"=>"Active"}>\r\n\r\n  Membership.find([1,1])  # composite ids returns single instance\r\n  => <Membership:0x39218b0 @attributes={"user_id"=>"1", "group_id"=>"1"}>\r\n\r\nNotice the use of an array to specify the composite key values.\r\n\r\nNOTE - API CHANGE.  CPK Version 6.x and earlier used to allow composite keys to be listed out\r\nlike this:\r\n\r\n  Membership.find(1,1)\r\n\r\nThis usage is no longer supported.\r\n\r\n== Databases\r\n\r\nCPK supports the following databases:\r\n\r\n * PostgreSQL\r\n * MySQL\r\n * MariaDB\r\n * Oracle\r\n * DB2\r\n * SQLite\r\n * SQLServer\r\n\r\n== Tests\r\n\r\nTravis build status: {<img src="https://travis-ci.org/composite-primary-keys/composite_primary_keys.svg" alt="Build Status" />}[https://travis-ci.org/composite-primary-keys/composite_primary_keys]\r\n\r\nSee test/README_tests.rdoc for more information about running tests.\r\n\r\n== Questions, Discussion and Contributions\r\n\r\nFor help please visit https://github.com/composite-primary-keys/composite_primary_keys.\r\n\r\n== Author\r\n\r\nFirst version was written by Dr Nic Williams.\r\n\r\nMaintained by Charlie Savage\r\n\r\nContributions by many!\r\n\r\n'
Tired of repeating the same basic steps every time you start a Rails project? This is the start of a basic rails app with my usual plugins, css frameworks, etc installed. b"I've gotten weary of starting a Rails project and always having to go\nthrough the same 500 steps to get it set up 'just right'. So this is\nmy start at a Rails project template.\n\nIt is populated with the following:\n\nComponent       Version     Notes\n---------       -------     -----\nRails           2.0.2       frozen in vendor\n\nexception_notification      http://svn.rubyonrails.org/rails/plugins/exception_notification/\nquery_reviewer              http://code.google.com/p/query-reviewer/\nRSpec           1.1.3       http://rspec.info\ntextmate_footnotes          http://macromates.com/svn/Bundles/trunk/Bundles/Ruby%20on%20Rails.tmbundle/Support/plugins/footnotes-edge\nwill_paginate               http://github.com/mislav/will_paginate/tree/master\nxss_terminate               http://code.google.com/p/xssterminate/\nblueprintcss    0.7.1       http://code.google.com/p/blueprintcss/\n\n\nInstallation:\n-------------\n\n1. git clone git@github.com:mlarocque/rails-template.git\n2. Edit the database.yml file as appropriate\n3. rake db:migrate\n4. Profit (?)\n"
BooleanWebService(:isitchristmas) => false. Well, unless it's christmas. Then it'd be true. b"boolean_web_service\n===================\n\nOh yes I did.\n\n  >> require 'boolean_web_service'\n  => true\n  >> BooleanWebService(:israilsbroken)\n  => false\n  >> BooleanWebService('iskottkekottke.org')\n  => false\n"
Behaviour Driven Development framework for Ruby b'= RSpec\n\n* http://rspec.info\n* http://rspec.info/rdoc/\n* http://rubyforge.org/projects/rspec\n* http://github.com/dchelimsky/rspec/wikis\n* mailto:rspec-devel@rubyforge.org\n\n== DESCRIPTION:\n\nRSpec is a Behaviour Driven Development framework with tools to express executable code examples.\n\n== FEATURES:\n\n* Spec::Example provides a framework for expressing executable code examples\n* Spec::Expectations adds #should and #should_not to every object\n* Spec::Matchers provides Expression Matchers for use with #should and #should_not\n* Spec::Mocks is a full featured mocking/stubbing library\n\n== SYNOPSIS:\n\ndescribe Account do\n  context "transfering money" do\n    it "deposits transfer amount to the other account" do\n      source = Account.new(50, :USD)\n      target = mock(\'target account\')\n      target.should_receive(:deposit).with(Money.new(5, :USD))\n      source.transfer(5, :USD).to(target)\n    end\n\n    it "reduces its balance by the transfer amount" do\n      source = Account.new(50, :USD)\n      target = stub(\'target account\')\n      source.transfer(5, :USD).to(target)\n      source.balance.should == Money.new(45, :USD)\n    end\n  end\nend\n\n$ spec spec/account_spec.rb --format nested\nAccount\n  transfering money\n    deposits transfer amount to the other account\n    reduces its balance by the transfer amount\n    \n2 examples, 0 failures\n\n== INSTALL:\n\n  [sudo] gem install rspec\n\n or\n\n  git clone git://github.com/dchelimsky/rspec.git\n  cd rspec\n  rake gem\n  rake install_gem\n'
Trac plugin for github integration 
Little tidbits and modules I've written 
A branch of the RubyCAS-Client project to add a Merb filter b'= RubyCAS-Client\n\nAuthor::    Matt Zukowski <matt AT roughest DOT net>; inspired by code by Ola Bini <ola.bini AT ki DOT se> and Matt Walker <mwalker AT tamu DOT edu>\nCopyright:: (c) 2008 Urbacon Ltd.\nLicense::   GNU Lesser General Public License v2.1 (LGPL 2.1)\nWebsite::   http://code.google.com/p/rubycas-client and http://rubyforge.org/projects/rubycas-client\n\n\n=== RubyCAS-Client is a Ruby client library for Yale\'s Central Authentication Service (CAS) protocol.\n\nCAS provides a secure single sign on solution for web-based applications. The user logs in to your\norganization\'s CAS server, and is automatically authenticated for all other CAS-enabled applications.\n\nFor general information about the open CAS protocol, please have a look at http://www.ja-sig.org/products/cas.\n\nIf your organization does not already have a CAS server, you may be interested in RubyCAS-Client\'s sister project,\nRubyCAS-Server[http://code.google.com/p/rubycas-server/].\n\n\n== Getting help and reporting problems\n\nIf you need help, try posting to the RubyCAS discussion group at http://groups.google.com/group/rubycas-server.\n\nTo report problems, please use the Google Code issue tracker at http://code.google.com/p/rubycas-client/issues/list.\n\n\n== Installation\n\nYou can download the latest version of RubyCAS-Client from the project\'s rubyforge page at \nhttp://rubyforge.org/projects/rubycas-client.\n\nHowever, it is easier to install the CAS client into a Ruby on Rails app as a plugin:\n\n  cd <your rails app>\n  ./script/plugin install http://rubycas-client.googlecode.com/svn/trunk/rubycas-client\n\nAlternatively, the library is also installable as a RubyGem[http://rubygems.org]:\n\n  gem install rubycas-client\n  \nIf your Rails application is under Subversion control, you can also install the plugin as an svn:external, ensuring that\nyou always have the latest bleeding-edge version of RubyCAS-Client:\n\n  ./script/plugin install -x http://rubycas-client.googlecode.com/svn/trunk/rubycas-client\n\n\n== Usage Examples\n\nAlthough RubyCAS-Client can be used with other web Frameworks (for example Camping), the following examples\nare aimed at {Ruby on Rails}[http://rubyonrails.org].\n\n==== Using RubyCAS-Client in Rails controllers\n\n<i>Note that from this point on we are assuming that you have a working CAS server up and running!</i>\n\nAfter installing RubyCAS-Client as a plugin (see above), add the following to your app\'s <tt>config/environment.rb</tt>:\n  \n  CASClient::Frameworks::Rails::Filter.configure(\n    :cas_base_url => "https://cas.example.foo/"\n  )\n  \n(Change the <tt>:cas_base_url</tt> value to your CAS server\'s base URL; also note that many CAS servers are configured\nwith a base URL that looks more like "https://cas.example.foo/cas".)\n\nThen, in your <tt>app/controllers/application.rb</tt> (or in whichever controller you want to add the CAS filter for):\n\n  before_filter CASClient::Frameworks::Rails::Filter\n  \nThat\'s it. You should now find that you are redirected to your CAS login page whenever you try to access any action\nin your protected controller. You can of course qualify the <tt>before_filter</tt> as you would with any other ActionController\nfilter. For example: \n\n  before_filter CASClient::Frameworks::Rails::Filter, :except => [ :unprotected_action, :another_unprotected_action ]\n\n<b>Once the user has been authenticated, their authenticated username is available under <tt>session[:cas_user]</tt>,</b>\nIf you want to do something with this username (for example load a user record from the database), you can append another \nfilter method that checks for this value and does whatever you need it to do.\n\n\n==== A more complicated example\n\nHere is a more complicated configuration showing most of the configuration options along with their default values\n(this does not show proxy options, which are covered in the next section):\n\n  # enable detailed CAS logging\n  cas_logger = CASClient::Logger.new(RAILS_ROOT+\'/log/cas.log\')\n  cas_logger.level = Logger::DEBUG\n\n  CASClient::Frameworks::Rails::Filter.configure(\n    :cas_base_url  => "https://cas.example.foo/",\n    :login_url     => "https://cas.example.foo/login",\n    :logout_url    => "https://cas.example.foo/logout",\n    :validate_url  => "https://cas.example.foo/proxyValidate",\n    :session_username_key => :cas_user,\n    :session_extra_attributes_key => :cas_extra_attributes\n    :logger => cas_logger,\n    :authenticate_on_every_request => true\n  )\n\nNote that it is normally not necessary to specify <tt>:login_url</tt>, <tt>:logout_url</tt>, and <tt>:validate_url</tt>.\nThese values are automatically set to standard CAS defaults based on the given <tt>:cas_base_url</tt>.\n\nThe <tt>:session_username_key</tt> value determines the key under which you can find the CAS username in the Rails session hash.\n\nAny additional info that the CAS server might have supplied about the user during authentication will be found under the\n<tt>:session_extra_attributes_key</tt> value in the Rails session hash (i.e. given the above configuration, you would find this\ninfo under <tt>session[:cas_extra_attributes]</tt>).\n\nAn arbitrary Logger instance can be given as the :logger parameter. In the example above we log all CAS activity to a \n<tt>log/cas.log</tt> file in your Rails app\'s directory.\n\n==== Re-authenticating on every request (i.e. the "single sign-out problem")\n\nBy default, the Rails filter will only authenticate with the CAS server when no session[:cas_user] value exists. Once the user \nhas been authenticated, no further CAS forwarding is done until the user\'s session is wiped. This saves you\nthe trouble of having to do this check yourself (since in most cases it is not advisable to go through the CAS server\non every request -- this is slow and would potentially lead to problems, for example for AJAX requests). However,\nthe disadvantage is that the filter no longer checks to make sure that the user\'s CAS session is still actually open.\nIn other words it is possible for the user\'s authentication session to be closed on the CAS server without the\nclient application knowing about it.\n\nIn the future RubyCAS-Client will support the new "Single Sign-Out" functionality in CAS 3.1, allowing the server to \nnotify the client application that the CAS session is closed, but for now it is up to you  to handle this by, for example, \nby wiping the local session[:cas_user] value periodically to force a CAS re-check.\n \nAlternatively, it is possible to disable this authentication persistence behaviour by setting the <tt>:authenticate_on_every_request</tt>\nconfiguration option to true as in the example above.\n\n\n==== Defining a \'logout\' action\n\nYour Rails application\'s controller(s) will probably have some sort of logout function. In it you will likely reset the \nuser\'s session for your application, and then redirect to the CAS server\'s logout URL. Here\'s an example of how to do this:\n\nclass ApplicationController < ActionController::Base\n  \n  # ...\n\n  def logout\n    reset_session\n    redirect_to CAS::Filter.logout_url(self, request.referer)\n  end\nend\n\n\n==== Gatewayed (i.e. optional) authentication\n\n"Gatewaying" essentially allows for optional CAS authentication. Users who already have a pre-existing CAS SSO session \nwill be automatically authenticated for the gatewayed service, while those who do not will be allowed to access the service \nwithout authentication. This is useful for example when you want to show some additional private content on a homepage to \nauthenticated users, but also want anonymous users to be able to access the page without first logging in.\n\nTo allow users to access a page without authenticatin, simply use <tt>CASClient::Frameworks::Rails::GatewayFilter</tt>\nin place of <tt>CASClient::Frameworks::Rails::Filter</tt> in your controller. For example, you may want to require\nCAS authentication for all actions in a controller except the index action:\n\n  class ExampleController < ApplicationController\n    before_filter CASClient::Frameworks::Rails::GatewayFilter, :only => :index\n    before_filter CASClient::Frameworks::Rails::Filter, :except => :index\n    \n    # ...\n  end\n  \n\n==== How to act as a CAS proxy\n\nCAS 2.0 has a built-in mechanism that allows a CAS-authenticated application to pass on its authentication to other applications.\nAn example where this is useful might be a portal site, where the user logs in to a central website and then gets forwarded to\nvarious other sites that run independently of the portal system (but are always accessed via the portal). The exact mechanism\nbehind this is rather complicated so I won\'t go over it here. If you wish to learn more about CAS proxying, a great walkthrough\nis available at http://www.ja-sig.org/wiki/display/CAS/Proxy+CAS+Walkthrough.\n\nRubyCAS-Client fully supports proxying, so a CAS-protected Rails application can act as a CAS proxy.\n\nAdditionally, RubyCAS-Client comes with a controller that can act as a CAS proxy callback receiver. This is necessary because\nwhen your application requests to act as a CAS proxy, the CAS server must contact your application to deposit the proxy-granting-ticket\n(PGT). Note that in this case the CAS server CONTACTS YOU, rather than you contacting the CAS server (as in all other CAS operations).\n\nConfused? Don\'t worry, you don\'t really have to understand this to use it. To enable your Rails app to act as a CAS proxy, \nall you need to do is this:\n\nIn your <tt>config/environment.rb</tt>:\n\n  # enable detailed CAS logging for easier troubleshooting\n  cas_logger = CASClient::Logger.new(RAILS_ROOT+\'/log/cas.log\')\n  cas_logger.level = Logger::DEBUG\n\n  CASClient::Frameworks::Rails::Filter.configure(\n    :cas_base_url => "https://cas.example.foo/",\n    :proxy_retrieval_url => "https://cas-proxy-callback.example.foo/cas_proxy_callback/retrieve_pgt",\n    :proxy_callback_url => "https://cas-proxy-callback.example.foo/cas_proxy_callback/receive_pgt",\n    :logger => cas_logger\n  )\n  \nIn <tt>config/routes.rb</tt> make sure that you have a route that will allow requests to /cas_proxy_callback/:action to be routed to the\nCasProxyCallbackController. This should work as-is with the standard Rails routes setup, but if you have disabled the default\nroute, you should add the following:\n\n  map.cas_proxy_callback \'cas_proxy_callback/:action\', :controller => \'cas_proxy_callback\'\n  \nNow here\'s a big giant caveat: <b>your CAS callback application and your CAS proxy application must run on separate Rails servers</b>.\nIn other words, if you want a Rails app to act as a CAS ticket-granting proxy, the cas_proxy_callback controller\nmust run on a different server. This is because Rails does not properly support handling of concurrent requests. The CAS proxy mechanism\nacts in such a way that if your proxy application and your callback controller were on the same server\nyou would end up with a deadlock (the CAS server would be waiting for its callback to be accepted by your Rails server,\nbut your Rails server wouldn\'t respond to the CAS server\'s callback until the CAS server responded back first).\n\nThe simplest workaround is this:\n\n1. Create an empty rails app (i.e. something like <tt>rails cas_proxy_callback</tt>)\n2. Make sure that you have the CAS plugin installed. If you installed it as a gem, you don\'t have to do anything since\n   it is already installed. If you want to install as a plugin, see the instructions in the "Installing" section above.\n3. Make sure that the server is up and running, and configure your proxy_callback_url and proxy_retrieval_url to point\n   to the new server as described above (or rather, make Pound point to the new server, if that\'s how you\'re handling https).\n   \nThat\'s it. The proxy_callback_controller doesn\'t require any additional configuration. It doesn\'t access the database\nor anything of that sort.\n\nOnce your user logs in to CAS via your application, you can do the following to obtain a service ticket that can then be used\nto authenticate another application:\n\n  service_uri = "http://some-other-application.example.foo"\n  proxy_granting_ticket = session[:cas_pgt]\n  ticket = CASClient::Frameworks::Rails::Filter.client.request_proxy_ticket(service_uri, proxy_granting_ticket).ticket\n  \n<tt>ticket</tt> should now contain a valid service ticket. You can use it to authenticate other services by sending it and \nthe service URI as parameters to your target application:\n\n  http://some-other-application.example.foo?service=#{CGI.encode(ticket.target_service)}&ticket=#{ticket.proxy_ticket}\n  \nThis is of course assuming that http://some-other-application.example.foo is also protected by the CAS filter. \nNote that you should always URI-encode your service parameter inside URIs!\n\nNote that #request_proxy_ticket returns a CASClient::ProxyTicket object, which is why we need to call #ticket on it \nto retrieve the actual service ticket string.\n\n===== Additional proxying notes and caveats\n\n<b>The proxy url must be an https address.</b> Otherwise CAS will refuse to communicate with it. This means that if you are using\nthe bundled cas_proxy_callback controller, you will have to host your application on an https-enabled server. This can be a bit\ntricky with Rails. WEBrick\'s SSL support is difficult to configure, and Mongrel doesn\'t support SSL at all. One workaround is to\nuse a reverse proxy like Pound[http://www.apsis.ch/pound/], which will accept https connections and locally re-route them\nto your Rails application. Also, note that <i>self-signed SSL certificates likely won\'t work</i>. You will probably need to use\na real certificate purchased from a trusted CA authority (there are ways around this, but good luck :)\n\n\n== SSL Support\n\nMake sure you have the Ruby OpenSSL library installed. Otherwise you may get errors like:\n\n  no such file to load -- net/https\n\nTo install the library on an Debian/Ubuntu system:\n\n  sudo apt-get install libopenssl-ruby\n\nFor other platforms you\'ll have to figure it out yourself.\n\n\n\n== License\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program (see the file called LICENSE); if not, write to the\nFree Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA'
Globalite is meant to be a breed of the best i18n /l10n plugins available for Rails.  b'\xef\xbb\xbf=Globalite\n\n\nGlobalite is meant to be a breed of the best internationalization/localization plugins available for Rails. \n\nGlobalite should provide you with a 3-in-1 solution: \n\n* Easy UI localization. \n* Rails localization. (Localization of the core functions from rails)\n* Simple yet powerful solution for user content availability in multiple languages.\n\nOn top of that:\nyml files are used for most of the localization, which makes Globalite a light and fast solution.\nThe Locale is set on the user\'s session making Globalite a perfect solution for multilingual support.\nThe developer can pass dynamic values to be used in the localization.\n\n\n==What\'s the difference between Globalite and the other existing l10n/i18n plugins?\n\nGibberish is a nice plugin but it doesn\'t handle locales, you can\'t have your application in British English and American English. I also don\'t really like the syntax :p I based the UI localization of Globalite on Chris\' work on Gibberish.\n\nGlobalize is a great plugin but man, it\'s bloated... I would like to have something a bit lighter and easier to use. (less options, less setup time, less database usage). I decided to trim down Globalize to offer less options and fulfill the needs of most developers.\n\nAlso, Globalite doesn\'t have the concept of a base language. Mainly because I think that\'s a bad idea. If you use English as your base language and you need to fix a string in English(you did a typo), you will break all the other translations. That\'s why Globalite uses localization keys only.\n\n\n\n==Usage\n\n===installation:\n\n\tscript/plugin install git://github.com/mattetti/globalite.git\n\n===UI Localization:\n\nCreate a lang folder at the root of your project. Add your localization files in the lang/ui folder if you want to localize your interface. \n\nDeclare the current locale or language in your environment.rb > \n\tGlobalite.language = :fr\n\t\nLocalize a key in your view > \n\t:localization_key.l \nor \n\t:localization_key.localize\n\n\nEasy, isn\'t?\n\nAdvanced users can also do more:\n\nYou can also pass an optional localization string only used if the localization is missing\n\t:missing_localization_key.l("text used if the key is not localized yet")\n\nYou can also pass values to the localization, and the translator can do whatever he wants with them:\t\n\t:welcome_user.l_with_args({:user => @user.name}) would render "Welcome Matt!"\nNote that variables can be used in any order the translator wants\t\n\n\t\nYou can also use pluralization right in your translations:\n  geese_amount:  we have pluralize{{geese_count}, goose, geese} in the farm!\n  \nIn your view do the following:\n  :geese_amount.l_with_args({:geese_count => @geese.count})\n  \nNote that the pluralization form of your string is optional, you could use a translation like that too:\n  cow_amount:  we have pluralize{{count}, cow} in the farm!\n\nBy pushing the pluralization to the translator, I  believe we offer more flexibility so the translation can be smoother.\nThis solution was inspired by a discussion with Ivan:\n"It\'s very difficult to just translate "prohibited this" and "from being saved" to Chinese, cause the resulting sentence will look like a machine translated one without making much sense. Not to mention Chinese handles pluralization differently, we pretty much don\'t have it. For example, we\'ll use the same word for "person" and "people", no difference. So to me, it makes sense just to replace the whole thing with one simple header message that says "Invalid attributes!" in Chinese."\n\n\n===Rails Localization:\n\nLocalize a time object by using a predefined format (defined in the date_helper_time_formats variable that you can find  in globalite/lang/rails/[lang].yml)\n\n\tGlobalite.language = :fr\n\tTime.now.l(:long)  \n\nLocalize a date object by using a predefined format (defined in the date_helper_date_formats variable that you can find  in globalite/lang/rails/[lang].yml)\n\t\n\tDate.today.l\n\nIn your views, create a select box with a list of all countries(listed in the locale language):\n\tcountry_options_for_select\t\n\nIn your views, create a select box with a list of all the months(listed in the locale language) with the current month selected:\n\tselect_month(Time.now)\n\t\nIn your views, create a set of html select-tags (one for year, month, day, hour, and minute):\n\tselect_datetime\n\t\nIn your views, create a set of html select-tags (one for year, month, and day):\n\tselect_date\n\t\nGet a number returned in currency, for instance if the locale was set to \'fr\' the returned value would be 123,00 \xe2\x82\xac but if the locale was set to \'en-US\' it would return $123.00\n\tnumber_to_currency(123)\t\n\nGet a distance of time in words localized.\n\tdistance_of_time_in_words(10.minutes.ago, Time.now)\n\t\nGet the %edit% and %new% verbs in the url tanslated\n\thttp://grandascenseurs.fr/ascenseurs/nouvelle\n\thttp://haberler.com.tr/haberler/17/duzenle\n\nActive record errors are automatically rendered in the locale language\n\n==Localize field names in validator messages\n\nBy default, here is the normal validation behavior:\n\nName cannot be empty (en)\nName nie mo\xc5\xbce by\xc4\x87 puste(y,a) (pl)\n\nHowever, Name should be replaced with \'Nazwa\' in polish.\n\nConsider the following example:\n\nvalidates_presence_of :name, :email, :age\n\nGlobaLite will try to use your yml language files entries using the following localization keys: name:, email:, age:.\nGlobalite will also try to replace model name from validation messages with localized version from yml file, i.e. the message below:\n\n8 errors prohibited this user from being saved\n                         ^^^^\n\nwill be localized and \'user\' will be replaced if \'user\' key exists in yml language file.\n\nIf the plugin can\'t find any localizations, the original field name will be used.\nYou can get rid of field name in custom validation message with :message attribute.\n\nvalidates_uniqueness_of :name, :message => \'^my message\'\n\n\n====Notes\n\nCheck on the tests in the spec folder for more examples. There\'s also a demo app available: http://github.com/mattetti/globalite-example\n\n==FAQ:\n\n===Why did you call your plugin \'Globalite\'? \n\nGlobalize was already taken ;) More seriously, I was looking for a i18n/l10n solution for a project I was working on, after few hours testing Globalize, Josh http://joshknowles.com, Matt http://heidmotron.com/ and I http://railsontherun.com saw it wouldn\'t work for us. Since we only had the choice between very simple solutions and a complicated solution, I decided to make a "lite" version of Globalize ;)\n\n==TODO:\n\n- Model i18n/l10n\n\n\n===Internationalization, Localization, Locale:\n\nInternationalization refers to the process of modifying an application\xe2\x80\x99s design so that it can support \nlocale differences like text orientation, currency, date and time format, sorting, and so forth. This can be done \nby externalizing text strings into files or a database, and by developing currency and date formatting utilities. \n\nLocalization means adapting an application to a specific language or locale; for example, by translating \ntext into multiple languages. A locale is identified by the user\xe2\x80\x99s language and country, and specifies how, for \nexample, numbers, currencies, and dates are displayed on the screen. The code for the US English locale is \nen-US. Locales are specified by RFC 3066 and consist of two parts. The first is an ISO 639 language code and \nuses lowercase letters. The second is usually an ISO 3166 country code in uppercase letters.\n[from Ruby on Rails Commerce (Hellsten, Laine)]\n\n===CREDITS:\n\nSome code was very influenced from different projects such as:\n\n* Gibberish http://require.errtheblog.com/plugins/browser/gibberish written by Chris Wanstrath (http://errtheblog.com)\n* Globalize http://www.globalize-rails.org written by too many people to list them here ;)\n* LocalizationSimplified (L10n-simplified) written By Jesper Ronn-Jensen ( http://justaddwater.dk/ )\n\n\n===Author:\n\nMatt Aimonetti  http://railsontherun.com  mattaimonetti AT gmail DOT com\n\n\n===Contributors:\n\nMert Torun (resource path localization)\nIvan Chang yuanhueichang AT gmail_DOT_com ( Chinese translation, help on the ActiveRecord msg error i18n/l10n)\nRalph von Der Heyden ralph AT rvdh_DOT_de (German translation)\njiman.ryu AT gmail http://jasonpa.tistory.com/ (bug fix)\nGuillaume Belleguic guillaume.belleguic AT oceans DOT eu (Model error handling)\nMarcus Derencius derencius AT gmail_dot_com (Brazilian Portuguese translation)\nMrPrise (Hungarian localization)\nKoen Punt (Dutch localization)\nMariano Ayesa (Spanish Spain and Argentina localization)\njyrkij http://github.com/jyrkij (Finnish)\nIlke Akdeniz (Turkish)\nDejan Dimic (Serbian)\nTosoa Bacca (Malagasy)\n\nyour name here if you submit a patch :)\n\n\n===More info:\n\nhttp://github.com/mattetti/globalite\n\nhttp://railsontherun.com/globalite\n\nSample app: http://github.com/mattetti/globalite-example\n'
get the mimetype of a file directly in Ruby b"MimetypeFu\n==========\n\nSome great Rails plugins like attachment_fu use the content type/mime type of a file to validate the instance of an object.\nThe plugin usually gets the mime type using the CGI request, however, if the file is already in the system, this approach won't work.\nAdobe Flash is also known not to send the proper mime type.\nAs an alternative, I wrote mimetype_fu, a simple plugin which will try to guess the mimetype of a file based on its extension.\n\nNote that mimetype_fu only looks at the extension to define its mime type if you are using Windows!\n\nhttp://github.com/mattetti/mimetype-fu\n\nThanks to forestcarlisle for his big report and patch.\n\n\nCopyright (c) 2008 Matt Aimonetti, released under the MIT license\n"
Active Record backup is a Rails plugin which lets you backup your database schema and content in a schema.rb file and fixtures. b'=ActiveRecord-backup\n\nUsing rake tasks, dump your schema and data into yml files. One folder gets created per SVN revision. You can then simply load any previous data using rake.\n\nprerequisite: Your project must be under SVN.\n\n==Usage:\n\nrake backup:db:dump               # create a backup folder containing your db schema and content data (see backup/{env}/build_{build number})\nrake backup:db:extract_content    # Create YAML fixtures from your DB content\nrake backup:db:extract_schema     # Dump the db schema\nrake backup:db:load               # load your backed up data from a previous build. rake backup:db:load BUILD=1182 or rake backup:db:load BUILD=1182 DUMP_ENV=production\n\n\n==Example\n\n    rake backup:db:dump\n\n    rake backup:db:load BUILD=2547\n\n==Capistrano 2 usage example   \n\n(you first need to create a backup folder) \n\n    set :backup_dir, "#{deploy_to}/backup"\n\n    before :deploy do\n      db.backup\n      db.move_backup\n    end\n\n    namespace :db do\n      desc \'create the production database\'\n      task :create do\n        run "cd #{current_release} && rake db:create RAILS_ENV=production"\n      end\n\n      desc \'dump the database schema and content\'\n      task :backup do\n        run "cd #{current_release} && rake backup:db:dump RAILS_ENV=production"\n      end\n\n      desc \'timestamp the backup file\'\n      task :move_backup do\n        run "cd #{current_release} && mv backup/production #{backup_dir}/production_#{Time.now.strftime("%Y-%m-%d_%H-%M")}"\n      end\n    end\n\n==Contributors\n Cyril Mougel : cyril.mougel@gmail.com (ar_backup windows compatible and the revision number is parsed in a more efficient way)\n\nCopyright (c) 2007 Matt Aimonetti, released under the MIT license\n'
This repository is out of date-- use the SVN repository at http://code.google.com/p/time-tracker-mac/source/browse/ 
Merb More: The Full Stack. Take what you need; leave what you don't. 
Merb Plugins: Even more modules to hook up your Merb installation 
StrokeDB is a lightweight approach to document-oriented database, currently featuring pure Ruby/JRuby implementation. 
An animator for plasma that will make use of physics equations 
A rails generator that generates a rails generator skeleton for easy creation of new rails generators. Like plugin generator but with generators. b'The Rails Generator Generator\n=============\n\nA rails generator that generates a rails generator skeleton for easy creation of new \nrails generators.\nLike plugin generator but with generators.\n\nYou can install it as a gem or copying the code into vendor/generators:\n  mkdir vendor/generators\n  cd vendor/generators\n  git clone git://github.com/spejman/rails-generator-generator.git\n\nUsage\n========\nNAME\n     generator - creates a generator\n\nSYNOPSIS\n     generator [Generator name] [<default>|base|named]\n     \n     Good names are Login ModelRelation CommonMigration.\n     Generator type argument is optional, posible values are base (will generate\n     a  Rails::Generator::Base) or named (will generate a Rails::Generator::NamedBase).\n     By default type argument is named.\n\nDESCRIPTION\n     This generator creates a generator skeleton.\n\n            \nEXAMPLE\n      ./script/generate generator Login\n\n     This will generate an generator with name login (login_generator). \n\nHOWTO Install a generator\n================================\n\nWhen you create your generator with rails generator generator, it installs it at vendor/generators.\n\nIn order to make rails take notice of the generator you have 3 options:\n 1) Keep it at vendor/generators.\n 2) Copy it into the a subir called generators in one plugins.\n 3) Create a gem whose name finishes with "_generator".\n\nExample: example_generator with 3 files example_generator.rb, USAGE and example_template.rb.\n1) \n    RAILS_ROOT/vendor/generators/example_generator/example_generator.rb\n    RAILS_ROOT/vendor/generators/example_generator/USAGE\n    RAILS_ROOT/vendor/generators/example_generator/templates/example_template.rb\n\n2)\n    RAILS_ROOT/vendor/plugins/PLUGIN_NAME/generators/example_generator/example_generator.rb\n    RAILS_ROOT/vendor/plugins/PLUGIN_NAME/generators/example_generator/USAGE\n    RAILS_ROOT/vendor/plugins/PLUGIN_NAME/generators/example_generator/templates/example_template.rb\n\n3) Into the root of the gem called example_generator (notice that the name ends with "_generator"):\n    example_generator.rb\n    USAGE\n    templates/example_template.rb\n\nCredits\n=======\n\nCreated by Sergio Espeja\nhttp://www.sergioespeja.com\nhttp://spejman.blogspot.com (spanish blog)\nhttp://spejman-on-rails.blogspot.com (english blog)\n'
jquery library for working with html tables and serializing objects to tables b'tablelib\n- jquery plugin for serializing objects to html tables\n\n    * gives you table objects and table row objects with convenience methods\n    * serialize objects to table rows and extract objects from table rows\n    * support for saving object properties as row attributes\n    * advanced querying of table rows\n\ndownload\nhttp://plugins.jquery.com/project/tableLib\n\nsource code\nhttp://github.com/gregwebs/jquery-tablelib\n\nauthor and license\n\ncopyright Greg Weber dual licensed under GPL and MIT\ndependencies\n\n    * jquery\n    * lib/iterators.js (included in tarball)\n\nusage\ncolumn1     column2\n\n              $.table(\'#my-table\').objs() // == []\n              \n              $.table(\'#my-table\').save(\n                [{column1 : val1, column2 : val2}, {column1 : val3, column2 : val4}]\n              )\n            \n\ncolumn1     column2\nval1    val2\nval3    val4\n\n              // output == [{column1 : val1, column2 : val2},{column1 : val3, column2 : val4}]\n              $.table(\'#my-table\').objs()\n            \n\nquerying example\n\n              /* output == [{column1 : val1, column2 : val2}] */\n              $.table(\'#my-table\').objs( {column1 : val1}} )\n              \n              /* output == jQuery object with just the first row */\n              $.table(\'#my-table\').rows( {column1 : val1}} )\n            \n\nAPI OVERVIEW - more documentation in the code\nCreating table objects: two ways\n\n              $(\'#my-table\').table() == $.table(\'table\')\n            \n\nA reference to the jQuery object that refers to the table is available through the use of \'$\'\n\n              $.table(\'#my-table\').$  ==  $(\'#my-table\')\n            \n\nWARNING!!\n\n    * every table must contain a thead and a tbody\n    * $.table is inteded to work with a single table and $.row a single row.\n      it is untested for a jQuery object that contatins multiple tables or rows! always use id selectors to ensure only one table or row has been selected \n\nAdditional table functions:\n\n              titles: returns an array of text values for the (last) table head row\n              clear_rows: removes any table body rows\n              head_row == $.headRow( this.$.find("thead > tr:last") )\n              parse: function called when creating table objects\n                by default tries to parse a float as a float instead of as a string\n                override it if you want\n            \n\nrow objects\n\nCreating row objects: two ways, two kinds of rows\nkinds of rows\n\n    * normal row\n    * head row\n\n              $(\'#my-row\').row() == $.row(\'table\')\n              \n              $(\'#my-row\').headRow() == $.headRow(\'table\')\n            \n\nA reference to the jQuery object that refers to the row is available through the use of \'$\'\n\n              $.row(\'#my-row\').$  ==  $(\'#my-row\')\n            \n\nAdditional row functions:\n\n              tds or ths : get a jQuery object for the table cells of the row\n              td or th : get a jQuery object for an individual table cell\n              at: retrieve text for an individual table cell\n              transfer_to : transfer a row to a different table\n              to_object : convert a row to an object\n            \n\n'
small plugin to make an html talbe clickable/editable b"uiTableEdit\n- jquery plugin for making tables user editable\n- simple, but you may be better of using one of the more generic editable plugins and applying it to a table\n\nuser clicks on a cell, edits the value, then presses enter or clicks on any cell to save the new value\nusage\n\n              var t = $('table')\n              var options = {}\n              $.uiTableEdit( t, options ) // returns t\n\ndownload\nhttp://plugins.jquery.com/project/uiTableEdit\n\nsource code\nhttp://github.com/gregwebs/jquery-uitableedit\n\ndocumentation\nhttp://projects.gregweber.info/uitableedit.html\n\nauthor and license\ncopyright Greg Weber dual licensed under GPL and MIT\noverview\n\noptions :\n\n    * off : turns off table editing\n    * find : defaults to tbody > tr > td\n    * mousedown : callback on mouseDown event\n      called in context of the table cell\n      if mousedown returns false, cell will not become editable\n    * dataVerify : callback after cell has been changed\n      called in context of the cell,\n      if dataVerify returns false, cell will stay in editable state\n      if dataVerify returns a value, that value will replace the cell's value\n      arguments are cell's value, original text, event\n    * editDone : invoked on completion\n      arguments are cell's new value, original text\n\n"
small plugin for filtering (hiding) table rows based on their text content b"# uiTableFilter\n\n- jquery plugin for filtering table rows\n\n# alternatives\n\nThis plugin is very light-weight (please [look at the source](https://github.com/gregwebs/jquery-uitablefilter/blob/master/jquery.uitablefilter.js)). I consider it finished, and have no plans to add any features. It works quickly for small data sets without consuming any extra memory (that would be needed for faster filtering).\n\n* I have used the [DataTables](http://datatables.net/) plugin when I have greater table needs.\n* I recently saw this [fancy tablequeryjs filter](https://github.com/asimihsan/tablequeryjs) plugin.\n* There is a [List.js plugin](http://listjs.com/)\n\nIf you use a javascript framework which keeps the table data in memory (backbone.js, etc)\nthen all you have to do is add a hook to automatically re-reunder the table.\nIf you are using a framework like AngularJS the table will be re-rendered automatically.\nSo it is probably very easy to just roll your own table filter.\n\n## download\n\nclick Download link at bottom of:\nhttp://plugins.jquery.com/project/uiTableFilter\n\nThat link seems to be broken now.\nYou can simply download the [latest code from github](https://raw.github.com/gregwebs/jquery-uitablefilter/master/jquery.uitablefilter.js)\n\n\n## source code\n\nhttp://github.com/gregwebs/jquery-uitablefilter\n\n\n## author and license\n\ncopyright Greg Weber. MIT licensed.\n\n\n## Demos\n\n### personal\n\nhttp://projects.gregweber.info/demo/flavorzoom.html\n\n### outside\n\nhttp://silverwareconsulting.com/index.cfm/2008/10/2/jquery-autofiltering-table\nthis is a nice example that ties this plugin with the tablesorter plugin\n\n\n## usage\n\n              var t = $('table')\n              $.uiTableFilter( t, phrase )\n            \n\narguments:\n\n    * jQuery object containing table rows\n    * phrase to search for\n      - If the phrase contains spaces it will be broken up into separate words that must all match a row\n\noptional arguments:\n              $.uiTableFilter( t, phrase, column, ifHidden )\n\n    * column to limit search too (the column title in the table header)\n    * ifHidden - callback to execute if one or more elements was hidden\n\n\n## Warning:\n\n* expects a thead and tbody element\n"
git svn clone of xss_terminate for you git-rails-ers out there... unlikely there will be any enhancements by me b'= xss_terminate\n\n+xss_terminate+ is a plugin in that makes stripping and sanitizing HTML \nstupid-simple. Install and forget. And forget about forgetting to <tt>h()</tt>\nyour output, because you won\'t need to anymore.\n\nBut +xss_terminate+ is also flexible. By default, it will strip all HTML tags\nfrom user input. This is usually what you want, but sometimes you need users to be \nable to enter HTML. The plugin allows you remove bad HTML with your choice\nof two whitelist-based sanitizers, or to skip HTML sanitization entirely on\na per-field basis.\n\nTo install, do:\n\n  script/plugin install http://xssterminate.googlecode.com/svn/trunk/xss_terminate\n\n== HTML sanitization\n\nA note on your choices.\n\n* Strip tags: removes all HTML using Rails\'s built-in +strip_tags+ method. Tags are removed, but their content is not.\n* Rails sanitization: Removes bad HTML with Rails\'s built-in sanitize method. Bad tags are removed completely, including their content.\n* HTML5lib sanitization: Removes bad HTML after parsing it with {HTML5lib}[http://code.google.com/p/html5lib/], a library that parses HTML like browsers do. It should be very tolerant of invalid HTML. Bad tags are escaped, not removed.\n* Do nothing. You can chose not to process given fields.\n\n== Usage\n\nInstalling the plugin creates a +before_save+ hook that will strip HTML tags \nfrom all string and text fields. No further configuration is necessary if this\nis what you want. To customize the behavior, you use the +xss_terminate+ class \nmethod.\n\nTo exempt some fields from sanitization, use the <tt>:except</tt> option \nwith a list of fields not to process:\n\n class Comment < ActiveRecord::Base\n   xss_terminate :except => [ :body ]\n end\n\nTo sanitize HTML with Rails\'s built-in sanitization, use the <tt>:sanitize</tt> option:\n\n  class Review < ActiveRecord::Base\n    xss_sanitize :sanitize => [ :body, :author_name]\n  end\n \nTo sanitize HTML with {HTML5Lib}[http://code.google.com/p/html5lib/] \n(<tt>gem install html5</tt> to get it), use the <tt>:html5lib_sanitize</tt> \noption with a list of fields to sanitize:\n\n class Entry < ActiveRecord::Base\n   xss_terminate :html5lib_sanitize => [ :body, :author_name ]\n end\n \nYou can combine multiple options if you have some fields you would like skipped\nand others sanitized. Fields not listed in the option arrays will be stripped.\n\n class Message < ActiveRecord::Base\n   xss_terminate :except => [ :body ], :sanitize => [ :title ]\n end\n\n== Sanitizing existing records\n\nAfter installing +xss_terminate+ and configuring it to your liking, you can \nrun <tt>rake xss_terminate MODELS=Foo,Bar,Baz</tt> to execute it against your\nexisting records. This will load each model found and save it again to invoke\nthe before_save hook.\n\n== Unique features\n\n+xss_terminate+ is based on +acts_as_sanitized+. Here is what\'s different:\n\n* Rails 2.0-ready.\n* Automatic. It is included with default options in <tt>ActiveReord::Base</tt> so all your models are sanitized.\n* It works with migrations. Columns are fetched when model is saved, not when the class is loaded.\n* You can decide whether to sanitize or strip tags on a field-by-field basis instead of model-by-model.\n* HTML5lib support.\n\n== TODO\n\n* Performance tests\n* Test suites with "real world" HTML\n* Test/make work with Rails 1.2.x (Rails 1.2 sanitization is crap, so you\'d want to use HTML5lib)\n\n== Credits\n\nWritten by {Luke Francl}[http://railspikes.com] and based on acts_as_sanitized by \n{Alex Payne}[http://www.al3x.net].\n\nHTML5Lib sanitization by {Jacques Distler}[http://golem.ph.utexas.edu/~distler].\n\n== License\n\nMIT License, except for lib/html5lib_sanitize.rb which is under the \nRuby license and copyright to Jacques Distler.\n'
gem tool to use git modules to manage your plugins. The original authors copy is here: http://github.com/jxl/git-rails/tree b'= git-rails:\n\n* http://blog.nanorails.com/git-rails\n* http://rubyforge.org/projects/git-rails/\n\n== DESCRIPTION:\n\nTools to help using git with rails\n\n== FEATURES/PROBLEMS:\n\n* create new git repository with .gitignore, linked to remote git repository\n* install plugins from git source as git modules\n* install git source as a git module to any path\n* install plugins from svn source as git modules\n\n== SYNOPSIS:\n\n  git-rails init {remote git repository}\n  git-rails install <remote plugin repository> [plugin name||path]\n  git-rails update <plugin-name||path>\n\n== REQUIREMENTS:\n\n* git\n* rails 2.0.2\n* hoe 1.5.0\n* main 2.8.0\n* rake 0.8.1\n* rspec 1.1.3\n\n== INSTALL:\n\n* sudo gem install git-rails\n'
Command line template expansion tool b"= skema\n\n=== A command line template expansion tool\n\nHomepage: http://skema.rubyforge.org/\n\nCopyright (c) 2008 Paolo Capriotti  <p.capriotti@gmail.com>\n\nskema is a command line utility for expanding templates.\nIt can be used in a number of ways. Examples include:\n* fast prototyping applications in frameworks that require a lot of boilerplate code;\n* adding copyright statements to source files;\n* automating repetitive coding tasks.\n\nOf course, there's nothing in skema that you can't find in your favourite text\neditor's templating facility; skema just makes it easier if you happen to like\nthe command line.\n"
Command line template expansion tool b"= skema\n\n=== A command line template expansion tool\n\nHomepage: http://skema.rubyforge.org/\n\nCopyright (c) 2008 Paolo Capriotti  <p.capriotti@gmail.com>\nCopyright (c) 2008 Riccardo Iaconelli <riccardo@kde.org>\n\nskema is a command line utility for expanding templates.\nIt can be used in a number of ways. Examples include:\n* fast prototyping applications in frameworks that require a lot of boilerplate code;\n* adding copyright statements to source files;\n* automating repetitive coding tasks.\n\nOf course, there's nothing in skema that you can't find in your favourite text\neditor's templating facility; skema just makes it easier if you happen to like\nthe command line.\n\n"
Website building tool for Websites for Woodworkers b'== Welcome to Rails\n\nRails is a web-application framework that includes everything needed to create \ndatabase-backed web applications according to the Model-View-Control pattern. \n\nThis pattern splits the view (also called the presentation) into "dumb" templates\nthat are primarily responsible for inserting pre-built data in between HTML tags.\nThe model contains the "smart" domain objects (such as Account, Product, Person,\nPost) that holds all the business logic and knows how to persist themselves to\na database. The controller handles the incoming requests (such as Save New Account,\nUpdate Product, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\'re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel if it\'s are installed when started with script/server, otherwise Rails will use WEBrick, the webserver that ships with Ruby. But you can also use Rails\nwith a variety of other web servers.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nSay other Ruby web servers like Thin and Ebb or regular web servers like Apache or LiteSpeed or\nLighttpd or IIS. The Ruby web servers are run through Rack and the latter can either be setup to use\nFCGI or proxy to a pack of Mongrels/Thin/Ebb servers.\n\n== Apache .htaccess example for FCGI/CGI\n\n# General Apache options\nAddHandler fastcgi-script .fcgi\nAddHandler cgi-script .cgi\nOptions +FollowSymLinks +ExecCGI\n\n# If you don\'t want Rails to look in certain directories,\n# use the following rewrite rules so that Apache won\'t rewrite certain requests\n# \n# Example:\n#   RewriteCond %{REQUEST_URI} ^/notrails.*\n#   RewriteRule .* - [L]\n\n# Redirect all requests not available on the filesystem to Rails\n# By default the cgi dispatcher is used which is very slow\n# \n# For better performance replace the dispatcher with the fastcgi one\n#\n# Example:\n#   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]\nRewriteEngine On\n\n# If your Rails application is accessed via an Alias directive,\n# then you MUST also set the RewriteBase in this htaccess file.\n#\n# Example:\n#   Alias /myrailsapp /path/to/myrailsapp/public\n#   RewriteBase /myrailsapp\n\nRewriteRule ^$ index.html [QSA]\nRewriteRule ^([^.]+)$ $1.html [QSA]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ dispatch.cgi [QSA,L]\n\n# In case Rails experiences terminal errors\n# Instead of displaying this message you can supply a file here which will be rendered instead\n# \n# Example:\n#   ErrorDocument 500 /500.html\n\nErrorDocument 500 "<h2>Application error</h2>Rails application failed to start properly"\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! \nYou need to install ruby-debug to run the server in debugging mode. With gems, use \'gem install ruby-debug\'\nExample:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n== dbconsole\n\nYou can go to the command line of your database directly through <tt>script/dbconsole</tt>.\nYou would be connected to the database with the credentials defined in database.yml.\nStarting the script without arguments will connect you to the development database. Passing an\nargument will connect you to a different database, like <tt>script/dbconsole production</tt>.\nCurrently works for mysql, postgresql and sqlite.\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  If the app has frozen rails, those gems also go here, under vendor/rails/.\n  This directory is in the load path.\n'
Vanilla in Ruby b'--~::{ Vanilla.rb }::~---\n=========================\n\n  A wandering soul; a repo clone\'d -\n  his meta_klass and methods honed.\n  But tarry he \'ponst what dark endeavour\n  with code of such unknowable terror?\n\n                              - H.P. Gemcraft, 1914\n\nA Preface; A Warning\n====================\n\nThe base flavour. The classic ice cream. Except riddled through with blood-red gemstones - Ruby gemstones.\nThis mad gelato will break your teeth.\n\n... and run the freakiest wiki-wonki-wiki-wonki-wiki-wonki-wickedy-wiki you\'ve ever seen. \n\nBut you must not fear: fear is the mind-killer; fear is the little death that brings total oblivion; \nfear is the chilling terror that makes you believe that *everything* is better when Model lays with \nController and View in peace.\n\nVanilla.rb cries "HERESY!" upon that layered orgy of filth. Vanilla.rb says "EMBRACE CHAOS!". Vanilla.rb\nsays "EVERY SNIP FOR THEMSELVES!". Vanilla.rb waits quietly, in the dark corners.\n\nUse at your own risk; really. I showed it to a cat, and the cat started talking in French. \nIt was MESSED. UP.\n\n\nThee Darke Invocation\n=====================\n\n$ gem install soup sqlite3-ruby rack\n\n$ rake bootstrap\n\n... a bunch of stuff gets created\n\n$ rackup vanilla/vanilla.ru\n\n... the wonki starts. THE PAIN BEGINS.\n\n[$ gem install sinatra; ruby vanilla/snips_on_sinatra.rb # also kinda works.]\n\n\nUsage\n=====\n\nCurrently unknowable; soon I hope to compile such a nercronomicon as to allow mortal kind to\nconjure up Snips and Dynasnips and Renderers...'
I suppose it's a document database. Or a tuple store. But really, it's just data sloshing around, waiting to be used. b'Soup is a bit of everything, summoned from nothing. Soup is like an imaginary friend - comforting, \nand will often talk to you, but when you look closely, they don\'t exist.\n\nTerrifying. And so:\n\n  require \'soup\'\n  Soup.prepare\n\n  \n  Soup << { \n    :name => "James",\n    :skills => "Bowstaff, nunchuck" \n  }\n  \n  # ...much later...\n  \n  s = Soup[\'james\']\n  s.skills # => "Bowstaff, nunchuck"\n  \n  Soup << {\n    :mane => "Lush and thick"\n    :teeth => "Sharp and ready"\n    :position => "Above my bed!!!" \n  }\n\n  \nThe point is that you can set any attribute on a Soup data, and it will be persisted without \ncare. With reckless abandon, really.\n\nThe data can be stored using anything - Soup doesn\'t really care much about the underlying \npersistence layer. I\'ve written implementations using DataMapper, ActiveRecord and Sequel... \nthere are other implementations of course. Unknowable implementations. \nTerrifying implementations. You Fool! Warren is Dead!\n\n\n\n(c) 2008 James Adam, MIT LICENSE. Yeah.\n\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXP\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY?"""  .\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY?""   ,;ciCCC\n  "?YXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXYYY??""   .,;iCCCCCCCCCC\n  .,.  `""""""???YYYYYYYYYYXXXXXXXYYYYY???"""""""   ..,;ciiCCCCCCCCCCC\'\'`\n  ```\'`CCiiicccccccccc;;,,.    .,..,..,;cccciiiCCCCCCC????>\'\'`````   .;ciCCC\n  Cic;,.   `\'\'<<????CCCCCCCCCCCC?????\'\'\'\'\'\'\'\'`````\'   ..,;;;ccciiiCCCCCCCCCC\n  CCCCCCCCCCCCcc;;;,,.       .,..,..,..,;;cciiiiCCCCCCCCCCCCCCCCCCCCC??>\'`\n  ``\'\'?CCCCCCCCCC"\'```\'\'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC??""\'\'``   _.,;cciCC\n  ic;;,. ````\'<?Ciiccc;,,.  ````\'\'\'`CCCCCC\'\'\'\'\'\'\'\'`\' .,;cciiiCCCCCCCCCC?"\'`\n  CCCCCCCCCiic;._  ```\'\'"<?CCC;;;,,,.,..,...,;;;;;;C777???CC\'\'\'\'\'``\'  _,xiXX\n  .  ```\'\'\'`CCCCCCCiicc;,,,,,..        ```````\'            .,,,xiiXXXXXXXXXX\n  XXXXXxXx,,,.   ```````````````````   .,..,..,.xiXiiXiiXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXxXxxXxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY??"""\n  """?YXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXYY???"""\n  =          """""???YYXXXXXXXXXXXXXXXXXXXXXXXXXXYYY???""                 ,;\n   -;ccccc;;,.,..            """"""""""                          ,;ciCC\'``\'\n  ;;, ```\'???CCCCC  `\'\'--;CCicc;;,      .,;;,,,.   ..      .,;ciCCCCCCCicc;-\n  C\'```CCiiiiiCCCCtCiicc;,.  ```\' . .,;;iCCCCC\'\' .,;;cccc-\'\'`CCCCCCCCCCCCC;;\n  CCCCc;,,.,;CCCcc,,,,..\'\' .;CC\'`\'CCCCCCCCCC\'\' ``\' .,;;;cc===`CC\'\'````````\'\n  .,...```\' .C.,.`""""?CCCCC\'`CCC\'\'\'\'``\'  .,.,;ciCCCCCC..,;cciiCtttCCCCCCCtt\n   ```\'     `\'`CCCCCCCCCCC\' . `\'       ```\' .,. ```CCC\'\'\'\'`CCCCCCCCCCCCC?"\'\'\n  ..                           ``\'                            ```\'\n  $$$$$$$$$$$$ccc$$$$$$$$"?hccc=Jcc$$hccccccc$$$$$$$$$$$$$cccccc,,,,,ccc,,..\n  $$$??hcccci???CCCCCC$$L ,$$$$c $$hcccccJ???LcccccccccJCCC???????CCCC??????\n  $$F `?$$$$$$$$$$$$$$$$. ,$$"$$.?$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n  $$,. ,$$$$$$$$$$$$$$$$. ,$$ $$h $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$??????????$$\n  $$$h $$$$$$$$$$$$$$$$$$ $$$ ?$h ?$$$$$$$$$$$$$$$$$$$$$$$???izc?????????i??\n  ???" ?????$$$$$$$""""""  "" ?"" `"?"""$$$$$$$$??<Lr??cr?=""    .  .      .\n  ,,,,,,,,,J$$$$$$$$,.,,,,,,,,..       ,$$$$$$P>JP"       .,;;,.!!;,.!!!!!!!\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$C3$$  -\'  --\'\'`!!!!\'`\'   ..  `!\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$Ci??c,,,.,..,.            `````\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$JJCCCC????????$$????rrrcccc,\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$C<<$$$$$PF<$$$$\n  $$$$$cizccCCCCCCCCCcccc$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$?????)>>J$CLccc$??""\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$????ii?iiJJJ$$??"""\n  $$$$$$$$$$$$$??$$$$????P$$$???iiiiicccccc<<????)Cicc$P""      ..   .,;;!!!\n  $$$$$CCCCCCC>>J>>>>cccccc>>>??C????CC>cccJ$??"""""         -``!!;!\'  .!!!\'\n  $$$$$??CCCCCCCCCCCff>>>>>J$$$P""""""""            ..,;;;;;;;!\'`.,;;!\'\'\'\n  ??????????????"""""\'\' `\'              .,..,;;;;!!!\'```..```\' .,.,;;;- `,;\'\n                      .,.    ,;;----\'\'\'\'\'\'\'```````\'  `\'\'`,;;!!\'\'\'`..,;;\'\' ,;\n  ---;;;;;;;-----\'\'\'\'\'\'\'\'\'``\'  --- `\'  .,,ccc$$hcccccc,.  `\' ,;;!!!\'``,;;!!\'\n  ;;;;,,.,;-------\'\'\'\'\'\'\' ,;;!!-    .zJ$$$$$$$$$$$$$$$$$$$c,. `\' ,;;!!!!\' ,;\n    ```\'    -;;;!\'\'\'\'\'-  `.,..   .zJ$$$$$$$$$$$$$$$$$$$$$$$$$$c, `!!\'\' ,;!!\'\n  !!-  \' `,;;;;;;;;;;\'\'\'\'\'```\' ,c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$c,  ;!!\'\' ,;\n  ,;;;!!!!!!!!\'\'``.,;;;;!\'`\'  z$$$$$$$$???"""""\'.,,.`"?$$$$$$$$$$$  ``,;;!!!\n  ;;..       --\'\'```_..,;;!  J$$$$$$??,zcd$$$$$$$$$$$$$$$$$$$$$$$$h  ``\'``\'\n  ```\'\'\'   ,;;\'\'``.,.,;;,  ,$$$$$$F,z$$$$$$$$$$$$$$$$$$$c,`""?$$$$$h\n  !!!!;;;;,   --`!\'\'\'\'\'\'\'  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$h.`"$$$$h .\n  `\'\'\'``.,;;;!;;;--;;   zF,$$$$$$$$$$?????$$$$$$$$$$$$$?????$$r ;?$$$ $.\n  !;.,..,.````.,;;;;  ,$P\'J"$$$$$$P" .,c,,.J$$$$$$$$$"\',cc,_`?h.`$$$$ $L\n  \'``````\'    .,..  ,$$". $ $$$$P",c$$$$$$$$$$$$$$$$\',$$$$$$$$$$ $$$$ $$c,\n  !!!!!!!!!!!!!\'\'\'  J$\',$ $.`$$P c$$$$$$$$$$$$$$$$$$,$$$$$$$$$$$ $$$$ $$$$C\n     ``            J$ ,$P $$ ?$\',$$$$???$$$$$$$$$$$$$$$??"""?$$$ <$$$ $$$$$\n  c           ;,  z$F,$$  `$$ $ ?$"      "$$$.?$$$ $$$P c??c, ?$.<$$\',$$$$$F\n  $$h.  -!>   (\'  $" $F ,F ?$ $ F ,="?$$c,`$$F $$"z$$\',$\' ,$$P $h.`$ ?$$$$$r\n  $$$$$hc,. ``\'  J$ $P J$ . $$F L ",,J$$$F <$hc$$ "$L,`??????,J$$$.` z$$$$$\n  $$$$$$$$$$c,\'\' ?F,$\',$F.: $$ c$c,,,,,c,,J$$$$$$$ ?$$$c,,,c$$$$$$F. $$$$$$\n  `"$$$$$$$$$$$c, $$\',$$ :: $$$$$$$$F"\',$$$$$$$$$$h ?$$$L;;$$$??$$$$ $$$$$$\n     "?$$$$$$$$$$ $$$$$$ : .`F"$$$$$$$$$$$$""""?"""h $$$$$$$"$,J$$$$ $$$$$\'\n        "?$$$$$$$ $$$$$$.`.` h `$$$$$$$$$$$cccc$$c,zJ$$$$$P\' $$$$$P\',$$$$P\n  $.       `""?$$ $$$$$$$  ` "$c "?$$$$$$$$$$$$??$$$$$$$$" ,J$$$P",J$$$$P\n  ..           `" ?$$$$$$h    ?$$c.`?$$$$$$$$$\' . <$$$$$\' ,$$$"  ,$$$$$"\n  !!>. .          `$$$$$$$h  . "$$$c,"$$$$$$$\' `\' `$$$P  ,$$$\' ,c$$$$$\'   ;!\n  ```<!!!>         `$$$$$$$c     "$$$c`?$$$$$  : : $$$  ,$$P\' z$$$$$$\'   ;!!\n  $hc ```\'  ;       `$$$$$$$.      ?$$c ?$$$$ .: : $$$  $$F ,J$$$$$$\'   ;!!\n  .,..      \'        `$$$$$$$       "$$h`$$$$ .\' \' $$$ ,$$ ,J$$$$$$\'    !!!\n  ????P               `$$$$$$L       $$$ $$$F :.: J$$P J$F J$$$$$P     ;!!\n  -=<                  ?$$."$$       `$$ ?$$\' `\' z$$$F $P  $$$$$$\'     !!\'\n  cc                   `$$$c`?        ?$.`$$hc, cd$$F ,$\'  $$$$$$     ;!!\n                        $$$$c         `$$c$$$$$$$$$",c$\'   $$$$$$     `!!\n                        $$$$$          `?$$$$$$$$$$$$P\'    $$$$$$> ..\n                        $$$$$            `"?$$$$$$$P"      $$$$$$L $$c,\n            !!         <$$$$$            zc,`"""\',         <$$$$$$.`$$$$cc,\n            !!         J$$$$P            `$$$$$$$\' !\'       $$$$$$L `$$$$$$h\n           ;,          $$$$$L          `! J$$$$$\',!!        $$$$$$$  `$$$$$$\n            \'         <$$$$$.           ! $$$$$$ !!         ?$$$$$$   `$$$$$\n                     ,$$$$$$$c          `,`???? ;\'         c,?$$$$\'    `?$$$\n                     $$$$$$$??           `!;;;;!     .     `h."?$P      `$$$\n                    ,$$$$$$$h.            `\'\'\'      `\'      `$$$P        `?$\n                     $$$$$$$$h                      `!\'      `"\'           `\n                    `$$$$$$$$F          !;     !    ;,\n                     `$$$$$$$\'         `!!>         `!\n  c,        ;,        `?$$$$P           !!>             .\n  $F        !!>         `""\'            `!!            ;!>    <-\n  $F       `!!\'                      ;!; \'   `!        <!>    ;\n  $F        `\'      <!               !!!               !!>    !!\n  ?\'       `\'      !!!               !!!               !!>    !!\n           !!\'    <!!               ;!!!               `\'     ;\n          ;!!     !!                !!!!                      !\'\n          !!!     `\'                !!!                       \'            ;\n          !!                       ;!!\'                                    !\n                                   !!!                      ;!             !\n                                  <!!!                      )\'            `!\n            ,;;>                 ;!!!                                     `!\n            `\'\'                 ;!!!                     !                `!\n                ;!             ;!!!                                  ,$$c, `\n              !\'\'             ;!!!           \'                    ,c$$$$$$c.\n  >                       ;   !!!                                 ?$$$$$$$$$\n  !!>                   ;!! .!!!     .!>                           "?$$$$$$$\n  <! `!         ,;     ;!!  !!!!     !!                              `"?$$$$\n   . \'          \'    ;!!! .!!!!     !!   .                              `"?$\n   `\'               <!!\' .!!!!!!   !!!\'  !                     >           `\n                  .!!!  <!!\'`!!! .!!!!;                   !!>\n                  !!!  <!!\'  !! ;!!!!!!                   (\' ;,\n                 <!!  !!!\'  !!! !!!\'!!!                   !> `!\n                 !!\' !!!\'  `!!\';!>  !!                 <! `\' `!  !>.\n                 \' ;<!!\'  .!!! !!\' <!\'       ;        `!! ;  `!  !!!>\n              .<!>;!!!\'   !!! `!! <!!                .. \' \'      !!!\' ;,\n             <!!! <!! ;   !!! !!>;!!\'\'!             J$$c         `!!; !!>\n            ;!!! ;!! <!   !!> !! `!! !\'            J$$$$hr        `\'\' !!!,;;\n            ;!!! !! <!!  <!!  !\' ;!! \'            <$$$$$$$.           <!!!\'!\n            !!!  !;<!!\'  !!! ;!  !!>              $$$$$$$$$$.          `\'  !\n           `!!! !!!!!\'   !!! !! `!!!              ?$$$$$$$??$c        !!>;\n           ;!! ;!!!!!   ;!!> !! <!!>               ?$$$$$$c,`$$.      `!!!\n           !!! !!! !\'   `!!> !! !!!                 "?$$$$$$ "?$c      `<!\n          ;!!  !! ;!    !!!> ! ;!!!,                  "$$$$$$c,"?$c,\n          ;!!  !! ;!    !!!! ! `!!!!                    "$$$$$$c ?$$h.\n          !!!> !! !!    !!!!    !!!                       "?$$$$c "$$$c,\n          !!!\' \'  !!    `!!!    `!                          "$$$$h.`?$$$c,\n         <!!!>   <!!    `!!!     !>                          ?$$$$$c ?$$$$h.\n         `!!!    `!!     !!!     `\'                           "?$$$$h.`?$$$$\n          `!!>    !!     `!!                                    `?$$$$$$$$$$\n           `!\'    !!      `\'                                      "$$$$$$$$$\n                  `!>                                               ?$$$$$$$\n                   `!                                                `"?$$$$\n                    `-                ;!                                `"$$\n                                                                          `?\n(http://www.edvard-munch.com/Paintings/other_artists/scream_ascii_3.htm)'
This Winamp plugin allows you to control Winamp using a MIDI keyboard b"Midi Control 1.1, a plugin for Winamp\r\n-------------------------------------\r\n\r\nThis Winamp plugin allows you to use a MIDI device, such as a keyboard,\r\nto control Winamp's functionality. Many musicians will have a MIDI\r\ndevice hooked up to their computer, and this can be made useful, even\r\nwhen not being used for its normal purpose.\r\n\r\nThis plugin allows access to all major Winamp functions by assigning\r\nthem to notes, which can then be generated by the keyboard. For example,\r\nD, in any octave, is Play. It also makes use of mod and pitch wheel messages,\r\nif present. For the rest of the assignments, please see the Midi Control\r\nconfiguration dialog.\r\n\r\nNew in Version 1.1\r\n------------------\r\n\r\n- Support for volume control via the keyboard (keys A and B)\r\n\r\n- Support for Tascam US-428 (CS-10 compatible) transport buttons.\r\n\r\n    *** big thanks to Loek for all your help!!! ***\r\n\r\n    - Main volume fader controls Winamp volume\r\n    - Locate L/R = skip back/forward song\r\n    - Rew/Fwd = 10 seconds back/forward\r\n    - Stop = stops Winamp\r\n    - Play = Toggles between Play and Pause\r\n\r\nInstallation\r\n------------\r\n\r\nUse the installer to install the plugin to your Winamp plugin directory,\r\nwhich defaults to c:\\Program Files\\Winamp\\Plugins. Restart Winamp. Winamp\r\nversions 2.0 and later are supported.\r\n\r\nUsage\r\n-----\r\n\r\nUse the configuration dialog:\r\n\r\nPreferences->Plugins->General Purpose->Midi Control and click Configure.\r\n\r\nThis dialog shows the various key assignments, and allows the MIDI port\r\nand channel to be chosen. Alternatively, the Autoconfigure feature can\r\nbe used if you don't remember what device or channel your MIDI device is\r\nsending on.\r\n\r\nLicensing\r\n---------\r\n\r\nThis software is Copyright 2004 Andrew Grover, and is freely redistributable\r\nand modifiable under the MIT License (see LICENSE).\r\n\r\nPlease feel free to contact me (andy@groveronline.com) with any comments or\r\nbug reports.\r\n"
The Nu programming language.  b'#INTRODUCTION\n\nHello and welcome to Nu.\n\nI created Nu because I wanted a better way to write software.\n\nI wanted to write with a language as flexible and powerful as Lisp, but I \nalso wanted to be able to work with the many libraries and high-performance\nsubsystems written in C, including the ones that I write myself.  So a tight \nintegration with C was my highest priority; that ruled and drove the \nimplementation of Nu.  That\'s why Nu is "C over lambda."\n\nIt is easier to integrate with C when you have a disciplined way of structuring \nC code.  Popular scripting languages (Python, Ruby, Lua, etc.) make many \nimplementation-dependent impositions on the C code that they call.  Their\nartifacts are often called "glue code" and are usually ugly, cumbersome, and \nunpleasant to generate.\n\nObjective-C provides a proven way of structuring C code that has no scripting \nlanguage implementation dependencies.  But it can do much more than that.\nObjective-C can also serve as a platform for a powerful dynamic language.  \nNu was designed to take full advantage of that.  It was also designed to \nprovide many of the elements of successful scripting languages, notably \nRuby, while adding the syntactic simplicity and flexibility of Lisp.   \n\n##Legal\n\nNu is copyrighted open-source software that is released under the Apache\nLicense, version 2.0.  For details on the license, see the LICENSE file.\nIn its use to name a programming language, "Nu" is a trademark of Radtastical \nInc.\n\n##System Requirements\n\nOn Macintosh systems, Nu requires Mac OS X version 10.5 or greater.\nIt is also possible to build Nu to run on Linux systems and the \nApple iPhone.\n\n##Installation\n\nInstallation instructions are in the notes/INSTALL file.\n\n##Going Further\n\nnotes/DEMO contains a simple tutorial exercise that can acquaint you with Nu.\n\nnotes/USAGE describes a few of the ways that you can use Nu.\n\nnotes/ERRORS contains some pitfalls that I\'ve encountered when programming \nwith Nu.\n\nnotes/TODO contains some open issues that I\'d like to address in Nu.\n\nThe examples directory contains several fun and interesting examples.\n\nTextMate users can drag and drop share/Nu.tmbundle onto the TextMate \napplication icon to add Nu-specific features to TextMate.\n\n##Author\n\nTim Burks (tim@radtastical.com)\nRadtastical Inc.\nPalo Alto, California, USA\nhttp://www.radtastical.com\n'
The new home for DogOnRails, I prefer git! b'DogOnRails\n==============\n\nDogOnRails was a Ruby on Rails replacement for the WifiDog software that was written in PHP.  I did it\nbecause I didn\'t want to use PHP for this solution, and I wanted to mess around with Rails in a non-work\nsetting.  Eventually I decided to abandon this project because of the fact that it was too time consuming, \nand there were too many special interests that drained the fun and energy out of the project.\n\nGiven that it\'s abandonware, I\'m licencing it MIT.\n\nCopyright (c) 2011 Joe Bowser\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n'
college football app b"Fumblerooski\n=============\n\nFumblerooski is a college football statistics application written in Python using the Django framework, based on data provided by the NCAA and editor input. Most statistics are from 2000 onward, although some teams have game scores dating back to 1988. The code here is licensed under the BSD license (see LICENSE for more details). As of August 2010, this repository is frozen as-is and will not be updated. For further development, check out https://github.com/gcaprio/cfbreference_com, which is based on the original Fumblerooski code base.\n\nRequirements\n------------\n\n  * Python 2.5+ (lower versions may work but are untested.)\n  * Django 1.2+ (aggregates support required and settings use new multi-db syntax)\n  * BeautifulSoup (HTML and XML parsing)\n  * django-googlecharts (http://github.com/jacobian/django-googlecharts)\n\nOverview\n------------\n\nFumblerooski uses the NCAA's statistics site (http://web1.ncaa.org/mfb/mainpage.jsp?year=2009) as a base - nearly everything game and player-related derives from information parsed or scraped from this site. The NCAA provides game information in XML, but most other elements - rosters, drives and rankings included - are scraped using BeautifulSoup. Coaching information is based on an Excel file provided by the NCAA but supplemented by data entry for assistant coaches and coaching history back to 2000.\n\nSetup\n------------\n\nRename settings.py.example to settings.py, fill in the values for the admin, database, media location and template paths. There is a setting called CURRENT_SEASON that is set in settings.py and used in various places in the application. It is currently set to 2010.\n\nStructure\n------------\n\nFumblerooski is divided into several app or app-like structures. The main one is the college app, which contains most of the models and views, including those related to teams, games, coaches and players. The rankings and scrapers are split into their own directories as well, along with small API and blog apps.\n\nLoaders\n------------\n\nInformation from the NCAA is scraped using the files in scrapers/, which presently are very tied into the rest of the app, so running the loaders independent of the college app will not produce the desired effect (and will produce lots of errors). The NCAA produces an XML file for each completed game, but the remainder of the information used by Fumblerooski, including schedules, rosters and rankings are parsed using BeautifulSoup.\n\nThe main scraper library has three functions: full_load, full_nostats_load and partial_loader. Because of the need to scrape the HTML tables for an entire season, each of the loaders loops through each team marked to be updated (updated=True) and parses the schedule/results information. The full_load also creates drive and player stats, but those are not available until up to 12-15 hours after the end of the game, so a nostats load only records the score. Normally the full_load can be run on a Sunday afternoon to capture all of Saturday's games. It's also recommended that the load_roster scraper be run after a full_load, as it updates the number of games a player has played in. Rankings also tend to be updated on Sundays, so the team and player rankings can be run then, too.\n\nUtilities\n------------\n\nThe code includes several generic utilities of use in the app but which depend on the use of the scrapers to populate the database. These include functions to generate and update CollegeYear instances, identify conference games and populate Week instances."
This is a ruby project that uses ActiveRecord to crack open Firefox 3's new Places SQLite browsing history and display info about it. 
Everyone's favorite memcached plugin for ActiveRecord. b"== cache_fu\n\nA rewrite of acts_as_cached.\n\n== Changes from acts_as_cached 1\n\n- You can no longer set a 'ttl' method on a class.  Instead,\n  pass :ttl to acts_as_cached:\n    >> acts_as_cached :ttl => 15.minutes\n\n- The is_cached? method is aliased as cached?\n\n- set_cache on an instance can take a ttl\n    >> @story.set_cache(15.days)\n\n\nChris Wanstrath [ chris[at]ozmm[dot]org ]\n"
A primitive clone of a popular kids game b"THIS IS ALPHA QUALITY SOFTWARE. Bugs /will/ be found in the code\n(unfortunately). Bug reports are NOT welcome at this point unless a patch is\nattached. I'm very aware that most things don't work, or crash, etc.\n"
A Rails Plugin to process Abuse Feedback Reporting Format (ARF) messages b"Stay tunes, I need to plugin-ify the ARF code I've got so far.\n"
Re-write of Agave Colorscheme Designer b"Agave2 is a re-write of the Agave Colorscheme Designer\n\nThis is a tool for web and graphic designers to generate color ideas.  It is\ndesigned to integrate well with the GNOME desktop environment.\n\nAgave2 is still in a fairly early state, so if you need a useful tool, you're\nadvised to use the original version of Agave for the time being.  The original\nversion of Agave can likely be installed from your linux distribution's software\nrepository, or it can be downloaded in source form from\nhttp://home.gna.org/colorscheme/\n"
Global named locks (req. mysql) -- Extraction from Shopify b'Locking\n=======\n\nVery simple plugin which adds the acquire_lock method to active record base. This is mysql only.\n\nAs long as a lock of a certain name is acquired no other connection on the server is able to acquire the same lock. \nThis is very useful for background tasks such as billing or search server re-indexing which would cause errors when they \nwould be ran from multiple machines at the same time but you still want to run them from multiple machines at the same time \nfor redundancy reasons. \n\nExample\n=======\n                                                                                                                              \nInvoice.acquire_lock("Shopify billing") do\n\n  Invoice.find_all_due.each { |invoice| invoice.collect_payment! } \n  \nend\n\n\nUsecase\n=======\n                    \n# save to run on several machines at the same time: \n \n ./script/runner \'Invoice.acquire_lock("Shopify billing") {  Invoice.find_all_due.each { |invoice| invoice.collect_payment! } }\''
[ABANDONED] Support libraries for writing Hadoop Streaming-compatible map/reduce tasks. b'Introduction\n============\n\nhadoop-streaming is a collection of libraries which make writing Hadoop\nStreaming tasks easy.\n\nAuthor\n======\n\nCoda Hale <coda.hale@gmail.com>'
A small lambda calculus interpreter 
A tool to determine the order in which to link object files for OCaml programs 
JavaScript and CSS Asset Compression for Production Rails Apps b'= AssetPackager\n\nJavaScript and CSS Asset Compression for Production Rails Apps\n\n== Description\n\nWhen it comes time to deploy your new web application, instead of \nsending down a dozen JavaScript and CSS files full of formatting \nand comments, this Rails plugin makes it simple to merge and \ncompress JavaScript and CSS down into one or more files, increasing \nspeed and saving bandwidth.\n\nWhen in development, it allows you to use your original versions \nand retain formatting and comments for readability and debugging.\n\nThis code is released under the MIT license (like Ruby). You\'re free \nto rip it up, enhance it, etc. And if you make any enhancements, \nI\'d like to know so I can add them back in. Thanks!\n\n* Formerly known as MergeJS.\n\n== Credit\n\nThis Rails Plugin was inspired by Cal Henderson\'s article \n"Serving JavaScript Fast" on Vitamin:\nhttp://www.thinkvitamin.com/features/webapps/serving-javascript-fast\n\nIt also uses the Ruby JavaScript Minifier created by \nDouglas Crockford.\nhttp://www.crockford.com/javascript/jsmin.html\n\n== Key Features\n\n* Merges and compresses JavaScript and CSS when running in production.\n* Uses uncompressed originals when running in development.\n* Generates packages on demand in production\n\n== Components\n\n* Rake tasks for managing packages\n* Helper functions for including these JavaScript and CSS files in your views.\n* YAML configuration file for mapping JavaScript and CSS files to packages.\n* Rake Task for auto-generating the YAML file from your existing JavaScript files.\n\n== Updates\n\nNovember \'08:\n* Rails 2.2 compatibility fixes\n* No more mucking with internal Rails functions, which means:\n  * Return to use of query-string timestamps. Greatly simplifies things.\n  * Multiple asset-hosts supported\n  * Filenames with "."\'s in them, such as "jquery-x.x.x" are supported.\n* Now compatible with any revision control system since it no longer uses revision numbers.\n* Packages generated on demand in production mode. Running create_all rake task no longer necessary.\n\n== How to Use:\n\n1. Download and install the plugin:\n   ./script/plugin install git://github.com/sbecker/asset_packager.git\n\n2. Run the rake task "asset:packager:create_yml" to generate the /config/asset_packages.yml\nfile the first time. You will need to reorder files under \'base\' so dependencies are loaded \nin correct order. Feel free to rename or create new file packages.\n\nIMPORTANT: JavaScript files can break once compressed if each statement doesn\'t end with a semi-colon.\nThe minifier puts multiple statements on one line, so if the semi-colon is missing, the statement may no \nlonger makes sense and cause a syntax error.\n\n== Examples of config/asset_packages.yml\n\nExample from a fresh rails app after running the rake task. (Stylesheets is blank because a \ndefault rails app has no stylesheets yet.):\n\n--- \njavascripts: \n- base: \n  - prototype\n  - effects\n  - dragdrop\n  - controls\n  - application\nstylesheets: \n- base: []\n\nMultiple packages:\n\n---\njavascripts:\n- base:\n  - prototype\n  - effects\n  - controls\n  - dragdrop\n  - application\n- secondary:\n  - foo\n  - bar\nstylesheets:\n- base:\n  - screen\n  - header\n- secondary:\n  - foo\n  - bar\n\n3. Run the rake task "asset:packager:build_all" to generate the compressed, merged versions\nfor each package. Whenever you rearrange the yaml file, you\'ll need to run this task again. \n\nMerging and compressing is expensive, so this is something we want to do once, not every time\nyour app starts. Thats why its a rake task. You can run this task via Capistrano when deploying\nto avoid an initially slow request the first time a page is generated. \n\nNote: The package will be generated on the fly if it doesn\'t yet exist, so you don\'t *need* \nto run the rake task when deploying, its just recommended for speeding up initial requests.\n\n4. Use the helper functions whenever including these files in your application. See below for examples.\n\n5. Potential warning: css compressor function currently removes CSS comments. This might blow\naway some CSS hackery. To disable comment removal, comment out /lib/synthesis/asset_package.rb line 176.\n\n== JavaScript Examples\n\nExample call (based on above /config/asset_packages.yml):\n  <%= javascript_include_merged :base %>\n\nIn development, this generates: \n  <script type="text/javascript" src="/javascripts/prototype.js?1228027240"></script>\n  <script type="text/javascript" src="/javascripts/effects.js?1228027240"></script>\n  <script type="text/javascript" src="/javascripts/controls.js?1228027240"></script>\n  <script type="text/javascript" src="/javascripts/dragdrop.js?1228027240"></script>\n  <script type="text/javascript" src="/javascripts/application.js?1228027240"></script>\n\nIn production, this generates: \n  <script type="text/javascript" src="/javascripts/base_packaged.js?123456789"></script>\n\n== Stylesheet Examples\n\nExample call:\n  <%= stylesheet_link_merged :base %>\n\nIn development, this generates:\n  <link href="/stylesheets/screen.css?1228027240" media="screen" rel="Stylesheet" type="text/css" />\n  <link href="/stylesheets/header.css?1228027240" media="screen" rel="Stylesheet" type="text/css" />\n\nIn production this generates:\n  <link href="/stylesheets/base_packaged.css?1228027240" media="screen" rel="Stylesheet" type="text/css" />\n\n== Different CSS Media\n\nAll options for stylesheet_link_tag still work, so if you want to specify a different media type:\n  <%= stylesheet_link_merged :secondary, \'media\' => \'print\' %>\n\n== Rake tasks\n\nrake asset:packager:build_all        # Merge and compress assets\nrake asset:packager:create_yml       # Generate asset_packages.yml from existing assets\nrake asset:packager:delete_all       # Delete all asset builds\n\n== Running the tests\n\nThis plugin has a full suite of tests. But since they\ndepend on rails, it has to be run in the context of a\nrails app, in the vendor/plugins directory. Observe:\n\n> rails newtestapp\n> cd newtestapp\n> ./script/plugin install ./script/plugin install git://github.com/sbecker/asset_packager.git\n> rake test:plugins PLUGIN=asset_packager # all tests pass\n\n== License\nCopyright (c) 2006-2008 Scott Becker - http://synthesis.sbecker.net\nContact via Github for change requests, etc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'
A Ruby wrapper for the Viddler API b'Viddler Ruby\n============\n\nA Ruby wrapper for the Viddler API. Currently handles uploading videos to Viddler, getting and setting metadata and permissions, and deleting videos.\n\nCopyright (c) 2008 Patrick Ewing, released under the MIT license\n'
mini replacement for RMagick b'# MiniMagick\n\n[![Build Status](https://travis-ci.org/minimagick/minimagick.svg?branch=master)](http://travis-ci.org/minimagick/minimagick)\n[![Code Climate](https://codeclimate.com/github/minimagick/minimagick/badges/gpa.svg)](https://codeclimate.com/github/minimagick/minimagick)\n\nA ruby wrapper for [ImageMagick](http://imagemagick.org/) or\n[GraphicsMagick](http://www.graphicsmagick.org/) command line.\n\n## Why?\n\nI was using [RMagick](https://github.com/rmagick/rmagick) and loving it, but it\nwas eating up huge amounts of memory. Even a simple script would use over 100MB\nof RAM. On my local machine this wasn\'t a problem, but on my hosting server the\nruby apps would crash because of their 100MB memory limit.\n\n## Solution!\n\nUsing MiniMagick the ruby processes memory remains small (it spawns\nImageMagick\'s command line program mogrify which takes up some memory as well,\nbut is much smaller compared to RMagick). See [Thinking of switching from\nRMagick?](#thinking-of-switching-from-rmagick) below.\n\nMiniMagick gives you access to all the command line options ImageMagick has\n(found [here](http://www.imagemagick.org/script/command-line-options.php)).\n\n## Requirements\n\nImageMagick or GraphicsMagick command-line tool has to be installed. You can\ncheck if you have it installed by running\n\n```sh\n$ convert -version\nVersion: ImageMagick 6.8.9-7 Q16 x86_64 2014-09-11 http://www.imagemagick.org\nCopyright: Copyright (C) 1999-2014 ImageMagick Studio LLC\nFeatures: DPC Modules\nDelegates: bzlib fftw freetype jng jpeg lcms ltdl lzma png tiff xml zlib\n```\n\nMiniMagick has been tested on following Rubies:\n\n* MRI 1.9.3\n* MRI 2.0\n* MRI 2.1\n* MRI 2.2\n* Rubinius\n* JRuby (1.7.18 and later)\n\n## Installation\n\nAdd the gem to your Gemfile:\n\n```ruby\ngem "mini_magick"\n```\n\n## Information\n\n* [API documentation](http://rubydoc.info/github/minimagick/minimagick)\n\n## Usage\n\nLet\'s first see a basic example of resizing an image.\n\n```ruby\nimage = MiniMagick::Image.open("input.jpg")\nimage.path #=> "/var/folders/k7/6zx6dx6x7ys3rv3srh0nyfj00000gn/T/magick20140921-75881-1yho3zc.jpg"\nimage.resize "100x100"\nimage.format "png"\nimage.write "output.png"\n```\n\n`MiniMagick::Image.open` makes a copy of the image, and further methods modify\nthat copy (the original stays untouched). We then\n[resize](http://www.imagemagick.org/script/command-line-options.php#resize)\nthe image, and write it to a file. The writing part is necessary because\nthe copy is just temporary, it gets garbage collected when we lose reference\nto the image.\n\n`MiniMagick::Image.open` also accepts URLs.\n\n```ruby\nimage = MiniMagick::Image.open("http://example.com/image.jpg")\nimage.contrast\nimage.write("from_internets.jpg")\n```\n\nOn the other hand, if we want the original image to actually *get* modified,\nwe can use `MiniMagick::Image.new`.\n\n```ruby\nimage = MiniMagick::Image.new("input.jpg")\nimage.path #=> "input.jpg"\nimage.resize "100x100"\n# No calling #write, because it\'s no a copy\n```\n\n### Combine options\n\nWhile using methods like `#resize` directly is convenient, if we use more\nmethods in this way, it quickly becomes inefficient, because it calls the\ncommand on each methods call. `MiniMagick::Image#combine_options` takes\nmultiple options and from them builds one single command.\n\n```ruby\nimage.combine_options do |b|\n  b.resize "250x200>"\n  b.rotate "-90"\n  b.flip\nend # the command gets executed\n```\n\nAs a handy shortcut, `MiniMagick::Image.new` also accepts an optional block\nwhich is used to `combine_options`.\n\n```ruby\nimage = MiniMagick::Image.new("input.jpg") do |b|\n  b.resize "250x200>"\n  b.rotate "-90"\n  b.flip\nend # the command gets executed\n```\n\nThe yieled builder is an instance of `MiniMagick::Tool::Mogrify`. To learn more\nabout its interface, see [Metal](#metal) below.\n\n### Attributes\n\nA `MiniMagick::Image` has various handy attributes.\n\n```ruby\nimage.type        #=> "JPEG"\nimage.mime_type   #=> "image/jpeg"\nimage.width       #=> 250\nimage.height      #=> 300\nimage.dimensions  #=> [250, 300]\nimage.size        #=> 3451 (in bytes)\nimage.colorspace  #=> "DirectClass sRGB"\nimage.exif        #=> {"DateTimeOriginal" => "2013:09:04 08:03:39", ...}\nimage.resolution  #=> [75, 75]\nimage.signature   #=> "60a7848c4ca6e36b8e2c5dea632ecdc29e9637791d2c59ebf7a54c0c6a74ef7e"\n```\n\nIf you need more control, you can also access [raw image\nattributes](http://www.imagemagick.org/script/escape.php):\n\n```ruby\nimage["%[gamma]"] # "0.9"\n```\n\nTo get the all information about the image, MiniMagick gives you a handy method\n(which just converts the output from `identify -verbose` into a Hash):\n\n```ruby\nimage.details #=> {"Format" => "JPEG", "Mime type" => "image/jpeg", "Resolution" => "300x300", ...}\n```\n\n### Configuration\n\n```ruby\nMiniMagick.configure do |config|\n  config.cli = :graphicsmagick\n  config.timeout = 5\nend\n```\n\nFor a complete list of configuration options, see\n[Configuration](http://rubydoc.info/github/minimagick/minimagick/MiniMagick/Configuration).\n\n### Composite\n\nMiniMagick also allows you to\n[composite](http://www.imagemagick.org/script/composite.php) images:\n\n```ruby\nfirst_image  = MiniMagick::Image.new("first.jpg")\nsecond_image = MiniMagick::Image.new("second.jpg")\nresult = first_image.composite(second_image) do |c|\n  c.compose "Over"    # OverCompositeOp\n  c.geometry "+20+20" # copy second_image onto first_image from (20, 20)\nend\nresult.write "output.jpg"\n```\n\n### Layers/Frames/Pages\n\nFor multilayered images you can access its layers.\n\n```rb\ngif.frames #=> [...]\npdf.pages  #=> [...]\npsd.layers #=> [...]\n\ngif.frames.each_with_index do |frame, idx|\n  frame.write("frame#{idx}.jpg")\nend\n```\n\n### Image validation\n\nBy default, MiniMagick validates images each time it\'s opening them. It\nvalidates them by running `identify` on them, and see if ImageMagick finds\nthem valid. This adds slight overhead to the whole processing. Sometimes it\'s\nsafe to assume that all input and output images are valid by default and turn\noff validation:\n\n```ruby\nMiniMagick.configure do |config|\n  config.validate_on_create = false\n  config.validate_on_write = false\nend\n```\n\nYou can test whether an image is valid:\n\n```ruby\nimage.valid?\nimage.validate! # raises MiniMagick::Invalid if image is invalid\n```\n\n### Debugging\n\nWhen things go wrong and commands start failing, you can set the debug mode:\n\n```ruby\nMiniMagick.configure do |config|\n  config.debug = true\nend\n```\n\nIn this mode every command that gets executed in the shell will be written\nto stdout.\n\n### Switching CLIs (ImageMagick \\<=\\> GraphicsMagick)\n\nDefault CLI is ImageMagick, but if you want to use GraphicsMagick, you can\nspecify it in configuration:\n\n```rb\nMiniMagick.configure do |config|\n  config.cli = :graphicsmagick\nend\n```\n\nIf you\'re a real ImageMagick guru, you might want to use GraphicsMagick only\nfor certain processing blocks (because it\'s more efficient), or vice versa. You\ncan accomplish this with `.with_cli`:\n\n```ruby\nMiniMagick.with_cli(:graphicsmagick) do\n  # Some processing that GraphicsMagick is better at\nend\n```\n\n**WARNING**: If you\'re building a multithreaded web application, you should\nchange the CLI only on application startup. This is because the configuration is\nglobal, so if you change it in a controller action, other threads in the same\nprocess will also have their CLI changed, which could lead to race conditions.\n\n### Metal\n\nIf you want to be close to the metal, you can use ImageMagick\'s command-line\ntools directly.\n\n```ruby\nMiniMagick::Tool::Mogrify.new do |mogrify|\n  mogrify.resize("100x100")\n  mogrify.negate\n  mogrify << "image.jpg"\nend #=> `mogrify -resize 100x100 -negate image.jpg`\n\n# OR\n\nmogrify = MiniMagick::Tool::Mogrify.new\nmogrify.resize("100x100")\nmogrify.negate\nmogrify << "image.jpg"\nmogrify.call #=> `mogrify -resize 100x100 -negate image.jpg`\n```\n\nThis way of using MiniMagick is highly recommended if you want to maximize\nperformance of your image processing. Here are some of the features.\n\n#### Appending\n\nThe most basic way of building a command is appending strings:\n\n```rb\nMiniMagick::Tool::Convert.new do |convert|\n  convert << "input.jpg"\n  convert.merge! ["-resize", "500x500", "-negate"]\n  convert << "output.jpg"\nend\n```\n\nNote that it is important that every command you would pass to the command line\nhas to be separated with `<<`, e.g.:\n\n```ruby\n# GOOD\nconvert << "-resize" << "500x500"\n\n# BAD\nconvert << "-resize 500x500"\n```\n\nShell escaping is also handled for you. If an option has a value that has\nspaces inside it, just pass it as a regular string.\n\n```ruby\nconvert << "-distort"\nconvert << "Perspective"\nconvert << "0,0,0,0 0,45,0,45 69,0,60,10 69,45,60,35"\n```\n```\nconvert -distort Perspective \'0,0,0,0 0,45,0,45 69,0,60,10 69,45,60,35\'\n```\n\n#### Methods\n\nInstead of passing in options directly, you can use Ruby methods:\n\n```ruby\nconvert.resize("500x500")\nconvert.rotate(90)\nconvert.distort("Perspective", "0,0,0,0 0,45,0,45 69,0,60,10 69,45,60,35")\n```\n\nMiniMagick knows which options each tool has, so you will get an explicit\n`NoMethodError` if you happen to have mispelled an option.\n\n#### Chaining\n\nEvery method call returns `self`, so you can chain them to create logical groups.\n\n```ruby\nMiniMagick::Tool::Convert.new do |convert|\n  convert << "input.jpg"\n  convert.clone(0).background(\'gray\').shadow(\'80x5+5+5\')\n  convert.negate\n  convert << "output.jpg"\nend\n```\n\n#### "Plus" options\n\n```ruby\nMiniMagick::Tool::Convert.new do |convert|\n  convert << "input.jpg"\n  convert.repage.+\n  convert.distort.+("Perspective", "more args")\nend\n```\n```\nconvert input.jpg +repage +distort Perspective \'more args\'\n```\n\n#### Stacks\n\n```ruby\nMiniMagick::Tool::Convert.new do |convert|\n  convert << "wand.gif"\n  convert.stack do |stack|\n    stack << "wand.gif"\n    stack.rotate(30)\n  end\n  convert << "images.gif"\nend\n```\n```\nconvert wand.gif \\( wand.gif -rotate 90 \\) images.gif\n```\n\n## Troubleshooting\n\n### Errors being raised when they shouldn\'t\n\nThis gem raises an error when ImageMagick returns a nonzero exit code.\nSometimes, however, ImageMagick returns nonzero exit codes when the command\nactually went ok. In these cases, to avoid raising errors, you can add the\nfollowing configuration:\n\n```rb\nMiniMagick.configure do |config|\n  config.whiny = false\nend\n```\n\nIf you\'re using the metal version, you can pass the `whiny` value to the\nconstructor:\n\n```rb\nMiniMagick::Tool::Identify.new(false) do |b|\n  b.help\nend\n```\n\n### `Errno::ENOMEM`\n\nIt can happen that, when dealing with very large images, the process runs out of\nmemory, and `Errno::ENOMEM` is raised in your code. In that case try installing\nthe [posix-spawn](https://github.com/rtomayko/posix-spawn) gem, and tell MiniMagick\nto use it when executing shell commands.\n\n```rb\nMiniMagick.configure do |config|\n  config.shell_api = "posix-spawn"\nend\n```\n\n## Thinking of switching from RMagick?\n\nUnlike RMagick, MiniMagick is a much thinner wrapper around ImageMagick.\n\n* To piece together MiniMagick commands refer to the [Mogrify\n  Documentation](http://www.imagemagick.org/script/mogrify.php). For instance\n  you can use the `-flop` option as `image.flop`.\n* Operations on a MiniMagick image tend to happen in-place as `image.trim`,\n  whereas RMagick has both copying and in-place methods like `image.trim` and\n  `image.trim!`.\n* To open files with MiniMagick you use `MiniMagick::Image.open` as you would\n  `Magick::Image.read`. To open a file and directly edit it, use\n  `MiniMagick::Image.new`.\n'
PHP library/bindings for Fire Eagle b'The Official Fire Eagle PHP Library\n===================================\n  Phillip Pearson and David Ayman Shamma\n  http://fireeagle.yahoo.net/developer/code/php\n  http://github.com/myelin/fireeagle-php-lib\n\nUsage\n=====\n\nSee example/walkthru.php for an example of using the library in a web\napplication.\n\nSee test/test.php for an example of using the library for a desktop or\ncommand-line application.\n\nLicense\n=======\n\nModified BSD license.'
kinda like hoe and newgem  but more for private gems b'h2. Why?\n\n"newgem":http://newgem.rubyforge.org/ and "hoe":http://seattlerb.rubyforge.org/hoe/ work great for open source projects. RStack is intended to be used behind the firewall. There are a couple of other differences. One being it uses "RSpec":http://rspec.info/ rather than test/unit. The second difference is RStack automatically works with "CruiseControl.rb":http://cruisecontrolrb.thoughtworks.com/. It does that by adding a @cruise_config.rb@ configuration and by including a @cruise@ task.\n\nh2. Usage\n\n<pre><code>\nrstack ninjas\n</code></pre>\n\nh2. Generated Files and Directories\n\n<pre><code>\njrun ~/tmp $ rstack ninjas\ncreating ninjas/lib/ninjas\ncreating ninjas/spec/shared\ncreating ninjas/spec\ncreating ninjas/bin\ncreating ninjas/lib\ncreating ninjas/lib\nmoving Rakefile to ninjas/Rakefile\nmoving README.txt to ninjas/README.txt\nmoving cruise_config.rb to ninjas/cruise_config.rb\nmoving main.rb to ninjas/lib/ninjas.rb\nmoving version.rb to ninjas/lib/ninjas/version.rb\nmoving spec_helper.rb to ninjas/spec/spec_helper.rb\n</pre></code>\n\nh2. Generated Rakefile\n\n<pre><code>\nrequire \'rubygems\'\nrequire \'rstack\'\nrequire File.join(File.dirname(__FILE__), \'lib\', \'ninjas\', \'version\')\n\nRStack::Configuration.new \'ninjas\' do |config|\n  config.summary = \'[ENTER A SUMMARY]\'\n  config.author = \'jrun\'\n  config.email = \'[ENTER YOUR EMAIL]\'\n  config.url = \'[ENTER A PROJECT URL]\'\n  config.version = Ninjas::Version::STRING\nend\n</pre></code>\n\nh2. Available Tasks\n<pre><code>\njrun ~/tmp/ninjas $ rake -T\n(in /Users/jrun/tmp/ninjas)\nrake clobber_package             # Remove package products\nrake clobber_spec:with_coverage  # Remove rcov products for spec:with_coverage\nrake gem                         # Build the gem file ninjas-0.1.0.gem\nrake package                     # Build all the packages\nrake repackage                   # Force a rebuild of the package files\nrake spec                        # Run specs\nrake spec:with_coverage          # Run specs through RCov and generate HTML...\n</code></pre>\n\n'
Allows models to have associations and instance bools based on past recent and future b"HasManyTenses\n===================\nHasManyTenses allows you to either use the created_at field on a Model or supply your own :compare_to column name.\nThis plugin allows you to use that field to get association collections like model.collection.recent, future, past and instance booleans like mode.past? model.future? model.recent?\n\nPrerequisites\n=============\nRails 1.2.6+\n\nInstalling the plugin\n=====================\n  -- Get the plugin:\n    git clone git://github.com/peimei/has_many_tenses.git vendor/plugins/has_many_tenses\n  \n  -- To get access to the instance methods just add has_many_tenses to your model\n     You can also modify the recency comparer via has_many_tenses(:recency => 30.minutes.ago)\n     You can also modify the compare_to comparer via has_many_tenses(:compare_to => :calendar_event)\n      \n  -- To use the association proxies do something like:\n      has_many :comments, :order => 'created_at ASC', :dependent => :destroy, \n        :extend => RailsJitsu::HasManyTenses::SingletonMethods\n\n  NOTES:\n  ======\n  This plugin was born from helping angelo0000 on #rubyonrails trying to dry up his code and seeing how far we could push it.\n\nCopyright (c) 2007 E. James O'Kelly, released under the MIT license\nwww.railsjitsu.com"
A lightweight, hpricot–based flickr client in ruby b"This is intended to be a nice flickr interface. ATM it only implements the stuff that I find to be useful, and as I have a need for more features I'll throw them in. But I'm putting it up on github so everyone can pull at it from all angles, and make it truly awesome. That's how it works, isn't it?\n\n-kjell, 2/5/08"
jQuery plugin that adds highlighting to image maps b"==========\nMaphilight\n==========\n\nMaphilight is a jQuery plugin that adds visual hilights to image maps.\n\nIt provides a single jQuery function: ``$('.foo').maphilight()``\n\nIn IE VML is used. In other browsers canvas is used. Maphilight has been\ntested in Firefox, IE, Safari, Chrome, and Opera.\n\nDocumentation is included in the ``docs`` directory, or can be found\nat http://davidlynch.org/js/maphilight/docs/\n\nDevelopment\n-----------\n\nIf you want to make changes to Maphilight, check out the repository and\nthen do:\n\n``> npm install``\n\nBefore submitting a pull request, make sure you've run\n\n``> grunt lint``\n\nand fixed any errors it reports.\n\nTo regenerate the minified version, you can run\n\n``> grunt build``\n"
get the mimetype of a file directly in Ruby b"MimetypeFu\n==========\n\nSome great Rails plugins like attachment_fu use the content type/mime type of a file to validate the instance of an object.\nThe plugin usually gets the mime type using the CGI request, however, if the file is already in the system, this approach won't work.\nAdobe Flash is also known not to send the proper mime type.\nAs an alternative, I wrote mimetype_fu, a simple plugin which will try to guess the mimetype of a file based on its extension.\n\nNote that mimetype_fu only looks at the extension to define its mime type if you are using Windows!\n\nhttp://code.google.com/p/mimetype-fu/\n\nThanks to forestcarlisle for his big report and patch.\n\n\nCopyright (c) 2008 Matt Aimonetti, released under the MIT license\n"
A quick & dirty git-powered Sinatra wiki b'h1. git-wiki\n\nA wiki engine that uses a Git repository as its data store.\n\nh2. Requirements\n\n* rubygems\n* sinatra\n* grit\n* redcloth\n* rubypants'
Web based PVR 
ObjectProxy provides a proxied interface to Ruby objects.  It lets you add methods to objects that don't normally support them. b"= ObjectProxy\n\n* http://github.com/JackDanger/object_proxy/tree/master\n\n== DESCRIPTION\n\nObjectProxy provides a proxied interface to Ruby objects.  It lets you add methods to objects that don't normally support them.\n\n== USAGE\n\nA simple extension to a fixnum:\n\n    fixnum = ObjectProxy.new(1234)\n    # => 1234\n    fixnum.proxy_class.class_eval do\n     define_method :hi_there do\n       'Ahoy!'\n     end\n    end\n    # => #&lt;Proc:0x018f58f8&gt;\n    fixnum.size\n    # => 4\n    fixnum.hi_there\n    # => Ahoy!\n\nA more complex example where a string is able to update itself from a text file\n\n    class FetchedString < ObjectProxy\n      def initialize(target, filename)\n        @target = target\n        @filename = filename\n      end\n      \n      def update\n        @target = File.read(filename)\n      end\n    end\n    \n    # write a string into a file\n    File.open('/tmp/greeting.txt', 'w') {|f| f.write('welcome')}\n    \n    string = FetchedString.new('hey there', '/tmp/greeting.txt')\n    # => 'hey there'\n    string.class\n    # => String\n    string.update\n    # => 'welcome'\n\n\n== INSTALL:\n\n* sudo gem install object_proxy\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
RSpec support for Waves b'= waves-rspec\n\n* http://blog.nanorails.com/waves-rspec\n* http://rubyforge.org/projects/waves-rspec/\n\n== DESCRIPTION:\n\nRSpec support for the Waves Framework\n\n== FEATURES/PROBLEMS:\n\n* creates a spec skeleton wit\nrake generate:rspec\n\n* Adds Spec generation to waves generators\nrake generate:model name=...\nrake generate:controller name=...\n\n* Adds tasks to run specs\nrake spec\n\n== SYNOPSIS:\n* requires a "test" configuration.  Add ./configurations/test.rb (modeled on configurations/development.rb)\n\nExample:\n\n$ waves test5\n** Creating new Waves application ...\n** Application created!\n$ cd test5\n## Add require \'waves-spec\' in rakefile\n$ mkdir db\n## Create test configuration with (for example) [database :adapter => \'sqlite\', :database => \'db/test5_test\']\n$ rake generate:rspec\n$ rake generate:model name=task\n(in /Users/psq/src/waves/test5)\n** spec/models created\n** spec/models/task_spec.rb created\n$ rake schema:migration name=task\n## Fill migration\n$ rake schema:migrate mode=test --trace\n(in /Users/psq/src/waves/test5)\n** Invoke schema:migrate (first_time)\n** Execute schema:migrate\n$ rake spec\n(in /Users/psq/src/waves/test5)\nRuby/Extensions: String#starts_with? is already defined; not overwriting\n.\n\nFinished in 0.190411 seconds\n\n1 example, 0 failures\n\n\n== REQUIREMENTS:\n\n* waves\n\n== INSTALL:\n\n* sudo gem install waves-rspec\n\n* add "require \'waves-rspec" to your Rakefile\n\n== DEVELOPING WITH WAVES LOCALLY\neasiest it to install as a local gem inside waves with\n\nrake package\ngem install --local pkg/*.gem -i [WAVE_APP]/gems/\n'
Grit is a Ruby library for extracting information from a git repository in an object oriented manner. b'grit\n    by Tom Preston-Werner, Chris Wanstrath\n    http://grit.rubyforge.org\n\n== DESCRIPTION:\n\nGrit is a Ruby library for extracting information from a git repository in and\nobject oriented manner.\n\n== REQUIREMENTS:\n\n* git (http://git.or.cz) tested with 1.5.3.4\n\n== INSTALL:\n\nsudo gem install grit\n\n== SOURCE:\n\nGrit\'s git repo is available on GitHub, which can be browsed at:\n\nhttp://github.com/~mojombo/grit\n\nand cloned from:\n\ngit://github.com/mojombo/grit.git\n\n== USAGE:\n\nGrit gives you object model access to your git repository. Once you have\ncreated a repository object, you can traverse it to find parent commit(s),\ntrees, blobs, etc.\n\n= Initialize a Repo object\n\nThe first step is to create a Grit::Repo object to represent your repo. I\ninclude the Grit module so reduce typing.\n\n  include Grit\n  repo = Repo.new("/Users/tom/dev/grit")\n  \nIn the above example, the directory /Users/tom/dev/grit is my working\nrepo and contains the .git directory. You can also initialize Grit with a \nbare repo.\n\n  repo = Repo.new("/var/git/grit.git")\n  \n= Getting a list of commits\n\nFrom the Repo object, you can get a list of commits as an array of Commit\nobjects.\n\n  repo.commits\n  # => [#<Grit::Commit "e80bbd2ce67651aa18e57fb0b43618ad4baf7750">,\n        #<Grit::Commit "91169e1f5fa4de2eaea3f176461f5dc784796769">,\n        #<Grit::Commit "038af8c329ef7c1bae4568b98bd5c58510465493">,\n        #<Grit::Commit "40d3057d09a7a4d61059bca9dca5ae698de58cbe">,\n        #<Grit::Commit "4ea50f4754937bf19461af58ce3b3d24c77311d9">]\n        \nCalled without arguments, Repo#commits returns a list of up to ten commits\nreachable by the master branch (starting at the latest commit). You can ask\nfor commits beginning at a different branch, commit, tag, etc.\n\n  repo.commits(\'mybranch\')\n  repo.commits(\'40d3057d09a7a4d61059bca9dca5ae698de58cbe\')\n  repo.commits(\'v0.1\')\n  \nYou can specify the maximum number of commits to return.\n\n  repo.commits(\'master\', 100)\n  \nIf you need paging, you can specify a number of commits to skip.\n\n  repo.commits(\'master\', 10, 20)\n  \nThe above will return commits 21-30 from the commit list.\n        \n= The Commit object\n\nCommit objects contain information about that commit.\n\n  head = repo.commits.first\n  \n  head.id\n  # => "e80bbd2ce67651aa18e57fb0b43618ad4baf7750"\n  \n  head.parents\n  # => [#<Grit::Commit "91169e1f5fa4de2eaea3f176461f5dc784796769">]\n  \n  head.tree\n  # => #<Grit::Tree "3536eb9abac69c3e4db583ad38f3d30f8db4771f">\n  \n  head.author\n  # => #<Grit::Actor "Tom Preston-Werner <tom@mojombo.com>">\n  \n  head.authored_date\n  # => Wed Oct 24 22:02:31 -0700 2007\n  \n  head.committer\n  # => #<Grit::Actor "Tom Preston-Werner <tom@mojombo.com>">\n  \n  head.committed_date\n  # => Wed Oct 24 22:02:31 -0700 2007\n  \n  head.message\n  # => "add Actor inspect"\n  \nYou can traverse a commit\'s ancestry by chaining calls to #parents.\n\n  repo.commits.first.parents[0].parents[0].parents[0]\n  \nThe above corresponds to master^^^ or master~3 in git parlance.\n\n= The Tree object\n\nA tree records pointers to the contents of a directory. Let\'s say you want\nthe root tree of the latest commit on the master branch.\n\n  tree = repo.commits.first.tree\n  # => #<Grit::Tree "3536eb9abac69c3e4db583ad38f3d30f8db4771f">\n  \n  tree.id\n  # => "3536eb9abac69c3e4db583ad38f3d30f8db4771f"\n  \nOnce you have a tree, you can get the contents.\n\n  contents = tree.contents\n  # => [#<Grit::Blob "4ebc8aea50e0a67e000ba29a30809d0a7b9b2666">,\n        #<Grit::Blob "81d2c27608b352814cbe979a6acd678d30219678">,\n        #<Grit::Tree "c3d07b0083f01a6e1ac969a0f32b8d06f20c62e5">,\n        #<Grit::Tree "4d00fe177a8407dbbc64a24dbfc564762c0922d8">]\n\nThis tree contains two Blob objects and two Tree objects. The trees are\nsubdirectories and the blobs are files. Trees below the root have additional\nattributes.\n\n  contents.last.name\n  # => "lib"\n  \n  contents.last.mode\n  # => "040000"\n  \nThere is a convenience method that allows you to get a named sub-object\nfrom a tree.\n\n  tree/"lib"\n  # => #<Grit::Tree "e74893a3d8a25cbb1367cf241cc741bfd503c4b2">\n  \nYou can also get a tree directly from the repo if you know its name.\n\n  repo.tree\n  # => #<Grit::Tree "master">\n  \n  repo.tree("91169e1f5fa4de2eaea3f176461f5dc784796769")\n  # => #<Grit::Tree "91169e1f5fa4de2eaea3f176461f5dc784796769">\n  \n= The Blob object\n\nA blob represents a file. Trees often contain blobs.\n\n  blob = tree.contents.first\n  # => #<Grit::Blob "4ebc8aea50e0a67e000ba29a30809d0a7b9b2666">\n  \nA blob has certain attributes.\n\n  blob.id\n  # => "4ebc8aea50e0a67e000ba29a30809d0a7b9b2666"\n  \n  blob.name\n  # => "README.txt"\n  \n  blob.mode\n  # => "100644"\n  \n  blob.size\n  # => 7726\n  \nYou can get the data of a blob as a string.\n\n  blob.data\n  # => "Grit is a library to ..."\n  \nYou can also get a blob directly from the repo if you know its name.\n\n  repo.blob("4ebc8aea50e0a67e000ba29a30809d0a7b9b2666")\n  # => #<Grit::Blob "4ebc8aea50e0a67e000ba29a30809d0a7b9b2666">\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 Tom Preston-Werner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Build with Rake: a rake extension to a more complete build system 
A jQuery plugin to ease the development of dynamic html wireframes with state. b'PolyPage\n========\nPolypage was designed to ease the process of showing \nmultiple page states in html mock-ups. \nBy simply adding class names to a document you can \nimply state and conditional view logic.\n\n\nBASIC USAGE\n-----------\n\nInitialise PolyPage...\n\n    $(document).ready(function() {\n    \t$(\'body\').polypage();\n    });\n\nUse stateful class names in your html...\n\n    <li class="pp_admin">pp_admin</li>\n    <li class="pp_not_logged_in other_test_class">pp_not_logged_in</li>\n    <li class="test_class pp_logged_in_or_admin other_test_class">pp_logged_in_or_admin</li>\n    <li class="pp_logged_in_and_admin">pp_logged_in_and_admin</li>\n    <li class="pp_not_logged_in_and_not_admin">pp_not_logged_in_and_not_admin</li>\n\nUse special href attributes to trigger state changes if required...\n\n    <a href="#pp_toggle_logged_in">Log In Toggle</a>\n    <a href="#pp_set_logged_in_true">Log In</a>\n    <a href="#pp_set_logged_in_false">Log Out</a>\n\n\nUse special form actions to trigger state changes if required...\n\n    <form action="#pp_toggle_logged_in" method="get">\n      <input type="submit" value="Log in"/>\n    </form>\n\n\nAPI\n---\n\nPolyPage makes extensive use of custom events and triggering/binding to these is the recommended way of interacting with page states programatically. Here are some examples (which assume you have bound polypage to the \'body\')...\n\nToggle the logged in state...\n\n    $(\'body\').trigger(\'pp_toggleState\', \'logged_in\');\n\nSet the logged in state...\n\n    $(\'body\').trigger(\'pp_setState\', { logged_in:true });\n\nSet the logged in state...\n\n    $(\'body\').trigger(\'pp_setState\', { logged_in:true });\n\nListen for state changes...\n\n    $(\'body\').bind(\'pp_stateChange\', function(e, state) { \n      alert("state "+ state.name + " changed to " + state.value); \n    });\n\nSee the specs for some more examples.\n\nADVANCED USAGE\n--------------\n\nUnder the hood PolyPage is logically separated into a core library and several extensions. The currently implemented extensions are...\n\n- Base: the core event system and bare essentials to get polypage working\n- GUI: the nav bar for pre-built GUI interactions\n- Events: some default event handlers for taking care of polypage formatted click and submit events automagically\n- Cookies: cookie support for maintaining state across pages\n- Keyboard: Keyboard shortcuts for toggling states via "ALT + first_letter_of_state_name"\n\nFull documentation for all of the extensions will be coming soon but for now you can see the source code for available options.\n\nSome usage examples\n----------------------\n\nStarting PolyPage without cookie support or Event helpers...\n\n    $(\'body\').polypage({ cookie:false, events:false });\n\n\nStarting PolyPage with a 2 day cookie expiry a \'ux\' prefix and no Event helpers...\n\n    $(\'body\').polypage({ prefix:\'ux\', cookie:{ expires:2 }, events:false });\n\nRoll your own PolyPage! if you want to completely customise PolyPage then you can break away from using the polypage() function and initialize the individual components yourself...\n\n    $(el).ppBase(opts);\n    $(el).ppEvents(opts);\n    $(el).ppGUI(opts);\n    $(el).ppCookie(opts);\n    $(el).ppKeyboard(opts);\n\n\nMORE INFO\n---------\nFor an example open the index.html file in a web browser.\n\nIf you would prefer be using MooTools instead of jQuery then for the moment you really should checkout cheeaun\'s fork http://github.com/cheeaun/polypage which contains lots of MooTools goodness.\n\nCONTRIBUTERS\n------------\n- Andy Kent <andy.kent@me.com> (http://adkent.com)\n- Natalie Downe <nat@natbat.net> (http://notes.natbat.net)\n- Phil Oye <philoye@philoye.com> (http://philoye.com)\n- Lim Chee Aun <cheeaun@gmail.com> (http://cheeaun.com)\n- Yoan Blanc <yoan@dosimple.ch> (http://yoan.dosimple.ch/)\n'
Active Record backup is a Rails plugin which lets you backup your database schema and content in a schema.rb file and fixtures. b'=ActiveRecord-backup\n\nUsing rake tasks, dump your schema and data into yml files. One folder gets created per SVN revision. You can then simply load any previous data using rake.\n\nprerequisite: Your project must be under SVN.\n\n==Usage:\n\nrake backup:db:dump               # create a backup folder containing your db schema and content data (see backup/{env}/build_{build number})\nrake backup:db:extract_content    # Create YAML fixtures from your DB content\nrake backup:db:extract_schema     # Dump the db schema\nrake backup:db:load               # load your backed up data from a previous build. rake backup:db:load BUILD=1182 or rake backup:db:load BUILD=1182 DUMP_ENV=production\n\n\n==Example\n\n    rake backup:db:dump\n\n    rake backup:db:load BUILD=2547\n\n==Capistrano 2 usage example   \n\n(you first need to create a backup folder) \n\n    set :backup_dir, "#{deploy_to}/backup"\n\n    before :deploy do\n      db.backup\n      db.move_backup\n    end\n\n    namespace :db do\n      desc \'create the production database\'\n      task :create do\n        run "cd #{current_release} && rake db:create RAILS_ENV=production"\n      end\n\n      desc \'dump the database schema and content\'\n      task :backup do\n        run "cd #{current_release} && rake backup:db:dump RAILS_ENV=production"\n      end\n\n      desc \'timestamp the backup file\'\n      task :move_backup do\n        run "cd #{current_release} && mv backup/production #{backup_dir}/production_#{Time.now.strftime("%Y-%m-%d_%H-%M")}"\n      end\n    end\n\n==Contributors\n Cyril Mougel : cyril.mougel@gmail.com (ar_backup windows compatible and the revision number is parsed in a more efficient way)\n\nCopyright (c) 2007 Matt Aimonetti, released under the MIT license\n'
Run you migrations against certain git changelists b'GittyMigrations\n===============\n\nRequires a extended \'rubygit\' gem that has stashes\ncd vendor/plugins/gitty_migrations/extended_rubygit_gem\nsudo gem install git-1.0.5\n\nExample\n=======\n\nclass MyMigration < ActiveRecord::Migration\n  \n\t# Will rollback to the commit that this file was checked in on\n  use_git\n \n\t# Will rollback to a certain commit that you define\n\t# use_git :revision => "2024589c214b41c8b29bcd6444c2d49807760a5a"\n\n  def self.up\n    puts "This is a test migration"\n  end\n\n  def self.down\n    \n  end\n  \nend\n\nTODO\n===============\n\n\xe2\x88\x9a  Check for the revision where the migration was checked in or last edited and \n\tautomatically use that revision if no revision has been specified\n* If there are no stashes then clear the stash when we are done with the migrations\n\t\n\t\nCopyright (c) 2008 Eric Goodwin, released under the MIT license'
 b'WhoToWho\n\n * http://dev.shingara.fr/projects/show/4\n * mailto:cyril.mougel@gmail.com\n\n== HISTORY:\n\nWhoToWho made in first for my friend group. For Christmas, we decide to\ngroup us and we offer one present for only one other personne. The price is\ndefine in first for this present.\n\nBefore WhoToWho, we made a group before the Christmas night and we made a\nrandom choice of who must offer to who. The choice is made with little paper\nin hat.\n\nNow we are in different place and we can\'t see every week. So, like we have\nall an email, I created WhoToWho. So I can\'t know who must be offer to who and\nit\'s a total random.\n\nYes, WhoToWho is useless. But What is really usefull?\n\n== DESCRIPTION:\n\nWhoToWho is a simple script to define a name randomly in list of name. And\nsend this name by email. With WhoToWho you can define several thing:\n\n * Subject of Mail\n * Format of Mail with 2 parameters (who and towho)\n * The configuration of smtp connection\n * Add options for SSL if your smtp connection is a Gmail account\n\n== FEATURES:\n\n * Randomize a list and choice one persone for another\n * Send an email who the personne know who is define to it\n * Define the subject and the content of mail with 2 places for define word\n * who and to who\n * Possibility to exclude one or several person for another. With this\n   feature, one person can\'t have another person define.\n\n== SYNOPSIS:\n\nUsage: ./whotowho.rb [options]\n  -v, --verbose                    Run verbosely\n  -f, --file FILE                  File where is all data\n  -c, --config FILE                File where is all config\n  -g, --gmail                      Define option if use a Gmail account for SMTP\n  -s, --subject SUBJECT            Define the subject to send by email\n  -m, --mail MAIL                  Send a file where the content is with 2 params #{who} and #{towho}\n\n== REQUIREMENT:\n\n * ActionMailer from Ruby On Rails project : gem install actionmailer\n\n== INSTALL:\n\n= Archive *.tar.gz\n\n * Install actionmailer before\n * Untar the archive\n * Go to bin directory\n * Start command whotowho\n\n= Gem\n\n * gem install whotowho\n\n== Example of command\n\nruby whotowho -m mail-example.txt -s \'a good subject\' -f ../data.yaml -c conf.yaml -g\n\n== Example of File configuration\n\n= File data example\n\nThis file define the list of name and email. The format of this file is YAML. It\'s the serialization of an Array of an Array in Ruby. A example of format is :\n\n- - name\n  - email\n- - name2\n  - email2\n- - name3\n  - email3\n\nIf you want define an exclude person to another you need had an Exclude list to the key exclude after email, like following :\n\n- - name\n  - email\n  - :exclude: - name2\n- - name2\n  - email2\n  - :exclude: - name5\n              - name6\n- - name3\n  - email3\n- - name4\n  - email4\n- - name5\n  - email5\n- - name6\n  - email6\n\n= File of mail configuration\n\nIt\'s the same of actionmailer. But I have add a configuration of from. You need had :from:\n\n:address: Allows you to use a remote mail server. Just change it from its default "localhost" setting.\n:port: On the off chance that your mail server doesn\xe2\x80\x98t run on port 25, you can change it.\n:domain: If you need to specify a HELO domain, you can do it here.\n:user_name: If your mail server requires authentication, set the username in this setting.\n:password: If your mail server requires authentication, set the password in this setting.\n:authentication: If your mail server requires authentication, you need to specify the authentication type here. This is a symbol and one of :plain, :login, :cram_md5\n:from: Define the email who send all mail in from header\n\n= File of mail content\n\nThis file is a simple text file. You have two patterns who change before the send.\n\n * #{who} : it\'s the name of person who receiv the mail\n * #{towho} : the name of person assign to personne who receiv this mail\n\n== LICENSE:\n\nThis code is free to use under the terms of the MIT license.\n'
Tutorial para Geneura 
PutsGIS. PostGIS, for Rails (featuring acts_as_line: treat start/end date columns as a single spatial object.) b'being rewritten.\n\nsee lib/act_as_line.rb for options.\n\nActsAsLine\n==========\n\nNeed to add tests as a priority, and must clean things up.\n\nIn order to maintain consistency with postgis methods, intersects \nis now simply intersects, the \'touching\' alias has been removed.\n\nadded:\n\na.intersects?(b)\na.covers?(b)\na.covered_by?(b)\n\nFoo.within(b,:days,3,options={}) #also :secs, :hours\nFoo.covers(b,options={})\nFoo.covered_by(b,options={})\n\ncovers: \'Geom A covers Geom B if no points of B lie in the exterior of A\'\n\n\nEarly days.\n\nThings are progressing (and probably breaking in places). \nSome big changes, and some very undry source....\n\nacts_as_line.rb has been rewritten to include instance methods.\n\nI am basically adding functions as I need them.\n\n> b = Foo.find(:first)\n\nLength of line in seconds:\n\n> b.duration \n\nalso\n\n> b.duration(:days)\n> b.duration(:weeks)\n\nQuery against a part line, in this case the first half:\n\n> Foo.touching_segment(b,[0,0.5])\n\n\xef\xbf\xbd- where 0.5 is the midpoint of b\'s geom. A new line is created using the \n   start/end points specified in the array.\n\n Find records that do not intersect the latter two thirds of the line (and\n have a bar_id of 5):\n\n> Foo.not_touching_segment(b,[0.3,1], :bar_id => 5)\n\nThis needs to be able to support actual days/hours, rather than a proportion\nof a line -- which is not very robost if you are using it for bookings and\nsuch like.\n\n\'asunder\' method is now not_touching.\n\n> b = Booking.find(:first)\n\n> Booking.not_touching(b)\n\nFoo.asunder is now an alias for the class method, not_in_intersects\nwhich uses joins to speed up queries against a large dataset.\n\nclass Property < ActiveRecord::Base\n  has_many :bookings\n  acts_as_line\nend\n\nclass Booking < ActiveRecord::Base\n  belongs_to :property\n  acts_as_line\nend\n\nclass Bookable < ActiveRecord::Base\n  acts_as_line\nend\n\n> week = Bookable.find(38)\n\nFind all *unbooked* properties for the booking period \'week\' \nwithout selecting each property:\n\n> Property.asunder(Booking,week)\n\nSQL:\n\n  SELECT (id) FROM properties WHERE properties.id \n  NOT IN (SELECT DISTINCT on (properties.id) properties.id FROM bookings \n  INNER JOIN properties ON properties.id=bookings.property_id\n  WHERE (ST_Intersects(bookings.geom,(SELECT geom FROM bookables \n  WHERE id = 38)) = true))\n\n  [SQL (0.000791) -- small dataset as yet, but seems reasonable]\n\n  SELECT (id) FROM properties WHERE properties.id \n  NOT IN (SELECT DISTINCT on (properties.id) properties.id FROM bookings \n  INNER JOIN properties ON properties.id=bookings.property_id\n  WHERE (ST_Intersects(bookings.geom,(SELECT geom FROM bookables \n  WHERE id = 38)) = true))\n\n\n\nExample\n=======\n\ntable must already have a start_date and end_date column of type date or datetime.\n\nscript/generate datesgeom_migration table_name\n\n runs the following on target table:\n   execute("ALTER TABLE table_name ADD COLUMN geom geometry;")\n   execute("CREATE INDEX idx_table_name_dates_geom ON table_name USING GIST (geom);")\n\n\nobject = Foo.find(:first)\n\nresults = Foo.touching(object) | results = Foo.intersects(object,true)\nresults = Foo.not_touching(object) | results = Foo.intersects(object,false)\nresults = Foo.touching(object,{:id => 123})\nresults = Foo.touching(object,{:id => \'>123\'})\nresults = Foo.touching(object,{:id => \'<>123\'}) etc\nresults = Foo.touching(object,{:id => 123, :title => \'bar\'})\n\n'
Crowd-sourced isolation of the 10,060 frames of Michael Jackson's white glove in his nationally televised landmark performance of Billy Jean. 
Chat app (developed to test Juggernaut) b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
Get song information from rolldabeats.com, with iTunes integration 
Create bookmarks out of whole files for syncing to iPhone 
Project to help learning Git 
Opportunity Tickets, a ticket manager I wrote for my company awhile back, been using it for 2 years b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in \nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in \nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting started\n\n1. Run the WEBrick servlet: <tt>ruby script/server</tt> (run with --help for options)\n   ...or if you have lighttpd installed: <tt>ruby script/lighttpd</tt> (it\'s faster)\n2. Go to http://localhost:3000/ and get "Congratulations, you\'ve put Ruby on Rails!"\n3. Follow the guidelines on the "Congratulations, you\'ve put Ruby on Rails!" screen\n\n\n== Example for Apache conf\n\n  <VirtualHost *:80>\n    ServerName rails\n    DocumentRoot /path/application/public/\n    ErrorLog /path/application/log/server.log\n  \n    <Directory /path/application/public/>\n      Options ExecCGI FollowSymLinks\n      AllowOverride all\n      Allow from all\n      Order allow,deny\n    </Directory>\n  </VirtualHost>\n\nNOTE: Be sure that CGIs can be executed in that directory as well. So ExecCGI\nshould be on and ".cgi" should respond. All requests from 127.0.0.1 go\nthrough CGI, so no Apache restart is necessary for changes. All other requests\ngo through FCGI (or mod_ruby), which requires a restart to show changes.\n\n\n== Debugging Rails\n\nHave "tail -f" commands running on both the server.log, production.log, and\ntest.log files. Rails will automatically display debugging and runtime\ninformation to these files. Debugging info will also be shown in the browser\non requests from 127.0.0.1.\n\n\n== Breakpoints\n\nBreakpoint support is available through the script/breakpointer client. This\nmeans that you can break out of execution at any point in the code, investigate\nand change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find_all\n      breakpoint "Breaking out from the list"\n    end\n  end\n  \nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the breakpointer window. Here you can do things like:\n\nExecuting breakpoint "Breaking out from the list" at .../webrick_server.rb:16 in \'breakpoint\'\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>, \n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a breakpoint"\n  => "hello from a breakpoint"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first \n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you press CTRL-D\n\n\n== Console\n\nYou can interact with the domain model by starting the console through script/console. \nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>console production</tt>.\n\n\n== Description of contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblog_controller.rb for\n  automated URL mapping. All controllers should descend from\n  ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n  \napp/views\n  Holds the template files for the view that should be named like\n  weblog/index.rhtml for the WeblogController#index action. All views use eRuby\n  syntax. This directory can also be used to keep stylesheets, images, and so on\n  that can be symlinked to public.\n  \napp/helpers\n  Holds view helpers that should be named like weblog_helper.rb.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ncomponents\n  Self-contained mini-applications that can bundle together controllers, models, and views.\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n    \npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
This is software we wrote for a medical billing client, then they went out of business and never used it... 
Terminal for KDE b'\nKonsole - KDE\'s Terminal Emulator\n==================================\n\nKonsole is a terminal program for KDE.\n\nAs well as being a standalone program, it is also used by other KDE programs such as the Kate editor\nand KDevelop development environment to provide easy access to a terminal window. \n\nUp-to-date information about the latest releases can be found on Konsole\'s website\nat http://konsole.kde.org\n\nKonsole\'s features and usage are explained and illustrated in the Konsole handbook,\nwhich can be accessed by browsing to "help:/konsole" in Konqueror.\n\nDirectory Structure\n===================\n    /user-doc       README files, primarily for advanced users, explaining various\n                    aspects of Konsole such as fonts and keyboard handling in-depth.\n\n    /developer-doc  README files and resources for developers of Konsole.  This\n                    includes information on the design of Konsole\'s internals and\n                    the VT100 terminal on which Konsole\'s emulation is based.\n\n    /konsole        Source code for Konsole, including the embedded versions of\n                    Konsole which are used in Kate, KDevelop and others.\n\n    /settings       Source code for Konsole\'s settings dialog.  This includes\n                    the Session and Color Schema editors.\n\n    /desktop        .desktop files for Konsole, used to launch the program\n                    from KDE\'s various menus and other application launchers.\n                    The "Tip of the Day" startup tips are also stored here. \n\n    /other          Data files for use with Konsole, including Konsole\'s icons,\n                    as well as the keyboard setup and color schemes provided with\n                    Konsole\n     \n\nContact\n===================\n\nDiscussions about Konsole\'s development are held on the konsole-devel mailing list, which\ncan be accessed at https://mail.kde.org/mailman/listinfo/konsole-devel.\n\n==================================\n\nShare and enjoy it,\n  Lars\n'
Deprecated; use https://github.com/ocaml/ocaml instead b'OVERVIEW:\n\nObjective Caml is an implementation of the ML language, based on\nthe Caml Light dialect extended with a complete class-based object system\nand a powerful module system in the style of Standard ML.\n\nObjective Caml comprises two compilers. One generates bytecode\nwhich is then interpreted by a C program. This compiler runs quickly,\ngenerates compact code with moderate memory requirements, and is\nportable to essentially any 32 or 64 bit Unix platform. Performance of\ngenerated programs is quite good for a bytecoded implementation.\nThis compiler can be used either as a standalone, batch-oriented\ncompiler that produces standalone programs, or as an interactive,\ntoplevel-based system.\n\nThe other compiler generates high-performance native code for a number\nof processors. Compilation takes longer and generates bigger code, but\nthe generated programs deliver excellent performance, while retaining\nthe moderate memory requirements of the bytecode compiler. The\nnative-code compiler currently runs on the following platforms:\n\nTier 1 (actively used and maintained by the core Caml team):\n\n    AMD64 (Opteron)    Linux\n    IA32 (Pentium)     Linux, FreeBSD, MacOS X, MS Windows\n    PowerPC            MacOS X\n\nTier 2 (maintained when possible, with help from users):\n\n    Alpha              Digital Unix/Compaq Tru64, Linux, all BSD\n    AMD64              FreeBSD, OpenBSD\n    HP PA-RISC         HPUX 11, Linux\n    IA32 (Pentium)     NetBSD, OpenBSD, Solaris 9\n    IA64               Linux, FreeBSD\n    MIPS               IRIX 6\n    PowerPC            Linux, NetBSD\n    SPARC              Solaris 9, Linux, NetBSD\n    Strong ARM         Linux\n\nOther operating systems for the processors above have not been tested,\nbut the compiler may work under other operating systems with little work.\n\nBefore the introduction of objects, Objective Caml was known as Caml\nSpecial Light. Objective Caml is almost upwards compatible with Caml\nSpecial Light, except for a few additional reserved keywords that have\nforced some renaming of standard library functions.\n\nCONTENTS:\n\n  Changes               what\'s new with each release\n  INSTALL               instructions for installation\n  LICENSE               license and copyright notice\n  Makefile              main Makefile\n  README                this file\n  README.win32          infos on the MS Windows ports of O.Caml\n  asmcomp/              native-code compiler and linker\n  asmrun/               native-code runtime library\n  boot/                 bootstrap compiler\n  bytecomp/             bytecode compiler and linker\n  byterun/              bytecode interpreter and runtime system\n  camlp4/               the Camlp4 preprocessor\n  config/               autoconfiguration stuff\n  debugger/             source-level replay debugger\n  driver/               driver code for the compilers\n  emacs/                Caml editing mode and debugger interface for GNU Emacs\n  lex/                  lexer generator\n  maccaml/              the Macintosh GUI\n  ocamldoc/             documentation generator\n  otherlibs/            several external libraries\n  parsing/              syntax analysis\n  stdlib/               standard library\n  tools/                various utilities\n  toplevel/             interactive system\n  typing/               typechecking\n  utils/                utility libraries\n  yacc/                 parser generator\n\nCOPYRIGHT:\n\nAll files marked "Copyright INRIA" in this distribution are copyright\n1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\nInstitut National de Recherche en Informatique et en Automatique\n(INRIA) and distributed under the conditions stated in file LICENSE.\n\nINSTALLATION:\n\nSee the file INSTALL for installation instructions on Unix, Linux and \nMacOS X machines.  For MS Windows, see README.win32.\n\nDOCUMENTATION:\n\nThe Objective Caml manual is distributed in HTML, PDF, Postscript,\nDVI, and Emacs Info files.  It is available on the World Wide Web, at\n\n        http://caml.inria.fr/\n\nAVAILABILITY:\n\nThe complete Objective Caml distribution can be accessed at\n\n        http://caml.inria.fr/\n\nKEEPING IN TOUCH WITH THE CAML COMMUNITY:\n\nThere exists a mailing list of users of the Caml implementations\ndeveloped at INRIA. The purpose of this list is to share\nexperience, exchange ideas (and even code), and report on applications\nof the Caml language. Messages can be written in English or in\nFrench. The list has about 750 subscribers.\n\nMessages to the list should be sent to:\n\n              caml-list@inria.fr\n\nYou can subscribe to this list via the Web interface at\n\n    http://yquem.inria.fr/cgi-bin/mailman/listinfo/caml-list\n\nArchives of the list are available on the Web site http://caml.inria.fr/\n\nThe Usenet news groups comp.lang.ml and comp.lang.functional\nalso contains discussions about the ML family of programming languages,\nincluding Caml.\n\nBUG REPORTS AND USER FEEDBACK:\n\nPlease report bugs using the Web interface to the bug-tracking system\nat http://caml.inria.fr/bin/caml-bugs\n\nTo be effective, bug reports should include a complete program\n(preferably small) that exhibits the unexpected behavior, and the\nconfiguration you are using (machine type, etc).\n\nYou can also contact the implementors directly at caml@inria.fr.\n\n\n----\n$Id$\n'
A generic plugin system for django. b'==============\nDjango Plugins\n==============\n\nThis is a generic plugin application for Django.\n\nFor install instructions look at INSTALL.txt and for complete docs check the docs/ folder.\n'
Ruby/Git is a Ruby library that can be used to create, read and manipulate Git repositories. b'== Git Library for Ruby\n\nLibrary for using Git in Ruby.\n\n= Homepage\n\nThe Ruby/Git homepage is currently at : \n\nhttp://jointheconversation.org/rubygit\n\nGit public hosting of the project source code is at:\n\nhttp://repo.or.cz/w/rubygit.git\n\n= Roadmap\n\nRight now I\'m forking calls to the \'git\' binary, \nbut eventually I\'ll replace that with either C bindings\nto libgit or libgit-thin, or I\'ll write pure ruby\nhandlers for at least some of the Git stuff.\n\nMany of the simple read-only operations have already been\nmoved to pure ruby.\n\n= Major Objects\n\nGit::Base - this is the object returned from a Git.open or Git.clone.  \nMost major actions are called from this object.\n\nGit::Object - this is the base object for your tree, blob and commit objects,\nreturned from @git.gtree or @git.object calls.  the Git::AbstractObject will\nhave most of the calls in common for all those objects.\n\nGit::Diff - returns from a @git.diff command.  It is an Enumerable that returns\nGit::Diff:DiffFile objects from which you can get per file patches and insertion/deletion\nstatistics.  You can also get total statistics from the Git::Diff object directly.\n\nGit::Status - returns from a @git.status command.  It is an Enumerable that returns\nGit:Status::StatusFile objects for each object in git, which includes files in the working\ndirectory, in the index and in the repository.  Similar to running \'git status\' on the command\nline to determine untracked and changed files.\n\nGit::Branches - Enumerable object that holds Git::Branch objects.  You can call .local or .remote\non it to filter to just your local or remote branches.\n\nGit::Remote - A reference to a remote repository that is tracked by this repository.\n\nGit::Log - An Enumerable object that references all the Git::Object::Commit objects that encompass\nyour log query, which can be constructed through methods on the Git::Log object, like:\n\n @git.log(20).object("HEAD^").since("2 weeks ago").between(\'v2.6\', \'v2.7\').each { |commit| [block] } \n\n= Gitr\n\nI have included a command line pure-ruby git client called \'gitr\'\n\nThe following commands are available - they all will run in pure ruby, without forking out the the git binary.\nIn fact, they can be run on a machine without git compiled on it.\n\ncommands: log\n          log-shas\n          cat-file (treeish)\n          rev-parse (treeish)\n          branches\n          config\n          ls-tree (tree)\n          \n\n= Examples\n\nHere are a bunch of examples of how to use the Ruby/Git package. \n\nFirst you have to remember to require rubygems if it\'s not.  Then include the \'git\' gem.\n\n   require \'rubygems\'\n   require \'git\'\n\nHere are the operations that need read permission only.\n      \n   g = Git.open (working_dir, :log => Logger.new(STDOUT))\n   \n   g.index\n   g.index.readable?\n   g.index.writable?\n   g.repo\n   g.dir\n   \n   g.log   # returns array of Git::Commit objects\n   g.log.since(\'2 weeks ago\')\n   g.log.between(\'v2.5\', \'v2.6\')\n   g.log.each {|l| puts l.sha }\n   g.gblob(\'v2.5:Makefile\').log.since(\'2 weeks ago\')\n   \n   g.object(\'HEAD^\').to_s  # git show / git rev-parse\n   g.object(\'HEAD^\').contents\n   g.object(\'v2.5:Makefile\').size\n   g.object(\'v2.5:Makefile\').sha\n   \n   g.gtree(treeish)\n   g.gblob(treeish)\n   g.gcommit(treeish)\n   \n   \n   commit = g.gcommit(\'1cc8667014381\')\n    commit.gtree\n    commit.parent.sha\n    commit.parents.size\n    commit.author.name\n    commit.author.email\n    commit.author.date.strftime("%m-%d-%y")\n    commit.committer.name\n    commit.date.strftime("%m-%d-%y")\n    commit.message\n   \n  tree = g.gtree("HEAD^{tree}")\n    tree.blobs\n    tree.subtrees\n    tree.children # blobs and subtrees\n   \n   g.revparse(\'v2.5:Makefile\')\n   \n   g.branches # returns Git::Branch objects\n   g.branches.local\n   g.branches.remote\n   g.branches[:master].gcommit\n   g.branches[\'origin/master\'].gcommit\n   \n   g.grep(\'hello\')  # implies HEAD\n   g.blob(\'v2.5:Makefile\').grep(\'hello\')\n   g.tag(\'v2.5\').grep(\'hello\', \'docs/\')\n   \n   g.diff(commit1, commit2).size\n   g.diff(commit1, commit2).stats\n   g.gtree(\'v2.5\').diff(\'v2.6\').insertions\n   g.diff(\'gitsearch1\', \'v2.5\').path(\'lib/\')\n   g.diff(\'gitsearch1\', @git.gtree(\'v2.5\'))\n   g.diff(\'gitsearch1\', \'v2.5\').path(\'docs/\').patch\n   g.gtree(\'v2.5\').diff(\'v2.6\').patch\n   \n   g.gtree(\'v2.5\').diff(\'v2.6\').each do |file_diff|\n     puts file_diff.path\n     puts file_diff.patch\n     puts file_diff.blob(:src).contents\n   end\n   \n   g.config(\'user.name\')  # returns \'Scott Chacon\'\n   g.config # returns whole config hash\n   \n   g.tag # returns array of Git::Tag objects\n   \n   \n   \nAnd here are the operations that will need to write to your git repository.\n   \n   \n   g = Git.init\n     Git.init(\'project\')\n     Git.init(\'/home/schacon/proj\', \n\t \t  { :git_dir => \'/opt/git/proj.git\', \n\t\t     :index_file => \'/tmp/index\'} )\n \t  \n   g = Git.clone(URI, :name => \'name\', :path => \'/tmp/checkout\')   \n   g.config(\'user.name\', \'Scott Chacon\')\n   g.config(\'user.email\', \'email@email.com\')      \n   \n   g.add(\'.\')\n   g.add([file1, file2])\n   \n   g.remove(\'file.txt\')\n   g.remove([\'file.txt\', \'file2.txt\'])\n\t\t     \n   g.commit(\'message\')\n   g.commit_all(\'message\')\n   \n   g = Git.clone(repo, \'myrepo\')\n   g.chdir do\n    new_file(\'test-file\', \'blahblahblah\')\n    g.status.changed.each do |file|\n     puts file.blob(:index).contents\n    end\n   end\n   \n   g.reset # defaults to HEAD\n   g.reset_hard(Git::Commit)\n   \n   g.branch(\'new_branch\') # creates new or fetches existing\n   g.branch(\'new_branch\').checkout\n   g.branch(\'new_branch\').delete\n   g.branch(\'existing_branch\').checkout\n   \n   g.checkout(\'new_branch\')\n   g.checkout(g.branch(\'new_branch\'))\n   \n   g.branch(name).merge(branch2)\n   g.branch(branch2).merge  # merges HEAD with branch2\n   \n   g.branch(name).in_branch(message) { # add files }  # auto-commits\n   g.merge(\'new_branch\')\n   g.merge(\'origin/remote_branch\')\n   g.merge(b.branch(\'master\'))\n   g.merge([branch1, branch2])\n   \n   r = g.add_remote(name, uri)  # Git::Remote\n   r = g.add_remote(name, Git::Base)  # Git::Remote\n   \n   g.remotes  # array of Git::Remotes\n   g.remote(name).fetch\n   g.remote(name).remove\n   g.remote(name).merge\n   g.remote(name).merge(branch)\n   \n   g.fetch\n   g.fetch(g.remotes.first)\n   \n   g.pull\n   g.pull(Git::Repo, Git::Branch) # fetch and a merge\n   \n   g.add_tag(\'tag_name\') # returns Git::Tag\n   \n   g.repack\n\n   g.push\n   g.push(g.remote(\'name\'))\n\n\nSome examples of more low-level index and tree operations\n\n   g.with_temp_index do \n\n     g.read_tree(tree3) # calls self.index.read_tree\n     g.read_tree(tree1, :prefix => \'hi/\')\n\n     c = g.commit_tree(\'message\')\n     # or #\n     t = g.write_tree\n     c = g.commit_tree(t, :message => \'message\', :parents => [sha1, sha2])\n\n     g.branch(\'branch_name\').update_ref(c)\n     g.update_ref(branch, c)\n\n     g.with_temp_working do # new blank working directory\n       g.checkout\n       g.checkout(another_index)\n       g.commit # commits to temp_index\n     end    \n   end\n\n   g.set_index(\'/path/to/index\')\n   \n   \n   g.with_index(path) do \n     # calls set_index, then switches back after\n   end\n   \n   g.with_working(dir) do\n   # calls set_working, then switches back after\n   end\n   \n   g.with_temp_working(dir) do\n     g.checkout_index(:prefix => dir, :path_limiter => path)\n     # do file work\n     g.commit # commits to index\n   end\n   '
Tiny Ruby gem to pick raffle winners b'SDruby Raffle Gem\n=================\n\nUsage:\n------\n\nrequire \'lib/raffle\'\n\n>> raffle.participants\n=> ["Patrick", "Ryan", "Jordan", "Tom", "Chris", "Rob", "Sam", "Matt"]\n\n>> raffle.pick_a_winner\n=> "Tom"\n\n>> raffle.participants\n=> ["Patrick", "Ryan", "Jordan", "Chris", "Rob", "Sam", "Matt"]\n\n(note that tom has been removed from the participants list)\n\nuse #teasing_mode to go though the entire list of losers before giving away the winner\'s name\n'
Javascript Dialog box for the web that isn't crummy b'This will be MIT License\n\nfrom Levi\n\nLevi Figueira: add more padding to your textboxes\nLevi Figueira: and center text vertically on all but the address\nLevi Figueira: font should be a little bit smaller too\n'
The DecafBland theme for LimeChat b'DecafBland (LimeChat)\nKevin Ballard\nkevin@sb.org\n\nThis is a theme for LimeChat, based off of the DecafBland theme from Colloquy.\n\nTo install, simply copy (or symlink) the two files DecafBland.css and DecafBland.yaml\ninto ~/Library/Application Support/LimeChat/Themes/\n\nThe two files DecafBland-Inverted.{css,yaml} are for the Inverted variant.\n'
These are projects that I use as a portfolio. b"Portfolio\n=========\n\nThis is my portfolio repository. It contains the following projects:\n\nbugs\n----\n\nA TurboGears based bugtracker much like trac.\n\necAEPS\n------\n\nA system for administering the AEPS, which is an assessment given to \nkids that are developmentally disabled. Replaced \n[AEPSi](http://www.aepsinteractive.com/index.htm) for the UO\n\ngoogleauth\n----------\n\nA [drupal](http://drupal.org) plugin that exposes a SAML server \nspecifically for use with Google Apps for Education -- this was a Google \nSummer of Code (2007) project\n\nOpenID\n------\n\nI claim that this project is the first opensource OpenID server that \nactually works. I was thrashing around trying to find a working OpenID \nserver at 2 in the morning the day of the first coding sprint that the \nUniversity of Oregon's ACM student club was running, and could find \nnothing that worked out of the box, so I wrote this. It requires the \npython JanRain OpenID libraries, SQLObject, and Kid.\n\nWhitepages\n----------\n\nI hacked up a quick whitepages search tool for the University of Oregon. \nThe problem was that the Qwest website for searching the whitepages was \nnot working at all well under safari. I downloaded the individual \nphonebook pages (they're available as .swf), used swfdump to extract the \ntext. Then, I wrote a python script to extract the useful information \nout of the dump and place it in a MySQL database. The cgi script then \npresents this information in a useful manner.\n"
A basic Ignite website written in Django 
Open source tumblog/aggregator. b'h1. AintaBlog: Open Source Tumblogging\n\nh3. "aintablog.com":http://aintablog.com\n\n"Recommend me on Working with Rails":http://www.workingwithrails.com/person/7973-pat-nakajima. Please?\n\nAintablog is an open source blogging platform that attempts to combine the cooler parts of tumblr with more traditional blogging mainstays (commenting anyone?) It\'s not done. It\'s really not done.\n\nStill, certain things work. You can create new posts (or as we call them, \xe2\x80\x9carticles\xe2\x80\x9d), quotes, and even import your Twitter/Flickr/del.icio.us feeds.\n\nThis app isn\'t quite for beginners (yet?). You need to know your way around a Rails app to really get going. With that being said, if you know Rails, then this app should be a piece of cake.\n\nSo fork away, and let me know if you add anything cool.\n\nh3. Feature Requests/Bugs\n\nI\'ve set up a Lighthouse project for Aintablog here: "http://nakajima.lighthouseapp.com/projects/14585-aintablog":http://nakajima.lighthouseapp.com/projects/14585-aintablog\n\nh3. Requirements\n\nYou\'re going to need a few gems to start things off.\n\n  gem install feed-normalizer nokogiri RedCloth\n\nIf you want to run the test suite, you\'ll need the Fixjour, faker, and mocha gems.\n\n  gem install mocha fixjour faker\n\nh4. Defensio Spam Protection\n\nAintablog now has built-in Defensio Spam protection. You need to get API keys from "defensio.com":http://defensio.com, then put them into @config/defensio.yml@. If you don\'t want to use Defensio, you can set the "use_defensio" option to false in config/settings.yml.\n\nh3. TODO\n\n* -Page titles!-\n* -Page caching-\n* More control over posts (publish_at, -commentable?-)\n'
Gifts an arbitrary object with access to memcached via the memcached gem. b"= can_has_cached\n\n== Synopsis\n\nLike cache_fu, but uses the faster and more awesome memcached gem by Evan\nWeaver (http://blog.evanweaver.com/files/doc/fauna/memcached/files/README.html)\nand with an emphasis on as little magic as possible. Oh and there's no\nActiveRecord integration too. I guess it's not really like cache_fu.\n\n== Dependencies\n\n* memcached rubygem - http://blog.evanweaver.com/files/doc/fauna/memcached/files/README.html\n* libmemcached - http://tangent.org/552/libmemcached.html\n* RSpec (optional, required for running specs)\n\n== License:\n\n(The MIT License)\n\nCopyright (c) 2008 Cheah Chu Yeow & Arun Thampi\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
Gifts an arbitrary object with access to memcached via the memcached gem. b"= can_has_cached\n\n== Synopsis\n\nLike cache_fu, but uses the faster and more awesome memcached gem by Evan\nWeaver (http://blog.evanweaver.com/files/doc/fauna/memcached/files/README.html)\nand with an emphasis on as little magic as possible. Oh and there's no\nActiveRecord integration too. I guess it's not really like cache_fu.\n\n== Dependencies\n\n* memcached rubygem - http://blog.evanweaver.com/files/doc/fauna/memcached/files/README.html\n* libmemcached - http://tangent.org/552/libmemcached.html\n* RSpec (optional, required for running specs)\n\n== License:\n\n(The MIT License)\n\nCopyright (c) 2008 Cheah Chu Yeow & Arun Thampi\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
Small RDF python scraper for gumtree ads (include geocoding) b'./SingleScrape.py <gumtreeurl> <outputfile>\neg. \n./SingleScrape.py http://www.gumtree.com/london/93/21153193.html test.rdf\n\n./BatchScrape <gumtreerss> <jsonfile>\neg.\n./BatchScrape http://www.gumtree.com/london/3.xml flatscrap.js\n(Exhibit JSON working with flatscrap.html)\n\n'
Notes for upcoming BarCamp Austin talk, upcoming being tomorrow. 
(OBSOLETE) This plugin is based on acts_as_taggable by DHH but includes extras b'This plugin is NOT supported and hasn\'t in many years. I\'m leaving the code behind for historical reasons.\n\n############################################\n\n= acts_as_taggable_on_steroids\n\nNOT THE OFFICIAL REPO, I just imported this project to get few bug fixed when I was using it for a project in early 2008.\n\nUSE AT YOUR OWN RISK\n\n\nIf you find this plugin useful, please consider a donation to show your support!\n\n  http://www.paypal.com/cgi-bin/webscr?cmd=_send-money\n  \n  Email address: jonathan.viney@gmail.com\n  \n== Instructions\n\nThis plugin is based on acts_as_taggable by DHH but includes extras\nsuch as tests, smarter tag assignment, and tag cloud calculations.\n\n== Installation\n\n  ruby script/plugin install http://svn.viney.net.nz/things/rails/plugins/acts_as_taggable_on_steroids\n\n== Usage\n\n=== Prepare database\n\nGenerate and apply the migration:\n\n  ruby script/generate acts_as_taggable_migration\n  rake db:migrate\n\n=== Basic tagging\n\nLet\'s suppose users have many posts and we want those posts to have tags.\nThe first step is to add +acts_as_taggable+ to the Post class:\n\n  class Post < ActiveRecord::Base\n    acts_as_taggable\n    \n    belongs_to :user\n  end\n  \nWe can now use the tagging methods provided by acts_as_taggable, <tt>#tag_list</tt> and <tt>#tag_list=</tt>. Both these\nmethods work like regular attribute accessors.\n\n  p = Post.find(:first)\n  p.tag_list # []\n  p.tag_list = "Funny, Silly"\n  p.save\n  p.tag_list # ["Funny", "Silly"]\n  \nYou can also add or remove arrays of tags.\n\n  p.tag_list.add("Great", "Awful")\n  p.tag_list.remove("Funny")\n\n=== Finding tagged objects\n\nTo retrieve objects tagged with a certain tag, use find_tagged_with.\n\n  Post.find_tagged_with(\'Funny, Silly\')\n  \nBy default, find_tagged_with will find objects that have any of the given tags. To\nfind only objects that are tagged with all the given tags, use match_all.\n\n  Post.find_tagged_with(\'Funny, Silly\', :match_all => true)\n  \nSee <tt>ActiveRecord::Acts::Taggable::InstanceMethods</tt> for more methods and options.\n\n=== Tag cloud calculations\n\nTo construct tag clouds, the frequency of each tag needs to be calculated.\nBecause we specified +acts_as_taggable+ on the <tt>Post</tt> class, we can\nget a calculation of all the tag counts by using <tt>Post.tag_counts</tt>. But what if we wanted a tag count for\nan single user\'s posts? To achieve this we call tag_counts on the association:\n\n  User.find(:first).posts.tag_counts\n  \nA helper is included to assist with generating tag clouds. Include it in your helper file:\n\n  module ApplicationHelper\n    include TagsHelper\n  end\n\nHere is an example that generates a tag cloud.\n\nController:\n\n  class PostController < ApplicationController\n    def tag_cloud\n      @tags = Post.tag_counts\n    end\n  end\n  \nView:\n  <% tag_cloud @tags, %w(css1 css2 css3 css4) do |tag, css_class| %>\n    <%= link_to tag.name, { :action => :tag, :id => tag.name }, :class => css_class %>\n  <% end %>\n  \nCSS:\n\n  .css1 { font-size: 1.0em; }\n  .css2 { font-size: 1.2em; }\n  .css3 { font-size: 1.4em; }\n  .css4 { font-size: 1.6em; }\n\n=== Caching\n\nIt is useful to cache the list of tags to reduce the number of queries executed. To do this,\nadd a column named <tt>cached_tag_list</tt> to the model which is being tagged. The column should be long enough to hold\nthe full tag list and must have a default value of null, not an empty string.\n\n  class CachePostTagList < ActiveRecord::Migration\n    def self.up\n      add_column :posts, :cached_tag_list, :string\n    end\n  end\n\n  class Post < ActiveRecord::Base\n    acts_as_taggable\n    \n    # The caching column defaults to cached_tag_list, but can be changed:\n    # \n    # set_cached_tag_list_column_name "my_caching_column_name"\n  end\n\nThe details of the caching are handled for you. Just continue to use the tag_list accessor as you normally would.\nNote that the cached tag list will not be updated if you directly create Tagging objects or manually append to the\n<tt>tags</tt> or <tt>taggings</tt> associations. To update the cached tag list you should call <tt>save_cached_tag_list</tt> manually.\n\n=== Delimiter\n\nIf you want to change the delimiter used to parse and present tags, set TagList.delimiter.\nFor example, to use spaces instead of commas, add the following to config/environment.rb:\n\n  TagList.delimiter = " "\n  \nYou can also use a regexp as delimiter:\n\n  TagList.delimiter = /,|;/\n  \nThe above code would parse the string and use \',\' and \';\' as delimiters.\n\n=== Unused tags\n\nSet Tag.destroy_unused to remove tags when they are no longer being\nused to tag any objects. Defaults to false.\n\n  Tag.destroy_unused = true\n\n=== Other\n\nProblems, comments, and suggestions all welcome. jonathan.viney@gmail.com  \n'
RSpec stories generator for Ruby on Rails applications b'Storygen\n========\n\nStorygen is a simple Rails generator for RSpec Stories framework.\n\n\nExample\n=======\n\nStorygen is used just like any other Ruby on Rails generator:\n\n./script/generate rspec_story <story name>\n\nor, in case you want to remove generated story:\n\n./script/destroy rspec_story <story name>\n\nCopyright (c) 2008 Michael Klishin, released under the MIT license\n'
a course management system specifically geared towards Statistics courses b'learnSTAT\n\na course management software tailored to Statistics classes\n'
class that supports set operations on ranges. some of my first ruby code, so be warned. b'RangeSet\n========\n\nThe RangeSet library provides the ability to do set operations on ranges.  It comprises an extension\nto the Range class and a new RangeSet class.  Supported set operations are union, intersection and\nsubtraction.  Does not work well with ranges with excluded endpoints.\n\n    # union:\n    (1..4) | (3..6)   # => 1..6\n    (1..2) | (3..4)   # => [1..2, 3..4]\n    \n    # intersection:\n    (1..2) & (3..4)   # => nil\n    (1..4) & (3..6)   # => 3..4\n    RangeSet.new(2..4, 7..9) & (3..8) # => [3..4, 7..8]\n    \n    # subtraction:\n    (2..3) - (1..4)   # => nil\n    (1..4) - (3..5)   # => 1..3\n    (1..6) - (3..4)   # => [1..3, 4..6]\n\n## Source Code ##\n\nMain repository is at [https://github.com/joshsusser/range_set](https://github.com/joshsusser/range_set)\n\n## Contributors ##\n  * [Josh Susser](http://github.com/joshsusser)\n  * [Tim Connor](http://github.com/timocratic)\n\n'
A Twitter archiver, making tweets safe for historians. b'== Aviary+, a Twitter Archiver\n\nAviary+ is a simple Ruby script to retrieve and archive your tweets. Twitter \n"claim no intellectual property rights over the material you provide to the \nTwitter service," so you should have a way of storing and repurposing your \ndata.\n\nThe original Aviary script (http://github.com/mja/aviary) was written by\nMark James Adams. It only downloaded your tweets, from your timeline. I\'ve\nupdated it to login via OAuth, download your mentions, your direct messages,\nyour sent direct messages, and any tweets that you have replied to.\n\n== Requirements\n\nAviary+ requires the Launchy, nokogiri, and oauth gems.\n\n== Running Aviary+\n\nFirst, copy the config-example.yml to config.yml, then edit the default\npath, for archiving tweets. The default is User/Documents/aviary, which\nis probably fine for most people.\n\nIf you install your gems with rubygems, you\'ll need to execute Aviary+\nlike this:\n\n  $ ruby -rubygems aviary.rb\n\nIf you\'re using Ruby 1.9, this step won\'t be necessary.\n\nNext, add a Twitter account to aviary by running with\n  $ ruby aviary.rb --add accountname\n\nTo add my jmartindf account I would execute it like this\n  $ ruby aviary.rb --add jmartindf\n\nRun Aviary+ with:\n\n  $ ruby aviary.rb --updates [new|all] [--page XXX]\n\nAviary+ will create a directory called USERNAME and begin parsing your Twitter \narchive and downloading the raw XML representation of each tweet. The \n"--updates all" option will parse and save every tweet, while "--updates new" \nwill will only request tweets that are newer than the most recent one already\npresent in the USERNAME direcotry.  already been downloaded. Optionally,\nspecify a page number to retrieve tweets starting from that page. This is\nuseful when restarting the script after a timeout.\n\nUse the cat_statuses.sh script to combine all downloaded tweets for a user\ninto one statuses XML file.\n\n  $ SCREEN_NAME=username ./cat_statuses.sh > username.xml\n  \nwill read in all tweets in the username directory and concatenate them \ntogether in a file called username.xml. \n\n== Creating an events timeline\n\nAssuming you have already put all of your status files into a single XML file\nusing cat_statuses.sh, you can transform it into a SIMILE timeline \n(http://simile.mit.edu/timeline/) using the assets/simili.xsl transformation \nstylesheet. View the data by modifying assets/events_template.html, replacing \n"screenname_events.xml" (Line 66) with the filename of your transformed \nstatuses XML document.\n\nThis can also be done automatically using the timeline.rb script:\n\n    $ ruby timeline.rb -u USERNAME\n    \nwhich will read in single tweets from the USERNAME\'s directory and construct\nan events timeline (USERNAME_events.xml) in the timelines directory.\n    \n\n== What next?\n\nNow your data is yours! Start thinking about your own way to utilize your\nown data. Start thinking about your children\'s children\'s children. Will they\nbe accessing the possibly non-existent http://twitter.com or would they\nprefer a paper record of "what you were doing"?\n'
class that supports set operations on ranges b'RangeSet\n========\n\nThe RangeSet library provides the ability to do set operations on ranges.  It comprises an extension\nto the Range class and a new RangeSet class.  Supported set operations are union, intersection and\nsubtraction.  Does not work well with ranges with excluded endpoints.\n\n    # union:\n    (1..4) | (3..6)   # => 1..6\n    (1..2) | (3..4)   # => [1..2, 3..4]\n    \n    # intersection:\n    (1..2) & (3..4)   # => nil\n    (1..4) & (3..6)   # => 3..4\n    RangeSet.new(2..4, 7..9) & (3..8) # => [3..4, 7..8]\n    \n    # subtraction:\n    (2..3) - (1..4)   # => nil\n    (1..4) - (3..5)   # => 1..3\n    (1..6) - (3..4)   # => [1..3, 4..6]\n\n## Source Code ##\n\nMain repository is at [https://github.com/joshsusser/range_set](https://github.com/joshsusser/range_set)\n\n## Contributors ##\n  * [Josh Susser](http://github.com/joshsusser)\n  * [Tim Connor](http://github.com/timocratic)\n\n'
The Rails Brothers Repository 
Erlectricity exposes Ruby to Erlang and vice versa. b'Erlectricity\n============\n\nhttp://github.com/mojombo/erlectricity\n\nBy Scott Fleckenstein, Tom Preston-Werner\n\nDevelopment Status: Production/Stable\n\n\nDescription\n-----------\n\nErlectricity allows a Ruby program to receive and respond to Erlang messages\nsent over the Erlang binary protocol.\n\n\nInstall\n-------\n\n$ gem install erlectricity\n\n-or-\n\n$ gem install mojombo-erlectricity -s http://gems.github.com\n\n\nThe Simplest Example\n--------------------\n\n### Ruby side (echo.rb)\n\n    require \'rubygems\'\n    require \'erlectricity\'\n\n    receive do |f|\n      f.when([:echo, String]) do |text|\n        f.send!([:result, "You said: #{text}"])\n        f.receive_loop\n      end\n    end\n\n### Erlang side (echo.erl)\n\n    -module(echo).\n    -export([test/0]).\n\n    test() ->\n      Cmd = "ruby echo.rb",\n      Port = open_port({spawn, Cmd}, [{packet, 4}, nouse_stdio, exit_status, binary]),\n      Payload = term_to_binary({echo, <<"hello world!">>}),\n      port_command(Port, Payload),\n      receive\n        {Port, {data, Data}} ->\n          {result, Text} = binary_to_term(Data),\n          io:format("~p~n", [Text])\n      end.\n\n\nData Type Conversions and Matching\n----------------------------------\n\n    % Port is the port opened via open_port({spawn, Cmd}, [{packet, 4}, ...])\n    % Message is the Erlang term to encode and send to the port\n    send(Port, Message) ->\n      port_command(Port, term_to_binary(Message)).\n\n    # Each triplet below represents:\n    # (line 1) the Erlang call\n    # (line 2) the Ruby matcher\n    # (line 3) the Ruby output\n\n    send(Port, test).\n    f.when(:test) { p :ok }\n    # :ok\n\n    send(Port, {atom, symbol}).\n    f.when([:atom, Symbol]) { |sym| p sym }\n    # :symbol\n\n    send(Port, {number, 1}).\n    f.when([:number, Fixnum]) { |num| p num }\n    # 1\n\n    send(Port, {string, <<"foo">>}).\n    f.when([:string, String]) { |str| p str }\n    # "foo"\n\n    send(Port, {array, [1,2,3]}).\n    f.when([:array, Array]) { |arr| p arr }\n    # [1, 2, 3]\n\n    send(Port, {array, [<<"abc">>, <<"def">>]}).\n    f.when([:array, Array]) { |arr| p arr }\n    # ["abc", "def"]\n\n    send(Port, {hash, [{key,val}]}).\n    f.when([:hash, Erl.hash]) { |hash| p hash }\n    # {:key=>:val}\n\n    send(Port, {object, {1,{2},3,<<"four">>}}).\n    f.when([:object, Any]) { |any| p any }\n    # [1, [2], 3, "four"]\n\n\nContribute\n----------\n\nIf you\'d like to hack on Erlectricity, start by forking my repo on GitHub:\n\nhttp://github.com/mojombo/erlectricity\n\nTo get all of the dependencies, install the gem first. The best way to get\nyour changes merged back into core is as follows:\n\n1. Clone down your fork\n1. Create a topic branch to contain your change\n1. Hack away\n1. Add tests and make sure everything still passes by running `rake`\n1. If you are adding new functionality, document it in the README.md\n1. Do not change the version number, I will do that on my end\n1. If necessary, rebase your commits into logical chunks, without errors\n1. Push the branch up to GitHub\n1. Send me (mojombo) a pull request for your branch\n\n\nCopyright\n---------\n\nCopyright (c) 2009 Scott Fleckenstein and Tom Preston-Werner. See LICENSE for details.'
CoolOptions is a simple wrapper around optparse that provides less options and more convenience. b'= CoolOptions\n    by Nathaniel Talbott <nathaniel@terralien.com>\n    http://cooloptions.rubyforge.org/\n\n== DESCRIPTION:\n  \nCoolOptions is a simple wrapper around optparse that provides less options and more convenience.\n\nAs a huge fan of optparse due to its flexibility, self-documenting nature, and ease of use, I nevertheless found myself doing almost the exact same thing with it over and over again, and decided to write a thin wrapper around it to handle the common cases. Thus CoolOptions was born.\n\n== SYNOPSIS:\n\n=== Declaration:\n\n  options = CoolOptions.parse!("[options] PROJECTNAME") do |o|\n    o.desc \'Sets up a new Rails project.\'\n    o.on "repository URL",         "Remote subversion repository."          \n    o.on "svk",                    "Use svk.",                              true\n    o.on "project-path PATH",      "Root of project workspaces.",           File.expand_path("~/svk")\n    o.on "l)repository-path PATH", "Remote repository path.",               "/"\n    o.on "mirror-path SVKPATH",    "SVK mirror path.",                      "//"\n    o.on "local-pa(t)h SVKPATH",   "SVK local path.",                       "//local"\n    o.on "create-structure",       "Create trunk/tags/branches structure.", true\n    o.on "finish",                 "Prep and commit the new project.",      true\n\n    o.after do |r|\n      r.project_path = File.expand_path(r.project_path)\n      o.error("Invalid path.") unless File.exist?(r.project_path)\n      r.project_name = ARGV.shift\n      o.error("Project name is required.") unless r.project_name\n      o.error("Project name is too funky.") unless /^\\w+$/ =~ r.project_name\n    end\n  end\n  \n=== Usage:\n\n  $ ./new_rails_project --no-svk -r http://terralien.com/svn/terralien/ myproject\n  \n=== Result:\n  \n  p options.svk                 # => false\n  p options.project_path        # => \'/Users/ntalbott/svk\'\n  p options.repository          # => \'http://terralien.com/svn/terralien/\'\n  p options.create_structure    # => true\n  p options.project_name        # => \'myproject\'\n\n=== Also:\n\n  $ ./new_rails_project --help                                                               \n  Usage: t.rb [options] PROJECTNAME\n      -s, --[no-]svk                   Use svk.\n                                       Default is: true\n      -p, --project-path PATH          Root of project workspaces.\n                                       Default is: /Users/ntalbott/svk\n      -r, --repository URL             Remote subversion repository.\n      -l, --repository-path PATH       Remote repository path.\n                                       Default is: /\n      -m, --mirror-path SVKPATH        SVK mirror path.\n                                       Default is: //\n      -t, --local-path SVKPATH         SVK local path.\n                                       Default is: //local\n      -c, --[no-]create-structure      Create trunk/tags/branches structure.\n                                       Default is: true\n      -f, --[no-]finish                Prep and commit the new project.\n                                       Default is: true\n      -h, --help                       This help info.\n\n== REQUIREMENTS:\n\noptparse & ostruct (included in Ruby standard library).\n\n== DOWNLOAD:\n\nVia gems or from the\n{Rubyforge project page}[http://rubyforge.org/projects/cooloptions].\n\n== INSTALL:\n\n  sudo gem install cooloptions\n\n== CONTRIBUTE:\n\nDrop me an email (see above) and/or\n{check out the source}[http://terralien.com/svn/projects/cooloptions/trunk].\n\n== LICENSE:\n\nThe RUBY License\n\nCopyright (c) 2006 Nathaniel Talbott and Terralien, Inc. All Rights Reserved.'
Adds query origin tracing to your logs. b'= QueryTrace plugin for Rails\n\nIt\'s nice that ActiveRecord logs the queries that are performed when your actions are executed, \nsince it makes it easy to see when you have serious inefficiencies in your application. The next \nquestion, though, is always, "OK, so where are those being run from?" Before QueryTrace, that \nquestion could be a real pain to answer, since you\'d have to go trawling through your code looking\nfor the culprit. Once you have QueryTrace installed, though, your logs won\'t just tell you that you\nhave a problem, they will pinpoint the location of that problem for you.\n\n== Usage\n\nAll you have to do is have the plugin installed - QueryTrace takes care of the rest, including:\n\n* Only displaying when at the DEBUG log level\n* Honoring your log colorization settings\n\n== Example\n\nBefore:\n\n  Schedule Load (0.023687)   SELECT * FROM schedules WHERE (schedules.id = 3) LIMIT 1\n  Resource Load (0.001076)   SELECT * FROM resources WHERE (resources.id = 328) LIMIT 1\n  Schedule Load (0.011488)   SELECT * FROM schedules WHERE (schedules.id = 3) LIMIT 1\n  Resource Load (0.022471)   SELECT * FROM resources WHERE (resources.id = 328) LIMIT 1\n\n\nAfter:\n\n  Schedule Load (0.023687)   SELECT * FROM schedules WHERE (schedules.id = 3) LIMIT 1\n    app/models/available_work.rb:50:in `study_method\'\n    app/helpers/plan_helper.rb:4:in `work_description\'\n    app/views/plan/_resource_schedule.rhtml:27:in `_run_rhtml_plan__resource_schedule\'\n    app/views/plan/_resource_schedule.rhtml:24:in `_run_rhtml_plan__resource_schedule\'\n    app/views/plan/_schedule_listing.rhtml:5:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/_schedule_listing.rhtml:3:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/_schedule_listing.rhtml:1:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/index.rhtml:6:in `_run_rhtml_plan_index\'\n    vendor/plugins/textmate_footnotes/lib/textmate_footnotes.rb:60:in `render\'\n  Resource Load (0.001076)   SELECT * FROM resources WHERE (resources.id = 328) LIMIT 1\n    app/models/available_work.rb:54:in `div_type\'\n    app/helpers/plan_helper.rb:6:in `work_description\'\n    app/views/plan/_resource_schedule.rhtml:27:in `_run_rhtml_plan__resource_schedule\'\n    app/views/plan/_resource_schedule.rhtml:24:in `_run_rhtml_plan__resource_schedule\'\n    app/views/plan/_schedule_listing.rhtml:5:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/_schedule_listing.rhtml:3:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/_schedule_listing.rhtml:1:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/index.rhtml:6:in `_run_rhtml_plan_index\'\n    vendor/plugins/textmate_footnotes/lib/textmate_footnotes.rb:60:in `render\'\n  Schedule Load (0.011488)   SELECT * FROM schedules WHERE (schedules.id = 3) LIMIT 1\n    app/models/available_work.rb:50:in `study_method\'\n    app/helpers/plan_helper.rb:4:in `work_description\'\n    app/views/plan/_resource_schedule.rhtml:27:in `_run_rhtml_plan__resource_schedule\'\n    app/views/plan/_resource_schedule.rhtml:24:in `_run_rhtml_plan__resource_schedule\'\n    app/views/plan/_schedule_listing.rhtml:5:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/_schedule_listing.rhtml:3:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/_schedule_listing.rhtml:1:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/index.rhtml:6:in `_run_rhtml_plan_index\'\n    vendor/plugins/textmate_footnotes/lib/textmate_footnotes.rb:60:in `render\'\n  Resource Load (0.022471)   SELECT * FROM resources WHERE (resources.id = 328) LIMIT 1\n    app/models/available_work.rb:54:in `div_type\'\n    app/helpers/plan_helper.rb:6:in `work_description\'\n    app/views/plan/_resource_schedule.rhtml:27:in `_run_rhtml_plan__resource_schedule\'\n    app/views/plan/_resource_schedule.rhtml:24:in `_run_rhtml_plan__resource_schedule\'\n    app/views/plan/_schedule_listing.rhtml:5:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/_schedule_listing.rhtml:3:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/_schedule_listing.rhtml:1:in `_run_rhtml_plan__schedule_listing\'\n    app/views/plan/index.rhtml:6:in `_run_rhtml_plan_index\'\n    vendor/plugins/textmate_footnotes/lib/textmate_footnotes.rb:60:in `render\'\n\n\n== Additional Info\n\nAuthor: Nathaniel Talbott (for Terralien)\nContact: nathaniel@talbott.ws\nLicense: MIT\nHome: http://github.com/ntalbott/query_trace/\nSubversion mirror: https://terralien.devguard.com/svn/projects/plugins/query_trace\n\n\nCopyright (c) 2006 Nathaniel Talbott. All Rights Reserved.\n'
Provides Rails model services (such as validations) to non-ActiveRecord descendants. b'ActiveModel\n===========\n\nProvides validation and callbacks outside of the ActiveRecord::Base hierarchy.'
ruby helpers for method chaining: tap, then, else b'== Summary\nmethodchain - ruby helpers for method chaining: chain, tap, then, else, and, or\n===\nEasy ways to navigate around nil without creating local variables.\n===\nInitial blog post describing previous ideas:\nhttp://blog.thoughtfolder.com/2008-03-16-navigating-nil-method-chaining-in-ruby.html\n\n== Author and License\nCopyright (c) 2008 Greg Weber, http://gregweber.info\nLicensed under the MIT license\n\n== Examples\n=== ##then and ##else\n==== old way\n  person = nil\n  name = person ? person.name : nil\n\n==== new way\n  name = person.then {|p| p.name}\n  # or\n  name = person.then {name}\n\nnot a huge savings. But sometimes the person variable is actually a function call, and then we must save it in a variable first.\n\n==== old way\n  def find(*args)\n    # do some expensive database queries\n  end\n\n  person = find(:first)\n  @phone = person && person.phone   # => nil\n\n==== new way\n  @phone = find(:first).then {phone}   # => nil\n  \nWe have reduced a line of code and removed a local variable.\n##else is the opposite of #then, and the two methods can be used together\n\n  \'a\'.then{\'b\'} #=> \'b\'\n  nil.then{\'b\'}.else{\'c\'} #=> \'c\'\n\n==== message sending\nThe normal conditional for ##then and ##else is self\n\n  if self # inside MethodChain#then\n    # evaluate block\n  end\n\n##then and ##else allow message sending as the conditional.  See more examples of message sending with the MethodChain#chain examples below\n\n  "not empty".then(:empty?) {"N/A"} # => "not empty"\n           "".then(:empty?) {"N/A"} # => "N/A"\n\n=== ##and, ##or\n==== old way\nReturn a default value or the original value depending on whether multiple conditions are met\n  Person = Struct.new(:phone )\n  blank = Person.new(\'\') # or {:phone => nil}\n  blank.phone && (not blank.phone.empty?) ? blank.phone : "N/A" # => "N/A"\n  p = Person.new(\'123\')\n  p.phone && (not p.phone.empty?) ? p.phone : "N/A" # => "123"\n\n==== new way\n  blank.phone.and {not empty?} || "N/A" # => "N/A"\n  p.phone.and {not empty?} || "N/A" # => "123"\n\n\n=== ##tap\nif you don\'t already know about this method, look it up on the net.  The tap included here allows message sending.\n\n==== old way\n  arr = [1]\n  arr.compact! # => nil\n  arr.first # => 1\n\n==== normal ##tap (still valid)\n  [1].tap {|arr| arr.compact!}.first # => 1\n\n==== new ##tap\n  [1].tap(:compact!).first # => 1\n\n==== normal ##tap (still valid)\n  [1].tap {|arr| arr.compact!}.tap {|arr| arr * 2}.first # => 1\n\n==== new ##tap\n  [1].tap( :compact!, [:*, 2] ).first # => 1\n\nYou can also pass Procs as arguments\n  [1].tap( :compact!, lambda{|arr| arr * 2} ).first # => 1\n\n\n=== ##chain\nchain is like tap, but instead of always returning self, it will return the result of the method call.\n  [1].chain(:first) == [1].first\n\nBut there is an important difference- chain guards against certain results (by default it guards against nil and false)\n\n==== old way\n  customer = nil\n  customer && customer.order && customer.order.id\n\n==== new way\n  customer.chain(:order, :id)\n \nnote that this is equivalent to\n\n  customer.then {order}.then {id}\n\n=== ##chain - Custom guards, multiple arguments, and Procs\n==== old way - guarding against zero\n  value = 0\n\n  result = if value == 0 then value else\n    tmp = value.abs\n\n    if tmp == 0 then tmp else\n      tmp * 20\n    end\n  end\n  result # => 0\n\n==== new way\n  value.chain(:abs, [:*, 20]) {|s| s == 0 }   # => 0\n\nProcs can be used, so this is equivalent to\n  value.chain(:abs, lambda {|n| n * 20 }) {|s| s == 0 } # => 0\n\n== Usage\n  require \'rubygems\'\n\n=== import all MethodChain methods into Object\n\n  require \'methodchain\'\n\n=== selectively import MethodChain methods\n\n  require \'methodchain/not-included\'\n\nYou can then include methodchain into selected classes, or you can use the module-import gem to include only certain methods\n\n  gem install module-import\n\n  require \'module-import\'\n  class Object\n    import MethodChain, :chain  # I only want Object#chain\n  end\n\nimport will still load all the private methods from the module:\n- yield_or_eval\n- send_as_function\n- send_as_functions\n\n\n== Implementation\nThere are no proxy objects and no use of method_missing- these are simply function calls, so it should be fast.\n\nprivate methods:\n* yield_or_eval: allows the two different block forms {|p| p.name} and {name}, where the first form yields self and the second form is called using instance_eval.\n* send_as_function: allows symbols and arrays to be sent as messages, and calls yield_or_eval on Proc arguments\n* send_as_functions:\n\n  def send_arguments_as_functions *args\n    args.each {|arg| send_as_function arg}\n    self\n  end\n\n== Install\ngem install methodchain\n\n== Source\n=== browser\nhttp://github.com/gregwebs/methodchain/tree/master\n=== repository\ngit clone git://github.com/gregwebs/methodchain.git\n\n== Homepage\nhttp://gregweber.info/projects/methodchain.html\n\n== RDoc documentation\nincluded with gem\n'
TextMate bundle for DataMapper ORM 
Simple REST client for Ruby, inspired by microframework syntax for specifying actions.  Official fork is now at: b'\n== This fork is no longer maintained.  Please see the new official fork at: http://github.com/archiloque/rest-client\n\n--------------------------------------------------------------------\n\n= REST Client -- simple DSL for accessing REST resources\n\nA simple REST client for Ruby, inspired by the Sinatra\'s microframework style\nof specifying actions: get, put, post, delete.\n\n== Usage: Raw URL\n\n  require \'rest_client\'\n\n  RestClient.get \'http://example.com/resource\'\n  RestClient.get \'https://user:password@example.com/private/resource\'\n\n  RestClient.post \'http://example.com/resource\', :param1 => \'one\', :nested => { :param2 => \'two\' }\n\n  RestClient.delete \'http://example.com/resource\'\n\nSee RestClient module docs for details.\n\n== Usage: ActiveResource-Style\n\n  resource = RestClient::Resource.new \'http://example.com/resource\'\n  resource.get\n\n  private_resource = RestClient::Resource.new \'https://example.com/private/resource\', :user => \'adam\', :password => \'secret\', :timeout => 20, :open_timeout => 5\n  private_resource.put File.read(\'pic.jpg\'), :content_type => \'image/jpg\'\n\nSee RestClient::Resource module docs for details.\n\n== Usage: Resource Nesting\n\n  site = RestClient::Resource.new(\'http://example.com\')\n  site[\'posts/1/comments\'].post \'Good article.\', :content_type => \'text/plain\'\n\nSee RestClient::Resource docs for details.\n\n== Shell\n\nThe restclient shell command gives an IRB session with RestClient already loaded:\n\n  $ restclient\n  >> RestClient.get \'http://example.com\'\n\nSpecify a URL argument for get/post/put/delete on that resource:\n\n  $ restclient http://example.com\n  >> put \'/resource\', \'data\'\n\nAdd a user and password for authenticated resources:\n\n  $ restclient https://example.com user pass\n  >> delete \'/private/resource\'\n\nCreate ~/.restclient for named sessions:\n\n  sinatra:\n    url: http://localhost:4567\n  rack:\n    url: http://localhost:9292\n  private_site:\n    url: http://example.com\n    username: user\n    password: pass\n\nThen invoke:\n\n  $ restclient private_site\n  \nUse as a one-off, curl-style:\n\n  $ restclient get http://example.com/resource > output_body\n\n  $ restclient put http://example.com/resource < input_body\n\n== Logging\n\nWrite calls to a log filename (can also be "stdout" or "stderr"):\n\n  RestClient.log = \'/tmp/restclient.log\'\n\nOr set an environment variable to avoid modifying the code:\n\n  $ RESTCLIENT_LOG=stdout path/to/my/program\n\nEither produces logs like this:\n\n  RestClient.get "http://some/resource"\n  # => 200 OK | text/html 250 bytes\n  RestClient.put "http://some/resource", "payload"\n  # => 401 Unauthorized | application/xml 340 bytes\n\nNote that these logs are valid Ruby, so you can paste them into the restclient\nshell or a script to replay your sequence of rest calls.\n\n== Proxy\n\nAll calls to RestClient, including Resources, will use the proxy specified by\nRestClient.proxy:\n\n  RestClient.proxy = "http://proxy.example.com/"\n  RestClient.get "http://some/resource"\n  # => response from some/resource as proxied through proxy.example.com\n\nOften the proxy url is set in an environment variable, so you can do this to\nuse whatever proxy the system is configured to use:\n\n  RestClient.proxy = ENV[\'http_proxy\']\n\n== Cookies\n\nRequest and Response objects know about HTTP cookies, and will automatically\nextract and set headers for them as needed:\n\n  response = RestClient.get \'http://example.com/action_which_sets_session_id\'\n  response.cookies\n  # => {"_applicatioN_session_id" => "1234"}\n\n  response2 = RestClient.post(\n    \'http://localhost:3000/\',\n    {:param1 => "foo"},\n    {:cookies => {:session_id => "1234"}}\n  )\n  # ...response body\n\n== SSL Client Certificates\n\n  RestClient::Resource.new(\n    \'https://example.com\', \n    :ssl_client_cert  =>  OpenSSL::X509::Certificate.new(File.read("cert.pem")), \n    :ssl_client_key   =>  OpenSSL::PKey::RSA.new(File.read("key.pem"), "passphrase, if any"),\n    :ssl_ca_file      =>  "ca_certificate.pem", \n    :verify_ssl       =>  OpenSSL::SSL::VERIFY_PEER \n  ).get\n\nSelf-signed certificates can be generated with the openssl command-line tool.\n\n== Meta\n\nWritten by Adam Wiggins (adam at heroku dot com)\n\nPatches contributed by: Chris Anderson, Greg Borenstein, Ardekantur, Pedro\nBelo, Rafael Souza, Rick Olson, Aman Gupta, Blake Mizerany, Brian Donovan, Ivan\nMakfinsky, Marc-Andr\xc3\xa9 Cournoyer, Coda Hale, Tetsuo Watanabe, Dusty Doris,\nLennon Day-Reynolds, James Edward Gray II, Cyril Rohr, Juan Alvarez, and Adam\nJacob, Paul Dlug, and Brad Ediger\n\nReleased under the MIT License: http://www.opensource.org/licenses/mit-license.php\n\nhttp://rest-client.heroku.com\n\nhttp://github.com/adamwiggins/rest-client\n\n'
scripts that can help with using Changes.app and git 
A site to make your code lean and mean. [Started pre Django 1.0.  More or less abandoned now.] b'codereviewr is a Django project for submitting code for code reviews and being\nable to comment on other people\'s code (OPC).  It hopes to promote coding best\npractices and learning.\n\nCurrently in very alpha and the results are part of our "1 Night 3 Hours"\neffort involving Nate Anderson. Rob Hudson, Dave Merwin, Percy Perez and Brad\nPitcher.\n'
A site to make your code lean and mean. b'codereviewr is a Django project for submitting code for code reviews and being\nable to comment on other people\'s code (OPC).  It hopes to promote coding best\npractices and learning.\n\nCurrently in very alpha and the results are part of our "1 Night 3 Hours"\neffort involving Nate Anderson. Rob Hudson, Dave Merwin, Percy Perez and Brad\nPitcher.\n'
Scenarios has been deprecated. Please use Dataset instead. b'= Deprecated -- Use Dataset\n\nScenarios has been replaced by Dataset, a complete rewrite, test driven. It has a number of bugs fixed and more features. Check out http://github.com/aiwilliams/dataset. I hope you find it far more useful and worth helping to extend.\n\n== Rails Scenarios Plugin\n\nWho hasn\'t experienced the pain of dozens of YAML files filled with hundreds\nof inter-related data structures? When do you look at People of an\nOrganization and not have to look at the organization_id, open the\norganizations.yml file, and search for \'id: X\'?\n\nIn a nutshell, scenarios are a drop in replacement for YAML fixtures. Instead\nof encouraging you to create a mindless amount of raw data in the form of\nYAML, scenarios encourage you to create code that populates your tables with\nthe appropriate records.\n\nHow is it different from other solutions? A few things:\n\n * It continues to provide a fundamental, fast insertion method using attributes\n   written directly to a table. This is the\n   Scenarios::TableMethods#create_record method.\n\n * It allows you to create records using validations if you prefer, or if it\'s\n   important to have all your callbacks be invoked. See\n   Scenarios::TableMethods#create_model. Both create_record and create_model\n   allow you to name your instances for retrieval by the instance and id reader\n   methods (more below).\n\n * Nothing stops you from simply invoking YouModel.create!, etc. We\'ll still\n   keep track of the tables the scenario modifies and clean things up afterward.\n\n * It allows you to create re-usable scenarios as classes. These classes are\n   like any other class - they may include modules, subclass, and be composed of\n   other scenarios. See Scenarios::Base.uses. This also means that you can load\n   any scenario into any Rails environment. That\'s what the \'rake\n   db:scenario:load\' task is good for (more below). Very handy for re-using all\n   that test support code to create populated demos!\n\n=== Quick Start\n\nSince Scenarios is a Rails plugin at this time, you should get it installed,\nusing the appropriate method (script/plugin, svn, piston) into your\nvendor/plugins directory. Once you have this, in your spec_helper.rb or\ntest_helper.rb, add the following line after the spec requires:\n\n  require \'scenarios\'\n\nThe Scenarios you write should be placed in the spec/scenarios directory of your\nRails project if you\'re using RSpec, or the test/scenarios directory of your\nRails project if you\'re using Test::Unit. Scenario file names always end in\n"_scenario.rb" and classes end in "Scenario".\n\nA simple scenario looks like this:\n\n  # in spec/scenarios/users_scenario.rb or test/scenarios/users_scenario.rb\n  class UsersScenario < Scenario::Base\n    def load\n      create_record :user, :john, :name => \'John\', :password => \'doodaht\'\n      create_record :user, :cindy, :name => \'Cindy\', :password => \'whoot!\'\n    end\n  end\n\nIn the example above, I\'m using the <tt>create_record</tt> instance method to\ncreate two users: John and Cindy. Notice the calls to <tt>create_record</tt>.\nThere are three parameters. The first is the singular name of the table to\ninsert the record into, the second is the symbolic name of the record (more on\nthat later), and the third is a hash of the attributes of the record.\n\nTo use the UsersScenario in a description, you should declare it using\nthe <tt>scenario</tt> method.  Here it is within a spec file (RSpec):\n\n  # in spec/models/user_spec.rb\n  describe User do\n    scenario :users\n    \n    it "should allow me to do something with John" do\n      user = users(:john)\n      user.password.should == "doodaht"\n    end\n  end\n  \nand here it is within a standard Test::Unit test:\n\n  # in test/unit/user_test.rb\n  class UserTest < Test::Unit::TestCase\n\n    scenario :users\n    \n    def test_do_something\n      user = users(:john)\n      assert_equal "doodaht", user.password\n    end\n  end\n\nNotice that it is easy to load an instance of a model object using its\nsymbolic name with a reader method, similar to that of Rails\' fixtures. In the\nexample above, I loaded John with the reader method <tt>users</tt> and the\nsymbolic name <tt>:john</tt>. (Remember that in the Users scenario I declared\nthat John should be accessible through the symbolic name <tt>:john</tt>.)\n\nI could also have retrieved an array of user fixtures by passing in\nmultiple symbolic names to the reader method:\n\n  # in spec/models/user_spec.rb\n  describe User do\n    scenario :users\n    \n    it "should allow me to get all admins" do\n      admins = users(:john, :ryan)\n      User.admins.should eql(admins)\n    end\n  end\n\n=== Composition\n\nIn real life your scenarios will probably grow quite complicated. The\nscenarios plugin allows you to deal with this complexity through composition.\n\nHere\'s a simple example:\n\n  # in spec/scenarios/posts_scenario.rb or test/scenarios/posts_scenario.rb\n  class PostsScenario < Scenario::Base\n    def load\n      create_record :post, :first, :title => "First Post"\n      create_record :post, :second, :title => "Second Post"\n    end\n  end\n  \n  # in spec/scenarios/comments_scenario.rb or test/scenarios/comments_scenario.rb\n  class CommentsScenario < Scenario::Base\n    uses :posts\n    \n    def load\n      create_record :comment, :first, :body => "Nice post!", :post_id => post_id(:first)\n      create_record :comment, :second, :body => "I like it.", :post_id => post_id(:first)\n      create_record :comment, :third, :body => "I thoroughly disagree.", :post_id => post_id(:second)\n    end\n  end\n\nIn the example above, the CommentsScenario declares that it depends on the\nPosts scenario with the <tt>uses</tt> class method. This means that if you\nload the CommentsScenario, the PostsScenario will be loaded first and the\nCommentsScenario will have access to all the data loaded by the PostsScenario\nin its own <tt>load</tt> method. Note that inside the load method I\'m using\nanother form of reader methed which simply gives you the id for a symbolic\nname (in this case: <tt>post_id</tt>). This is most useful for making\nassociations, as done here with comments and posts.\n\n=== Helper Methods\n\nAnother way of simplifying your scenarios and specs/tests is through helper\nmethods. The Scenarios plugin provides a handy way to declare helper methods\nthat are accessible from inside the scenario and also from inside related\nRSpec/Test::Unit examples:\n\n  # in spec/scenarios/users_scenario.rb or test/scenarios/users_scenario.rb\n  class UsersScenario < Scenario::Base\n    def load\n      create_user :name => "John"\n    end\n\n    helpers do\n      def create_user(attributes={})\n        create_record :user, attributes[:name].downcase.intern, attributes\n      end\n      def login_as(user)\n        @request.session[:user_id] = user.id\n      end\n    end\n  end\n\nHelper methods declared inside the helpers block are mixed into the scenario\nwhen it is instantiated and mixed into examples that declare that they are using\nthe scenario. Also, in the case where one scenario <tt>uses</tt> another, the\nusing scenario will have the helper methods of the used scenario.\n\n  # in spec/controllers/projects_controller_spec.rb\n  describe "Projects screen" do\n    scenario :users\n    \n    it "should show active projects" do\n      login_as(users(:john))\n      get :projects\n      @response.should have_tag(\'#active_projects\')\n    end\n  end\n\n  # in test/functional/projects_controller_test.rb\n  class PeopleControllerTest < Test::Unit::TestCase\n    scenario :users\n    \n    def test_index\n      login_as(users(:john))\n      get :projects\n      assert_tag(\'#active_projects\')\n    end\n  end\n\nNotice that within my specs/tests I have access to the login_as helper method\ndeclared inside the <tt>helpers</tt> block of the UsersScenario. Scenario\nhelpers are a great way to share helper methods between specs/tests that use a\nspecific scenario.\n\n=== Built-in Scenario\n\nThere is a scenario named \'blank\' that comes with the plugin. This scenario is\nuseful when you want to express, and guarantee, that the database is empty. It\nworks by using your db/schema.rb, so if the table isn\'t created in there, it\nwon\'t be cleaned up.\n\nScenario.load_paths is an array of the locations to look for scenario\ndefinitions. The built-in scenarios directory is consulted last, so if you\'d\nlike to re-define, for instance, the \'blank\' scenario, simply create\n\'blank_scenario.rb\' in your spec/scenarios or test/scenarios directory.\n\n=== Load Rake Task\n\nThe Scenarios plugin provides a single Rake task, <tt>db:scenario:load</tt>,\nwhich you may use in a fashion similar to Rails fixtures\'\n<tt>db:fixtures:load</tt>.\n\n  rake db:scenario:load SCENARIO=comments\n\nWhen invoked, this task will populate the development database with the named\nscenario.\n\nIf you do not specify SCENARIO, the task will expect to find a default scenario\n(a file \'default_scenario.rb\' having DefaultScenario defined in it). It is our\npractice to have it such that this scenario <tt>uses</tt> a number of our other\nscenarios, thereby:\n\n* encouraging us to use test data that looks good in the running development\n  application\n\n* allowing us to troubleshoot failing tests in the running development\n  application\n\n=== More Information\n\nFor more information, be sure to look through the documentation over at RubyForge:\n\n* http://faithfulcode.rubyforge.org/docs/scenarios\n\nYou might also enjoy taking a look at the specs for the plugin and the example\nscenarios:\n\n* http://faithfulcode.rubyforge.org/svn/plugins/trunk/scenarios/spec/scenarios_spec.rb\n* http://faithfulcode.rubyforge.org/svn/plugins/trunk/scenarios/spec/scenarios\n\nBrowse the complete source code:\n\n* http://faithfulcode.rubyforge.org/svn/plugins/trunk/scenarios\n\n=== Running Tests\n\nYou should be able to simply run rake. Notice in testing/environment.rb the\nrevisions under which this project will work. If you intend to test against\nHEAD, you will need to delete the directory testing/tmp/trunk/HEAD. At some\npoint, it would be nice to have the script track the revision of HEAD that we\nhave, and update the directory automatically.\n\n=== License\n\nThe Scenarios plugin is released under the MIT-License and is Copyright (c)\n2007, Adam Williams and John W. Long. Special thanks to Chris Redinger for his\npart in helping us get this plugin ready for the public.'
A site to make your code lean and mean. b'codereviewr is a Django project for submitting code for code reviews and being\nable to comment on other people\'s code (OPC).  It hopes to promote coding best\npractices and learning.\n\nCurrently in very alpha and the results are part of our "1 Night 3 Hours"\neffort involving Nate Anderson. Rob Hudson, Dave Merwin, Percy Perez and Brad\nPitcher.\n'
A way to ease testing of code that relies on other code. b'= plugit\n\n* http://github.com/aiwilliams/plugit\n\n== DESCRIPTION:\n\nHaving written a number of libraries, I have found that many of them depend on other libraries.\nOften, those other libraries have multiple revisions and the people who use my libraries want\nmy libraries to work with all revisions of those other libraries. This can get hard to manage!\n\nThe goal of plugit is to make it easy to construct library environments within which you can\nrun tests, to show that your code works in more than just one environment. It also allows you\nto keep from having copies of those libraries checked into your own repository. If they are\navailable for others to download, and you expect that they will, then you should have no problem\ndepending on them being available to you for future download, either!\n\nThis may all only prove useful to Rails plugin developers ;)\n\n== FEATURES/PROBLEMS:\n\n* FIX (list of features or problems)\n\n== SYNOPSIS:\n\nPlugit.describe do |mything|\n  mything.environment :default, \'The one we want everyone using\' do |env|\n    env.library :example, \'1.0\', "cp -R #{File.dirname(__FILE__)}/../../../repositories/example/*"\n    env.library :another, \'2.0\', "svn co http://something.com/svn/ALibrary"\n  end\nend\n\nThe :default environment is loaded unless you specify otherwise through ENV[\'PLUGIT_ENV\']. This is necessary since you will be\nrunning your specs from Rakefile, which will load independent processes for each environment you want to run.\n\n== REQUIREMENTS:\n\n== INSTALL:\n\nsudo gem install plugit --source=http://gems.github.com\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Adam Williams (aiwilliams)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'
A dynamic, hackable window manager written in Python b'Whimsy window manager\n\nWritten by Nick Welch (mack@incise.org) in the years 2005-2008.  Author\ndisclaims copyright.  All contents of this project are dedicated to the\npublic domain.  There is no warranty for this software.\n\n'
A site to make your code lean and mean. b'codereviewr is a Django project for submitting code for code reviews and being\nable to comment on other people\'s code (OPC).  It hopes to promote coding best\npractices and learning.\n\nCurrently in very alpha and the results are part of our "1 Night 3 Hours"\neffort involving Nate Anderson. Rob Hudson, Dave Merwin, Percy Perez and Brad\nPitcher.\n'
Tamarind was designed to make it as easy as possible for developers to participate in the Semantic Web by exposing their data in accordance with applicable standards and ontologies.  In particular, Tamarind targets developers using Ruby frameworks and ORMs. b'Tamarind was designed to make it as easy as possible for developers to participate in the Semantic Web by exposing their data \nin accordance with applicable standards and ontologies.  In particular, Tamarind targets developers using Ruby frameworks and ORMs.\n\nNote that this release is not intended for production use.  Please consider all pre-1.0 releases "developer" releases.\n\nOh, and where does the name come from?  Well, the Old Testament, Koran, and Torah refer to the Tree of Knowledge in the Garden of Eden as a Tamarind tree.  (Book of Enoch 31:4).  Each ontology Tamarind supports is referred to as a branch.\n\n==Installation\n\nWhen Tamarind is ready for production use, the gem will be published on Rubyforge.  Developers who\'d like to use it now\nshould:\n\n1.  Git it.  (git clone git://github.com/pius/tamarind.git)\n2.  Install the gem.  (cd tamarind; rake local_deploy)\n\n==Adding New Ontologies\n\nTo add an ontology, a developer need only follow these steps:\n\n1.  Under tamarind/branches, create a directory for the ontology along with a module that identifies the data fields\n\tnecessary for filling in the ontology.  (See the FOAF ontology as an example.)\n2.  Write the template using Ruby builder syntax and save it under the directory from step 1.  Fields that must come from \n\tthe database should be prefixed by the "@" sign.  (Again, see the FOAF ontology as an example.)\n3.  There is no step three.\n\n==General Process for Using Ontologies In Your Application\n\nTo use an ontology, a developer need only follow these steps:\n\n1.  Require the gem in your application\n2.  Check out the documentation for the gem to find what ontologies are supported and learn how to use the "offers_*" \n\tmethods.\n3.  In your model file, call offers_<ontology>, where <ontology> is the lowercase RDF type (e.g. offers_foaf).\n\t\n====Instructions for Merb (0.9.1 or greater)\n\n*in config/init.rb\n\nMerb::BootLoader.before_app_loads do\n dependency \'tamarind\'\nend\n\nMerb::BootLoader.after_app_loads do\n  Merb.add_mime_type(:rdf,:to_rdf,%w[application/rdf+xml])\nend\n\n*in any controller that\'s going to use Tamarind, add:\n\nprovides :rdf\n\n*in the model (e.g. User), add:\n\toffers_foaf :name => \'username\', \n\t\t\t\t:email => \'email\',  #takes a hash mapping the ontology\'s canonical attributes to the model\'s accessors\n\t\t\t\t\t\t\t#defaults to using the same names\n\n*in any view (e.g. the User show action) using Tamarind, add this to enable auto-discovery:\n<link rel="meta" type="application/rdf+xml" title="foo" href="<%=@user.id%>.rdf" />\n\n==TODO\n\n\tAdd generator for new ontologies\n\tAdd specs\n\tSupport templating engines besides Builder\n\tAutomatically parse the variables out of the template rather than require them to be explicitly declared\n\tImprove the documentation\n\tFirm up support for hashes that bind model attributes to ontology attributes\n'
A Gitk-like application written in RubyCocoa that looks like it belongs on a Mac.  See the wiki for an early screenshot b'# GitNub - A RubyCocoa app for getting quick information for a git repo.  Similar to GitK.\n \n* Gems Required: mime-types\n  Other Requirements: Git(duh!), RubyCocoa, Leopard\n\n\n# Quick Install \n1. Move GitNub.app to /Applications\n2. Move (or symlink) nub to /usr/local/bin\n\n\n\n# How to Use\nIn your shell, move to a git directory and invoke `nub`.  You always use this \nhelper to invoke the application, otherwise you get nothing.\n\n\t\t$Caged@caged:~/dev/git/gitnub% nub\n\n\t\t\n# Building from Source\n1. Open project in Xcode - press Build\n2. Doubleclick the nub subproject and repeat step 1.\n3. Move the build/Release/GitNub.app and nub/build/Release/nub to the proper locations \n   specified in the Quick Install directions.'
Merb bundle for TextMate (uses Ruby, Ruby on Rails, Datamapper and Sequel bundles as necessary) b'Snippets, Commands, and Language/Syntax integration for Merb\n------------------------------------------------------------\n\n\nInstallation\n============\n\n    cd "~/Library/Application Support/TextMate/Bundles"\n    git clone git://github.com/drnic/merb-tmbundle.git Merb.tmbundle\n\nInside TextMate, click on Reload Bundles and you\'re done.\n'
Static website generator 
Perspectives for Emacs. b'# Perspective for Emacs\n\n## Description\nThis package provides tagged workspaces in Emacs, similar to workspaces in\nwindows managers such as Awesome and XMonad (and somewhat similar to multiple\ndesktops in Gnome or Spaces in OS X).\n\n`perspective.el` provides multiple workspaces (or "perspectives") for each Emacs\nframe. This makes it easy to work on many separate projects without getting lost\nin all the buffers.\n\nEach perspective is composed of a window configuration and a set of buffers.\nSwitching to a perspective activates its window configuration, and when in a\nperspective only its buffers are available by default.\n\nIt\'s recommended that you install perspective.el from [Marmalade][] using `M-x\npackage-install`. Alternately, you may put it in your load path and run\n`(require \'perspective)`.\n\n[Marmalade]: http://marmalade-repo.org/\n\n## Usage\n\nTo activate perspective use `(persp-mode)`.\n\nCommands are all prefixed by `C-x x`. Here are the main commands:\n\n### Key       --    Command\n- `s`  --  `persp-switch`: Query a perspective to switch or create\n- `k`  --  `persp-remove-buffer`: Query a buffer to remove from current perspective\n- `c`  --  `persp-kill` : Query a perspective to kill\n- `r`  --  `persp-rename`: Rename current perspective\n- `a`  --  `persp-add-buffer`: Query an open buffer to add to current perspective\n- `A`  --  `persp-set-buffer`: Add buffer to current perspective and remove it from all others\n- `i`  --  `persp-import`: Import a given perspective from another frame.\n- `n`, `<right>`  --  `persp-next` : Switch to next perspective\n- `p`, `<left>`   --  `persp-prev`: Switch to previous perspective\n'
Sugar Activity 
my emacs customizations 
My assistance repo w/ minor tweaks (original @ http://assistance.rubyforge.org/svn/trunk) b'Official assistance repo is in svn @ http://assistance.rubyforge.org/svn/trunk\nSee http://assistance.rubyforge.org\n\nMy changes (by branch name)\n  + add_if_proc_to_validations\n    allows you to write validates_presence_of :password, :if => lambda {|s| self.require_password?}\n    status: Submitted patch via email\n  \n  + make_errors_enumerable\n    Mixes Enumerable into Validations::Errors and provides .size and .each to errors. This was done for merb_helpers error_messages_for\n    status: Patch not submitted, awaiting response about previous patch\n'
go (to project) do (stuffs) b'= godo\n\n* version: 1.0.8\n* released: 2008-05-28\n* http://simplyruby.rubyforge.org/godo\n\n== DESCRIPTION:\n\ngo (to project) do (stuffs)\n\ngodo provides a smart way of opening a project folder in multiple terminal tabs and, in each tab,\ninvoking a commands appropriate to that project. For example if the folder contains a Rails project\nthe actions might include: starting mongrel, tailing one or more logs, starting consoles or IRB\nsessions, tailing production logs, opening an editor, running autospec, or gitk.\n\ngodo works by searching your project paths for a given search string and trying to match it against\npaths found in one or more configured project roots. It will make some straightforward efforts to\ndisambiguate among multiple matches to find the one you want.\n\ngodo then uses configurable heuristics to figure out what type of project it is, for example "a RoR\nproject using RSpec and Subversion". From that it will invokes a series of action appropriate to the type of project detected with each action being run, from the project folder, in its own terminal session.\n\ngodo is entirely configured by a YAML file (~/.godo) that contains project types, heuristics, actions, project paths, and a session controller. A sample configuration file is provided that can be installed using godo --install.\n\t\ngodo comes with an iTerm session controller for MacOSX that uses the rb-appscript gem to control iTerm (see lib/session.rb and lib/sessions/iterm_session.rb). It should be relatively straightforward to add new controller (e.g. for Leopard Terminal.app), or a controller that works in a different way (e.g. by creating new windows instead of new tabs). There is nothing MacOSX specific about the rest of godo so creating controllers for other unixen should be straightforward if they can be controlled from ruby.\n\ngodo is a rewrite of my original \'gp\' script (http://matt.blogs.it/entries/00002674.html) which fixes a number of the deficiencies of that script, turns it into a gem, has a better name, and steals the idea of using heuristics to detect project types from Solomon White\'s gp variant (http://onrails.org/articles/2007/11/28/scripting-the-leopard-terminal).\n  \ngodo now includes contributions from Lee Marlow <lee.marlow@gmail.com> including support for project level .godo files to override the global configuration, support for Terminal.app, and maximum depth support to speed up the finder.\n\t\ngodo lives at the excellent GitHub: http://github.com/mmower/godo/ and accepts patches and forks.\n\n== FEATURES/PROBLEMS:\n\n* All-in-one configuration file\n* Flexible heuristics for detecting project type\n* Flexible actions for running commands\n* Project level customizations\n\n== SYNOPSIS:\n\nTo install the default configuration (will not overwrite an existing configuration file)\n\ngodo --install\n\nTo open a project with it\'s actions\n\ngodo <project>\n\nWhere project is a search term that will match part of the project path name.\n\nIf the project has a .godo file at its root, then those actions will be used\ninstead of using the heuristics.  A project level .godo file can reference\nactions defined in ~/.godo, a group of actions by project type, and\narbitrary commands.\n\nHere\'s a sample project level .godo file:\n---\nactions:\n  - terminal\n  - command: echo \'tab before matcher\'\n    label: This tab goes before the project matcher\n  - matcher: rails+git\n  - command: echo \'tab after matcher\'\n  - terminal\n\nTo open a project and override the project type (i.e. do not use heuristics nor\na project level .godo file):\n\ngodo -o <matcher> <project>\n\nTo see what project types are available:\n\ngodo --list-types\n\n== REQUIREMENTS:\n\n* Trollop\n* rb-appscript\n\n== INSTALL:\n\n* sudo gem install godo\n* godo --install\n* mate|vi|emacs ~/.godo\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Matt Mower <self@mattmower.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
a fast webserver b'Dissemina\n=========\n  a fast webserver\n\nThe scenario invisioned is this:\n  - Alice has a directory of files she wishes to share with Bob, Carmen, and Dan\n  - but the three are not interested in all the files or even the same files\n  - Bob suggests Alice start a server and make these files public\n  - Alice has no previous experience with webservers, so she wants a\n  webserver that she can use without having to go through pages and\n  pages of documentation\n\nThis is where Dissemina comes into the picture. Dissemina is drop-in\nwebserver written with simplicity and speed in mind. The goal is to make\na webserver that can be deployed immediatly with NO configuration.\n\nIn this case, Alice can just get the sever\'s executable, put it into\nthe directory she wants to make public and run it. Dissemina immediately\nstarts serving the files. Now all that\'s left is for Alice to tell Bob\nand the others her IP address.\n\nFeature plan for 0.1:\n  * serve static files from the current directory with minimum hustle [done]\n  * guess filetype and fill in the Content-Type header correctly [partial]\n  * handle thousands of requests per second well [no]\n  * run on Linux [done]\n  * run on Windows [no]\n\n\nLicense\n=======\n\nThe MIT License\n\nCopyright (c) 2008 Alexandru Scvortov\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the "Software"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n'
A distributed photo sharing app. 
A YAML processor for use with Nu and Objective-C. Created by Patrick Thomson. 
Localization (L10n) and Internationalization (i18n) support for the Merb MVC Framework b'= merb_global\n== Localization (L10n) and Internationalization (i18n) support for the Merb MVC Framework\n\nPlease see README.markdown.\n'
A popular sample Cocoa application rewritten in Nu. Original code by Aaron Hillegass, ported to Nu by Tim Burks. b"This is a translation of Aaron Hillegass' PagePacker example from Objective-C to Nu.\n\nIt is released under the BSD license, the same license as the original PagePacker.\n\nYou'll notice that this project contains many fewer files than the original. This is partly because Nu code is more concise.  But it also reflects my view that dividing code across multiple files makes it less readable, much like organizing a novel with each character's dialogue in a separate chapter.\n\nAll but four methods were converted to Nu. Of these four, two or three may be representable in Nu with future improvements.\n\nI've never used AppleScript (and don't plan to), so the scripting support in scripting.nu is untested. I've attempted to test everything else, but there may still be problems that I haven't found.\n\nPlease consider this a work in progress and an attempted proof of concept. It's goal is to demonstrate that Nu can be used to develop significant Cocoa applications.  Writing this has helped me make Nu a lot better; perhaps reading it will help others see as many Nu opportunities as I do.\n\nTim Burks\nLos Altos, CA\nDecember 2007"
Extended version of TangoClaws icon theme for the Claws mailer b'\nThis is a branch of the TangoClaws icon theme for the Claws mailer, containing\nsome more Tango icons to replace the default ones. It is still far from complete\nand might never actually be completed :-)\n\nSee http://www.claws-mail.org/ for the Claws mailer, and http://www.claws-mail.org/themes.php\nfor more themes.\n\nThe original TangoClaws theme was created by Frederik Elwert, who writes about it:\n"The icons of this theme are based on the work of The Tango Project <http://tango-project.org/>.\nIcons that were not present in the Tango icon set were partly created by myself or taken from the\nfollowing other Projects:\n\n    * Tango Icons for Thunderbird, by Nico Kaiser\n      <https://addons.mozilla.org/thunderbird/2258/>\n\n    * Tango CL theme for Opera, by towolf\n      <http://my.opera.com/community/customize/skins/info/?id=3465>\n"\n\nThis work is licensed under the Creative Commons Attribution Share-Alike license.\nSee <http://creativecommons.org/licenses/by-sa/2.5/> for details.\n\n\nSo, this modified theme is actually created from four sources:\n- the original TangoClaws theme (http://www.claws-mail.org/themes.php)\n- the Tango icon theme for Thunderbird (https://addons.mozilla.org/en-US/firefox/addon/2258?id=2258&application=thunderbird)\n- the original Tango icon set (http://tango.freedesktop.org/)\n- other icons that are based on existing Tango icons but are modified a bit (in customIcons/ directory)\n\nThe theme can be downloaded from\nhttp://github.com/oliver/tangoclawsextended/tree/master/claws-mail-theme_TangoClawsExt-0.3.tar.gz?raw=true\n\nTo build the theme:\n- download the TangoClaws tgz from http://www.claws-mail.org/download.php?file=themes/claws-mail-theme_TangoClaws-0.3.tar.gz\n  and put it into the directory where the Makefile resides\n- download the Tango icons for Thunderbird from https://addons.mozilla.org/en-US/firefox/downloads/file/16375/tango_icons_for_thunderbird-0.7.0-tb.jar\n  and also put it that directory\n- make sure the original Tango iconset is installed at /usr/share/icons/Tango/\n  (you can probably install it through the package manager of your system)\n- run make\n- this should create a new tgz which contains the new theme.\n'
Markdown processing with Nu. Use with any Nu or Objective-C project. Created by Grayson Hansard. 
A cross-platform web server that's scripted with Nu. b'\nNunja is a small portable web server for use with Nu.\n\nIt is based on the libevent event notification library\n(http://monkey.org/~provos/libevent/), and has been tested\non OS X 10.5 and Linux (Ubuntu-7.10) systems. \n\t\nREQUIREMENTS\n\nNunja requires Nu and nuke, the Nu build tool. To obtain\nNu, please visit http://programming.nu or get the source\nfrom the Nu git repository on github:\n\thttp://github.com/timburks/nu\n\t\nNunja requires libevent. Before building Nunja, please \nbe sure that libevent is installed on your system. The\ndefault build configuration expects libevent to be installed\nin /usr/local.\n\nHelpers for working with URL query strings have been \nfactored out into a separate project, NuHTTPHelpers, \nwhich is now required to run Nunja.\n\nOn Linux systems, Nunja requires an implementation of the\nFoundation classes. It has been tested with NuFound, a\nmodified version of the libFoundation library that has been\nupdated to work with Nu and which can be built using the\nGNU autotools. The primary NuFound repository is on github: \n\thttp://github.com/timburks/nufound\n\t\nThe primary Nunja repository is also on github:\n\thttp://github.com/timburks/nunja\n\t\nINSTALLATION\n\nAfter installing all prerequisites, build the Nunja framework\nby typing "nuke" in the top-level Nunja directory.\n\nAN EXAMPLE\n\nLet\'s start with the simplest possible Nunja app:\n\n==============================================\n#!/usr/local/bin/nush\n(load "Nunja")\n(set nunja (Nunja nunjaWithCommandLineArguments))\n\n(get "/"\n\t"hello!")\n\n(nunja run)\n==============================================\n\nNunja can also be run from the command line using the "nunjad" \n(nunja daemon) script.  nunjad accepts arguments that can\nbe used to specify a port and a site description. A sample\nsite description is in the sample directory. To run it in\nNunja, use the following command:\n\tnunjad --site sample\n\t\nCurrently the sample site is very simple, but illustrates\nthe processing of GET and POST requests and the basics of\nresponse generation, including the use of cookies.\n\nINFLUENCES\n\nNunja is modeled on Blake Mizerany\'s Sinatra, \n\thttp://sinatra.rubyforge.org/\nbut has the clarity and transparency of implementation\nthat can only be achieved with Objective-C and Nu.\n\nAUTHOR\n\nNunja was written by Tim Burks and awaits a host of updates\nand improvements from its users.\n\nNunja is released under the Apache License, version 2.0.\n\nCopyright 2008-2009, Neon Design Technology, Inc.\n'
digitalcodes.org website 
The WifiDog Client that FreeTheNet.ca uses b"#\n# $Id: README 935 2006-02-01 03:22:04Z benoitg $\n#\n\nThe WiFi Guard Dog project is a complete and embeddable captive portal\nsolution for wireless community groups or individuals who wish to open a\nfree HotSpot while still preventing abuse of their Internet connection.\n\nThe project's homepage is:\n\thttp://dev.wifidog.org/\n\nMailing list interface:\n\thttp://listes.ilesansfil.org/cgi-bin/mailman/listinfo/wifidog\n\nThe project's software is released under the GPL license and is copyright it's respective owners.\n\n"
Pythonic way to access Google AdWords API 
social networking framework with multi user blogs, developed in Rails 2.0.2 completely RESTful b'BlogPub\n=========\n\nBlogPub is a user-centric framework which allows users to have their own subdomain blog, to write and group together similar topics in global categories like "blogger\'s magazine", "morning coffee" or anything else you might think of. \n\nLanguage Support\n=================\n\nIt supports any language you need, using the great Polyglot localization plugin. As is, it supports Romanian and English. You can add your own language by going to vendor/plugins/polyglot/languages and creating you own language file, for example de.yml. Copy everything from the en.yml and start translating the messages into german or whatever other language you\'ve chosen. \n\nUsing BlogPub on localhost\n===========================\n\nIn order to use subdomains on localhost, you can do the following:\nOpen the following file: /etc/hosts, and add into it a few domains and subdomains that you\'d like to use while testing on localhost. I use the .dev extension for the local domains, but you can use whatever you like. Though be careful not to define a domain which is a real domain. For example defining\n\n127.0.0.1 www.google.com\n\nwould send any request from the browser for "www.google.com" to your own machine, not to the real Google. That\'s why I use a .dev extension, which is not a real one. So, back to what you define into your hosts file. Let\'s use the macbook.dev main domain, with subdomains john.macbook.dev (for the user john) and chris.macbook.dev (for the user chris). The following lines should be added into your hosts file:\n\n127.0.0.1       macbook.dev\n127.0.0.1       john.macbook.dev\n127.0.0.1       chris.macbook.dev\n\nIf you want to test more subdomains for more users, you should add a line here for each one. \nNow, you should be able to go to "macbook.dev:3000" in your browser, and log in as chris (or john) and you\'ll be redirected to the correct subdomain.\n\nSupport\n========\n\nIf you need help with customizing it, or if you want to contribute to this project, drop me a line at sergiutruta[at]gmail[dot]com. '
Merb Plugins: Even more modules to hook up your Merb installation 
simple localization plugin for rails application, based on yml files b'Polyglot\n=========\n====\nThis plugin offers the simple function of localizing your custom messages inside a Rails application. \nIn order to support multiple languages, you\'ll need a yml file for each language. \n\nThe Polyglot plugin offers you several functions for localization. They are available in your Models, Views, Controllers and Tests. The functions are:\n\n_(key, lang)        - returns the message in the required language\navailable_languages - tells you what are the supported languages \ncurrent_language    - tells you what is set as the current language\ncurrent_language=   - to change the default language\n\nHow to use\n==========\n==========\nAdd your own language files\n===========================\nIn the plugin root directory, you can see a languages folder. Inside this folder, you\'ll have to add your own language files in yml format. they contain simple key-value pairs, like this:\n\nmessage_to_display: Hello!\ngreeting: How are you today?\n\nFor English, use an \'en.yml\' file, for French \'fr.en\', for German \'de.yml\', for Romanian \'ro.yml\', and so on.\n\nRight now there are two sample files with a few messages, en.yml and ro.yml. You can change/remove these files according to your needs.\n\nThat\'s it. Now you can start using it.\n\nExample of usage\n=================\n=================\nHow to translate the messages\n==============================\n_(\'message_key\', \'en\') returns the message in English corresponding to this key\n_(\'message_key\', \'ro\') returns the message in Romanian corresponding to this key\n\nYou can call the "_()" method with a string or with a variable. And if you\'re using the default language, you don\'t have to specify the language anymore, just the message_key, like this:\n\n_ \'message_key\' \nor\n_ @message_key\n\nand it will return the localized version.\n\nUsing parameters and placeholders inside the strings\n=====================================================\n\nAs the order of words differs in different languages, you can use placeholders inside your localized strings. For example:\n\n1. Fill the dictionaries\n-------------------------\n\ninside en.yml\ngreetings: Hi {0}! how are you and your friend {1} today?\n\ninside es.yml\ngreetings: Hola {0} e {1}! Comos estan ustedes hoy?\n\n2. Call the localization function\n----------------------------------\n\n_(\'greetings\', \'Sergiu\', \'George\')\n\n3. The output will be:\n-----------------------\n\n"Hi Sergiu! how are you and your friend George today?" for english, and\n"Hola Sergiu e George! Comos estan ustedes hoy?" for spanish. \n\nI couldn\'t think of a better example right now :))\n\nHow to change the default language\n===================================\nIn order to change the default language, from example from a controller, all you have to do is this:\n\nself.default_language = \'en\' or some other language.\n\nIf you forget the self, then it will be just a local variable declaration, and it will not change the default language. SO DON\'T FORGET IT :).\n\nFor more technical explanation, see the comments inside polyglot.rb\n\nOther localization plugins\n===========================\n===========================\n\nCopyright (c) 2008 Sergiu Truta (http://www.sergiutruta.com), released under the MIT license.\n'
Test application for testing the rails-authorization-plugin b'== Authorization Test Application\n\nThis is a test application (and new application scaffold) for the Authorization\nplugin with Object Roles table support. The Authorization plugin is described\nin vendors/plugins/authorization/README (or check nicely formatted HTML docs in\nthat plugin directory /doc).\n\nPrerequisites:\n- Ruby on Rails v 2.0.2 or higher\n- The Ruby Sqlite3 gem is installed and functional.  You can use MySQL for the tests but will need to manually create the databases needed and add them to \'config/database.yml\' yourself.\n\nRunning the Tests:\n- Make sure you have the correct authorization plugin which gets included as a git sub-module:\n  - first time:\n    - git submodule init\n    - git submodule update\n  - to pick up later updates to the plugin sub-module do something like:\n    - cd vendor/plugins/authorization\n    - git checkout master\n    - git remote update\n    - cd ../../../\n    - rake test\n\nNote: Learn more about using submodules\nhttp://speirs.org/2009/05/11/understanding-git-submodules/\nhttp://woss.name/2008/04/09/using-git-submodules-to-track-vendorrails/\n\n- Make sure /config/database.yml has the correct settings for your DB (Default Sqlite3).\n- Run the migration using "rake db:migrate" or reset the DB with "rake db:migrate:reset"\n- Run \'rake test\' from the root of the test application.\n\nOptional manual tests:\n- Start an instance of the mongrel webserver by running \'./script/server\'\n- Surf to http://localhost:3000 and try out the sample application.\n\nThings to look at:\n* The integration tests in /test/integration. Enter "rake test:integration" to run them.\n* The migration scripts in /db/migrate.\n* Notice how you can mix hardwired roles in your code with database roles.\n\nhttp://www.writertopia.com/developers\n\n'
Deliver email to local db and have it send by sequel_sendmail later. Attempt at a clone of ar_mailer for merb + sequel. b'sequel_mailer\n=============\n\nMy attempt at a clone of ar_mailer (http://seattlerb.rubyforge.org/ar_mailer/) for Merb 0.9.1+ and the Sequel ORM.\n\nStatus\n=============\nThe plugin can be used in your merb app, but there\'s nothing to send the mail yet.\n\n\nUsing\n=============\n+ Create the migration for your model (Assumes model will be named Email):\n\nclass EmailMigration < Sequel::Migration\n  def up\n    create_table "emails" do\n      primary_key :id\n      varchar :from_address\n      varchar :to_address\n      varchar :last_send_attempt, :default => 0\n      text    :mail\n      datetime :created_on\n    end\n  end\n\n  def down\n    execute "DROP TABLE emails"\n  end\nend\n\n\n+ Set the delivery_method and class to be used:\n\nMerb::Mailer.delivery_method = :sequel\nMerb::Mailer.config = {:sequel_mailer_class => Email}\n\n+ Enjoy\n\n\nTODO\n=============\n+ Write specs for the mailer\n+ Write the sequel_sendmail daemon\n+ Write a generator for the migration and setting the config\n'
selectively import methods from modules b"== Summary\nselectively include module methods with Kernel#import\n\n== Author and License\nCopyright (c) 2008 Greg Weber, http://gregweber.info\nLicensed under the MIT license\n\n== Usage\n\n  require 'rubygems'\n  require 'module-import'\n\n  module Foo\n    def foo; 'foo' end\n    def bar; 'bar' end\n  end\n\n  class Importer\n    import Foo, :bar\n  end\n  Importer.new.bar # => 'bar'\n  Importer.new.foo # => # NoMethodError\n\n  class Importer\n    import Foo, :not_defined # => #not_defined not found in Foo (ImportError)\n  end\n\n\nGiving no methods (or all methods) should behave the same as a normal include\n\n  class Importer2\n    import Foo # same as import Foo, :foo, :bar\n  end\n  Importer2.new.bar # => 'bar'\n  Importer2.new.foo # => 'foo'\n\nHowever, there is one important difference.  New changes in the included module will not effect the class.\n  module Foo\n    undef_method :foo\n    def bar; fail end\n  end\n  Importer2.new.bar # => 'bar'\n  Importer2.new.foo # => 'foo'\n\n== WARNING!\nThere is no way for Kernel#import to track dependencies between methods!  To help with this, by default, all private methods from the module will be imported unless the option :import_private is set to false\nTo write a module that works with this system well, your public methods should depend only on private methods.\nTo use this on someone else's module, you should either import the full module or write tests or inspect the source code of the module you are importing.\n\n== Install\ngem install module-import\n\n== Source\n=== browser\nhttp://github.com/gregwebs/module-import/tree/master\n\n=== repository\ngit clone git://github.com/gregwebs/module-import.git\n\n== Homepage\nhttp://gregweber.info/projects/module-import.html\n\n== RDoc documentation\nincluded with the gem\n\n== Notes\n=== Testing\n4:1 test:code ratio, I think I have all the corner cases covered.  In particular, this does not break inheritance and everything works the same for importing into a module as it does for importing into class.\n\n=== Implementation\nIncludes a duplicate of the module that has methods removed\n"
Bits of code from around the world b'hi there\n'
RedProcess.com Chyrp theme b'redprocess.com - ANALOG\nChyrp Powered\nAlex Roberts <alex@redprocess.com> \n2008-03-08\n\n'
A newfound treasure; a lightweight Foundation library for Linux. b'\nThis is NuFound, a revision of the libFoundation library for use with Nu.\n\n\nABOUT\n\nForked mainly for expedience, NuFound contains a few bug fixes and \nenhancements that make NuFound look more like the Apple Foundation classes.\nBut there are many missing features, so in the future, one or more of\nthe following may happen, in no particular order of preference:\n\n1. the GNUstep base library will be updated for use with Nu instead of NuFound.\n\n2. the Cocotron project will be updated so that it can be built and used\nwith the "stock" GCC and libobjc on Linux.\n\n3. NuFound will remerge into a revived libFoundation project.\n\n4. a mature corporate Foundation library will be released under an acceptable\nopen source license.\n\n5. NuFound will continue to be enhanced until it satisfies all requirements.\n\nBut in its current state, NuFound supports a fully-functional build of Nu.\n\n\nLICENSE\n\nNuFound is released under the Apache Public License, v. 2.0.\nlibFoundation is available under a more liberal original license.\n\n\nINSTALLATION\n\n./configure\nmake\nsudo make install\nsudo cp -r Foundation /usr/local/include\n\n(Sorry about that last step; if someone would help me get it into the autotools \nMakefiles I would greatly appreciate it!)\n\n\nACKNOWLEDGEMENTS\n\nMany (many many!) thanks to  Mircea Oancea, Ovidiu Predescu, and Helge Hess\nfor sharing their work on libFoundation.\n\t\n\t\nAPPENDIX: Autoconf/Automake notes\n\nTo regenerate the build files with autoconf/automake,\nrun the following command:\n\n% autoreconf --install\n\nThe two primary source files are \n\tconfigure.ac\n\tMakefile.am\n\nTo clean up, use:\n\n% make distclean\n'
A pure ruby implementation of Git - unmaintained.  See grit for an active project that has inherited much of this code. b"== * Git-Ruby Is Not Maintained *\n\nThe Git-Ruby project is no longer maintained by me.  I will leave it up here for now, but almost all of this code has since been incorporated into the Grit project (http://github.com/schacon/git-ruby) and works much, much better.  If you're interested in using Git from Ruby, please check out Grit (specifically the schacon/grit fork) - it does as much as it can from Ruby and falls back to system calls if it needs to.  The API is different, but the project is being actively maintained.\n\n== Git Library for Ruby\n\nA pure ruby implementation of Git\n\n= Homepage\n\nThe Git-Ruby homepage is currently at : \n\nhttp://jointheconversation.org/gitruby\n\nGit public hosting of the project source code is at:\n\nhttp://github.com/schacon/gitruby\n\n= Roadmap\n\nMany of the simple read-only operations have already been\nmoved to pure ruby.\n\n= Gitr\n\nI have included a command line pure-ruby git client called 'gitr'\n\nThe following commands are available - they all will run in pure ruby, without forking out the the git binary.\nIn fact, they can be run on a machine without git compiled on it.\n\ncommands: log\n          log-shas\n          cat-file (treeish)\n          rev-parse (treeish)\n          branches\n          ls-tree (tree)\n          \n\n= Examples\n\nHere are a bunch of examples of how to use the Git-Ruby package. \n\nFirst you have to remember to require rubygems if it's not.  Then include the 'git-ruby' gem.\n\n   require 'rubygems'\n   require 'git-ruby'\n\n"
Simple Authentication System and User Management b'= Aurora\n== Simple Authentication and and User Management System\n\nAurora is a simple approach to authenticating users for applications with\nvaried permissions requirements and abstracting away the distinct\nauthentication process from the application in order to keep the application\nflexible.\n\nThis allows for multiple applications all to interface with the same process\nand not be concerned about the changing authentication process: switching\nprocesses can be transparent to all of your apps.\n\n== Halcyon\n\nAurora is written on top of Halcyon, a JSON Web Server App Framework built on\nRack. This allows for Aurora to be thin, lightweight, and fast.\n\n== Development Status\n\nAurora is currently under restructure as Halcyon moves to a new architecture.\nDocumentation will be updated accordingly. These changes will make it easier to\nspecialize the authentication process and other features of Aurora to better\nmatch the needs of your environment.\n\n== Notes And Considerations\n\nFor the Authenticator class, have it test to see if self.authenticate is\ndefined, otherwise, use #authenticate so Authenticators don\'t have to be\ninstanciated unless they need to define initialize for connecting to\nresources, etc.\n\nThis might also be addressed if Authenticators have to inherit from a Base\nAuthenticator which can provide a hook for self.startup, for instance.\n\n== Contact\n\nPlease mail bugs, suggestions and patches to <mailto:chiology@gmail.com>.\n\nYou are also welcome to join the #aurora-sas channel on irc.freenode.net.\n\nOur website is up so stop by and check out what\'s going down. Our address is\nhttp://aurora.rubyforge.org/. On there you will find information about our\nmailing list as well, so do stop by.\n\n== License and Copyright\n\nCopyright (C) 2007 Matt Todd <http://purl.org/net/maraby>.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n== Links\n\nHalcyon:: <http://halcyon.rubyforge.org/>\nAurora:: <http://aurora.rubyforge.org/>\n\nRack:: <http://rack.rubyforge.org/>\nJSON:: <http://json.rubyforge.org/>\n\nMatt Todd:: <http://maraby.org/>\n'
LiveJournaller is yet another LiveJournal client library, with a couple of command-line utils for composing and publishing posts. 
A Javascript BDD Framework with nested describes, a convenient assertion syntax, and an intuitive test browser. b"= screw_unit\n\n* http://screw_unit.rubyforge.org\n\n== DESCRIPTION:\n\n* A reimplementation of Screw.Unit, with a featureful runner and a simple, baked-in http server.\n\n== FEATURES/PROBLEMS:\n\n* FIX (list of features or problems)\n\n== SYNOPSIS:\n\n  FIX (code sample of usage)\n\n== REQUIREMENTS:\n\n* FIX (list of requirements)\n\n== INSTALL:\n\n* FIX (sudo gem install, anything else)\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2009 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
A Relational Algebra b'## Abstract ##\n\nArel is a Relational Algebra for Ruby. It 1) simplifies the generation complex of SQL queries and it 2) adapts to various RDBMS systems. It is intended to be a framework framework; that is, you can build your own ORM with it, focusing on innovative object and collection modeling as opposed to database compatibility and query generation.\n\n## Status ##\n\nArel is alpha software, BEWARE. Nevertheless, at this point, many (most?) SELECT queries can be composed, including very very complicated ones. Writes are only experimental for now.\n\nFor the moment, Arel uses ActiveRecord\'s connection adapters to connect to the various engines, connection pooling, perform quoting, and do type conversion. On the horizon is the use of DataObjects instead.\n\nThe long term goal, following both LINQ and DataMapper, is to have Arel adapt to engines beyond RDBMS, including XML, IMAP, YAML, etc.\n\n## A Gentle Introduction ##\n\nGenerating a query with ARel is simple. For example, in order to produce\n\n    SELECT * FROM users\n   \nyou construct a table relation and convert it to sql:\n\n    users = Table(:users)\n    users.to_sql\n   \nIn fact, you will probably never call `#to_sql`. Rather, you\'ll work with data from the table directly. You can iterate through all rows in the `users` table like this:\n\n    users.each { |user| ... }\n    \nIn other words, Arel relations implement Ruby\'s Enumerable interface. Let\'s have a look at a concrete example:\n\n    users.first # => { users[:id] => 1, users[:name] => \'bob\' }\n    \nAs you can see, Arel converts the rows from the database into a hash, the values of which are sublimated to the appropriate Ruby primitive (integers, strings, and so forth).\n\n### More Sophisticated <strike>Queries</strike> Relations ###\n\nHere is a whirlwind tour through the most common relational operators. These will probably cover 80% of all interaction with the database.\n\nFirst is the \'restriction\' operator, `where`:\n\n    users.where(users[:name].eq(\'amy\'))\n    # => SELECT * FROM users WHERE users.name = \'amy\'\n\nWhat would, in SQL, be part of the `SELECT` clause is called in Arel a `projection`:\n\n    users.project(users[:id]) # => SELECT users.id FROM users\n    \nJoins resemble SQL strongly:\n\n    users.join(photos).on(users[:id].eq(photos[:user_id]))\n    # => SELECT * FROM users INNER JOIN photos ON users.id = photos.user_id\n\nWhat are called `LIMIT` and `OFFSET` in SQL are called `take` and `skip` in Arel:\n\n    users.take(5) # => SELECT * FROM users LIMIT 5\n    users.skip(4) # => SELECT * FROM users OFFSET 4\n    \n`GROUP BY` is called `group`:\n\n    users.group(users[:name]) # => SELECT * FROM users GROUP BY name\n\nThe best property of the Relational Algebra is its "composability", or closure under all operations. For example, to select AND project, just "chain" the method invocations:\n\n    users                                 \\\n      .where(users[:name].eq(\'amy\'))      \\\n      .project(users[:id])                \\\n    # => SELECT users.id FROM users WHERE users.name = \'amy\'\n\nAll operators are chainable in this way, and they are chainable any number of times, in any order.\n\n    users.where(users[:name].eq(\'bob\')).where(users[:age].lt(25))\n    \nOf course, many of the operators take multiple arguments, so the last example can be written more tersely:\n\n    users.where(users[:name].eq(\'bob\'), users[:age].lt(25))\n\nThe `OR` operator is not yet supported. It will work like this:\n\n    users.where(users[:name].eq(\'bob\').or(users[:age].lt(25)))\n    \nThe `AND` operator will behave similarly.\n\nFinally, most operations take a block form. For example:\n\n    Table(:users)                    \\\n      .where   { |u| u[:id].eq(1) } \\\n      .project { |u| u[:id] }\n\nThis provides a (sometimes) convenient alternative syntax.\n\n### The Crazy Features ###\n\nThe examples above are fairly simple and other libraries match or come close to matching the expressiveness of Arel (e.g., `Sequel` in Ruby).\n\n#### Complex Joins ####\n\nWhere Arel really shines in its ability to handle complex joins and aggregations. As a first example, let\'s consider an "adjacency list", a tree represented in a table. Suppose we have a table `comments`, representing a threaded discussion:\n\n    comments = Table(:comments)\n    \nAnd this table has the following attributes:\n\n    comments.attributes # => [comments[:id], comments[:body], comments[:parent_id]]\n\nThe `parent_id` column is a foreign key from the `comments` table to itself. Now, joining a table to itself requires aliasing in SQL. In fact, you may alias in Arel as well:\n\n    replies = comments.alias\n    comments_with_replies = \\\n      comments.join(replies).on(replies[:parent_id].eq(comments[:id]))\n    # => SELECT * FROM comments INNER JOIN comments AS comments_2 WHERE comments_2.parent_id = comments.id\n    \nThe call to `#alias` is actually optional: Arel will always produce a unique name for every table joined in the relation, and it will always do so deterministically to exploit query caching. Explicit aliasing is more common, however. When you want to extract specific slices of data, aliased tables are a necessity. For example to get just certain columns from the row, treat a row like a hash:\n\n    comments_with_replies.first[replies[:body]]\n    \nThis will return the first comment\'s reply\'s body.\n\nIf you don\'t need to extract the data later (for example, you\'re simply doing a join to find comments that have replies, you don\'t care what the content of the replies are), the block form may be preferable:\n\n    comments.join(comments) { |comments, replies| replies[:parent_id].eq(comments[:id]) }\n    # => SELECT * FROM comments INNER JOIN comments AS comments_2 WHERE comments_2.parent_id = comments.id\n    \nNote that you do NOT want to do something like:\n\n    comments.join(comments, comments[:parent_id].eq(comments[:id]))\n    # => SELECT * FROM comments INNER JOIN comments AS comments_2 WHERE comments.parent_id = comments.id\n    \nThis does NOT have the same meaning as the previous query, since the comments[:parent_id] reference is effectively ambiguous.\n\n#### Complex Aggregations ####\n\nMy personal favorite feature of Arel, certainly the most difficult to implement, and possibly only of marginal value, is **closure under joining even in the presence of aggregations**. This is a feature where the Relational Algebra is fundamentally easier to use than SQL. Think of this as a preview of the kind of radical functionality that is to come, stuff no other "ORM" is doing.\n\nThe easiest way to introduce this is in SQL. Your task is to get all users and the **count** of their associated photos. Let\'s start from the inside out:\n\n    SELECT count(*)\n    FROM photos\n    GROUP BY user_id\n    \nNow, we\'d like to join this with the user table. Naively, you might try to do this:\n\n    SELECT users.*, count(photos.id)\n    FROM users\n    LEFT OUTER JOIN photos\n      ON users.id = photos.id\n    GROUP BY photos.user_id\n    \nOf course, this has a slightly different meaning than our intended query. This is actually a fairly advanced topic in SQL so let\'s see why this doesn\'t work *step by step*. Suppose we have these records in our `users` table:\n\n    mysql> select * from users;\n    +------+--------+\n    | id   | name   |\n    +------+--------+\n    |    1 | hai    | \n    |    2 | bai    | \n    |    3 | dumpty | \n    +------+--------+\n\nAnd these in the photos table:\n\n    mysql> select * from photos;\n    +------+---------+-----------+\n    | id   | user_id | camera_id |\n    +------+---------+-----------+\n    |    1 |       1 |         1 | \n    |    2 |       1 |         1 | \n    |    3 |       1 |         1 | \n    +------+---------+-----------+\n    \nIf we perform the above, incorrect query, we get the following:\n\n    mysql> select users.*, count(photos.id) from users left outer join photos on users.id = photos.user_id limit 3 group by user_id;\n    +------+------+------------------+\n    | id   | name | count(photos.id) |\n    +------+------+------------------+\n    |    2 | bai  |                0 | \n    |    1 | hai  |                3 | \n    +------+------+------------------+\n\nAs you can see, we\'re completely missing data for user with id 3. `dumpty` has no photos, neither does `bai`. But strangely `bai` appeared and `dumpty` didn\'t! The reason is that the `GROUP BY` clause is aggregating on both tables, not just the `photos` table. All users without photos have a `photos.id` of `null` (thanks to the left outer join). These are rolled up together and an arbitrary user wins. In this case, `bai` not `dumpty`.\n\n    SELECT users.*, photos_aggregation.cnt\n    FROM users\n    LEFT OUTER JOIN (SELECT user_id, count(*) as cnt FROM photos GROUP BY user_id) AS photos_aggregation\n      ON photos_aggregation.user_id = users.id'
Simple Web Infrastructure SDK b'\tSWISDK release 2.x <http://spinlock.ch/projects/swisdk/>\n\t\tSimple Website Infrastructure SDK\n\n  SWISDK 2 is a web application framework which serves as a building base for\n  content management systems, web applications, web services and more.\n\n   The framework has been written with security in mind from day one and\n  offers integrated protection from XSS, CSRF and SQL injection attacks.\n\n   Other frameworks are most often lacking in the area of form handling\n  and validation -- this is the place where SWISDK shines the most.\n\nWHAT ARE THE PLATFORMS SWISDK 2 SUPPORTS?\n\n   It was built on a standard PHP5 and MySQL 4.1 stack, but has since gained\n  support for SQLite, and support for other database engines can be easily\n  added.\n\n   Development and deployment has been done on Linux x86 and Mac OS X machines\n  until now.\n\nDOCUMENTATION\n\n   There is some documentation available in the Documentation/ directory,\n  the most up-to-date documenation can be found on the project website:\n  http://spinlock.ch/projects/swisdk/\n\n\nINSTALLATION AND CONFIGURATION\n\n   See the installation instructions either in the Documentation directory\n  or on the website.\n\nDOES NOT WORK?\n\n   Is something not working as expected? Send an email to the developers:\n\n   Matthias Kestenholz <mk@spinlock.ch>\n   Moritz Zumb\xc3\xbchl <mail@momoetomo.ch>\n'
Blanket is a flexible backup framework designed to get the drudgery out of the way and to make automated backups easy. b'Welcome to Blanket!\n\nhttps://github.com/bigfleet/blanket/wikis is the canonical online source for info on Blanket.'
A Django app to create online art and design portfolios 
Shipping Calculator written in Ruby to get quick quotes from the major carriers (UPS, DHL, FedEX, FreightQuote) b'David Davis has taken over the maintenance of ShippingCalc. Please see an updated repository at [http://github.com/davertron/shipping_calc](http://github.com/davertron/shipping_calc).\n'
A XMPP bot that works as your alter ego 
a rails website giving an horoscope from an xml feed 
Annotate ActiveRecord models b'== Annotate (aka AnnotateModels)\n\nAdd a comment summarizing the current schema to the top or bottom of each of your...\n\n  * ActiveRecord models\n  * Fixture files\n  * Tests and Specs\n  * Object Daddy exemplars\n  * Machinist blueprints\n  * Fabrication fabricators\n\nThe schema comment looks like this:\n\n   # == Schema Info\n   #\n   # Table name: line_items\n   #\n   #  id                  :integer(11)    not null, primary key\n   #  quantity            :integer(11)    not null\n   #  product_id          :integer(11)    not null\n   #  unit_price          :float\n   #  order_id            :integer(11)\n   #\n\n    class LineItem < ActiveRecord::Base\n      belongs_to :product\n     . . .\n\nIt also annotates geometrical columns, geom type and srid, when using SpatialAdapter or PostgisAdapter:\n\n   # == Schema Info\n   #\n   # Table name: trips\n   #\n   #  local           :geometry        point, 4326\n   #  path            :geometry        line_string, 4326\n\nAlso, if you pass the -r option, it\'ll annotate routes.rb with the output of "rake routes".\n\n== INSTALL\n\nInto Gemfile from Github:\n\n    gem \'annotate\', :git => \'git://github.com/ctran/annotate_models.git\'    \n\nInto environment gems From Rubygems.org:\n\n  sudo gem install annotate\n\nInto environment gems from Github checkout:\n\n  git clone git://github.com/ctran/annotate_models.git annotate\n  cd annotate\n  rake build\n  sudo gem install pkg/annotate-*.gem\n\n== USAGE\n\n(If you used the Gemfile install, prefix the below commands with `bundle exec`.)\n\nTo annotate all your models, tests, fixtures, etc.:\n\n  cd /path/to/app\n  annotate\n\nTo annotate your models and tests:\n\n  annotate --exclude fixtures\n\nTo annotate just your models:\n\n  annotate --exclude tests,fixtures\n\nTo annotate routes.rb:\n\n  annotate -r\n\nTo automatically annotate after running \'rake db:migrate\':\n  \n  [*needs more clarity*] unpack the gem into vendor/plugins, or maybe vendor/gems, or maybe just require tasks/migrate.rake.\n\nIf you install annotate_models as a plugin, it will automatically\nadjust your <tt>rake db:migrate</tt> tasks so that they update the\nannotations in your model files for you once the migration is\ncompleted. To get the same behavior from a gem, add the following to\nyour Rakefile:\n\n  require \'annotate/tasks\'\n\nTo customize the behavior of annotate when it is running as a Rake\ntask, use the following (in your Rakefile or wherever):\n\n  ENV[\'position_in_class\']   = "before"\n  ENV[\'position_in_fixture\'] = "before"\n  ENV[\'show_indexes\']        = "false"\n  ENV[\'include_version\']     = "false"\n  ENV[\'exclude_tests\']       = "false"\n  ENV[\'exclude_fixtures\']    = "false"\n  ENV[\'skip_on_db_migrate\']  = "false"\n\n== OPTIONS\n\n    Usage: annotate [options] [model_file]*\n        -d, --delete                     Remove annotations from all model files\n        -p, --position [before|after]    Place the annotations at the top (before) or the bottom (after) of the model file\n        -r, --routes                     Annotate routes.rb with the output of \'rake routes\'\n        -v, --version                    Show the current version of this gem\n        -m, --show-migration             Include the migration version number in the annotation\n        -i, --show-indexes               List the table\'s database indexes in the annotation\n        -s, --simple-indexes             Concat the column\'s related indexes in the annotation\n            --model-dir dir              Annotate model files stored in dir rather than app/models\n        -R, --require path               Additional files to require before loading models\n        -e, --exclude [tests,fixtures]   Do not annotate fixtures, test files, or both\n\n\n== WARNING\n\nNote that this code will blow away the initial/final comment\nblock in your models if it looks like it was previously added\nby annotate models, so you don\'t want to add additional text\nto an automatically created comment block.\n\n        * * Back up your model files before using... * *\n\n== LINKS\n\n* Factory Girl => http://github.com/thoughtbot/factory_girl (NOT IMPLEMENTED)\n* Object Daddy => http://github.com/flogic/object_daddy\n* Machinist => http://github.com/notahat/machinist\n* Fabrication => http://github.com/paulelliott/fabrication\n* SpatialAdapter => http://github.com/pdeffendol/spatial_adapter\n* PostgisAdapter => http://github.com/nofxx/postgis_adapter\n\n== LICENSE:\n\nReleased under the same license as Ruby. No Support. No Warranty.\n\n== AUTHOR:\n\nOriginal code by: Dave Thomas -- Pragmatic Programmers, LLC\nOverhauled by: Alex Chaffee\nGemmed by: Cuong Tran\nMaintained by: Alex Chaffee and Cuong Tran\n\nModifications by:\n\n - Alex Chaffee - http://github.com/alexch - alex@pivotallabs.com\n - Cuong Tran - http://github.com/ctran - ctran@pragmaquest.com\n - Jack Danger - http://github.com/JackDanger\n - Michael Bumann - http://github.com/bumi\n - Henrik Nyh - http://github.com/henrik\n - Marcos Piccinini - http://github.com/nofxx\n - Neal Clark - http://github.com/nclark\n - Jacqui Maher - http://github.com/jacqui\n - Nick Plante - http://github.com/zapnap - http://blog.zerosum.org\n - Pedro Visintin - http://github.com/peterpunk - http://www.pedrovisintin.com\n - Bob Potter - http://github.com/bpot\n - Gavin Montague - http://github.com/govan/\n - Alexander Semyonov - http://github.com/rotuka/\n - Ian Duggan http://github.com/ijcd/\n \nand many others that I may have missed to add.\n'
Conversion script from Typo to WordPress b'convert.rb is a conversion script for Typo 4.11 -> WordPress 2.3\n\nWritten by Kevin Ballard <kevin@sb.org>\n\nRequirements:\n\n- RubyGems\n- Sequel\n\nUsage: convert.rb [options] from-db [to-db]\n\n    -p, --prefix PREFIX              Set the WordPress table prefix\n                                     Default: wp_\n\n        --[no-]overwrite             Overwrite existing entries\n        --ask-overwrite              Ask before overwriting existing entries\n                                     [This is the default]\n\n    -h, --help                       Show this message\n\nfrom-db and to-db are URLs identifying a database.\nSuch a URL might look like mysql://username:password@host/blog\n\nSee the Sequel documentation for more information\n'
Color themes for Gnome's default editor Gedit 
git-svn clone of the TextMate Bundles repo b'This is a list of people who\'ve contributed to the various bundles. There may\nbe omissions or wrongly credited bundles. Some bundles do have more detailed\ncredits in their README or embedded in the syntax file(s).\n\nAdd your bundle and/or name to the list if it\'s missing.\n\nActionScript: Rob Bevan, Dominique Peretti, Simon Gregory\nAda, Fortran, Inform, Lisp, Pascal, PropertyList, UnixShell: Chris Thomas\nApache: Simon Gregory\nASP vb.NET: Thomas Aylott\nBlogging: Brad Choate\nC, Objective-C: Allan Odgaard, Chris Thomas\nCakePHP: Sam DeVore\nContextual Menu (using OnMyCommand): Eric Hsu, Fr\xc3\xa9d\xc3\xa9ric Ball\xc3\xa9riaux\nCSS, PHP: Justin French\nCSS (Preview): Brad Choate\nCVS: Brian Donovan\nDiff: Torsten Becker, Eric Hsu, Allan Odgaard\nDjango: Wilson Miner, Paul Bissex\nF-Script: Kevin Ballard\nGraphviz, MIPS, Quake, Modula: Torsten Becker\nGri: Dan Kelley\nHTML: Justin French, James A Baker\nPerl HTML-Template: Brad Choate\niCalendar: Chris Thomas, Eric Hsu\nIo: Rob Rix <rix dot rob at gmail>\nJava, XML: Brian Lalor (<see Java.tmbundle/README>)\nJavaScript: Caio Chassot, Kevin Ballard\nPrototype & Script.aculo.us (JavaScript): Justin Palmer, Thomas Aylott & Martin Str\xc3\xb6m\nJavaScript YUI: Ross Harmes\nLanguage Definition (TextMate): Jeroen van der Ham\nLaTeX: Eric Hsu, Normand Mousseau, Gaetan Le Guelvouit, Andrew Ellis, Brad Miller, Haris Skiadas\nLogo: Paul Bissex\nLogtalk: Paulo Moura\nLua: Gavin Kistner\nMakefile: Sune Foldager, Chris Thomas\nMarkdown: Hadley Wickham, Paul Bissex\nMatlab: Stephen Thomas, Anders Thid\nMono: Ian Phillips\nMovable Type: Brad Choate\nOCaml: William D. Neumann\nOutlines: Eric Hsu, Kevin Ballard\nPerforce: Chris Thomas\nPerl: Eric Hsu, Noah Daniels, and Martin Vetter\nPython: Jeroen van der Ham, Brad Miller, Domenico Carbotta, Jay Soffian, Alexander Ross\nRegular Expressions: David Lee, Aristotle at perlmonks.org, Eric Hsu\nRuby: David Hansson, Kevin Ballard, Torsten Becker, Sune Foldager, James Edward Gray II\nS5: Brad Choate\nScheme: Mikael S\xc3\xa4ker\nSetext: Michael Sheets (Borrows from Markdown)\nSQL: Carl Forde, Brad Miller, Michael Sheets\nSubversion (mostly add, commit, update, diff): Chris Thomas\nSubversion (mostly info, blame, log, help): Torsten Becker\nSubversion (in-page Status window enhancements): Thomas Aylott\nSymfony: Fabien Potencier, Jakub Nesetril\nTcl: Kevin Ballard\nTextMate (Document to HTML commands; CSS from Theme): Brad Choate\nPerl Template Toolkit: Brad Choate\nTODO: Brad Miller\nUnComment: Eric Hsu, Ollivier Robert, Chris Thomas, William N Prater III\nDefault:  Show Entities (Kumar McMillan, Eric Hsu, Brad Miller, Max)\n\nObsolete (but included) tools and bundles:\n\nInvisibles: Eric Hsu\nCommand-line "tm" tool (pre 1.1b5): Eric Hsu, Andrew Ellis, Kevin Ballard, Rick Gardner, Marcin\n \n'
Part of the netsquared challenge. Still a huge work in progress b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
OpenSync plugin for Claws Mail b"OpenSync plugin for Claws Mail\n\nThis plugin acts as a data server for Claws Mail's\naddressbook and calendar. It acts as an interface\nto both data sources for external programs.\nInformation about contacts or events can be queried\nand/or modified. This plugin needs to be loaded\nif Claws Mail is supposed to take part in an OpenSync\nsynchronisation group.\n\nIt also acts as an additional safety net when doing\nsynchronisations (it can be requested that any\nmodifications in the addressbook or calendar need to be\napproved), and allows to configure some Claws\nMail specific parts (for example, into which addressbook\nnew contacts are supposed to be added).\n\nThis is alpha software. Be sure to back up your data\non all sides of the sync group before trying this out.\n"
Plugin for OpenSync to talk to the MUA Claws Mail b'This module is a Claws Mail plugin for OpenSync. It\ncan be used to connect to Claws Mail in a synchronisation\ngroup. It supports address data and contact events.\n\nClaws Mail has to be running while the synchronisation is\nperformed. Also, the OpenSync plugin for Claws Mail has\nto be loaded.\n\nThis is alpha software. It requires at least an OpenSync\nversion of the 0.3 branch. Be sure to back up your data\non all sides of the sync group before trying this out.\n'
Media files for use in your GitHub integration projects b'**NOTE: This repository is no longer supported or updated by GitHub. Please check out our official [Logos page](https://github.com/logos) to find official GitHub logos as well as our beloved Octocat, along with guidelines for how you can use them.**\n\n\n\n'
KQueue bindings for Ruby b'= ruby-kqueue\n\n* FIX (url)\n\n== DESCRIPTION:\n\nRuby bindings for the KQueue event framework\n\n== FEATURES/PROBLEMS:\n\n* Simple block based definition of event triggers.\n* Unified interface for all event types.\n* Supported filters: VNode\n\n== SYNOPSIS:\n\n  include RubyKQueue\n  \n  it "should register and trigger events when watching" do\n    FileUtils.rm_rf \'/tmp/blaa\'\n  \n    $ret = nil\n  \n    t = Thread.new { Event.handle }\n    Event.register("/tmp", VNodeEvent, VNodeEvent::WRITE) do\n      $ret = 42\n    end\n  \n    File.open(\'/tmp/blaa\', \'w+\') {|f|}\n  \n    sleep 0.001\n  \n    $ret.should == 42\n  end\n\n== REQUIREMENTS:\n\n* FreeBSD/OSX/Other KQueue supporting OS\n* RubyInline + C compiler (I\'ll inline package soon enough)\n\n== INSTALL:\n\n* sudo gem install ruby-kqueue\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Kevin Clark\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
A quickie library to read in sports scores b'##### CBS Scores\n\nThis is a simple library that will collect sports scores from CBS for you to use.\n\nRight now it only works for men\'s college basketball, for obvious reasons. The NCAA tournament is around the corner, and I\'m confident that we STILL won\'t get any kind of friendly mobile support for scores. So I made this to make something else. \n\nMaybe you could use it to make something even cooler?\n\nIt\'s pretty easy to use, just pass in the sport you want scores for.\n\n\nscores = CbsScores.new(:mens_basketball) # only works for mens college basketball for now!\n\nscores.games => Array # of games\n\ngame = scores.games.first\n\ngame.team1[:name] => "Va. Commonwealth"\ngame.team1[:score] => 54\ngame.team2[:name] => "George Mason"\ngame.team2[:score] => 44\n\ngame.time_left => => "19:45 left in 2nd"\n\n\nscores.completed_games => Array # of games that are Final\nscores.current_games => Array # of games that are still in play\nscores.upcoming_games => Array # of games that haven\'t started yet\n'
Ruby interface to GPS hardware b'= GPS Library for Ruby\n\nThis library provides a Ruby interface to GPS receivers. Features include:\n* Support for multiple receivers. +Receiver+ connects to a GPS and obtains all data in a +Fix+.\n* GPSD +Receiver+ for obtaining data from units supported by GPSD.\n* Event callbacks for position, speed and course change.\n* Plugin architecture. Distribute new +Receiver+ implementations as gems.\n\nThis library is part of the [Hermes](http://hermes-gps.info/) project.\n\n== Installation\n\nSimply install via gems with the command:\n\ngem install gps\n\nOr run the included setup.rb like so:\n\nruby setup.rb config\nruby setup.rb install\n\n== Example usage\n\nFor a working example, see the [included web service sample](examples/gps_service.rb).\n\nThere are a few simple steps to using this library, but before doing any of them you must first:\n\nrequire "gps"\n\n=== Create the +Receiver+\n\nA +Receiver+ is created by calling +Gps::Receiver.create+ with an implementation and hash of options. If no implementation is given, the first found implementation is used. In a stock installation without any additional plugins, the following calls are equivalent:\n\ngps = Gps::Receiver.create\ngps = Gps::Receiver.create("gpsd")\ngps = Gps::Receiver.create(:host => "localhost", :port => 2947)\ngps = Gps::Receiver.create("gpsd", :host => "localhost")\n\nThe GPSD +Receiver+ supports both _:host_ and _:port_ options which point to a host on which a GPSD instance is running. +Receiver+ options are not standard.\n\n=== Start the +Receiver+\n\nThe +Receiver+ is now created, but is not yet polling the hardware. To start this process, run:\n\ngps.start\n\nVerify that this has succeeded by running:\n\ngps.started?\n\nAssuming this succeeded, you can now access _gps.latitude_, _gps.longitude_, _gps.altitude, _gps.course_, _gps.speed_ and other variables exposed via +Fix+.\n\n=== Callbacks\n\nYou can also register callbacks which are triggered on various GPS events like so:\n\ngps.on_position_change { puts "Latitude = #{gps.latitude}, longitude = #{gps.longitude}" }\ngps.on_course_change { puts "Course = #{gps.course}" }\ngps.on_speed_change { puts "Speed = #{gps.speed}" }\n\n+Receiver#on_position_change+ supports an additional _threshold_. Because of GPS drift, positions change often. As such, it is possible to specify a threshold like so:\n\ngps.on_position_change(0.0002) { puts "Latitude = #{gps.latitude}, longitude = #{gps.longitude}" }\n\nThe callback will not trigger on position changes of less than 0.0002 degrees since it was last called.\n\n=== Cleaning up\n\nTo close devices or connections and no longer receive GPS updates, call the following method:\n\ngps.stop\n\n== Hacking\n\nThe GPSD +Receiver+ should be sufficient for most needs. If, however, you wish to parse NMEA data directly, interface with raw serial ports or interact with your GPS hardware on a lower level, a new +Receiver+ implementation is necessary. This section is a quick overview to writing +Receiver+ implementations.\n\nWhen overriding the below methods, +super+ should be the last method called. Also, as polling happens in a separate thread, +Receiver+ code should be thread-safe.\n\n=== Use +Gps::Receivers+\n\nThe library looks up +Receiver+ implementations in the +Gps::Receivers+ module. Therefore, all implementations must be defined there.\n\n=== Override +Receiver#start+\n\nThis method should open the device, initiate a connection, etc.\n\n=== Override +Receiver#stop+, if Necessary\n\nThe default +stop+ method simply kills the thread and sets it to _nil_. If this is sufficient, overriding is unnecessary.\n\n=== Override +Receiver#update+\n\nThis method should read an update from the device, setting the variables exposed by +Fix+.\n\n=== Make it a Plugin\n\nIf the gem_plugin library is installed, new +Receivers+ distributed as gems can be integrated automatically with a few simple steps.\n1. Distribute your +Receiver+ as a gem that depends on both the gps and gem_plugin gems.\n2. Add the following code to your plugin:\n\nGemPlugin::Manager.instance.create("/receivers/your_receiver_name", :optional_option => :value)\n'
Parser component for openaustralia.org 
Web Application component for Open Australia 
A fork of the ancient infobot project b'F L O O T E R B U C K !\n\n-- What Flooterbuck does\n\nFlooterbuck is an Infobot.  It goes onto IRC and sits in a channel that you\npick for it, and learns, remembers, and gives back useful information.\n\n<dagbrown> flooterbuck, convert 3 tonnes to nautical elvis\n<flooterbuck> dagbrown: 3 tonnes is 22.5341 nautical elvis.\n<dagbrown> flooterbuck: My hair is wet\n<flooterbuck> dagbrown: Okay.\n<dagbrown> flooterbuck, what is a Norse?\n<flooterbuck> dagbrown: A Norse is a Norse, of course, of course\n\n-- Note:  Flooterbuck Infobot vs. Infobot\n\nFlooterbuck Infobot (http://flooterbuck.sf.net/) is a rewrite of\nKevin Lenzo\'s (apparently abandoned) Infobot (http://www.infobot.org/).\nFlooterbuck is meant to be cleaner, more modular, and more hackable than\nthe original Infobot.\n\nThe authors of Flooterbuck Infobot believe that all of the old Infobot\nfunctionality has been preserved.  However, it is still recommended that\nyou keep your old installations of Infobot around, just in case you find\nthat there is something necessary which only exists in the old Infobot\n(and in that case, please contact the authors of Flooterbuck).\n\nTheoretically, you can copy all of the .db files and the conf/*.config\nfiles from your old Infobot installations into your Flooterbuck installation\nand it will work.  However, you may not get all of the new features of\nFlooterbuck that way -- you should at least have a look at the sample\nconfiguration file included with Flooterbuck to see if there\'s any new\nfeatures that you want to enable.\n\nFor more information on the differences between Flooterbuck and\nInfobot, please see the REVISIONS files.\n\n\n\n-- Very minimal setup instructions\n\nYou will need to update your infobot.config\nand infobot.users.  See the example files.\n\nThis requires perl 5.\n\nYou should be able to start up just by running\ninfobot.  If you are using macperl, you will\n(currently) have to make one minor change (because\n$^O didn\'t work for me under os8).\n\nThe infobot uses parameter files, typically in the\nparams directory, to set up with.  It treats anything\non the command line as a parameter file and tries to\nload it.\n\nIf you are using macperl, you will want to set\nthe value of the macperl parameter to 1 in the\ntwo given param files (in the \'files\' dir).\n\nBy default, the infobot uses the IRC setup.  This\nmay change.  NOTE that the irc version has no output\nby default; you\'ll have to turn up the debug level\nto get more.\n\nto start up the infobot, just invoke it from the\ncommand line.\n\n   infobot\n\n\n\n-- A note on forms\n\nYou can prepend the tag <reply>\nto values in the db to just get a reply with no\nextra info.\n\ne.g.\n\n   x => <reply> y\n\nthen when you ask \'x?\' it will just reply \'y\' instead\nof something like "i think x is y".\n\n\n\n\n-- Extending the bot by adding your own code\n\nYou can place your module in the modules directory.  It needs to define a\npackage with the same name as the file itself (without the .pm extension).  It\nneeds to define a subroutine named scan() that takes a callback function, a\nmessage, and the nick of the person who wrote that message.\n\nThe callback function is the function which, when called with an\nargument, will reply to the query in the appropriate way.  That is,\nif the query was originally a private message, the callback function\nwill reply via private message.  If the query was a message in a\nchannel, the callback function will send the reply to the correct\nchannel.\n\nIf the module does not "catch" a message, then scan() function should\nreturn undef to allow the message to "fall through" to other modules.\n\nThe best way to figure all this out is to look at one of the many modules\nprovided as a reference.\n\nOh, and if the module you added would be of interest to other Flooterbuck\nusers, you might want to consider contributing that code to the project.\nFlooterbuck can be found on Sourceforge at http://flooterbuck.sf.net/\n\n\n\n-- Disabling features of the bot\n\nNearly everything that Flooterbuck does (beside the actual communication\nwith the IRC server) is handled by the modules in the modules directory.\nAlthough some modules can be enabled or disabled by changing the configuration\nfiles, you can disable any module by simply deleting it or moving it to\na different directory.\n\n\n\n-- update_db & dump_db\n\nupdate_db is a little perl script that will take a\nflat ascii file and make an infobot-style db out\nof it (currently just a couple of dbm files). You\'ll\nwant to make 2, even if theye contain only 1 element\neach.  it will also simply add (and overwrite entries\nin) existing dbs.  This is especially nice if\nyou don\'t allow updates to the databases through IRC\nand just want a collection of permanent factoids.\n\nupdate_db <inputfile> <dbname>\n\nwhere <inputfile> is an ascii file like (in the case\nof an url-style infobot):\n\ninfobot => at http://www.cs.cmu.edu/~lenzo/hocus.html\n\none key => value per line.  In the current setup,\nyou need an is-database and an are-database, mainly\nfor legacy reasons about representing plurality and\nbeing able to give the proper form.  in the infobot-is.txt\nfile and infobot-are.txt files you have examples.  these\nare a fine starting point:\n\n1.1  update_db infobot-is.txt infobot-is\n     update_db infobot-are.txt infobot-are\n\n2. Now you need to edit infobot to set up your bot.\n   Don\'t forget to set the path to perl properly at\n   the top and make it executable.\n\n3. Then try running infobot.  At present, there\'s a\n   bunch of VERY BAD code in it, so don\'t use the -w\n   switch unless you want to fix a bunch of things and\n   mail me.\n\nEventually, kill it and then you\'ll probably\nwant to crontab it.  included is a sample crontab\nand the script that you will need to edit.\n\ndump_db <dbname>\n\nwill just make a flat ascii file out of the named db,\ne.g.\n\n   dump_db infobot-is\n\nBoth update_db and dump_db take an optional switch, -m, which tells them\nwhat DBM module to use.  You\'ll need to specify this if you set\nDBMModule in your config file in order to get the bot to use something\nother than Perl\'s default.  Eg,\n\n   update_db -m DB_File infobot-is.txt infobot-is\n   dump_db   -m DB_File infobot-is\n\ngood luck, and mail me!\n\nkevin\nlenzo@cs.cmu.edu\n\nps - i am just releasing this _now_ instead of waiting\n     to fix everything.  If you use this and like it,\n     or even if you don\'t, please mail me!\n\n\n\n-- Thanks to:\n\nKevin Lenzo and his team for the original Infobot.\n\n\n'
Capistrano recipes, plugins and templates. b'# Capitate\n\nhttp://capitate.rubyforge.org\n\nRecipes to make capistrano more useful.\n\n'
A tree explorer plugin for vim. b'The NERD Tree\n=============\n\nIntro\n-----\n\nThe NERD tree allows you to explore your filesystem and to open files and\ndirectories. It presents the filesystem to you in the form of a tree which you\nmanipulate with the keyboard and/or mouse. It also allows you to perform\nsimple filesystem operations.\n\nThe following features and functionality are provided by the NERD tree:\n\n  * Files and directories are displayed in a hierarchical tree structure\n  * Different highlighting is provided for the following types of nodes:\n    * files\n    * directories\n    * sym-links\n    * windows .lnk files\n    * read-only files\n    * executable files\n  * Many (customisable) mappings are provided to manipulate the tree:\n    * Mappings to open/close/explore directory nodes\n    * Mappings to open files in new/existing windows/tabs\n    * Mappings to change the current root of the tree\n    * Mappings to navigate around the tree\n    * ...\n  * Directories and files can be bookmarked.\n  * Most NERD tree navigation can also be done with the mouse\n  * Filtering of tree content (can be toggled at runtime)\n    * custom file filters to prevent e.g. vim backup files being displayed\n    * optional displaying of hidden files (. files)\n    * files can be "turned off" so that only directories are displayed\n  * The position and size of the NERD tree window can be customised\n  * The order in which the nodes in the tree are listed can be customised.\n  * A model of your filesystem is created/maintained as you explore it. This\n    has several advantages:\n    * All filesystem information is cached and is only re-read on demand\n    * If you revisit a part of the tree that you left earlier in your\n      session, the directory nodes will be opened/closed as you left them\n  * The script remembers the cursor position and window position in the NERD\n    tree so you can toggle it off (or just close the tree window) and then\n    reopen it (with NERDTreeToggle) the NERD tree window will appear exactly\n    as you left it\n  * You can have a separate NERD tree for each tab, share trees across tabs,\n    or a mix of both.\n  * By default the script overrides the default file browser (netrw), so if\n    you :edit a directory a (slightly modified) NERD tree will appear in the\n    current window\n  * A programmable menu system is provided (simulates right clicking on a node)\n    * one default menu plugin is provided to perform basic filesystem\n      operations (create/delete/move/copy files/directories)\n  * There\'s an API for adding your own keymappings\n\nInstallation\n------------\n\n####[pathogen.vim](https://github.com/tpope/vim-pathogen)\n\n    cd ~/.vim/bundle\n    git clone https://github.com/scrooloose/nerdtree.git\n\nThen reload vim, run `:Helptags`, and check out `:help NERD_tree.txt`.\n\n\n####[apt-vim](https://github.com/egalpin/apt-vim)\n\n    apt-vim install -y https://github.com/scrooloose/nerdtree.git\n\n\n\nFaq\n---\n\n> Is there any support for `git` flags?\n\nYes, install [nerdtree-git-plugin](https://github.com/Xuyuanp/nerdtree-git-plugin).\n\n\n> Can I have the nerdtree on every tab automatically?\n\nNope. If this is something you want then chances are you aren\'t using tabs and\nbuffers as they were intended to be used. Read this\nhttp://stackoverflow.com/questions/102384/using-vims-tabs-like-buffers\n\nIf you are interested in this behaviour then consider [vim-nerdtree-tabs](https://github.com/jistr/vim-nerdtree-tabs)\n\n> How can I open a NERDTree automatically when vim starts up?\n\nStick this in your vimrc: `autocmd vimenter * NERDTree`\n\n> How can I open a NERDTree automatically when vim starts up if no files were specified?\n\nStick this in your vimrc:\n\n    autocmd StdinReadPre * let s:std_in=1\n    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif\n\nNote: Now start vim with plain `vim`, not `vim .`\n\n> How can I map a specific key or shortcut to open NERDTree?\n\nStick this in your vimrc to open NERDTree with `Ctrl+n` (you can set whatever key you want):\n\n    map <C-n> :NERDTreeToggle<CR>\n\n> How can I close vim if the only window left open is a NERDTree?\n\nStick this in your vimrc:\n\n    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif\n\n> Can I have different highlighting for different file extensions?\n\nSee here: https://github.com/scrooloose/nerdtree/issues/433#issuecomment-92590696\n\n> How can I change default arrows?\n\nUse these variables in your vimrc. Note that below are default arrow symbols\n\n    let g:NERDTreeDirArrowExpandable = \'\xe2\x96\xb8\'\n    let g:NERDTreeDirArrowCollapsible = \'\xe2\x96\xbe\'\n'
Merb bundle for TextMate (uses Ruby, Ruby on Rails, Datamapper and Sequel bundles as necessary) b'Snippets, Commands, and Language/Syntax integration for Merb'
Vim plugin for intensely orgasmic commenting b"# Installation  \n\n_\\*For simplicity, let's use **[VIM_ROOT]** which will mean ~/.vim (\\*nix) or ~/vimfiles (Windows)_\n\nThe NERD Commenter requires Vim 7 or higher is comprised of 2 files:  \n\n    plugin/NERD_commenter.vim  \n    doc/NERD_commenter.txt \n\n### Classic Install\n\n1. Extract the plugin files into your **[VIM_ROOT]**/plugin and **[VIM_ROOT]**/doc folders respectively.\n2. Finish the install by updating your help files.  Run:\n\n<pre><code>:helptags [VIM_ROOT]/doc</code></pre>\n\nSee **|add-local-help|** for more details. \n\n### Pathogen Install\n1. Navigate to your **[VIM_ROOT]/bundle** directory in your local Vim setup\n2. git clone https://github.com/scrooloose/nerdcommenter.git\n\n### Post Install  \nAfter the **'Classic'** or **'Pathogen'** install, make sure that you have filetype plugins enabled, as the script makes use of \n**|'commentstring'|** where possible (which is usually set in a filetype plugin). \nSee **|filetype-plugin-on|** for details, but basically, stick this in your vimrc:\n\n    filetype plugin on\n\n# Usage  \n\nThe following key mappings are provided by default (there is also a menu \nprovided that contains menu items corresponding to all the below mappings): \n\nMost of the following mappings are for normal/visual mode only. The |NERDComInsertComment| mapping is for insert mode only. \n\n**[count]\\<leader\\>cc |NERDComComment|**  \nComment out the current line or text selected in visual mode. \n\n\n**[count]\\<leader\\>cn |NERDComNestedComment|**  \nSame as \\<leader\\>cc but forces nesting. \n\n\n**[count]\\<leader\\>c\\<space\\> |NERDComToggleComment|**  \nToggles the comment state of the selected line(s). If the topmost selected \nline is commented, all selected lines are uncommented and vice versa. \n\n\n**[count]\\<leader\\>cm |NERDComMinimalComment|**  \nComments the given lines using only one set of multipart delimiters. \n\n\n**[count]\\<leader\\>ci |NERDComInvertComment|**  \nToggles the comment state of the selected line(s) individually. \n\n\n**[count]\\<leader\\>cs |NERDComSexyComment|**  \nComments out the selected lines ``sexily'' \n\n\n**[count]\\<leader\\>cy |NERDComYankComment|**  \nSame as \\<leader\\>cc except that the commented line(s) are yanked first. \n\n\n**\\<leader\\>c$ |NERDComEOLComment|**  \nComments the current line from the cursor to the end of line. \n\n\n**\\<leader\\>cA |NERDComAppendComment|**  \nAdds comment delimiters to the end of line and goes into insert mode between \nthem. \n\n\n**|NERDComInsertComment|**  \nAdds comment delimiters at the current cursor position and inserts between. \nDisabled by default. \n\n\n**\\<leader\\>ca |NERDComAltDelim|**  \nSwitches to the alternative set of delimiters. \n\n\n**[count]\\<leader\\>cl**  \n**[count]\\<leader\\>cb    |NERDComAlignedComment|**  \nSame as |NERDComComment| except that the delimiters are aligned down the \nleft side (\\<leader\\>cl) or both sides (\\<leader\\>cb). \n\n\n**[count]\\<leader\\>cu |NERDComUncommentLine|**  \nUncomments the selected line(s). \n"
a jabber bot to control my mac b'a bot for controling iTunes (and other apps) via jabber.\n\nTo use, create a file called auth.yml with the jabber id and password:\n\n--- \n- myaccount@jabber.org\n- mypassword\n\n'
Run commands in ruby? 
ContentEditor, MiniCMS like for Beast b'h4. Content Editor\n\nh5. About\n\n* ContentEditor is plugin for Altered Beast[1] (should work with Beast[2] too), like a MiniCMS.\n  It allows creation of simple pages with content.\n* ContentEditor has only basic features like permalinks or textile for page edits.\n\nh5. Install\n\n* make sure you have a working version of Beast.\n* install Rails Plugin beast_plugins:\n\n  script/plugin http://svn.techno-weenie.net/projects/beast/plugins/beast_plugins/\n\n* execute:\n  \n  script/runner \'Beast::Plugins::ContentEditor.install\'\n\n* skip to 4 if you have config/initializers/plugins.rb\n\n  * create config/initializers/plugins.rb\n  * add:\n\n    Beast::Plugin.initialize_plugins \'Beast::Plugins::ContentEditor\'\n\n  * [esc]:wq!\n  * done, go to 5\n\n* append:\n\n    \'Beast::Plugins::ContentEditor\'\nto the list of your Beast plugins \n\n* done.\n\nh5. Contact\n\n"Aurelian Oancea":http://www.locknet.ro/contact, aurelian at locknet dot ro\n\nh5. Copyright\n\n2008, Aurelian Oancea under the terms of MIT-LICENCE\n\nh5. TODO\n\n* redirect to ...something when the page is not there\n* use control.textarea (http://livepipe.net/projects/control_textarea/) for page editing\n* use Permalink_Fu bundled with Beast if we get around plugin load order\n\nh5. Footnotes\n\nfn1. git clone git://git.caboo.se/altered_beast.git\n\nfn2. svn co http://svn.techno-weenie.net/projects/beast/trunk\n\n'
Spree is a complete open source e-commerce solution for Ruby on Rails. b'# No longer maintained\n\nThis project is [no longer maintained by Spree Commerce](https://spreecommerce.com/blog/future-of-spree-oss). We recommend using [Solidus](https://github.com/solidusio/solidus), which is a fork of the Spree codebase.\n\n**THIS README IS FOR THE MASTER BRANCH OF SPREE AND REFLECTS THE WORK CURRENTLY\nEXISTING ON THE MASTER BRANCH. IF YOU ARE WISHING TO USE A NON-MASTER BRANCH OF\nSPREE, PLEASE CONSULT THAT BRANCH\'S README AND NOT THIS ONE.**\n\nSUMMARY\n-------\n\nSpree is a complete open source e-commerce solution built with Ruby on Rails. It\nwas originally developed by Sean Schofield and is now maintained by a dedicated\n[core team](https://github.com/spree/spree/wiki/Core-Team). You can find out more by\nvisiting the [Spree e-commerce project page](http://spreecommerce.com).\n\nSpree actually consists of several different gems, each of which are maintained\nin a single repository and documented in a single set of\n[online documentation](http://spreecommerce.com/documentation). By requiring the\nSpree gem you automatically require all of the necessary gem dependencies which are:\n\n* spree_api (RESTful API)\n* spree_frontend (User-facing components)\n* spree_backend (Admin area)\n* spree_cmd (Command-line tools)\n* spree_core (Models & Mailers, the basic components of Spree that it can\'t run without)\n* spree_sample (Sample data)\n\nAll of the gems are designed to work together to provide a fully functional\ne-commerce platform. It is also possible, however, to use only the pieces you are\ninterested in. For example, you could use just the barebones spree\\_core gem\nand perhaps combine it with your own custom backend admin instead of using\nspree_api.\n\n[![Circle CI](https://circleci.com/gh/spree/spree.svg?style=svg)](https://circleci.com/gh/spree/spree)\n[![Code Climate](https://codeclimate.com/github/spree/spree.png)](https://codeclimate.com/github/spree/spree)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/spree/spree)\n[![Issue Stats](http://issuestats.com/github/spree/spree/badge/pr)](http://issuestats.com/github/spree/spree)\n[![Issue Stats](http://issuestats.com/github/spree/spree/badge/issue)](http://issuestats.com/github/spree/spree)\n\nInstallation\n------------\n\n**THIS README IS FOR THE MASTER BRANCH OF SPREE AND REFLECTS THE WORK CURRENTLY\nEXISTING ON THE MASTER BRANCH. IF YOU ARE WISHING TO USE A NON-MASTER BRANCH OF\nSPREE, PLEASE CONSULT THAT BRANCH\'S README AND NOT THIS ONE.**\n\nThe fastest way to get started is by using the spree command line tool\navailable in the spree gem which will add Spree to an existing Rails application.\n\n```shell\ngem install rails -v 4.2.2\ngem install spree\nrails _4.2.2_ new my_store\nspree install my_store\n```\n\nThis will add the Spree gem to your Gemfile, create initializers, copy migrations\nand optionally generate sample products and orders.\n\nIf you get an "sh: identify: command not found" error then you can try installing imagemagick.\n```shell\nbrew install imagemagick\n```\nIf you get an "Unable to resolve dependencies" error when installing the Spree gem\nthen you can try installing just the spree_cmd gem which should avoid any circular\ndependency issues.\n\n```shell\ngem install spree_cmd\n```\n\nTo auto accept all prompts while running the install generator, pass -A as an option\n\n```shell\nspree install my_store -A\n```\n\nTo select a specific branch, pass in the `--branch` option. If there is no branch, you\nwill be given the latest version of either spree_auth_devise or spree_gateway.\n\n```shell\nspree install my_store --branch "3-0-stable"\n```\n\nUsing stable builds and bleeding edge\n-------------\n\nTo use a stable build of Spree, you can manually add Spree to your\nRails application. To use the 3-0-stable branch of Spree, add this line to\nyour Gemfile.\n\n```ruby\ngem \'spree\', github: \'spree/spree\', branch: \'3-0-stable\'\n```\n\nAlternatively, if you want to use the bleeding edge version of Spree, use this\nline:\n\n```ruby\ngem \'spree\', github: \'spree/spree\'\n```\n\n**Note: The master branch is not guaranteed to ever be in a fully functioning\nstate. It is unwise to use this branch in a production system you care deeply\nabout.**\n\nOnce you\'ve done that, then you can install these gems using this command:\n\n```shell\nbundle install\n```\n\nUse the install generator to set up Spree:\n\n```shell\nrails g spree:install --sample=false --seed=false\n```\n\nYou can avoid running migrations or generating seed and sample data by passing\nin these flags:\n\n```shell\nrails g spree:install --migrate=false --sample=false --seed=false\n```\n\nYou can always perform the steps later by using these commands.\n\n```shell\nbundle exec rake railties:install:migrations\nbundle exec rake db:migrate\nbundle exec rake db:seed\nbundle exec rake spree_sample:load\n```\n\nBrowse Store\n------------\n\nhttp://localhost:nnnn\n\nBrowse Admin Interface\n----------------------\n\nhttp://localhost:nnnn/admin\n\nWorking with the edge source (latest and greatest features)\n-----------------------------------------------------------\n\nThe source code is essentially a collection of gems. Spree is meant to be run\nwithin the context of Rails application. You can easily create a sandbox\napplication inside of your cloned source directory for testing purposes.\n\n\nClone the Git repo\n\n```shell\ngit clone git://github.com/spree/spree.git\ncd spree\n```\n\nInstall the gem dependencies\n\n```shell\nbundle install\n```\n\nCreate a sandbox Rails application for testing purposes (and automatically\nperform all necessary database setup)\n\n```shell\nbundle exec rake sandbox\n```\n\nStart the server\n\n```shell\ncd sandbox\nrails server\n```\n\nPerformance\n-----------\n\nYou may notice that your Spree store runs slowly in development mode.  This is\na side-effect of how Rails works in development mode which is to continuously reload\nyour Ruby objects on each request.  The introduction of the asset pipeline in\nRails 3.1 made default performance in development mode significantly worse. There\nare, however, a few tricks to speeding up performance in development mode.\n\nFirst, in your `config/development.rb`:\n\n```ruby\nconfig.assets.debug = false\n```\n\nYou can precompile your assets as follows:\n\n```shell\nRAILS_ENV=development bundle exec rake assets:precompile\n```\n\nIf you want to remove precompiled assets (recommended before you commit to Git\nand push your changes) use the following rake task:\n\n```shell\nRAILS_ENV=development bundle exec rake assets:clean\n```\n\nUse Dedicated Spree Devise Authentication\n-----------------------------------------\nAdd the following to your Gemfile\n\n```ruby\ngem \'spree_auth_devise\', github: \'spree/spree_auth_devise\'\n```\n\nThen run `bundle install`. Authentication will then work exactly as it did in\nprevious versions of Spree.\n\nThis line is automatically added by the `spree install` command.\n\nIf you\'re installing this in a new Spree 1.2+ application, you\'ll need to install\nand run the migrations with\n\n```shell\nbundle exec rake spree_auth:install:migrations\nbundle exec rake db:migrate\n```\n\nchange the following line in `config/initializers/spree.rb`\n```ruby\nSpree.user_class = \'Spree::LegacyUser\'\n```\nto\n```ruby\nSpree.user_class = \'Spree::User\'\n```\n\nIn order to set up the admin user for the application you should then run:\n\n```shell\nbundle exec rake spree_auth:admin:create\n```\n\nRunning Tests\n-------------\n\nWe use [CircleCI](https://circleci.com/) to run the tests for Spree.\n\nYou can see the build statuses at [https://circleci.com/gh/spree/spree](https://circleci.com/gh/spree/spree).\n\n---\n\nEach gem contains its own series of tests, and for each directory, you need to\ndo a quick one-time creation of a test application and then you can use it to run\nthe tests.  For example, to run the tests for the core project.\n```shell\ncd core\nbundle exec rake test_app\nbundle exec rspec spec\n```\n\nIf you would like to run specs against a particular database you may specify the\ndummy apps database, which defaults to sqlite3.\n```shell\nDB=postgres bundle exec rake test_app\n```\n\nIf you want to run specs for only a single spec file\n```shell\nbundle exec rspec spec/models/spree/state_spec.rb\n```\n\nIf you want to run a particular line of spec\n```shell\nbundle exec rspec spec/models/spree/state_spec.rb:7\n```\n\nYou can also enable fail fast in order to stop tests at the first failure\n```shell\nFAIL_FAST=true bundle exec rspec spec/models/state_spec.rb\n```\n\nIf you want to run the simplecov code coverage report\n```shell\nCOVERAGE=true bundle exec rspec spec\n```\n\nIf you\'re working on multiple facets of Spree to test,\nplease ensure that you have a postgres user:\n\n```shell\ncreateuser -s -r postgres\n```\n\nAnd also ensure that you have [PhantomJS](http://phantomjs.org/) installed as well:\n\n```shell\nbrew update && brew install phantomjs\n```\n\nTo execute all the tests, you may want to run this command at the\nroot of the Spree project to generate test applications and run\nspecs for all the facets:\n```shell\nbash build.sh\n```\n\nFurther Documentation\n------------\nSpree has a number of really useful guides online at [http://guides.spreecommerce.com](http://guides.spreecommerce.com).\n\nRequest for Comments\n------------\nSpree feature and change request for comments can be found at [https://github.com/spree-contrib/rfcs](https://github.com/spree-contrib/rfcs).\n\nContributing\n------------\n\nSpree is an open source project and we encourage contributions. Please review the\n[contributing guidelines](http://guides.spreecommerce.com/developer/contributing.html)\nbefore contributing.\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project.\n\nHere are some ways **you** can contribute:\n\n* by using prerelease versions / master branch\n* by reporting [bugs](https://github.com/spree/spree/issues/new)\n* by [translating to a new language](https://github.com/spree/spree_i18n/tree/master/config/locales)\n* by writing or editing [documentation](http://guides.spreecommerce.com/developer/contributing.html#contributing-to-the-documentation)\n* by writing [specs](https://github.com/spree/spree/labels/need_specs)\n* by writing [needed code](https://github.com/spree/spree/labels/feature_request) or [finishing code](https://github.com/spree/spree/labels/address_feedback)\n* by [refactoring code](https://github.com/spree/spree/labels/address_feedback)\n* by reviewing [pull requests](https://github.com/spree/spree/pulls)\n* by verifying [issues](https://github.com/spree/spree/labels/unverified)\n\nLicense\n-------\n\nSpree is released under the [New BSD License](https://github.com/spree/spree/blob/master/license.md).\n'
Common Lisp package for simple two dimensional computational geometry. b"# cl-geometry\n\nThis is a system for two dimensional computational geometry for Common Lisp. \n\n## Notes\n\nThe system assumes exact rational arithmetic, so no floating point coordinates are allowed. This is not checked when creating geometric objects.\n\nThe system was not heavily tested or used. Comments and/or patches welcome.\n\n## Classes\n\n- point\n- line-segment (ie. an ordered set of two points)\n- line (an infinite geometric object given by equation Ax+By+C=0)\n- polygon (an ordered set of n points)\n\n## Decomposition\n\nMost functions are explained by their docstrings. The most complex and somewhat chaotic are decomposition/triangulation functions.\n\n`triangulate polygon`\n\nReturns a set of triangles obtained using ear-removal method. This works only on simple polygons (ie. nonself-intersecting), and is quadratic in the number of edges.\n\n`decompose-complex-polygon-nondisjoint polygon`\n\nReturns a set of possibly intersecting simple polygons from a complex one. This is quadratic in the number of edges at least. The only guarantee is that the union of edges of returned polygons form original polygon, in particular, this does no form of interior testing.\n\n`shamos-hoey edge-list`\n\nTakes a list of edges (line segments) and returns true if there is at least one intersection.\n\n`bentley-ottmann edge-list`\n\nTakes a list of edges and returns all intersection points.\n\n`decompose-complex-polygon-bentley-ottmann polygon`\n\nReturns a set of possibly intersecting simple polygons. This is similar to `decompose-complex-polygon-nondisjoint` above but should be faster.\n\n`decompose-complex-polygon-triangles polygon &key (in-test 'point-in-polygon-winding-p)`\n\nReturns a set of triangles forming the, possibly complex, polygon which fulfill the `in-test`, which is a function of two arguments, a center point of a given triangle and a polygon. By default winding number interior test is used. The other standard test is even-odd rule implemented by `point-in-polygon-crossing-p`. Using `(constantly t)` will return all triangles forming the polygon and its bounding box.\n\n    polygon-union polygon1 polygon2 \n      &key (in-test 'point-in-polygon-winding-p) (in-test-1 nil) (in-test-2 nil)\n    polygon-intersection polygon1 polygon2 \n      &key (in-test 'point-in-polygon-winding-p) (in-test-1 nil) (in-test-2 nil)\n    polygon-difference polygon1 polygon2 \n      &key (in-test 'point-in-polygon-winding-p) (in-test-1 nil) (in-test-2 nil)\n\nReturns a set of triangles which form two polygons (and their bounding box) and fulfill appropriate interior condition. If `in-test-1` or `in-test-2` are null, `in-test` is used. If both have value, `in-test` is ignored. Tests are function as above. The triangles returned are: for union, that fulfill either test, for intersection that fulfill both tests and difference that succeed first test but fail the second.\n\n`polygon-difference-nary polygon &rest holes &key (in-test 'point-in-polygon-winding-p)`\n\nReturns a set of triangles which succeed `in-test` with `polygon`, but fail with all `holes`."
 b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
Tomtt's version of the minor mode for editing RubyOnRails code in Emacs b'It is minor mode for editing "Ruby On Rails":ror code with\n"Emacs":emacs. This minor mode makes your work much easier and user\nfriendly\n\n\n== Instalation\n\nYou need download last release from RubyForge page\n"http://rubyforge.org/projects/emacs-rails" and and unpack\nit to directory containing libraries of Emacs, by default it\'s\n$HOME/.emacs.d/\n\nYou can also use SVN\n\n  cd  $HOME/.emacs.d/\n  svn co svn://rubyforge/var/svn/emacs-rails/trunk emacs-rails\n\nDownload and install required libraries\n\n* "http://www.kazmier.com/computer/snippet.el":snippets\n* "http://www.webweavertech.com/ovidiu/emacs/find-recursive.txt":frecursive\n\n*Alert:* From 0.44 release emacs-rails will require the\n "inf-ruby":inf-ruby.\n\nAfter that you must add this code in $HOME/.emacs\n\n  (setq load-path (cons "~/.emacs.d/rails" load-path))\n  (require \'rails)\n\nFor Windows users: you can use your help in CHM format (the default\n*ri*).  This will require utility "KeyHH":keyhh. And add to a file\n.emacs\n\n  (setq rails-chm-file "full_path_to_rails_chm_manual")\n\nAfter that you can run Emacs. Almost all available actions are in the\nmenu [Ruby On Rails]. The snippets are in the menu [Ruby On\nRails-Snippets], for the convenience, they are divided into\ncategories.\n\nTo change default setting, select [Ruby On Rails - Customize].\n\n== First Acquaintance\n\nGo to directory with your rails application and open any file in Emacs:\n\n  cd $HOME/project/simple_rails_application\n  emacs app/controllers/application.rb\n\nThere must be "RoR" sign in the list of active minor-modes in status\nbar. Thi means, that emacs-rails is enabled and ready to help you in\nyour not so easy work.\n\nAlmoust all actions are in the "RubyOnRails" menu. You can check it\nout and try some of them. Don\'t forget, that menu will help you only\nfirst time. After that you better use hot keys for effective work, you\ncan find them in the brackets.\n\n== Features\n\n* TextMate-like snippets\n* Display of colored log files\n* Integration with script/generate and script/destroy (controller,\n  model, scaffold, migration, etc)\n* Integration with script/console and script/breakpointer\n* Run rake %(key)C-c C-c r%\n* Quick start svn-status in RAILS_ROOT %(key)f9%\n* Documentation search using *ri* or *chm* file and Rails API\n  reference in HTML %(key)f1%\n* Quick access to the main configuration files\n* Automatic TAGS generation in RAILS_ROOT directory\n\n=== Management of WEBrick/Mongrel\n\n* Your can select Webrick, Mongrel or Lighttpd\n* Start/stop application server %(key)C-c C-c w s%\n* Automatic browsing on current action (from view or controller)\n  %(key)C-c C-c w a%\n\n=== Navigation in RAILS_ROOT hierarchy\n\n* Quick switch stylesheets, javascripts, migrations, layouts, helpers,\n  controllers, models, observers, plugins\n* In controller file: go to views, functional test, helper\n  %(key)C-down%\n* Switch between action/view %(key)\xef\xbf\xbd-up%\n* Go to file in current line (example: cursor at line [redirect_to\n  controller => :home, :action => "show"], will be open action "show"\n  in "home" controller) %(key)C-RET%\n* Quick access to the main configuration files using menu\n\nOther hot keys\n\n* %(key)C-c C-c g g% rails-nav:goto-migrate\n* %(key)C-c C-c g j% rails-nav:goto-javascripts\n* %(key)C-c C-c g s% rails-nav:goto-stylesheets\n* %(key)C-c C-c g l% rails-nav:goto-layouts\n* %(key)C-c C-c g h% rails-nav:goto-helpers\n* %(key)C-c C-c g c% rails-nav:goto-controllers\n* %(key)C-c C-c g m% rails-nav:goto-models\n* %(key)C-c C-c g o% rails-nav:goto-observers\n* %(key)C-c C-c g p% rails-nav:goto-plugins\n\n=== ERb refactoring\n\n* Create partial from selection %(key)C-c p%\n* Create helper from block  %(key)C-c b%\n\n= Bugs\n\nemacs-rails designed for current CVS version of Emacs (future Emacs22)\nmore probably some functions will not work in older version, or will\nwork with errors, so if it is possible, try to update. I will not tell\nyou why you should use CVS version, just take my word.\n\nIn some version from CVS some time ago, when you use emacs-rails,\nsintax highlight in rhtml was not working, so just update to the\nnewest version from CVS.\n\nIf you find error, place it description in "BugTrack":bugtrack.\n\n= Links\n\n* "Emacs W32 (CVS version for Windows)":http://ourcomments.org/Emacs/EmacsW32.html\n* "HowToUseEmacsWithRails":http://wiki.rubyonrails.org/rails/pages/HowToUseEmacsWithRails\n* "http://scott.elitists.net/users/scott/posts/rails-on-emacs":http://scott.elitists.net/users/scott/posts/rails-on-emacs\n* "http://www.emacswiki.org/cgi-bin/wiki/RubyMode":http://www.emacswiki.org/cgi-bin/wiki/RubyMode\n* "Emacs screencast":screencast\n* "Effective Emacs":effectiveemacs\n\n[bugtrack]http://rubyforge.org/tracker/?atid=5809&group_id=1484&func=browse\n[effectiveemacs]http://steve.yegge.googlepages.com/effective-emacs\n[screencast]http://emacsonrails.drozdov.net/\n[lisp]http://en.wikipedia.org/wiki/Lisp_programming_language\n[frecursive]http://www.webweavertech.com/ovidiu/emacs/find-recursive.txt\n[keyhh]http://www.keyworks.net/keyhh.htm\n[snippets]http://www.kazmier.com/computer/snippet.el\n[emacs]http://www.gnu.org/software/emacs/\n[ror]http://rubyonrails.org\n[emacs-rails]http://rubyforge.org/projects/emacs-rails\n[inf-ruby]http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/misc/inf-ruby.el?view=co'
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a "normal" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n'
Merb More: The Full Stack. Take what you need; leave what you don't. 
Merb Plugins: Even more modules to hook up your Merb installation 
Very simple symbolic math library for Common Lisp (ie. runtime math without EVAL) 
Translation of wikis to FictionBook 
A small webapp I used while researching what car to buy 
A clone of Radiant's page_attachments extension with a bugfix b'= Page Attachments\n\nDescription goes here'
A pure-Nu wiki based on Nunja, Git, and NuMarkdown b'Nuki\n=============\n\nNuki is a Wiki engine written in [Nu][nu] and powered by [Nunja][nj].\n\n[nu]: http://programming.nu\n[nj]: http://github.com/timburks/nunja/tree/master\n\nInstallation:\n------\n\nNuki requires [Nu][nu], [Nunja][nj] (which depends on [libevent][le]), [NuMarkdown][nm], and [NuSmartyPants][nsp].\nTo build the Nuki sources, run `nuke`; to run nukid, the Nuki daemon, run `./nukid`.\n\n[nu]: http://programming.nu\n[le]: http://www.monkey.org/~provos/libevent/\n[nm]: http://github.com/timburks/numarkdown/tree/master\n[nsp]: http://github.com/Grayson/nusmartypants/tree/master\n\nAuthor:\n-----\n[Patrick Thomson](mailto:ironswallow@gmail.com)  \nHis webpage can be found [here](http://importantshock.wordpress.com/).\n\nKnown bugs:\n-----\nNuki does not deal well with huge pages.\n\nMany thanks to:\n--------------\n[Tim Burks](http://blog.neontology.com/) for Nu, Nunja, guidance and encouragement.\n[Grayson Hansard](http://www.fromconcentratesoftware.com/) for NuSmartyPants, NuMarkdown, and bug reports.'
My modified version of todo.py (todo.txt command line task manager) with support for irregularly recurring events 
go (to project) do (stuffs) b'= godo\n\n* version: 1.0.9\n* released: 2008-06-02\n* http://simplyruby.rubyforge.org/godo\n\n== DESCRIPTION:\n\ngo (to project) do (stuffs)\n\ngodo provides a smart way of opening a project folder in multiple terminal tabs and, in each tab,\ninvoking a commands appropriate to that project. For example if the folder contains a Rails project\nthe actions might include: starting mongrel, tailing one or more logs, starting consoles or IRB\nsessions, tailing production logs, opening an editor, running autospec, or gitk.\n\ngodo works by searching your project paths for a given search string and trying to match it against\npaths found in one or more configured project roots. It will make some straightforward efforts to\ndisambiguate among multiple matches to find the one you want.\n\ngodo then uses configurable heuristics to figure out what type of project it is, for example "a RoR\nproject using RSpec and Subversion". From that it will invokes a series of action appropriate to the type of project detected with each action being run, from the project folder, in its own terminal session.\n\ngodo is entirely configured by a YAML file (~/.godo) that contains project types, heuristics, actions, project paths, and a session controller. A sample configuration file is provided that can be installed using godo --install.\n\t\ngodo comes with an iTerm session controller for MacOSX that uses the rb-appscript gem to control iTerm (see lib/session.rb and lib/sessions/iterm_session.rb). It should be relatively straightforward to add new controller (e.g. for Leopard Terminal.app), or a controller that works in a different way (e.g. by creating new windows instead of new tabs). There is nothing MacOSX specific about the rest of godo so creating controllers for other unixen should be straightforward if they can be controlled from ruby.\n\ngodo is a rewrite of my original \'gp\' script (http://matt.blogs.it/entries/00002674.html) which fixes a number of the deficiencies of that script, turns it into a gem, has a better name, and steals the idea of using heuristics to detect project types from Solomon White\'s gp variant (http://onrails.org/articles/2007/11/28/scripting-the-leopard-terminal).\n  \ngodo now includes contributions from Lee Marlow <lee.marlow@gmail.com> including support for project level .godo files to override the global configuration, support for Terminal.app, and maximum depth support to speed up the finder.\n\t\ngodo lives at the excellent GitHub: http://github.com/mmower/godo/ and accepts patches and forks.\n\n== FEATURES/PROBLEMS:\n\n* All-in-one configuration file\n* Flexible heuristics for detecting project type\n* Flexible actions for running commands\n* Project level customizations\n\n== SYNOPSIS:\n\nTo install the default configuration (will not overwrite an existing configuration file)\n\ngodo --install\n\nTo open a project with it\'s actions\n\ngodo <project>\n\nWhere project is a search term that will match part of the project path name.\n\nIf the project has a .godo file at its root, then those actions will be used\ninstead of using the heuristics.  A project level .godo file can reference\nactions defined in ~/.godo, a group of actions by project type, and\narbitrary commands.\n\nHere\'s a sample project level .godo file:\n---\nactions:\n  - terminal\n  - command: echo \'tab before matcher\'\n    label: This tab goes before the project matcher\n  - matcher: rails+git\n  - command: echo \'tab after matcher\'\n  - terminal\n\nTo open a project and override the project type (i.e. do not use heuristics nor\na project level .godo file):\n\ngodo -o <matcher> <project>\n\nTo see what project types are available:\n\ngodo --list-types\n\n== REQUIREMENTS:\n\n* Trollop\n* rb-appscript\n\n== INSTALL:\n\n* sudo gem install godo\n* godo --install\n* mate|vi|emacs ~/.godo\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Matt Mower <self@mattmower.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
A Haml Scaffolding Generator for RSpec b"RSpec Haml Scaffold Generator\n====\n\nThis is an uber version of the RSpec Scaffold Generator, the following things have been added:\n\nSupport for Haml instead of erb\nNested routes (nested tests/migrations)\n\nInstallation:\n  sudo gem install zachinglis-rspec-haml-scaffold\n\nExamples:\n\n  ./script/generate rspec_haml_scaffold post # no attributes, view will be anemic\n  ./script/generate rspec_haml_scaffold post attribute:string attribute:boolean # this is actually broken at the moment, don't do this !!! Feel free to patch it\n\nCredits\n\n  * Daniel Fischer - http://danielfischer.com\n  * Zach Inglis - http://zachinglis.com\n"
Provides action/template profiling b'merb-profile\n============\n\nA plugin for the Merb framework that provides action / template profiling\n\nExample\n=======\n\nclass MyController < Merb::Controller\n  profile_action :index\n\n  def index\n    render\n  end\n\n  def list\n    profile "big query" do\n      @result = MyModel.big_query\n    end\n\n    profile "list render" do\n      render\n    end\n  end\n\n  def clear\n    clear_profiling\n  end\n\n  def results\n    render_profiling\n  end\nend\n'
A fully featured forum system compatible with Rails 2.3 b'# rBoard\n\nrBoard was a kick-ass forum system built in Ruby on Rails. It has now been superseded by the [forem] (http://github.com/radar/forem) Rails engine. If you are looking for a drop-in forum system, go there.'
Ruby gem wrapping Pownce API b'This project is no longer being maintained due to the death of Pownce.'
Ruby wrapper for Yahoo!'s FireEagle b'FireEagle[http://fireeagle.yahoo.net] (FE) is a system providing centralized\nmanagement of user location information. FE allows 3rd party developers to\npdate and/or access user\'s location data.\n\nhttp://fireeagle.yahoo.net/developer/documentation\n\n== Installation\n\n gem install fireeagle\n \n== Usage\n\n  >> require \'fireeagle\'\n  >> client = FireEagle::Client.new(\n    :consumer_key        => "<consumer key>",\n    :consumer_secret     => "<consumer secret>",\n    :access_token        => "[access token]",\n    :access_token_secret => "[access token secret]")\n\n==== With a User-specific OAuth Access Token\n\n  # update your location\n  >> client.update(:q => "punta del diablo, uruguay") # I wish\n  # query your location\n  >> user = client.user\n  => #<FireEagle::User:0x1ca5e08 ... >\n  >> user.locations\n  => [#<FireEagle::Location:0x1cdd9e8 ...>, #<FireEagle::Location:0x1cc8ffc ...>, ... ]\n  >> user.best_guess\n  => #<FireEagle::Location:0x1cdd9e8 ...>\n  >> user.best_guess.name\n  => "Punta del Diablo, Uruguay"\n  # lookup a location\n  >> locations = client.lookup(:q => "30022")\n  => [#<FireEagle::Location:0x1cdd9e8 ...>, #<FireEagle::Location:0x1cc8ffc ...>, ...]\n  >> locations.first.name => "Alpharetta, GA 30022"\n  >> locations.first.place_id => "IrhZMHuYA5s1fFi4Qw"\n\n== Authorization\n\nAuthorization is handled by OAuth. For more details about the OAuth\nauthorization flow and how it differs based on your application type, please\nsee http://fireeagle.yahoo.net/developer/documentation/authorizing\n\n== Contributing\n\nhttp://github.com/jnewland/fireeagle/tree/master. You know what to do.\n\nRubyforge Project Page:: http://rubyforge.org/projects/fireeagle\nAuthor::    Jesse Newland (http://soylentfoo.jnewland.com) (jnewland@gmail.com[mailto:jnewland@gmail.com])\nCopyright:: Copyright (c) 2008 Jesse Newland. Portions[http://pastie.caboo.se/private/oevvkdzl0zrdkf8s7hetg] Copyright (c) 2008 Yahoo!\nLicense::   Distributed under the same terms as Ruby\n'
Spam blocking plugin with support for Akismet and Defensio. 
Various and sundry extensions written for Radiant CMS (http://radiantcms.org) 
A light interface to call flickr 'restful' api methods b'# Introduction\n\nflickr-rest is a stab at removing all the stuff that you don\'t really\nwant to do. There are no specific photo methods, community. Nothing.\n\nSimply use it to query the bits you want. \nIf you want a flickr api wrapper, use the flickr gem.\n\n# Usage\n\n    require \'flickr-rest\'\n    Flickr::Query::CONFIG_PATH = \'/path/to/flickr.yml\'\n    flickr = Flickr::Query.new(\'flickr.test.echo\')\n\n    # Raw JSON response (String)\n    flickr.raw\n    => \'{"api_key":{"_content":"2b60171843b346aa104e3a38d0129e5e"}, "format":{"_content":"json"}, "nojsoncallback":{"_content":"1"}, "method":{"_content":"flickr.test.echo"}, "stat":"ok"}\'\n\n    # A clean, tidy ruby object\n    flickr.parsed\n    => {:api_key=>"2b60171843b346aa104e3a38d0129e5e", :format=>"json", :method=>"flickr.test.echo", :nojsoncallback=>"1"}\n\n\n'
Python hack to perform various filtering (like spam handling) on an IMAP mailbox. b'imapfilter\n==========\n\nPython hack to perform various filtering (like spam handling) on an IMAP mailbox.\n\nMy normal setup used this to run spam assassin to do spam filtering.\n'
a maintained fork of Evan Weaver's Ultrasphinx code -- see the escape_sql branch b"\nUltrasphinx \n\nRuby on Rails configurator and client to the Sphinx full text search engine.\n\n== License\n\nCopyright 2007-2008 Cloudburst, LLC. Licensed under the AFL 3. See the included LICENSE file. Some portions copyright Pat Allan, distributed under the MIT license, and used with permission. Some portions copyright PJ Hyett and Mislav Marohni\xc4\x87, distributed under the MIT license, and used with permission. \n\nThe public certificate for the gem is here[http://rubyforge.org/frs/download.php/25331/evan_weaver-original-public_cert.pem]. \n\nIf you use this software, please {make a donation}[http://blog.evanweaver.com/donate/], or {recommend Evan}[http://www.workingwithrails.com/person/7739-evan-weaver] at Working with Rails.\n\n== Requirements\n\n* MySQL 5.0, or PostgreSQL 8.2\n* Sphinx 0.9.8-rc2\n* Rails 2.0.2\n\nMore recent versions than listed are usually ok.\n\n== Features\n\nSphinx/Ultrasphinx is the fastest and most stable Rails fulltext search solution.\n\nFeatures include:\n\n* searching and ranking across multiple models\n* delta index support\n* excerpt highlighting\n* Google-style query parser\n* spellcheck\n* faceting on text, date, and numeric fields\n* field weighting, merging, and aliasing\n* geodistance\n* <tt>belongs_to</tt> and <tt>has_many</tt> includes\n* drop-in compatibility with will_paginate[http://err.lighthouseapp.com/projects/466/home]\n* drop-in compatibility with Interlock[http://blog.evanweaver.com/files/doc/fauna/interlock/]\n* multiple deployment environments\n* comprehensive Rake tasks\n\nAnd some other things.\n\n= Usage\n\n== Installation\n  \nFirst, install Sphinx itself. Get the {0.9.8 snapshot}[http://www.sphinxsearch.com/downloads.html], then run <tt>./configure</tt>, <tt>make</tt>, and <tt>sudo make install</tt>. Make sure to set your <tt>./configure</tt> flags: <tt>----prefix</tt> if necessary, and also <tt>----with-pgsql</tt> if you need Postgres support.\n\nYou also need the <tt>chronic</tt> gem:\n  sudo gem install chronic\n\nThen, install the plugin:\n  script/plugin install -x svn://rubyforge.org/var/svn/fauna/ultrasphinx/trunk\n \nNext, copy the <tt>examples/default.base</tt> file to <tt>RAILS_ROOT/config/ultrasphinx/default.base</tt>. This file sets up the  Sphinx daemon options such as port, host, and index location.\n  \nIf you need per-environment configuration, you can use <tt>RAILS_ROOT/config/ultrasphinx/development.base</tt>, etc. Note that ERb is also allowed within the <tt>.base</tt> files, and can be an alternative way to DRY up multiple configurations.\n\nNow, in your models, use the <tt>is_indexed</tt> method to configure a model as searchable. For example:\n  \n  class Post\n    is_indexed :fields => ['created_at', 'title', 'body']\n  end\n  \nFor more index options, see ActiveRecord::Base .is_indexed.\n\n== Building the index\n\nNow run:\n\n  rake ultrasphinx:configure\n  rake ultrasphinx:index\n  rake ultrasphinx:daemon:start\n\nTo rotate the index, just rerun <tt>rake ultrasphinx:index</tt>. If the search daemon is running, it will have its index rotated live. Otherwise the new index will be installed but the daemon will remain stopped.\n\n== Running queries\n    \nQuery the daemon as so:\n\n  @search = Ultrasphinx::Search.new(:query => @query)\n  @search.run\n  @search.results\n  \nFor more query options, including excerpt mode, see Ultrasphinx::Search.\n  \n= Extras  \n\n== Pagination\n\nOnce the <tt>@search</tt> object has been <tt>run</tt>, it is directly compatible with the <tt>will_paginate</tt> view helper. In your view, just do:\n  <%= will_paginate(@search) %>\n  \n== Spell checking\n\nSee Ultrasphinx::Spell.\n\n== Delta indexing \n\nDelta indexing speeds up your updates by not reindexing the entire dataset every time. \n\nFirst, in your <tt>.base</tt> file, set the indexer option <tt>delta</tt> to your maximum interval between full reindexes. A day or a week is good, depending. Add a little bit to account for the time it takes the actual index to run:\n\n  delta = <%= 1.day + 30.minutes %> \n\nNow, configure your models for delta indexing in the <tt>is_indexed</tt> call:\n\n  is_indexed :fields => ['created_at', 'title', 'body'],\n    :delta => true\n\nNow you can run <tt>rake ultrasphinx:index:delta</tt> frequently, and only records that were changed within 1 day will be reindexed. You will need to run <tt>rake ultrasphinx:index:main</tt> once a day to move the delta contents into the main index.\n\nSee ActiveRecord::Base .is_indexed and DEPLOYMENT_NOTES[link:files/DEPLOYMENT_NOTES.html] for more.\n  \n== Available Rake tasks\n\nSee RAKE_TASKS[link:files/RAKE_TASKS.html].\n\n== Deployment notes\n\nSee DEPLOYMENT_NOTES[link:files/DEPLOYMENT_NOTES.html].\n\n== Gotchas\n\nNote that since Ultrasphinx preloads indexed models, you need to make sure those models have their own dependencies in place early in the boot process. This may require adjusting the general plugin load order or moving monkey-patches from <tt>lib/</tt> to <tt>vendor/plugins/</tt>.\n\nPostgreSQL 8.2 and higher are well supported. However, make sure the stored procedure migration gets generated correctly. If you did not install the plugin via <tt>script/install</tt>, run <tt>script/generate ultrasphinx_migration</tt> by hand.\n\n== Reporting problems\n\nThe support forum is here[http://rubyforge.org/forum/forum.php?forum_id=14244].\n\nPatches and contributions are very welcome. Please note that contributors are required to assign copyright for their additions to Cloudburst, LLC. \n\n== Further resources\n\n* http://sphinxsearch.com/doc.html\n* http://sphinxsearch.com/forum/forum.html?id=1\n* http://blog.evanweaver.com/articles/2007/07/09/ultrasphinx-searching-the-world-in-231-seconds\n"
Multisite lightweight CMS without web-based backend for authors 
A bicycle commuting advocacy site b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
The kick ass, open source, non-commercial home for musicians and their music b'[![Build Status](https://secure.travis-ci.org/sudara/alonetone.png)](http://travis-ci.org/sudara/alonetone)\n[![Code Climate](https://codeclimate.com/github/sudara/alonetone.png)](https://codeclimate.com/github/sudara/alonetone)\n## The future is bright\n\n[alonetone](http://alonetone.com) is an independent music platform, allowing musicians to host and distribute their music in a non-commercial, easy-to-use environment.\n\nalonetone launched in January 2008. As of 2015 it hosts over 58,000 tracks from 4500 musicians. We have delivered over 4.5 million mp3s to real listeners (not google and spambots, we are strict about excluding em!)\n\n\n### Bug reporting \n\nWe use [Github Issues](http://github.com/sudara/alonetone/issues) to submit bugs and keep track of our work.\n\n### Our goal?\n\nTo create and run the best online home a musician could want to have. To provide them with the tools they need to reach  listeners and network with other artists \xe2\x80\x94\xc2\xa0without the stank of commercialism, startup flava, ads, etc. \n\nWe strive to build:\n\n* An easy to use, straightforward, intuitive, and consistent interface. Grandma-friendly (Yes, my grandma does use alonetone).\n* Attractive to look at. UI-first feature building. Designer always involved.\n* An open-source rails app that is easy to setup, adheres to best practices and can serve as good example.\n* Practical, useful tools and services for musicians \xe2\x80\x94 without too much clutter and junk (no facebook integration, etc)\n* Encourage artist exploration and a sense of community: encouragement to stick around vs. cliqueyness\n* It does not overwhelm folks with TMI (too much information) or TMO (too many options) or TMF (too many features).\n\nNew Features must prove themselves and obey the above principles \xe2\x80\x94 not just be built because it sounds cool or would be fun to hack on. We have said "no" to many "intuitive" or "easy" features like threaded comment replies because they would compromise or distract from the above goals. \n\nFor more info on alonetone, visit [the alonetone faq](http://alonetone.com/about)\n\n### Current tech\n\n* Rails 4.2\n* jQuery\n* SoundManager 2 (for flash + html5 playback)\n\n\n### Current feature set\n\n* Unlimited mp3 uploads for musicians\n* Creation of playlists / albums\n* MP3 streaming and download (powered by amazon s3)\n* Artist browsing\n* Track browsing by popularity, who you are following, most favorited, etc.\n* Tracking of listens and providing useful feedback and statistics to artists\n* One-way commenting system (No inline relpies. No threaded comments. No "pms")\n* Feeds for iTunes podcasts and offsite flash players\n\n## Features wanted\n\n### Browse All Playlists\nLow hanging fruit, boys and girls! Shoulda been a 2008 feature :)\n\n### On the fly zip downloads of playlists via nginx mod\\_zip\nThis is very easy. Already implemented on Ramen Music. Essentially just is a having a controller generate a text file of filenames that nginx interrupts and uses to construct a zip that\'s sent back to the client.\n\n### Better discovery though tags\nIt\'s high time. We\'re small fries perhaps (40k tracks) but we lack any categorization outside of playlists and users. The community has decided NO GENRES and after a bunch of discussion, we\'ve decided going with tags (chosen by the uploader) is likely best. However, problems ensue, including: \n\t1) If it\'s a free for all, won\'t it just be like genres, but messy? \n\t2) Should the tags  be moderated and exclude genres? \n\t3) What to do about tagging all the old music, should moderators be able to adjust and add tags for the lazy users/old tracks? \n\t4) Should there be a maximum enforced for UI purposes?\n\t\nThis is more than just programming, it\'s ultimately a UI issue. We can look to Ramen\'s tag implementation (4-5 maximum, taking up 1-2 lines) for inspiration, but it\'s very easy to do this wrong.\n\n### Better overall alonetone stats page. \nWe need to expose a bit more info to the admins/mods. We want to see how signups/assets/comments are trending to help us catch anything strange or cool. But we also just want to know some useful stuff.\n\n### User stats page\nPartial implementation/proof of concept was working on rails 2 branch. Basically, a track-by-track table-view of listens, downloads, sources, etc, along with a graph over time for each track. \n\n### A way to manage blacklisted IPs in the backend. \nWe get trouble with downloading bots, spambots. We have manually hardcoded IPs in the source, specefically to prevent downloading mp3 and wasting our bandwidth. We need to create a UI so this can be managed by a non-techie moderator. Also, we need to provide logged in users with a "report" action on their listens if they notice sketchy behavior, so it can go upstream to the mods.\n\n### Groups. \nTalk with Sudara about this. There\'s a partial half-hearted implementation. \n\n\n### Remove alonetone branding from the code\nIt would be nice to separate the alonetone branding, email address, url, and so on \xe2\x80\x94\xc2\xa0out into config files.\n\n## Want to deploy alonetone on your server?\n\n![Sorry script kiddies](https://img.skitch.com/20120908-1exaxnmix5mb82xaq32tjnrja.png)\n\nIt\'s not going to happen unless:\n\n* You know ruby on rails well (Been doing it for more than a few months).\n* You have deployed rails applications, and are comfortable with that.\n* You are willing to spend 20+ hours removing our branding and logo and site-specific things from the code.\n\nWe get a LOT of requests from rails n00bs asking if we can help them setup this "script" because they want an alonetone for a certain region of the world, or in another language. \n\nPlease understand that alonetone is open-source as an educational tool, to encourage collaboration, and for transparency. It is not intended as a white-label solution. If you are serious about getting a copy in production, it\'s going to take lots of work (like 40+ hours) since it\'s not intended for that purpose.\n\n**If you still decide to try keep in mind we are unable to provide ANY support** \n\n## Want to help make alonetone.com awesome?\n\nSweet, now we are talkin\'!\n\nFirst, [sign up for an account](http://alonetone.com) and start digging in.\n\nSecond, hop into our Campfire chat room or email us at support@alonetone.com\n\nThirdly, fork away on github.\n\n### Setup alonetone on localhost\n\n\n1) clone\n\n2) bundle \n\n3) Create needed config, database, and load db/seeds:\n\n      rake setup\n\t\t\t\n4) rails s\n\n\nNote: alonetone uses 3 config files that are created by \'rake setup\'\n\n\n      alonetone.yml (contains the application "secret" and app-specific settings)\n      database.yml\n      newrelic.yml (for performance tracking)\n\n\n#### Logging in\n\nAfter the bootstrap data is loaded, you can login using the test account. Username is "admin" and password is "testing123"\n\nAfter login, click on the "Upload" button to upload your first mp3.\n\n## License \n\nThe alonetone source code is released under the MIT license. \n\n"alonetone", "alonetone.com" and the alonetone logo are copyright Sudara Williams 2008-2013 and may not be used without permission.\n'
ActiveRecord plugin allowing you to hide and restore records without actually deleting them. 
Annotate ActiveRecord models b"== AnnotateModels\n\nAdd a comment summarizing the current schema to the top of each ActiveRecord model source file.\n\n  # Schema as of Sun Feb 26 21:58:32 CST 2006 (schema version 7)\n  #\n  #  id                  :integer(11)   not null\n  #  quantity            :integer(11)   \n  #  product_id          :integer(11)   \n  #  unit_price          :float         \n  #  order_id            :integer(11)   \n  #\n\n  class LineItem < ActiveRecord::Base \n    belongs_to :product\n  \n   end\n  \nNote that this code will blow away the initial comment block in your models if it looks like it was \npreviously added by annotate models, so you don't want to add additional text to an automatically \ncreated comment block.\n\n== Install\n\n  sudo gem install annotate-models\n  \n== Usage\n\n  cd [your project]\n  annotate\n\n== Source\n\n  http://github.com/ctran/annotate_models\n  \n  \n== Author\n   Dave Thomas\n   Pragmatic Programmers, LLC\n\nReleased under the same license as Ruby. No Support. No Warranty. \n\n\n== Modifications\n - alex@pivotallabs.com\n - ctran@pragmaquest.com\n"
A merb port of the attachment_fu Rails plugin b'attachmerb-fu\n=====================\n\nattachmerb_fu is a port of Rick Olson\'s famous attachment_fu Rails plugin to merb. It tries to be as orm-agnostic as merb while having the same functionalities as the original plugin.\n\nThis plugin is still in a very alpha state and was only tested with datamapper orm, mini_magick image processor and filesystem storage. It may or may not work for your application\n\nNote: attachmerb_fu requires Merb >= 0.5\n\n\nattachmerb_fu functionality\n===========================\n\nattachmerb_fu facilitates file uploads in Merb.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are three storage options for files uploaded through attachmerb_fu:\n  File system\n  Database file (currently not tested)\n  Amazon S3 (currently not tested)\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml and the Database file storage requires an extra table.\n\n\nattachmerb_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the \'meta\') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # path to store the uploaded files.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 backend.  \n                      # Setting this sets the :storage to :file_system.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, and :s3.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => \'application/pdf\'\n    has_attachment :content_type => [\'application/pdf\', \'application/msword\', \'text/plain\']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => [\'application/pdf\', :image], :resize_to => \'x50\'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\'\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\', \n                   :content_type => :image, :resize_to => [50,50]\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\',\n                   :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :s3\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachmerb_fu migrations\n========================\n\nFields for attachmerb_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the \'type\' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model \'Avatar\' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => \'320x200>\',\n                            #                  :thumbnails => { :small => \'10x10>\',\n                            #                                   :thumb => \'100x100>\' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> \'small\'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachmerb_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachmerb_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachmerb_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include \':multipart => true\' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => "create" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system and s3 storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachmerb_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachmerb_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file \'/path/to/readme.txt\', :type => \'plain/text\', :disposition => \'inline\'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = \'Attachment was successfully created.\'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n'
Treat an ActiveRecord model as a file attachment, storing its patch, size, content type, etc. b'attachment-fu\n=============\n\nattachment_fu is a plugin by Rick Olson (aka technoweenie <http://techno-weenie.net>) and is the successor to acts_as_attachment.  To get a basic run-through of its capabilities, check out Mike Clark\'s tutorial <http://clarkware.com/cgi/blosxom/2007/02/24#FileUploadFu>.\n\n\nattachment_fu functionality\n===========================\n\nattachment_fu facilitates file uploads in Ruby on Rails.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are three storage options for files uploaded through attachment_fu:\n  File system\n  Database file\n  Amazon S3\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml and the Database file storage requires an extra table.\n\n\nattachment_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the \'meta\') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # path to store the uploaded files.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 backend.  \n                      # Setting this sets the :storage to :file_system.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, and :s3.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => \'application/pdf\'\n    has_attachment :content_type => [\'application/pdf\', \'application/msword\', \'text/plain\']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => [\'application/pdf\', :image], :resize_to => \'x50\'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\'\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\', \n                   :content_type => :image, :resize_to => [50,50]\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\',\n                   :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :s3\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachment_fu migrations\n========================\n\nFields for attachment_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the \'type\' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model \'Avatar\' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => \'320x200>\',\n                            #                  :thumbnails => { :small => \'10x10>\',\n                            #                                   :thumb => \'100x100>\' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> \'small\'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachment_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachment_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachment_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include \':multipart => true\' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => "create" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system and s3 storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachment_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachment_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file \'/path/to/readme.txt\', :type => \'plain/text\', :disposition => \'inline\'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = \'Attachment was successfully created.\'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n'
A revision browser widget for giggle 
Easy to use Javascript plugins b'license BSD'
Chat for teams in Dozor game b'\xd0\xa2\xd0\xb5\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd1\x8b\xd0\xb9 \xd1\x84\xd0\xb0\xd0\xb9\xd0\xbb\xd0\xb8\xd0\xba. \xd0\x90\xd0\xb3\xd0\xb0'
the latest gangbuster source code 
a git-svn clone of the full gimp repository. b'The GNU Image Manipulation Program Version 2.4\n----------------------------------------------\n\nGIMP 2.4 replaces earlier GIMP 2.x versions. It is advised that you\nuninstall them before installing GIMP 2.4. If you want to keep your\nolder GIMP 2.x installation in parallel to GIMP 2.4, you have to\nchoose a separate prefix which is not in your default library search\npath. Otherwise your GIMP 2.2 or GIMP 2.0 installation will start to\nuse the new libraries. You have been warned.\n\nIf you think you found a bug in this version, please make sure that it\nhasn\'t been reported earlier and that it is not just new stuff that is\nstill being worked on and obviously not quite finished yet.\n\nIf you want to hack on GIMP, please read the file HACKING. For\ndetailed installation instructions, see the file INSTALL.\n\n\n1. Web Resources\n================\n\nGIMP\'s home page is at:\n\n\thttp://www.gimp.org/\n\nPlease be sure to visit this site for information, documentation,\ntutorials, news, etc.  All things GIMP-ish are available from there.\n\nThe automated plug-in registry is located at:\n\n\thttp://registry.gimp.org/\n\nThere you can get the latest versions of plug-ins, using a convenient\nforms-based interface.\n\nThe latest version of GIMP can be found at:\n\n\thttp://www.gimp.org/downloads/\n\n\n2. Mailing Lists\n================\n\nWe have several mailing lists dedicated to GIMP user and development\ndiscussion.  There is more info at\n\n\thttp://www.gimp.org/mail_lists.html\n\nLinks to several archives of the mailing lists are included in that page.\n\nGimp-announce is a low-traffic list with announcements about new\nreleases of GIMP and plug-ins. Gimp-user is a mailing list dedicated\nto user problems, hints and tips, discussion of cool effects, etc.\nGimp-developer is oriented to GIMP core and plug-in developers.  Most\npeople will only want to be subscribed to gimp-user. If you want to\nhelp develop GIMP, the gimp-developer mailing list is a good starting\npoint.\n\nThere is also a mailing list, "gimpwin-users", dedicated to users of the\nWin32 port.  To subscribe, send an empty message to\n\n\tgimpwin-users-subscribe@egroups.com\n\nYou can also use the web interface at\nhttp://www.egroups.com/group/gimpwin-users/. Note that as this mailing\nlist is hosted on egroups.com, the messages from the list contain\nrelatively unintrusive and easily ignored advertisements at the\nend. But if you are absolutely allergic to ads, don\'t subscribe.\n\n\n3. IRC\n======\n\nAnd finally, for the real junkies, there is an IRC channel devoted to\nGIMP. On GIMPNet (a private free software oriented network) there is\n#gimp.  Many of the developers hang out there.  Some of the GIMPNet\nservers are:\n\n\tirc.gimp.org:6667\n\tirc.us.gimp.org:6667\n\tirc.eu.gimp.org:6667\n\n\n4. Customizing\n==============\n\nThe look of GIMP\'s interface can be customized like any other GTK app\nby editing the ~/.gtkrc-2.0 file or by using "themes" (ready-made\ncustomizations).  For downloadable themes and further details, see\nhttp://gtk.themes.org.  Additionally, GIMP reads ~/.gimp-2.4/gtkrc so\nyou can have settings that only apply to GIMP.\n\nIncluded is a set of keybindings similar to those in Adobe Photoshop.\nYou can find them in the ps-menurc file.  To use them, copy this file\nto ~/.gimp-2.4/menurc. You can also manually change the keybindings to\nany of your choice by editing ~/.gimp-2.4/menurc.\n\n\nHave fun,\n\n  Spencer Kimball\n  Peter Mattis\n  Federico Mena\n  Manish Singh\n  Sven Neumann\n  Michael Natterer\n  Dave Neary\n'
A YAML processor for use with Nu and Objective-C. Created by Patrick Thomson. 
DEFUNCT: A flickr library written on top of Mechanize. I am no longer actively maintaining this project, but it worked enough for me to get my old photos into flickr. b"= mechaflickr\n\n* http://www.matschaffer.com\n\n== DESCRIPTION:\n\nA flickr library written on top of Mechanize\n\n== FEATURES/PROBLEMS:\n\n* Functionality\n\n== SYNOPSIS:\n\nMechaflickr.new('myconfig.yaml')\n\n== REQUIREMENTS:\n\n* Uploading\n\n== INSTALL:\n\n* sudo gem install mechaflickr\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
Uber lightweight Merb blogging engine. Make sure you check out the feather-plugins repo as well! 
Ruby implementation of SWX RPC b'======================================\nSWX Ruby: SWX on Rails Plugin Beta 0.5\n======================================\n\nGETTING STARTED\n===============\nSWX on Rails will look for your service classes in RAILS_ROOT/app/services.\nSimply create standard Ruby classes and drop them in this folder. Service classes \nare composed of instance methods. SWX on Rails will instantiate your service\nclass, call the specified method, and send the response back to the Flash Player.\n\nTake a peek at app/services/hello_world.rb for a working service class example.\nAlright, alright, I\'ll just show it to you here:\n\n# hello_world.rb----------------------------------------\n# Class and method names follow standard Ruby convention\nclass HelloWorld\n\t# Service class methods are instance methods.\n\tdef just_say_the_words\n\t\t\'Hello World!\'\n\tend\nend\n#-------------------------------------------------------\n\nHere\'s a Moo card-esque example to call HelloWorld#just_say_the_words from the \nFlash Player (place a MovieClip on stage with an instance name of \'loader\' and\nfire up your development server):\n\n//------------------------------------------------------\nloader.serviceClass = "HelloWorld";\n// Method names follow ActionScript convention \n// (converted to underscored server-side)\nloader.method = "justSayTheWords";\nloader.debug = true;\nloader.loadMovie("http://localhost:3000/swx", "POST");\n\nfunction onEnterFrame() {\n // Will output \'Hello World!\' once the SWX file is loaded.\n trace(loader.result);\n}\n//------------------------------------------------------\n\nWhen you\'re ready for some robust ActionScript trickery, head to \nhttp://swxformat.org/download/ to grab the SWX ActionScript library.\n\nOh yeah, you may return ActiveRecord objects from your service classes; \nSWX on Rails will happily serialize them for you. Go ahead, give it a try!\n\nSWX on Rails is beta and may break, throw its toys, eat your\nfirstborn child, etc. \nPlease post bug reports/suggestions to http://groups.google.com/group/swxruby. \nFull-featured tracker coming soon.\n=======================================\nNOTE: You may notice some Security Sandbox Violations when testing the example\nabove in the Flash IDE. Rest assured, this is OK. Visit \nhttp://swxformat.org/132 for further explanation.'
Facebook-style lightbox, built in jQuery b'Please visit http://famspam.com/facebox/ or open index.html in your favorite browser.\n'
Generic Imperative Language - demo language for parrot b'Run:\n\n $ parrot setup.pir\n $ parrot setup.pir test\n\n'
Base62 encoding and decoding to turn numbers into very compact strings b"= alphadecimal\n\n* http://github.com/JackDanger/alphadecimal\n\n== DESCRIPTION:\n\nConvert integers to base62 strings (A-Za-z0-9) and back.  A handy\nway to shorten long numbers.\n\n== SYNOPSIS:\n\n  # 45.alphadecimal\n  # => 'j'\n  # 5234233.alphadecimal\n  # 'Lxf7'\n  # 'yH783Xx3Ajz99'.alphadecimal\n  # => 194466611442340388130115\n  # 194466611442340388130115.alphadecimal\n  # => 'yH783Xx3Ajz99'\n\n\n== INSTALL:\n\n* sudo gem install alphadecimal\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Jack Danger Canty, Mike Mondragon\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
A Nu interface to the Git revision control system. b"=========\n= About =\n=========\n\nNugit (pronounced 'nugget') is a Nu interface for controlling the Git version control system.\n"
Gruff graphing library for Ruby b"# Gruff Graphs\n\n[![Build Status](https://travis-ci.org/topfunky/gruff.png?branch=master)](https://travis-ci.org/topfunky/gruff)\n[![Gem Version](https://badge.fury.io/rb/gruff.png)](http://badge.fury.io/rb/gruff)\n\nA library for making beautiful graphs.\n\n## Installation\n\nAdd this line to your application's Gemfile:\n\n    gem 'gruff'\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install gruff\n\n## Usage\n\n```Ruby\nrequire 'gruff'\ng = Gruff::Line.new\ng.title = 'Wow!  Look at this!'\ng.labels = { 0 => '5/6', 1 => '5/15', 2 => '5/24', 3 => '5/30', 4 => '6/4',\n             5 => '6/12', 6 => '6/21', 7 => '6/28' }\ng.data :Jimmy, [25, 36, 86, 39, 25, 31, 79, 88]\ng.data :Charles, [80, 54, 67, 54, 68, 70, 90, 95]\ng.data :Julie, [22, 29, 35, 38, 36, 40, 46, 57]\ng.data :Jane, [95, 95, 95, 90, 85, 80, 88, 100]\ng.data :Philip, [90, 34, 23, 12, 78, 89, 98, 88]\ng.data :Arthur, [5, 10, 13, 11, 6, 16, 22, 32]\ng.write('exciting.png')\n```\n\n## Examples\n\nYou can find many examples in the [test](https://github.com/topfunky/gruff/tree/master/test)\ndirectory along with their resulting charts in the\n[output](https://github.com/topfunky/gruff/tree/master/test/output) directory.\n\nYou can find older examples here:  http://nubyonrails.com/pages/gruff\n\n### Accumulator bar chart\n\n![Accumulator bar chart](https://raw.github.com/topfunky/gruff/master/test/output/accum_bar.png)\n\n### Area chart\n\n![Area chart](https://raw.github.com/topfunky/gruff/master/test/output/area_keynote.png)\n\n### Bar chart\n\n![Bar chart](https://raw.github.com/topfunky/gruff/master/test/output/bar_rails_keynote.png)\n\n### Bezier chart\n\nIn progress!\n\n![Bezier chart](https://raw.github.com/topfunky/gruff/master/test/output/bezier_3.png)\n\n### Bullet chart\n\nIn progress!\n\n![Bullet chart](https://raw.github.com/topfunky/gruff/master/test/output/bullet_greyscale.png)\n\n### Dot chart\n\n![Dot chart](https://raw.github.com/topfunky/gruff/master/test/output/dot.png)\n\n### Line chart\n\n![Line chart](https://raw.github.com/topfunky/gruff/master/test/output/line_theme_rails_keynote_.png)\n\n### LineXY chart\n\n![LineXY chart](https://raw.github.com/topfunky/gruff/master/test/output/line_xy.png)\n\n### Net chart\n\n![Net chart](https://raw.github.com/topfunky/gruff/master/test/output/net_wide_graph.png)\n\n### Pie chart\n\n![Pie chart](https://raw.github.com/topfunky/gruff/master/test/output/pie_pastel.png)\n\n### Scatter chart\n\n![Scatter chart](https://raw.github.com/topfunky/gruff/master/test/output/scatter_basic.png)\n\n### Side bar chart\n\n![Side bar chart](https://raw.github.com/topfunky/gruff/master/test/output/side_bar.png)\n\n### Side stacked bar chart\n\n![Side stacked bar chart](https://raw.github.com/topfunky/gruff/master/test/output/side_stacked_bar_keynote.png)\n\n### Spider chart\n\n![Spider chart](https://raw.github.com/topfunky/gruff/master/test/output/spider_37signals.png)\n\n### Stacked area chart\n\n![Stacked area chart](https://raw.github.com/topfunky/gruff/master/test/output/stacked_area_keynote.png)\n\n### Stacked bar chart\n\n![Stacked bar chart](https://raw.github.com/topfunky/gruff/master/test/output/stacked_bar_keynote.png)\n\n\n## Documentation\n\nhttp://www.rubydoc.info/github/topfunky/gruff/frames\n\n\n## Contributing\n\n### Source\n\nThe source for this project is now kept at GitHub:\n\nhttp://github.com/topfunky/gruff\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n"
Sparkline library for Ruby b'# Sparklines\n\nA library for generating small sparkline graphs from Ruby. Use it in desktop apps or with Ruby on Rails. \n\n## Source\n\nhttp://github.com/topfunky/sparklines\n\n## Other info\n\nhttp://nubyonrails.com/pages/sparklines\n\n## Authors\n\nGeoffrey Grosenbach\nboss@topfunky.com\nhttp://nubyonrails.com/pages/sparklines\n'
A simple tool that parses application/davmount+xml files (rfc 4709) 
Ruby code analysis tool for verifying mock object assumptions in tests b'= Synthesis\n\n== A tool for verifying mock object assumptions in tests\n\n== Installation\n\n sudo gem i synthesis\n\n== Download\n\nSynthesis RubyForge page ( http://rubyforge.org/projects/synthesis )\n\n== Dependencies\n\nSynthesis\'s core doesn\'t have any dependencies. \n\nWhen used with the Mocha adapter, it will depend on the Mocha[http://mocha.rubyforge.org] library.\n\nWhen used with the RSpec adapter, it will depend on the RSpec[http://rspec.info/] library.\n\n== Usage\n\nSynthesis can be used through its Rake task. It has two adapters: Mocha (with Test::Unit, etc) and RSpec. If +adapter+ is not specified, the Mocha adapter will be used by default. \n\nBy default, Synthesis outputs to +STDOUT+, but output can be redirected to alternative IO streams.\n\nSynthesis can be setup to ignore certain classes or modules when collecting expectations for verification.\n\nIf +pattern+ is not specified, it will default to <tt>test/**/*_test.rb</tt>\n\nAs of version 0.2.0, Synthesis has a +DOT+ formatter which, when used, will output text in the DOT graph description language, producing system visualizations as specified by the simulated interactions in the system\'s tests. The output of the +DOT+ formatter can be used with tools like Graphviz( http://www.graphviz.org/ ). The +DOT+ formatter depends on the +parse_tree+ and +sexp_processor+ libraries.\n\n== Usage examples\n\nTo use with Test::Unit and Mocha, ignoring Array and Hash:\n\n  require "synthesis/task"\n\t\n  Synthesis::Task.new do |t|\n    t.pattern = \'test/unit/**/*_test.rb\'\n    t.ignored = [Array, Hash]\n  end\n\nTo use with RSpec, running all specs in the <tt>spec</tt> directory:\n\n  require "synthesis/task"\n\n  Synthesis::Task.new do |t|\n    t.adapter = :rspec\n    t.pattern = \'spec/**/*_spec.rb\'\n  end\n\nTo to a file:\n\n  require "synthesis/task"\n\t\n  Synthesis::Task.new do |t|\n    t.out = File.new "synthesis.test.txt", "a"\n  end\n  \nTo output a DOT graph, first make sure you have sexp_processor installed:\n\n  sudo gem install sexp_processor\n\nThen, to output a file called "synthesis.dot", do (if formatter_out is not specified, the default ouput is STDOUT):\n\n  require "synthesis/task"\n\t\n  Synthesis::Task.new do |t|\n    t.formatter = :dot\n    t.formatter_out = "synthesis.dot"\n  end\n\nTo use Synthesis with Rails:\n\n  require "synthesis/task"\n\n  Synthesis::Task.new do |t|\n    RAILS_ENV = "test"\n    Rake::Task[\'environment\'].invoke # This loads the Rails environment, which may make your build slower. Use only if needed\n    t.pattern = \'test/**/*_test.rb\'\n  end\n\n== Utilities\n\n=== mock_instance\n\n  require "synthesis/util/mock_instance"\n  foo_mock = Foo.mock_instance(arg_one, arg_2)\n\nThis is equivalent, but without calling the real <tt>initialize</tt> method, to:\n\n  foo_mock = Foo.new\n  Foo.expects(:new).with(arg_one, arg_two).returns(foo_mock)\n\nOr, in the case of RSpec, it is equivalent to:\n\n  foo_mock = Foo.new\n  Foo.should_receive(:new).with(arg_one, arg_two).and_return(foo_mock)\n\nEither <tt>"mocha_standalone"</tt> or <tt>"spec/mocks"</tt> need to be required before using <tt>mock_instance</tt>.\n\n== Git\n\nPublic clone URL: git://github.com/gmalamid/synthesis.git\n\n== Contributors\n\nDanilo Sato, Paul Nasrat, Jerome Riga\n\n== Discuss\n\nhttp://groups.google.com/group/synthesized-testing\n\n\n== Related reading\n\nhttp://nutrun.com/weblog/using-synthesis-with-testunit-and-mocha\n'
Basic module for configuring apache via puppet. Debian/Ubuntu-specific at the moment, but patches are welcome. b'# Apache2 Recipe #\napache2 -- v0.4 by Sam Quigley <sq@wesabe.com>\n\nBasic module for configuring apache via puppet.  Debian/Ubuntu-specific at\nthe moment, but patches are welcome.\n\nBased in part on code by Tim Stoop <tim.stoop@gmail.com> and \nDavid Schmitt <david@schmitt.edv-bus.at>\n\n## Configuration ##\n\nThis module installs apache2 from packages and promptly overwrites the default\nconfiguration with one that does nothing other than include various \ndirectories:\n\n* /etc/apache2/mods-enabled/\n* /etc/apache2/conf.d\n* /etc/apache2/sites-enabled/\n\nDefines are provided to allow recipes and child classes to interact with these\ndirectories -- see below.\n\nAn additional class, `apache2_debian`, is provided which attempts to mimic\nthe default configuration of a freshly-installed debian apache2 package.\n\nA single global configuration variable is available, `$apache2_mpm`, which\ncontrols which of the mpm packages are installed.  Its possible values are:\n\n* \'event\':  Use the event driven model (experimental)\n* \'prefork\':  Traditional \n* \'worker\': High speed threaded model\n\n\'worker\' is the default.\n\nSee the apache2::debian and apache2::basic subclasses for examples of how to \nuse and configure this class.  Note that these do *NOT* install site \ndefinitions -- so simply including them in a node definition won\'t work...\n\n### `apache2::config` ###\n\n`apache2::config` installs a configuration snippet in conf.d.  Takes the following options:\n\n* `name`: the name of the config snipppet  [namevar]\n* `ensure`: typically set to "present" or "absent", but any value legal \nfor a file resource can be used.  Defaults to "present"\n* `content`: set this to the text of the snippet -- eg, through \ntemplate().  Defaults to `template("apache2/$name.conf.erb")`, which is\nunlikely to be what you want.\n* `order`: specifies the load order for this config snippet.  the snippet \nwill end up in `/etc/apache2/conf.d/$order-$name.conf`, and apache will load \nfiles in alphanumeric order.  Defaults to "500"\n* `require`: if set, this will require that a package of the given name exists\nbefore evaluating the rest of the config definition.  It does not currently\nremove the package, even if ensure is set to absent.\n\n### `apache2::module` ###\n\n`apache2::module` enables an apache module.  It does *NOT* currently install\none for you, except through the "require" argument -- see below.  \nOptions are:\n\n* `name`: name of the module.  A file with the name \n`mods-available/$name.load` is expected to exist in the apache2 directory\n* `ensure`: can be "present" or "absent"\n* `require`: if set, this will require that a package of the given name exists\nbefore evaluating the rest of the module definition.  It does not currently\nremove the package, even if ensure is set to absent.\n\n### `apache2::site` ###\n\n`apache2::site` enables an apache site.  Options are:\n\n* `name`: name of the site.  A file with the name \n`sites-available/$name` is expected to exist in the apache2 directory\n* `ensure`: can be "present", "installed", or "absent"\n* `require`: if set, this will require that a package of the given name exists\nbefore evaluating the rest of the site definition.  It does not currently\nremove the package, even if ensure is set to absent.\n* `content`: set this to the text of the site definition -- eg, through \ntemplate().  If unset, the module will simply ensure that a file named \n"/etc/apache2/sites-available/$name" exists\n\n## Example ##\n\nSee the code for the apache2_debian subclass for an example of how to use\nthis module.\n\n## To Do ##\n\n* apache2::{module,config,site} should really be native types.\n* The configuration of apache2::basic is essentially arbitrary, based on \nwhat I needed to override at the moment. Some logic would probably be \nhelpful.\n\n## Changes ##\n\n* stop explicitly importing stuff from manifests/classes; rely on autoload instead\n* add `site_include` definition, similar to `site`\n* add content property to site definition, similar to config\n* allow ensure=>installed for sites -- required moving site installation code \nto a new definition.\n* added apache2::debian and apache2::basic subclasses\n* added `config` definition, similar to the existing `site` and `module` defs,\nwhich will include given config snippets\n* Removed port configuration (via /etc/apache2/ports.conf) -- Listen \ndirectives make more sense in the individual site definitions, at least for\nSSL, load-balanced, and proxied environments...\n* Removed DavidS\' nagios and munin stuff; will probably re-add later.\n* Removed the `no_default_site` subclass and made it the default behavior.  No\none _really_ wants to serve their distro\'s default page...\n* Removed the `apache2_ssl business` -- with Listen configured in the site\ndefs themselves, it\'s not really necessary\n'
A replacement for procmail with sane syntax, and an email-handling library b'NAME\n    gurgitate-mail - an easy-to-use mail filter\n\nSYNOPSIS\n    gurgitate-mail [-s SENDER] [-f RULESFILE] [-h]\n\nDESCRIPTION\n    "gurgitate-mail" is a program which reads your mail and filters it\n    according to the .gurgitate-rules.rb file in your home directory. The\n    configuration file uses Ruby syntax and is thus quite flexible.\n\n    It\'s generally invoked either through your .forward file:\n\n        "|/path/to/gurgitate-mail"\n\n    Or through your .procmailrc file:\n\n        :0:\n        | /path/to/gurgitate-mail\n\n    Alternatively, if you\'re the sysadmin at your site, or your sysadmin is\n    friendly, you can use gurgitate-mail as a local delivery agent. For\n    postfix, put\n\n        mailbox_command=/opt/bin/gurgitate-mail\n\n    in /etc/postfix/main.cf. If you use any other MTA, and configure\n    gurgitate-mail as a local delivery agent, please tell me how! I want to\n    include this in the documentation.\n\nCOMMAND LINE OPTIONS\n    gurgitate-mail lets you alter its default behaviour with some\n    command-line flags:\n\n    -s SENDER\n         Sets the envelope sender to SENDER.\n\n    -f RULESFILE\n         Uses RULESFILE as the source for gurgitate-rules rather than the\n         default /$HOME/.gurgitate-rules.\n\n    -h   Outputs a quick summary of the options available.\n\nCONFIGURATION FILES\n    There are three configuration files used by gurgitate-mail: two are\n    system-wide, and the third, is the user rules file.\n\n    The two system-wide configuration files are /etc/gurgitate-rules and\n    /etc/gurgitate-rules-default. These are processed before and after the\n    user rules, respectively.\n\n    /etc/gurgitate-rules is used to handle system-wide filtering needs:\n    setting the default mailbox style to Maildir rather than the default\n    MBox, setting the spool directory, things like that.\n\n    The user configuration file is $HOME/.gurgitate-rules (or,\n    alternatively, $HOME/.gurgitate-rules.rb. Either work). You put your own\n    rules here. If the user configuration file doesn\'t encounter a "return"\n    during processing, then the additional rules contained in\n    /etc/gurgitate-rules-default are run. If that also doesn\'t return, then\n    mail messages are saved into the default mail spool location.\n\n    If the "-f" option is used on the commandline, then the file specified\n    will be used and the default rules will not. The "-f" option can be used\n    more than once:\n\n        gurgitate-mail -f test-rules -f additional-rules\n\nCONFIGURATION PARAMETERS\n    There are several parameters that you can set to change the way that\n    gurgitate-mail behaves. You set a config parameter by saying, for\n    instance:\n\n        sendmail "/usr/sbin/sendmail"\n\n    which sets the "sendmail" parameter to "/usr/sbin/sendmail".\n\n    maildir\n         The directory you want to put mail folders into. This defaults to\n         $HOME/Mail.\n\n    logfile\n         Where you went gurgitate-mail\'s log messages to go to. The standard\n         location for this is $HOME/.gurgitate.log\n\n    sendmail\n         The full path to the sendmail program, used to deliver mail. This\n         can be any program that takes as its parameters the list of\n         addresses to deliver mail to, and that takes a mail message on\n         standard input.\n\n    homedir\n         The full path of your home directory. This defaults to whatever\n         your actual home directory is.\n\n    spooldir\n         The path where the system\'s mail spools goes to. This defaults to\n         "/var/spool/mail". On a Maildir system, this should be set to the\n         same as "homedir".\n\n    spoolfile\n         The mail spool file component of the full path of your mail spool.\n         This is generally your username. Maildir users should set this to\n         "Maildir".\n\n    folderstyle\n         The style of folders you prefer. This can be (at the moment) either\n         MBox or Maildir.\n\nFILTER RULES\n    The filter rules are a series of Ruby statements, with the following\n    methods and variables available:\n\n  Variables\n    from This contains the envelope "from" address of the email message.\n         (Note that this isn\'t necessarily the same as the contents of the\n         "From:" header)\n\n    headers\n         This is an object containing the headers of the message. There are\n         several methods that come with this object:\n\n    body This contains the body of the email message. As of yet, there\'s\n         nothing really interesting which you can do with this, apart from\n         assigning to it; you can rewrite the body of an email message this\n         way. Dealing with attachments is planned for a future release of\n         "gurgitate-mail".\n\n    maildir\n         The directory which contains the folders, used by the "save" method\n         when you specify a folder as "=folder" (like Elm). Defaults to\n         "$HOME/Mail".\n\n    homedir\n         Your home directory. Read-only.\n\n    logfile\n         The location of the "gurgitate-mail" logfile. If set to "nil", then\n         no logging is done. Defaults to "$HOME/.gurgitate.log".\n\n    sendmail\n         The location of the "sendmail" program. Used by the "forward"\n         method. Defaults to "/usr/lib/sendmail".\n\n    spoolfile\n         The location of the mail spool. Read-only.\n\n  Methods\n    matches(name(s),regex)\n         Returns "true" if the header "name" matches the regular expression\n         "regex". If "name" is an array of header names, then it returns\n         true if at least one of the headers matches. Useful for testing\n         whether both "To:" and "Cc:" headers match.\n\n    from Returns the envelope "from" address of the email message. Note that\n         this is the same as the bare "from".\n\n    to   Returns a HeaderBag (a kind of array) with the contents of the "To"\n         and the "Cc" headers.\n\n    to_s As per Ruby convention, returns all the headers as a "String"\n         object.\n\n    save(mailbox)\n         This saves the message to a mailbox. You can specify the mailbox as\n         a word with an = sign in front of it, in which case it puts it into\n         "maildir". If you don\'t use the =name format, then you need to\n         specify an absolute pathname. If it can\'t write the message to the\n         file you request it to, it\'ll attempt to write it to "spoolfile".\n\n    forward(address)\n         This forwards the email message to another email address.\n\n    pipe(program)\n         This pipes the message through "program". "pipe" returns the exit\n         code of the program that the message was piped through.\n\n    filter(program)\n         This pipes the message through "program" and returns a new\n         Gurgitate object containing the filtered mail. (This is handy for\n         external filters which modify email like, for example,\n         SpamAssassin, which adds a spam-score header.)\n\n         You can also say\n\n             filter(program) do\n                 # code here\n             end\n\n         and it yields the newly-created Gurgitate object to the block.\n\n    headers\n         This returns the headers as an object of their own. This object has\n         its own methods:\n\n         headers[*headernames]\n              This returns a HeaderBag (a subclass of array) containing the\n              headers you asked for. You can then use the =~ operator on\n              this result to match the RHS regex with everything in the\n              HeaderBag.\n\n              You can change a header\'s value with "headers[name]=newvalue".\n\n         headers.match(name,regex)\n              Matches the header with the name "name" against the regex.\n              This is the same as headers[name] =~ /regex/.\n\n         headers.matches(names,regex)\n              Matches the headers with the names "names" against the regex.\n              This is the same as headers[*names] =~ /regex/.\n\n         headers.from\n              Returns the envelope from. You can change this with\n              "headers.from=newaddress" too.\n\n    return\n         This tells "gurgitate-mail" to stop processing the email message.\n         If you don\'t use "return", then "gurgitate-mail" will continue\n         processing the same mail again with the next rule. If there isn\'t a\n         "return" at the end of gurgitate-rules.rb, then "gurgitate-mail"\n         will save the email message in the normal mail spool.\n\n    log(message)\n         This writes a log message to the log file.\n\nSIMPLE EXAMPLES\n    Here are some examples of "gurgitate-mail" rules, with explanations:\n\n        if from =~ /ebay.com/ then save("=ebay"); return; end\n\n    Any email from eBay (automatic end-of-auction notifications, for\n    example, and outbid notices) gets filed into the "ebay" folder.\n\n        if from =~ /root@/ then save("=root"); return; end\n\n    Any email from root (at any host) gets filed into a special folder.\n    Useful for sysadmins monitoring crontab email.\n\n        if headers.matches(["To","Cc"],"webmaster@") then\n            save("=webmaster")\n            return\n        end\n\n    Any email with a To: or Cc: line of "sysadmin" is saved to a "sysadmin"\n    folder. Useful for people with multiple role accounts redirected to\n    their address.\n\n        if headers["Subject"] =~ /\\[SPAM\\]/ then\n            save("=spam")\n            return\n        end\n\n    This is a different syntax for matching patterns against headers. You\n    can also match multiple headers in the square brackets.\n\n        if headers["Subject","Keywords"] =~ /a bad word/ then\n            save("=swearing")\n            return\n        end\n\n    Searches for "a bad word" in the Subject and Keywords headers, and if\n    it\'s there, saves the email in the "swearing" folder.\n\n        if headers.matches(["To","Cc"],"mailing-list@example.com") then\n            pipe("rcvstore +mailing-list")\n            return\n        end\n\n    Any email to a mailing list is piped through "rcvstore" to store it into\n    an MH folder.\n\n    That\n\n        headers.matches(["To","Cc"],/regex/)\n\n    idiom happens often enough that there\'s a shorthand for it:\n\n        if to =~ /mailing-list@example.com/ then\n            pipe("rcvstore +mailing-list")\n            return\n        end\n\n    Pipes the mail to the mailing list through "rcvstore".\n\nADVANCED EXAMPLES\n    Here are some slightly more clever examples to give you an idea of what\n    you can do with "gurgitate-mail". Let\'s suppose you have an email\n    whitelist in a file called $HOME/.friends, so you can determine whether\n    some email is likely to be spam or not.\n\n    Then if someone on your whitelist sends you email, then you\n    automatically save that into the "inbox" folder:\n\n        friends=homedir+"/.friends"\n        if FileTest.exists?(friends) and FileTest.readable?(friends) then\n            File.new(friends).each do |friend|\n                if from =~ friend.chomp then\n                    log "Mail from friend "+friend.chomp\n                    save("=inbox")\n                    return\n                end\n            end\n        end\n\n    Okay, if someone sends you email, and it\'s addressed specifically to you\n    (and gurgitate-mail hasn\'t caught it in another form already), then it\n    might or might not be spam: put it into a "grey" folder:\n\n        my_addresses= [ /me@example\\.com/i,\n                        /me@example\\.org/i,\n                        /me@example\\.net/i];  # I have three email addresses\n        my_addresses.each do |addr|\n            if headers.matches(["To","Cc"],addr) then\n                save("=possibly-not-spam")\n                return\n            end\n        end\n\n    And after that, if it\'s not from someone you know, and it\'s not\n    addressed to your email address either, then it\'s probably save to\n    assume that it\'s spam:\n\n        save("=spam")\n        return\n\n    This can be improved by using a Bayesian filter, though; for example,\n    Eric Raymond\'s bogofilter program (http://bogofilter.sourceforge.net)\n    can be automatically trained and used with the help of the\n    white/grey/black distinctions. Taking the example above, I\'ll adjust it\n    by adding in calls to bogofilter:\n\n        friends=homedir+"/.friends"\n        if FileTest.exists?(friends) and FileTest.readable?(friends) then\n            File.new(friends).each do |friend|\n                if from =~ friend.chomp then\n                    log "Mail from friend "+friend.chomp\n                    pipe("bogofilter -h")  # <-- LINE ADDED HERE\n                    save("=inbox")\n                    return\n                end\n            end\n        end\n\n    "bogofilter -h" trains bogofilter that mail from whitelisted-people is\n    not to be considered spam. Okay, at the end of the .gurgitate-rules,\n    change\n\n        save("=spam")\n        return\n\n    to\n\n        save("=spam")\n        pipe("bogofilter -s")\n        return\n\n    This trains "bogofilter" that anything which doesn\'t pass the rest of\n    the filter should be considered spam. Now for the interesting bit:\n    Change the bit between these to use "bogofilter" to decide whether email\n    is to be considered spam or not:\n\n        my_addresses= [ /me@example\\.com/i,\n                        /me@example\\.org/i,\n                        /me@example\\.net/i];  # I have three email addresses\n        my_addresses.each do |addr|\n            if headers.matches(["To","Cc"],addr) then\n                if pipe("bogofilter")==1\n                then\n                    log("bogofilter suspects it might not be spam")\n                    save("=possibly-not-spam")\n                else\n                    log("bogofilter thinks it\'s probably spam")\n                    save("=spam")\n                end\n                return\n            end\n        end\n\n    "bogofilter" has an exit code of "1" if it thinks the message is not\n    spam, and "0" if it thinks the message is spam.\n\n    Hopefully this should give you an idea of the kinds of things that you\n    can use "bogofilter" for.\n\nAUTHOR\n    Dave Brown <gurgitate-mail@dagbrown.com>\n\n'
brendan's ENhancements To Rails b"= entrails =\n\n* http://github.com/brendan/entrails\n\n== DESCRIPTION:\n\nThis is a collection of extensions to Rails internals that I've found to be absolutely indispensible\nsince I implimented them.\n\nThe real action is happening in the following two files at the moment:\nhttp://github.com/brendan/entrails/tree/master/lib/entrails/active_record/better_conditions.rb\nhttp://github.com/brendan/entrails/tree/master/lib/entrails/active_record/find_by_association.rb\n\n== FEATURES/PROBLEMS:\n\n* FIX (list of features or problems)\n\n== SYNOPSIS:\n\n  FIX (code sample of usage)\n\n== REQUIREMENTS:\n\n* FIX (list of requirements)\n\n== INSTALL:\n\n* sudo gem install brendan-entrails -s http://gems.github.com\n* require 'entrails' in your rails app\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Brendan Baldwin\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
Uber version of rspec_haml_scaffold, uber version of make_resourceful as well b'Sexy Scaffold\n============\n\n\nbetter than rspec_haml_scaffold\n- support for model values upon generation, creates fixtuers as well\n- new dependancy for make_resourceful\n\nbetter than make_resourcesful\n- creates scaffolded specs for controllers, models and views\n- uses sexy migrations for models\n\nnotes\nwhen using script/destroy on nested controllers you must destroy the nest like\n\nruby script/destroy rest_scaffold yoda/bob\n\n\n\nCopyright (c) 2008 [CitrusByte], released under the MIT license\nhttp://www.citrusbyte.com\n'
a quite basic shoes app for displaying combinations of strings from a given alphabet 
calculates the steps needed to solve a "jumping peg" puzzle 
The Ruby Implementation of SWX RPC b'= SWX Ruby 0.7\n\nPrimary Repo: http://github.com/meekish/swxruby\n\n=== What is SWX?\n\nSWX is the native data format for the Flash Platform.\n\nSWX RPC is a remote procedure call protocol encoded in SWX and a viable alternative to XML and Flash Remoting. It\'s simple enough that you can get up and running with it in about five minutes. SWX RPC is perfect for building mashups (with easy-to-use APIs for Flickr, Twitter, and others), mobile applications (Flash Lite 2.0 and 2.1), and other data-driven Flash sites and applications. Official web site at http://swxformat.org\n\n=== What is SWX Ruby?\n\nSWX Ruby is the Ruby implementation of SWX RPC. It allows Rubyists to leverage their Ruby skills to build data-driven Flash applications using the wonderfully simple SWX data format. The current beta version assembles AVM1 SWF files (compatible with Flash 8 and below). By its 1.0 release, SWX Ruby will also assemble AVM2 SWF files. Official web site at http://swxruby.org\n\n=== Installation\n\n==== Gem\n\ngem install swxruby\n\n  Note: The SWX Ruby gem declares \'json_pure\' as a dependency. json_pure\n  is the pure Ruby variant of the JSON gem. If you have a C compiler and \n  would like better performance then do \'gem install json\'\n\n==== Rails plugin\n\nAfter installing the gem, do:\n\n  swxruby --rails PATH_TO_ROOT_OF_YOUR_RAILS_APP\n\nThis will unpack a plugin into your Rails app. For further explanation of the files installed, see \'Rails Usage\' below.\n\n<b>Living on the Edge:</b> The Rails init script (init.rb) sits in the root of the SWX Ruby tree, thus you can simply throw the git HEAD into vendor/plugins/swxruby to run the plugin on edge.\n\n  git clone git://github.com/meekish/swxruby.git vendor/plugins/swxruby\n  ruby vendor/plugins/swxruby/install.rb\n\n=== Gem Usage (For Merb, Camping, Sinatra, et al.)\n\nRequire the SWX Ruby gem\n\n  require \'rubygems\'\n  require \'swxruby\'\n\nDefine a service class in the SwxServiceClasses namespace\n\n  module SwxServiceClasses\n    class Simple\n      def echo_data(data)\n        data\n      end\n    end\n  end\n  \nStart making calls to SwxGateway#process\n\n  @swx_bytecode = SwxGateway.process(:serviceClass => \'Simple\', :method => \'echo_data\', :args => \'Hello World!\', :debug => true)\n  # => Returns a binary string of SWX bytecode containing the result of SwxServiceClasses::Simple.new.echo_data(\'Hello World!\')\n  \nUse your framework\'s preferred method to wrap the swx bytecode in a file shell and send it on its way. Here\'s how Rails and Merb do it:\n\n  send_data(@swx_bytecode, :filename => \'data.swf\', :type => \'application/swf\', :disposition => \'inline\')\n  \n==== Example of Gem Usage\n\nHere\'s a full Merb app (this and a Flash client are included in examples/standalone/)  \n\n  # standalone.rb\n  \n  require \'rubygems\'\n  require \'swxruby\'\n\n  # Service Class\n  class SwxServiceClasses::HelloMerb\n    def just_say_the_words\n      \'Hello from Merb!\'\n    end\n  end\n\n  # Merb Application\n  Merb::Router.prepare { |r| r.match(\'/\').to(:controller => \'swx_ruby\', :action =>\'gateway\') }\n\n  class SwxRuby < Merb::Controller\n    def gateway\n      send_data(SwxGateway.process(params), :filename => \'data.swf\', :type => \'application/swf\', :disposition => \'inline\')\n    end\n  end\n  \n  # Fire it up with \'merb -I standalone.rb\' and you\'re off!\n  \n=== Rails Plugin Usage\n\nWhen running as a Rails plugin, SWX Ruby will look for your service classes in\nRAILS_ROOT/app/services. Simply create standard Ruby classes and drop them\nin this folder. SWX Ruby will instantiate your service class (while forcing\nit into the SwxServiceClasses namespace), call the specified method, and\nsend the response back to the Flash Player.\n\nTake a peek at services/hello_world.rb for a working service class example.\nAlright, alright, I\'ll just show it to you here:\n\n  # hello_world.rb----------------------------------------\n  # Class and method names follow standard Ruby convention\n  class HelloWorld\n  \t# Service class methods are instance methods.\n  \tdef just_say_the_words\n  \t\t\'Hello World!\'\n  \tend\n  end\n  #-------------------------------------------------------\n\nHere\'s an example to call HelloWorld#just_say_the_words from Flash \n(place a MovieClip on stage with an instance name of \'loader\' and\nfire up your Rails development server):\n\n  //------------------------------------------------------\n  loader.serviceClass = "HelloWorld";\n  // Method names follow ActionScript convention \n  // (converted to underscored server-side)\n  loader.method = "justSayTheWords";\n  loader.debug = true;\n  loader.loadMovie("http://localhost:3000/swx", "POST");\n\n  function onEnterFrame() {\n   // Will output \'Hello World!\' once the SWX file is loaded.\n   trace(loader.result);\n  }\n  //------------------------------------------------------\n\nWhen you\'re ready for some robust ActionScriptery, head to \nhttp://swxformat.org/download to grab the SWX ActionScript library.\n\nOh yeah, you may return ActiveRecord objects from your service classes; \nSWX Ruby will happily serialize them for you. Go ahead, give it a try!\n\nNOTE: You may notice some Security Sandbox Violations when testing the example\nabove in the Flash IDE. Rest assured, this is OK. Visit \nhttp://swxformat.org/132 for further explanation.\n\n=== Get In Touch\n\nPlease post bug reports/suggestions to http://groups.google.com/group/swxruby\n\n'
An unmaintained and probably broken Ruby blog engine. 
sqlite patch to include constraint information in error messages b'Currently sqlite supports check constraints, but internally it just ANDs them\ntogether into a single expression.  Thus, it cannot keep track of which\nconstraint failed.  These patches modify sqlite to keep track of the individual\ncheck constraints and their names, and then include them in error messages.\n\nOld behavior:\n\n    sqlite> insert into mytable (a) values\n       ...> (\'some value that violates a check constraint named foo\');\n    SQL error: constraint failed\n\nNew behavior:\n\n    sqlite> insert into mytable (a) values\n       ...> (\'some value that violates a check constraint named foo\');\n    SQL error: constraint failed: foo\n\nIf your check constraint is unnamed, then it gives you the expression:\n\n    sqlite> insert into mytable (a) values\n       ...> (\'some value that violates an unnamed check constraint\');\n    SQL error: constraint failed: a in (1, 2, 3)\n\nThese additional constraint messages do make it up the chain into e.g. Python\nexceptions.  This allows you to keep your data integrity logic confined to the\ndatabase and out of your application code.\n\nDisclaimer: this code has not been tested to the high standard that the\nofficial sqlite code seems to be.  But it "werks fer me" and I\'ve used the code\nfor months on a website with moderate traffic.\n\nThis document has been placed in the public domain.\n\nNick Welch\nmack@incise.org\n'
Dead simple Rails localization. b'= Gibberish\n\nYet another localization library.  Maybe with the most agreeable API?\n\n= Usage\n\nIt\'s simple.  Your default language, by default, is English (:en).\n\n  >> "Hey there!"[:hey]\n  => "Hey there!"\n\nGibberish looks in RAILS_ROOT/lang/*.yml for translation files.  Say you have RAILS_ROOT/lang/es.yml, \nright?  Gibberish will detect that you know about the :es language and will serve up translations\ndefined in that file if requested to do so.\n\nHere\'s a real simple example file (it\'s just "key: translation"):\n\n  $ cat lang/es.yml\n  hey: \xef\xbf\xbdHey all\xef\xbf\xbd!\n\nAnd, as follows, a real simple example session:\n\n  >> "Hey there!"[:hey]\n  => "Hey there!"\n  >> Gibberish.current_language\n  => :en\n  >> Gibberish.current_language = :es\n  => :es\n  >> "Hey there!"[:hey]\n  => "\xef\xbf\xbdHey all\xef\xbf\xbd!"\n  >> Gibberish.current_language = nil\n  => nil\n  >> "Hey there!"[:hey]\n  => "Hey there!"\n\nIt even works with simple interpolation:\n\n  >> "Hey, {name}!"[:hey_name, \'Chris\']   \n  => "Hey, Chris!"\n  >> "{name} is from {place}"[:hey_place, \'Chris\', \'the Dreamworld\']\n  => "Chris is from the Dreamworld"\n\nNotice we don\'t use hashes (#) like normal Ruby interpolation.  Also, the names of the variables\nin the brackets don\'t really mean much.  Interpolation is done in order -- the first argument replaces\nthe first variable in brackets, the second the second, etc.\n\nInterpolation can also be done via hash:\n\n  >> "{name} is from {place}"[:hey_place, { :place => \'Gotham City\', :name => \'Batman\' }]\n  => "Batman is from Gotham City"\n\nThis of course works with your translations:\n\n  $ cat lang/es.yml\n  hey: \xef\xbf\xbdHey all\xef\xbf\xbd!\n  hey_name: \xef\xbf\xbdHola {name}!\n\n  >> "Hey, {name}!"[:hey_name, \'Chris\']   \n  => "Hey, Chris!"\n  >> Gibberish.current_language = :es\n  => :es\n  >> "Hey, {name}!"[:hey_name, \'Crist\xef\xbf\xbdbal\']   \n  => \xef\xbf\xbdHola Crist\xef\xbf\xbdbal!\n\nNeat.  What other methods do we get?\n\nThe classic around_filter:\n\n  class ApplicationController < ActionController::Base\n    around_filter :set_language\n\n  private\n    def set_language\n      Gibberish.use_language(session[:language]) { yield }\n    end\n  end\n\nFor the duration of the block, :es is set as the language of choice.  After the block is run everything\nreturns to normal.  Rad.\n\nFinally, some checking methods, if you need them:\n\n  >> Gibberish.default_language?\n  => true\n  >> Gibberish.current_language = :es\n  => :es\n  >> Gibberish.current_language \n  => :es\n  >> Gibberish.default_language?\n  => false\n\nLanguages are loaded by default at Rails startup.  In dev mode, language YAML files are reloaded when\nmodified.  No need to reboot the server.\n\n  >> Gibberish.load_languages!\n  => [:es, :fr, :de, :kl]\n  >> Gibberish.languages\n  => [:es, :fr, :de, :kl]\n\nMore as it\'s needed.\n\n= Warning\n\nBy default, Ruby returns nil when a symbol is passed to String\'s [] method.  Some of Rails, it seems, depends\non this behavior.  Yes, I am changing !!core Ruby behavior!!  The humanity!\n\nTo deal with this assumption, Gibberish has a reserved_keys array.  It, by default, contains :limit (so Rails\nmigrations don\'t explode on you.)  To add to this array, just pass it more keys:\n\n  >> Gibberish.add_reserved_key :another_key\n  => [:limit, :another_key]\n  >> Gibberish.add_reserved_keys :more, :keys\n  => [:limit, :another_key, :more, :keys]\n\nYou\'ve been warned.  It really shouldn\'t affect you, though.\n\n>> Chris Wanstrath\n=> chris[at]ozmm[dot]org\n'
Webrat - Ruby Acceptance Testing for Web applications b'= Webrat - Ruby Acceptance Testing for Web applications\n\n  http://rubyforge.org/projects/webrat\n  http://github.com/brynary/webrat\n\n* mailto:bryan@brynary.com\n* mailto:seth@mojodna.net\n\n== DESCRIPTION:\n\nWebrat lets you quickly write robust and thorough acceptance tests for a Ruby\nweb application. By leveraging the DOM, it can run tests similarly to an\nin-browser testing solution without the associated performance hit (and\nbrowser dependency). The result is tests that are less fragile and more\neffective at verifying that the app will respond properly to users.\n\nWhen comparing Webrat with an in-browser testing solution like Watir or\nSelenium, the primary consideration should be how much JavaScript the\napplication uses. In-browser testing is currently the only way to test JS, and\nthat may make it a requirement for your project. If JavaScript is not central\nto your application, Webrat is a simpler, effective solution that will let you\nrun your tests much faster and more frequently. (Benchmarks forthcoming.)\n\nInitial development was sponsored by EastMedia (http://www.eastmedia.com).\n\n== SYNOPSIS:\n\n  def test_sign_up\n    visits "/"\n    clicks_link "Sign up"\n    fills_in "Email", :with => "good@example.com"\n    selects "Free account"\n    clicks_button "Register"\n    ...\n  end\n  \nBehind the scenes, this will perform the following work:\n\n1. Verify that loading the home page is successful\n2. Verify that a "Sign up" link exists on the home page\n3. Verify that loading the URL pointed to by the "Sign up" link leads to a\n   successful page\n4. Verify that there is an "Email" input field on the Sign Up page\n5. Verify that there is an select field on the Sign Up page with an option for\n   "Free account"\n6. Verify that there is a "Register" submit button on the page\n7. Verify that submitting the Sign Up form with the values "good@example.com"\n   and "Free account" leads to a successful page\n\nTake special note of the things _not_ specified in that test, that might cause\ntests to break unnecessarily as your application evolves:\n\n* The input field IDs or names (e.g. "user_email" or "user[email]"), which\n  could change if you rename a model\n* The ID of the form element (Webrat can do a good job of guessing, even if\n  there are multiple forms on the page.)\n* The URLs of links followed\n* The URL the form submission should be sent to, which could change if you\n  adjust your routes or controllers\n* The HTTP method for the login request\n\nA test written with Webrat can handle these changes smoothly.\n\n== REQUIREMENTS:\n\n* Rails >= 1.2.6\n* Hpricot >= 0.6\n* Rails integration tests in Test::Unit _or_\n* RSpec stories (using an RSpec version >= revision 2997)\n\n== INSTALL:\n\nIn your stories/helper.rb:\n  \n  require "webrat"\n  \nYou could also unpack the gem into vendor/plugins.\n\n== HISTORY:\n\nSee CHANGELOG in this directory.\n\n== LICENSE:\n\nCopyright (c) 2007 Bryan Helmkamp, Seth Fitzsimmons.\nSee MIT-LICENSE in this directory.\n'
Cheating is fun! b'== Cheat\n\nCheat is a simple command line reference utility.  Use it to retrieve handy\ninformation from the cheat sheet repository.\n\n$ cheat sheets\n$ cheat cheat\n$ cheat recent\n\nTo freshen your local cache, supply the --new edit.\n\n$ cheat sheets --new\n\nTo edit a cheat sheet, use the --edit switch.\n\n$ cheat markaby --edit\n\nTo add a cheat sheet, use the --add switch.\n\n$ cheat readme --add\n\nTo execute a sheet, use the --execute or -x switch.\n\n$ cheat rspec_rails_install_edge --execute\n$ cheat rspec_rails_install_edge --x\n\nSpecial Thanks To:\n- Evan Weaver\n- Kevin Marsh\n- Jeremy Apthorp\n\nThe Cheat Sheet Repository:\n- http://cheat.errtheblog.com/\n\nEnjoy.\n'
System wide Rake. b"= Sake. Best served warm.\n\nSick of copy & pasting your badass custom Rakefiles into every new Rails app \nyou start?  Fed up with writing one-off admistrative scripts and leaving them\neverything?\n\nNo longer.  Sake is a tool which helps you maintain a set of system level Rake tasks.  \n\nGet started:\n\n$ sudo gem install sake\n$ sake -h\n\nShow all Sake tasks (but no local Rake tasks), optionally only those matching a pattern.\n  $ sake -T\n  $ sake -T db\n\nShow tasks in a Rakefile, optionally only those matching a pattern.\n  $ sake -T file.rake\n  $ sake -T file.rake db\n\nInstall tasks from a Rakefile, optionally specifying specific tasks.\n  $ sake -i Rakefile\n  $ sake -i Rakefile db:remigrate\n  $ sake -i Rakefile db:remigrate routes\n\nExamine the source of a Rake task.\n  $ sake -e routes\n\nYou can also examine the source of a task not yet installed. \n  $ sake -e Rakefile db:remigrate\n\nUninstall an installed task.  (Can be passed one or more tasks.)\n  $ sake -u db:remigrate\n\nPost a task to Pastie!\n  $ sake -p routes\n\nInvoke a Sake task.\n  $ sake <taskname>\n\nSome Sake tasks may depend on tasks which exist only locally.\n\nFor instance, you may have a db:version sake task which depends\non the 'environment' Rake task.  The 'environment' Rake task is one\ndefined by Rails to load its environment.  This db:version task will\nwork when your current directory is within a Rails app because\nSake knows how to find Rake tasks.  This task will not work,\nhowever, in any other directory (unless a task named 'environment' \nindeed exists).\n\nSake can also serve its tasks over a network by launching a Mongrel handler.\nPass the -S switch to start Sake in server mode.\n\n  $ sake -S\n\nYou can, of course, specify a port.\n  $ sake -S -p 1111\n\nYou can also daemonize your server for long term serving fun.\n  $ sake -S -d\n\n== Special Thanks\n\n  * Ryan Davis\n  * Eric Hodel\n  * Josh Susser\n  * Brian Donovan\n  * Zack Chandler\n  * Dr Nic Williams\n\n== Author\n\n>> Chris Wanstrath\n=> chris@ozmm.org\n"
Generates nginx config files from YAML. b"A work in progress.  \n\nCheck it: \n  http://errtheblog.com/post/3908\n\nUse it: \n  $ generate_nginx_config nginx_config.yml /etc/nginx.conf\n\nSee an example config file:\n  $ generate_nginx_config --example\n\nYou can set two environment variables:  \n  - NGINX_CONFIG_YAML to specify the YAML config file \n  - NGINX_CONFIG_FILE to specify the nginx config file\n\nBy default, generate_nginx_config won't overwrite your OUT file.  To rock this behavior,\npass in --overwrite or -o or -y or --force or -f.  Whichever.\n\n>> Chris Wanstrath\n=> chris[at]ozmm[dot]org\n"
Makes your models act as textiled. b'= Acts as Textiled\n\nThis simple plugin allows you to forget about constantly rendering Textile in \nyour application.  Instead, you can rest easy knowing the Textile fields you \nwant to display as HTML will always be displayed as HTML (unless you tell your\ncode otherwise).\n\nNo database modifications are needed.\n\nYou need RedCloth, of course.  And Rails.\n\n== Usage\n\n  class Story < ActiveRecord::Base\n    acts_as_textiled :body_text, :description\n  end\n\n  >> story = Story.find(3)\n  => #<Story:0x245fed8 ... >\n\n  >> story.description\n  => "<p>This is <strong>cool</strong>.</p>"\n\n  >> story.description(:source)\n  => "This is *cool*."\n\n  >> story.description(:plain)\n  => "This is cool."\n\n  >> story.description = "I _know_!"\n  => "I _know_!"\n\n  >> story.save\n  => true\n\n  >> story.description\n  => "<p>I <em>know</em>!</p>"\n\n  >> story.textiled = false\n  => false\n\n  >> story.description\n  => "I _know_!"\n\n  >> story.textiled = true\n  => true\n\n  >> story.description\n  => "<p>I <em>know</em>!</p>"\n\n== Different Modes\n\nRedCloth supports different modes, such as :lite_mode.  To use a mode on \na specific attribute simply pass it in as an options hash after any\nattributes you don\'t want to mode-ify.  Like so:\n\n  class Story < ActiveRecord::Base\n    acts_as_textiled :body_text, :description => :lite_mode\n  end\n\nOr:\n\n  class Story < ActiveRecord::Base\n    acts_as_textiled :body_text => :lite_mode, :description => :lite_mode\n  end\n\nYou can also pass in multiple modes per attribute:\n\n  class Story < ActiveRecord::Base\n    acts_as_textiled :body_text, :description => [ :lite_mode, :no_span_caps ]\n  end\n\nGet it?  Now let\'s say you have an admin tool and you want the text to be displayed\nin the text boxes / fields as plaintext.  Do you have to change all your views?  \n\nHell no.\n\n== form_for\n\nAre you using form_for?  If you are, you don\'t have to change any code at all.\n\n  <% form_for :story, @story do |f| %>\n    Description: <br/> <%= f.text_field :description %>\n  <% end %>\n\nYou\'ll see the Textile plaintext in the text field.  It Just Works.\n\n== form tags\n\nIf you\'re being a bit unconvential, no worries.  You can still get at your \nraw Textile like so:\n\n  Description: <br/> <%= text_field_tag :description, @story.description(:source) %>\n\nAnd there\'s always object.textiled = false, as demo\'d above.\n\n== Pre-fetching\n\nacts_as_textiled locally caches rendered HTML once the attribute in question has \nbeen requested.  Obviously this doesn\'t bode well for marshalling or caching.\n\nIf you need to force your object to build and cache HTML for all textiled attributes,\ncall the +textilize+ method on your object.\n\nIf you\'re real crazy you can even do something like this:\n\n  class Story < ActiveRecord::Base\n    acts_as_textiled :body_text, :description\n\n    def after_find\n      textilize\n    end\n  end\n\nAll your Textile will now be ready to go in spiffy HTML format.  But you probably\nwon\'t need to do this.\n\nEnjoy.\n\n* By Chris Wanstrath [ chris[at]ozmm[dot]org ]\n'
Build your fixtures in Ruby. b'FixtureScenariosBuilder\n=======================\n\nThis plugin is an add-on to the FixtureScenarios plugin by Tom Preston-Werner.\nFixtureScenarios is required for this plugin to work.\n\nFixtureScenarios\n  Info: http://code.google.com/p/fixture-scenarios/\n  SVN : http://fixture-scenarios.googlecode.com/svn/trunk/fixture_scenarios\n\nThis plugin\n  Info: http://errtheblog.com/post/7708\n  SVN : svn://errtheblog.com/svn/plugins/fixture_scenarios_builder\n  Bugs: http://err.lighthouseapp.com/projects/466-plugins/tickets/new\n\n== The Setup\n\nYou may, from time to time, wish to build your fixtures entirely in Ruby.\nDoing so has its advantages, such as automatically created join tables\nand default attributes.  YAML files, however, bring with them some real\nnice features in Rails which are difficult to abandon: transactional fixtures, \ntable_name(:key) helpers, and auto-clearing between tests.  How does one get \nthe best of both worlds?\n\n== The Download\n\nUsing the +scenario+ method within <tt>scenarios.rb</tt> file,\nFixtureScenariosBuilder can create your YAML fixture scenarios automatically\nat run time from Ruby-created fixtures.\n\nCreate a <tt>scenarios.rb</tt> file and place it in the root "fixtures"\ndirectory:\n\n  [RAILS_ROOT]\n  +-test/\n    +-fixtures/\n      +-scenarios.rb\n\nNow build your scenarios in this file, wrapping scenarios in the \n+scenario+ method and providing it with the name of your scenario.  \nA brief example of a complete <tt>scenarios.rb</tt> file:\n\n  scenario :banned_users do\n    %w( Tom Chris Kevin ).each_with_index do |user, index|\n      User.create(:name => user, :banned => index.odd?)\n    end\n  end\n\nAssuming +banned+ is a boolean field, this will create for us (when our tests\nare first run) the following:\n\n  [RAILS_ROOT]\n  +-test/\n    +-fixtures/\n      +-banned_users/\n        +-users.yml\n\nOur generated <tt>users.yml</tt> file will look something like this:\n\n  chris: \n    name: Chris\n    id: "2"\n    banned: "1"\n    updated_at: 2007-05-09 09:08:04\n    created_at: 2007-05-09 09:08:04\n  kevin: \n    name: Kevin\n    id: "3"\n    banned: "0"\n    updated_at: 2007-05-09 09:08:04\n    created_at: 2007-05-09 09:08:04\n  tom: \n    name: Tom\n    id: "1"\n    banned: "0"\n    updated_at: 2007-05-09 09:08:04\n    created_at: 2007-05-09 09:08:04\n\nNotice how the keys correspond to the user names.  FixtureScenariosBuilder will try,\nto an extent, to guess the name of your key.  If it can\'t figure it out,\nkeys will be the standard user_001, user_002, etc format.\n\nThanks to Paul Cantrell\'s handywork, custom key names are supported. Simply use the\n+name+ method:\n\n  scenario :foo do\n    name "small_red_widget", Widget.create(:size => \'small\', :color => \'red\')\n    name "big_blue_widget",  Widget.create(:size => \'big\',   :color => \'blue\')\n  end\n\nAnother option is to assign your records to instance variables, then call +names_from_ivars+\nat the conclusion of your +scenario+ block.\n\n  scenario :foo do\n    @small_red_widget = Widget.create(:size => \'small\', :color => \'red\')\n    @big_blue_widget  = Widget.create(:size => \'big\',   :color => \'blue\')\n\n   names_from_ivars!\n  end\n\nThe above produces the following YAML:\n\n  small_red_widget:\n    size: small\n    color: red\n    updated_at: 2007-12-27 10:09:05\n    created_at: 2007-12-27 10:09:05\n  big_blue_widget:\n    size: big\n    color: blue\n    updated_at: 2007-12-27 10:19:23\n    created_at: 2007-12-27 10:19:23\n\nOn subsequent test runs this YAML file will not be needlessly re-created.  YAML\nfiles will only be re-generated when the <tt>scenarios.rb</tt> file is \nmodified.\n\nIf you for some reason need to force your scenarios to rebuild, pass in the\nREBUILD_FIXTURES environment variables:\n\n  $ rake test:units REBUILD_FIXTURES=true\n\nScenarios can also be nested using the familiar Rake-style dependency declaration.\n\n  scenario :users do\n    %w( Tom Chris ).each do |user|\n      User.create(:name => user)\n    end\n  end\n\n  scenario :banned_users => :users do\n    User.create(:name => \'Kevin\', :banned => true)\n  end\n\n== Rake\n\nFixtureScenariosBuilder comes with one Rake task, `db:scenario:build\' -- use it to\nattempt to build your scenarios on demand.\n\n== Bugs!\n\nPlease report bugs here: http://err.lighthouseapp.com/projects/466-plugins/tickets\n\n>> Chris Wanstrath\n=> chris[at]ozmm[dot]org\n'
An SMTP server in Ruby, for tying into your other things. 
The ActiveRecord acts_as_commentable plugin b'= Acts As Commentable\n\nProvides a single Comment model that can be attached to any model(s) within your app. It creates\na Comment model and handles the plumbing between that model and any models that you declare to be\ncommentable models.\n\n\n== Installation :\n\nAdd the following line to your Gemfile\n\n=== Rails 4\n\n  gem \'acts_as_commentable\'\n\n=== Rails 3\n\n  gem \'acts_as_commentable\', \'3.0.1\'\n\n=== Rails 2\n\n  gem \'acts_as_commentable\', git: \'git@github.com:jackdempsey/acts_as_commentable.git\', branch: \'2.x\'\n\n \n== Generator\n\n\n=== Rails 3+\n\n  rails g comment\n\n=== Rails 2\n  \n  script/generate comment\n\nThen migrate your database to add the comments model:\n\n  rake db:migrate\n\n== Usage\n\nMake the desired ActiveRecord model act as commentable:\n \n  class Post < ActiveRecord::Base\n    acts_as_commentable\n  end\n\nAdd a comment to a model instance by adding the following to the controller:\n \n  commentable = Post.create\n  comment = commentable.comments.create\n  comment.title = "First comment."\n  comment.comment = "This is the first comment."\n  comment.save\n\n\nFetch comments for the commentable model by adding the following to the view:\n \n  commentable = Post.find(1)\n  comments = commentable.comments.recent.limit(10).all\n\nYou can also add different types of comments to a model:\n \n  class Todo < ActiveRecord::Base\n    acts_as_commentable :public, :private\n  end\n\n*Note:* This feature is only available from version 4.0 and above\n\nTo fetch the different types of comments for this model:\n\n  public_comments = Todo.find(1).public_comments\n  private_comments = Todo.find(1).private_comments\n\n\nBy default, `acts_as_commentable` will assume you are using a `Comment` model.\nTo change this, or change any other join options, pass in an options hash:\n\n    class Todo < ActiveRecord::Base\n      acts_as_commentable class_name: \'MyComment\'\n    end\n\nThis also works in conjunction with comment types:\n\n    class Todo < ActiveRecord::Base\n      acts_as_commentable :public, :private, { class_name: \'MyComment\' }\n    end\n\n\n== Credits\n\nXelipe - This plugin is heavily influenced by Acts As Taggable.\n\n== Contributors\n\nJack Dempsey, Chris Eppstein, Jim Ray, Matthew Van Horn, Ole Riesenberg, ZhangJinzhu, maddox, monocle, mrzor, Michael Bensoussan\n\n== More\n\nhttp://www.juixe.com/techknow/index.php/2006/06/18/acts-as-commentable-plugin/\nhttp://www.juixe.com/projects/acts_as_commentable\n'
A fork of the ancient infobot project b'F L O O T E R B U C K !\n\n-- What Flooterbuck does\n\nFlooterbuck is an Infobot.  It goes onto IRC and sits in a channel that you\npick for it, and learns, remembers, and gives back useful information.\n\n<dagbrown> flooterbuck, convert 3 tonnes to nautical elvis\n<flooterbuck> dagbrown: 3 tonnes is 22.5341 nautical elvis.\n<dagbrown> flooterbuck: My hair is wet\n<flooterbuck> dagbrown: Okay.\n<dagbrown> flooterbuck, what is a Norse?\n<flooterbuck> dagbrown: A Norse is a Norse, of course, of course\n\n-- Note:  Flooterbuck Infobot vs. Infobot\n\nFlooterbuck Infobot (http://flooterbuck.sf.net/) is a rewrite of\nKevin Lenzo\'s (apparently abandoned) Infobot (http://www.infobot.org/).\nFlooterbuck is meant to be cleaner, more modular, and more hackable than\nthe original Infobot.\n\nThe authors of Flooterbuck Infobot believe that all of the old Infobot\nfunctionality has been preserved.  However, it is still recommended that\nyou keep your old installations of Infobot around, just in case you find\nthat there is something necessary which only exists in the old Infobot\n(and in that case, please contact the authors of Flooterbuck).\n\nTheoretically, you can copy all of the .db files and the conf/*.config\nfiles from your old Infobot installations into your Flooterbuck installation\nand it will work.  However, you may not get all of the new features of\nFlooterbuck that way -- you should at least have a look at the sample\nconfiguration file included with Flooterbuck to see if there\'s any new\nfeatures that you want to enable.\n\nFor more information on the differences between Flooterbuck and\nInfobot, please see the REVISIONS files.\n\n\n\n-- Very minimal setup instructions\n\nYou will need to update your infobot.config\nand infobot.users.  See the example files.\n\nThis requires perl 5.\n\nYou should be able to start up just by running\ninfobot.  If you are using macperl, you will\n(currently) have to make one minor change (because\n$^O didn\'t work for me under os8).\n\nThe infobot uses parameter files, typically in the\nparams directory, to set up with.  It treats anything\non the command line as a parameter file and tries to\nload it.\n\nIf you are using macperl, you will want to set\nthe value of the macperl parameter to 1 in the\ntwo given param files (in the \'files\' dir).\n\nBy default, the infobot uses the IRC setup.  This\nmay change.  NOTE that the irc version has no output\nby default; you\'ll have to turn up the debug level\nto get more.\n\nto start up the infobot, just invoke it from the\ncommand line.\n\n   infobot\n\n\n\n-- A note on forms\n\nYou can prepend the tag <reply>\nto values in the db to just get a reply with no\nextra info.\n\ne.g.\n\n   x => <reply> y\n\nthen when you ask \'x?\' it will just reply \'y\' instead\nof something like "i think x is y".\n\n\n\n\n-- Extending the bot by adding your own code\n\nYou can place your module in the modules directory.  It needs to define a\npackage with the same name as the file itself (without the .pm extension).  It\nneeds to define a subroutine named scan() that takes a callback function, a\nmessage, and the nick of the person who wrote that message.\n\nThe callback function is the function which, when called with an\nargument, will reply to the query in the appropriate way.  That is,\nif the query was originally a private message, the callback function\nwill reply via private message.  If the query was a message in a\nchannel, the callback function will send the reply to the correct\nchannel.\n\nIf the module does not "catch" a message, then scan() function should\nreturn undef to allow the message to "fall through" to other modules.\n\nThe best way to figure all this out is to look at one of the many modules\nprovided as a reference.\n\nOh, and if the module you added would be of interest to other Flooterbuck\nusers, you might want to consider contributing that code to the project.\nFlooterbuck can be found on Sourceforge at http://flooterbuck.sf.net/\n\n\n\n-- Disabling features of the bot\n\nNearly everything that Flooterbuck does (beside the actual communication\nwith the IRC server) is handled by the modules in the modules directory.\nAlthough some modules can be enabled or disabled by changing the configuration\nfiles, you can disable any module by simply deleting it or moving it to\na different directory.\n\n\n\n-- update_db & dump_db\n\nupdate_db is a little perl script that will take a\nflat ascii file and make an infobot-style db out\nof it (currently just a couple of dbm files). You\'ll\nwant to make 2, even if theye contain only 1 element\neach.  it will also simply add (and overwrite entries\nin) existing dbs.  This is especially nice if\nyou don\'t allow updates to the databases through IRC\nand just want a collection of permanent factoids.\n\nupdate_db <inputfile> <dbname>\n\nwhere <inputfile> is an ascii file like (in the case\nof an url-style infobot):\n\ninfobot => at http://www.cs.cmu.edu/~lenzo/hocus.html\n\none key => value per line.  In the current setup,\nyou need an is-database and an are-database, mainly\nfor legacy reasons about representing plurality and\nbeing able to give the proper form.  in the infobot-is.txt\nfile and infobot-are.txt files you have examples.  these\nare a fine starting point:\n\n1.1  update_db infobot-is.txt infobot-is\n     update_db infobot-are.txt infobot-are\n\n2. Now you need to edit infobot to set up your bot.\n   Don\'t forget to set the path to perl properly at\n   the top and make it executable.\n\n3. Then try running infobot.  At present, there\'s a\n   bunch of VERY BAD code in it, so don\'t use the -w\n   switch unless you want to fix a bunch of things and\n   mail me.\n\nEventually, kill it and then you\'ll probably\nwant to crontab it.  included is a sample crontab\nand the script that you will need to edit.\n\ndump_db <dbname>\n\nwill just make a flat ascii file out of the named db,\ne.g.\n\n   dump_db infobot-is\n\nBoth update_db and dump_db take an optional switch, -m, which tells them\nwhat DBM module to use.  You\'ll need to specify this if you set\nDBMModule in your config file in order to get the bot to use something\nother than Perl\'s default.  Eg,\n\n   update_db -m DB_File infobot-is.txt infobot-is\n   dump_db   -m DB_File infobot-is\n\ngood luck, and mail me!\n\nkevin\nlenzo@cs.cmu.edu\n\nps - i am just releasing this _now_ instead of waiting\n     to fix everything.  If you use this and like it,\n     or even if you don\'t, please mail me!\n\n\n\n-- Thanks to:\n\nKevin Lenzo and his team for the original Infobot.\n\n\n'
Sokoban in ruby b'Required gems:\n    highline\n\nUsage:\n    ruby sokoban.rb [level_name]\n\nlevel_name: any of the filenames in the data/ directory\n\n'
A rip-off of will_paginate to get pagination going on merb b"merb_paginate\n=============\n\nThis is a blatant rip-off of will_paginate to try to bring pagination to merb. \nhttp://errtheblog.com/posts/56-im-paginating-again\n\nAll credit goes to those dudes. It's a fantastic plugin, it just is too \nrails centric to use with merb out of the box. A lot of things had to be \nchanged to not rely on the magicness of rails.\n\nThis merb plugin is very incomplete and has no specs (Hint: contribute!).\n\nInstall\n=======\n\ngit clone git://github.com/myobie/merb_paginate.git\ncd merb_paginate\nsudo rake install\n\nUsage\n=====\n\nUsing this plugin is like so in init.rb:\n\n  dependency 'merb_paginate'\n  MerbPaginate.activate! :finder => :datamapper # require the custom finder for datamapper\n  MerbPaginate.activate! :view_helpers # require the will_paginate view helper\n\nI hope to have a paginate finder for each orm evenutally. (Hint: contribute!)\n\nIn the merb style (at least how I see it), it only requires the pagination array collection \nclass at first. You must activate the model paginate finder and the view helper (will_paginate) \nmethod yourself (see above).\n\n\n> End of the worlds worst README."
A rip-off of will_paginate to get pagination going on merb b"########################################\n# There have been significant changes. #\n# Read below before upgrading.         #\n########################################\n\nmerb_paginate\n=============\n\nPagination that relies on the awesomeness that is the will_paginate gem.\nhttp://errtheblog.com/posts/56-im-paginating-again\n\nLots of credit goes to those dudes. It's a fantastic plugin, it just is too \nrails centric to use with merb out of the box. A lot of things had to be \nchanged to not rely on the magicness of rails (which is why it's not a fork \nof the project).\n\nThis merb plugin is very incomplete and has no specs (Hint: contribute!).\n\nInstall\n=======\n\ngit clone git://github.com/myobie/merb_paginate.git\ncd merb_paginate\nsudo rake install\n\nExample App\n===========\n\nAn example app is now included in the example folder. It comes with a sqlite3\ndatabase that has some posts already in it. I am not sure if the db is cross-\nplatform, let me know.\n\nUsage\n=====\n\nUsing this plugin is like so in init.rb:\n\n  dependency 'merb_paginate'\n\nRight now, DataMapper is the only supported ORM (Sequel might work, let me know). \nI hope to have a paginate finder for each orm evenutally. (Hint: contribute!)\n\nUsing the view helper is like so:\n\n  <%= merb_paginate @posts %>\n\nIt is almost exactly like will_paginate, except not as smart about the current controller.\n\n\n\nNote\n----\nI am thinking of rewriting this to use the paginator gem, since it is already generic \nand not tied to any ORM or anything. I am very comfortable with the will_paginate code, \nso I am biased to use it, but I want to get some feedback about the paginator gem and \nif it's a good idea?\n\nI am pretty happy with how this is working now, but if someone has any better ideas,\nplease pass them along. Or better yet, fork and then make it work."
TimeTrackr - Making fun, out of tracking time b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting started\n\n1. At the command prompt, start a new rails application using the rails command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use the WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C-component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nHave "tail -f" commands running on the server.log and development.log. Rails will\nautomatically display debugging and runtime information to these files. Debugging\ninfo will also be shown in the browser on requests from 127.0.0.1.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point in the code, investigate\nand change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n\n== Description of contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ncomponents\n  Self-contained mini-applications that can bundle together controllers, models, and views.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
A simple program to dump Mac OS X notifications to stdout 
Ruby's OpenURI with Memcached for caching b'# OpenURI with caching\n\nCarelessly make OpenURI requests without getting hate mail.\n\n## Running with MemCached\n\nRequire the library\n\n    require \'openuri/memcached\'\n  \nStart memcached server\n  \n    ben@Spinners ~/ \xcf\x9e memcached -d\n\nSet your memcached host/s (defaults to 127.0.0.1:11211)\n  \n    OpenURI::Cache.host = [\'10.1.1.10:11211\', \'10.1.1.11:11211\']\n\nThe default expiry is 15 minutes, this can be changed using the `expiry` method\n    \n    # Ten long minutes\n    OpenURI::Cache.expiry = 600\n    \n## Running using Rails cache\n\nYou can also cache your OpenURI calls using Rails cache. \nrequire the library using `require openuri/rails-cache`\n  \n### Execution\nUse exactly the same as you would OpenURI, only.. enable it.\n\n    OpenURI::Cache.enable!\n    # As slow a wet week\n    open("http://ab-c.com.au").read \n  \nQuit your app (leave memcached running) and re-run the same request, It will come from cache.\n\n### Requirements\n\n* Ruby\n* MemCached \n* memcache (gem)\n  * You will need to ensure that you have [corresponding version](http://blog.evanweaver.com/files/doc/fauna/memcached/files/COMPATIBILITY.html) of libmemcached to the memcached gem installed for installation to go by breezy\n\n### Contributors\n\n* [Ben Askins](http://github.com/benaskins)\n* [Rick Olson](http://github.com/technoweenie)'
A Ruby wrapper around the libqrencode library used for generating QR Codes (3D barcodes popular in Japan) b'qrencoder\n    by Jacob Harris\n    http://www.nimblecode.com/\n    http://nycrb.rubyforge.org/qrencoder\n\n== DESCRIPTION:\n\nThis Gem is a wrapper around an useful open-source library for creating QR\nCodes, a two-dimensional bar code format popular in Japan (and readable by cell\nphones even) created by the Denso-Wave Corporation in 1994. These bar codes look\nlike the following:\n\nhttp://www.denso-wave.com/qrcode/images/qrcode.gif\n\nThe specification for QR Code is readable at\nhttp://www.denso-wave.com/qrcode/index-e.html. QR Code is not the only 2-D\nbarcode standard in existence, and it is in wider use in Japan than elsewhere.\nNotable competitors include PDF417, Semacode/DataMatrix, and Maxi Code (seen on\nUPS labels) in North America; ShotCode in the UK; and an additional format used\nin Korea. All vary in look and capacity, but QR Code has one of the largest\ninformation densities and capacities among them with the following maximum data\n\n* Numeric 7,089\n* Alphanumeric 4,296\n* 8-Bit 2,953\n* Kanji 1,817\n\nAll of these in a square that may range from 21 to 177 pixels a side (there are\n40 different "versions" of the code that specify different sizes). In addition,\nmultiple levels of error correction are possible which might also influence the\nfinal size.\n\n== USAGE:\n\nBasic usage is as follows:\n\n  text = "Some string"\n  qrcode = QREncoder.encode(text) #=> #<QREncoder::QRCode:0x1003710d0>\n  puts "#{qrcode.version}"  #=> 7\n  puts "#{qrcode.width}"    #=> 34\n  qrcode.save_png("/tmp/foo.png")\n\nYou can retrieve the pixels of the QR Code object directly or use the included\nmethods to save a PNG file directly.\n\nSee the rdocs[http://rdoc.info/github/harrisj/qrencoder] for options you can\npass to <tt>QREncoder#encode</tt>.\n\n== REQUIREMENTS:\n\nThis gem requires you to build the C library lib <tt>111qrcode.a</tt> available\nfrom http://megaui.net/fukuchi/works/qrencode/index.en.html.\n\nOn *nix systems, installation is usually as simple as:\n\n  curl http://fukuchi.org/works/qrencode/qrencode-3.2.0.tar.gz | tar xz\n  cd qrencode-3.2.0\n  ./configure\n  make\n  sudo make install\n\nIf it worked, you should be able to type <tt>qrencode</tt> and get a help\nmessage.\n\nNormally, the build process also expects you to have <tt>libpng</tt>, but\nthis is only used for the <tt>qrenc</tt> command-line utility and can be\navoided if you run the following build sequence:\n\n  ./configure --without-tools\n  make\n  sudo make install\n\n== HOMEBREW:\n\nIf you\'re on OS X, you can use homebrew to install libqrencode:\n\n  brew install qrencode\n\n== INSTALLATION:\n\n* First build the <tt>libqrencode</tt> library following the instructions above.\n* Then <tt>[sudo] gem install qrencoder</tt>\n\n== DEVELOPMENT AND CONTRIBUTING:\n\nThis project uses Bundler and its own gemspec for dependency management. To get\nstarted, just clone the repo and run:\n\n  gem install bundler\n  bundle install\n  rake\n\nThe default Rake task will compile the C component and run the specs. If it\nfails to build, make sure that you have libqrencode installed properly.\n\nPlease send pull requests. Topic branches are preferred. New features will not\nbe accepted without corresponding tests.\n\n== FEATURES/PROBLEMS:\n\n* This gem requires you to build and install an external C library\n* The QREncode lib this GEM is built around is only thread-safe from version 3.2.0 onwards!\n\n== CONTRIBUTORS:\n\n* Jacob Harris (harrisj)\n* Joshua Davey (jgdavey)\n* Joseph Holsten\n* Wesley Moore (wezm)\n\n== QRCODE LICENSE:\n\nThe QR Code specification was created and patented by the Denso Corporation of\nJapan. Although the Denso Corporation retains their patent, it is "open in the\nsense that the specification of QR Code is disclosed and that the patent right\nowned by Denso Wave is not exercised." according to their website.\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
A Ruby client library for the Amazon SimpleDB service (ABANDONWARE! OBSOLETE! OH NOES!) b'amazon_sdb\nby Jacob Harris\njharris@nytimes.com\nhttp://open.nytimes.com/\n\n== SOURCE CODE:\n\nhttp://code.nytimes.com/svn/ruby/gems/amazon_sdb\n\n== DESCRIPTION:\n  \nAmazon SDB is a Ruby wrapper to Amazon\'s new Simple Database Service. Amazon sdb is a different type of database:\n\n* Accessed over the network via RESTful calls\n* No schemas or types\n* Each SimpleDB account can have up to 100 domains for data.\n* Domains can hold objects referenced by unique keys\n* Each object can hold up to 256 name/value attributes.\n* Only name/value pairs must be unique in an objects attributes, there can be multiple name/value attributes with the same name.\n* In addition to key-driven accessors, objects can also be searched with a basic query language.\n* All value are stored as strings and comparisons use lexical order. Thus, it is necessary to pad integers and floats with 0s and save dates in ISO 8601 format for query comparisons to work\n\n== FEATURES:\n  \n* A basic interface to Amazon SimpleDB\n* Includes a class for representing attribute sets in SimpleDB\n* Automatic conversion to/from SimpleDB representations for integers and dates (for floats, it\'s suggested you use the Multimap#numeric function)\n* The beginnings of mock-based tests for methods derived from Amazon\'s docs\n\n== CAVEATS\n\n* Not all features are tested yet (sorry!)\n* Amazon has not actually opened up access to the 2007-11-07 API on which this gem is based (and my tests are for). Some things may work differently in real life.\n* Errors still need to be figured out / tested.\n* I don\'t process the data usage/costs info from Amazon yet.\n\n== FUTURE WORK:\n\n* Some sort of fake SQL-esque query language\n* Some sort of AR/Datamapper/Ambition connection layer fun (with schema overlays)\n\n== SYNOPSIS:\n\n  b = Amazon::SDB::Base.new(aws_public_key, aws_secret_key)\n\tb.domains #=> list of domain\n\tdomain = b.create_domain \'my domain\'\n\t\n\tm = Multimap.new {:first_name => "Jacob", :last_name => "Harris"}\n\tdomain.put_attributes "Jacob Harris", m\n\tresultset = domain.query "[\'first_name\' begins-with \'Harris\']"\n\n== REQUIREMENTS:\n\n* An Amazon Web Services account\n* hpricot\n\n== INSTALL:\n\n* sudo gem install amazon_sdb\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2007 FIX\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Later b'== Welcome to Rails\n\nRails is a web-application framework that includes everything needed to create \ndatabase-backed web applications according to the Model-View-Control pattern. \n\nThis pattern splits the view (also called the presentation) into "dumb" templates\nthat are primarily responsible for inserting pre-built data in between HTML tags.\nThe model contains the "smart" domain objects (such as Account, Product, Person,\nPost) that holds all the business logic and knows how to persist themselves to\na database. The controller handles the incoming requests (such as Save New Account,\nUpdate Product, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\'re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Apache .htaccess example\n\n# General Apache options\nAddHandler fastcgi-script .fcgi\nAddHandler cgi-script .cgi\nOptions +FollowSymLinks +ExecCGI\n\n# If you don\'t want Rails to look in certain directories,\n# use the following rewrite rules so that Apache won\'t rewrite certain requests\n# \n# Example:\n#   RewriteCond %{REQUEST_URI} ^/notrails.*\n#   RewriteRule .* - [L]\n\n# Redirect all requests not available on the filesystem to Rails\n# By default the cgi dispatcher is used which is very slow\n# \n# For better performance replace the dispatcher with the fastcgi one\n#\n# Example:\n#   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]\nRewriteEngine On\n\n# If your Rails application is accessed via an Alias directive,\n# then you MUST also set the RewriteBase in this htaccess file.\n#\n# Example:\n#   Alias /myrailsapp /path/to/myrailsapp/public\n#   RewriteBase /myrailsapp\n\nRewriteRule ^$ index.html [QSA]\nRewriteRule ^([^.]+)$ $1.html [QSA]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ dispatch.cgi [QSA,L]\n\n# In case Rails experiences terminal errors\n# Instead of displaying this message you can supply a file here which will be rendered instead\n# \n# Example:\n#   ErrorDocument 500 /500.html\n\nErrorDocument 500 "<h2>Application error</h2>Rails application failed to start properly"\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! \nYou need to install ruby-debug to run the server in debugging mode. With gems, use \'gem install ruby-debug\'\nExample:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n== dbconsole\n\nYou can go to the command line of your database directly through <tt>script/dbconsole</tt>.\nYou would be connected to the database with the credentials defined in database.yml.\nStarting the script without arguments will connect you to the development database. Passing an\nargument will connect you to a different database, like <tt>script/dbconsole production</tt>.\nCurrently works for mysql, postgresql and sqlite.\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  If the app has frozen rails, those gems also go here, under vendor/rails/.\n  This directory is in the load path.\n'
Ruby lib and cli to send erb emails to people in a CSV b'WubMail\n=======\n\nWubMail is a small command line tool to send emails to using a template and a list of emails.\n\nInstall\n-------\n\n```sh\n$ gem install wubmail\n```\n\nExample\n-------\n\nusers.txt:\n\n```csv\nemail,name,sex\njack@example.com,Jack,male\ngwen@example.com,Gwen,female\nianto@example.com,Ianto,male\n```\n\nwelcome.txt:\n\n```erb\nFrom: Sunny <sunny@sunfox.org>\nTo: <%= name %> <<%= email %>>\nSubject: Hello <%= name %>!\n\nHello <%= name %>,\nYou are one hell of a cute <%= sex == "female" ? "girl" : "boy" %>!\n```\n\nThen type in a terminal:\n\n```sh\n$ wubmail welcome.txt users.csv\n```\n\nAnd it will print out an example. Send it to everybody by adding the `-s` argument. That\'s it!\n\n\nAnswers\n-------\n\n### How do I add variables in the message?\n\nJust create new columns in your csv. You may use any column name you want as long as it can be a Ruby variable name.\n\n### What can I put in my email?\n\nThe message is parsed using erb, which means you can put any amount of Ruby you\'d like in it, between `<%` and `%>`.\n\n### How do I add headers?\n\nJust add lines under From, To and Subject.\n\n\nAnother example\n---------------\n\nfriends.csv:\n\n```csv\nemail,arrival_time,ps\nnaps@example.com,18\nsrzt@example.com,16\nphil@example.com,16\nwebs@example.com,18,PS: Don\'t be late this time!\ngamo@example.com,18,PS: Don\'t forget to bring one of your favorite recipes.\n```\n\nparty-email.txt.erb:\n\n```erb\nFrom: Sunny <sunny@sunfox.org>\nTo: <%= email %>\nSubject: Great Party\nX-Mailer: Wubmail/1.0\n\nHello,\nJust a quick note to tell you that for the great party\nyou should arrive at <%= arrival_time %> o\'clock.\n\nThanks,\nSunny\n\n<%= ps %>\n```\n\nCredits\n-------\n\nBy Sunny Ripert <http://sunfox.org>, under the WTFPL <http://sam.zoy.org/wtfpl/>.'
A Behavioral Active Fingerprinting tool for 802.11 APs, operating entirely within the Link Layer. b'Baffle\n======\n\nBaffle is a tool for actively fingerprinting and identifying wireless devices.\nSee ./tool --help for options.\n\nCompiling\n---------\n\nBecause we need to be able to sniff and inject arbitrary 802.11 packets, we\nneed help from a few C-libraries (see Depedencies). Before running Baffle,\nyou must compile the Ruby extensions wrapping these libraries. Generally, it\nit done in the following manner:\n\n    $ ruby extconf\n    $ make\n  \nYou will need to run these commands in the following directories:\n  \n  - ./lib/capture/\n  - ./lib/ruby-lorcon/\n\nLinalg depends on LAPACK, a fortran linear algebra package, and on f2c, a \nfortran to C bridge. These can typically be installed from package management\nsystems or compiled from source.\nThe ruby linalg library itself is compiled with the following commands:\n\n    $ ruby install.rb configure\n    $ ruby install.rb make\n    $ sudo ruby install.rb install\n\nOnce those dependencies are met, everything should work fine.\n\nDepedencies\n-----------\n\n  + C-libraries\n    - lorcon\n    - libpcap\n  \n  + Fortran libraries\n    - LAPACK\n\n  + Ruby libraries\n    - linalg (depends on the LAPACK fortran library and f2c library)\n\nLicense\n-------\n\nCopyright (c) 2007-2008, The Trustees of Dartmouth College.\n\nBaffle is released as open source under a BSD license. See LICENSE for details.\n'
Piston is a utility that eases vendor branch management.  This repository is a complete reimplementation of Piston to provide different backends, depending on the repositories and working copies you pistonize from. b'Piston is a utility that eases vendor branch management.\nThis is similar to <tt>svn:externals</tt>, except you have a local copy of\nthe files, which you can modify at will.  As long as the changes are\nmergeable, you should have no problems.\n\nPiston is Ruby 1.9.1 compatible.\n\nThis tool has a similar purpose than svnmerge.py which you can find in the\ncontrib/client-side folder of the main Subversion repository at\nhttp://svn.collab.net/repos/svn/trunk/contrib/client-side/svnmerge.py.\nThe main difference is that Piston is designed to work with remote\nrepositories.  Another tool you might want to look at, SVK, which you can find\nat http://svk.elixus.org/.\n\nFrom Wikipedia\'s Piston page (http://en.wikipedia.org/wiki/Piston):\n  In general, a piston is a sliding plug that fits closely inside the bore\n  of a cylinder.\n\n  Its purpose is either to change the volume enclosed by the cylinder, or\n  to exert a force on a fluid inside the cylinder.\n\nFor this utility, I retain the second meaning, "to exert a force on a fluid\ninside the cylinder."  Piston forces the content of a remote repository\nlocation back into our own.\n\n\n= Notes on 2.0\n\nIn the 1.0 era, Piston was exclusively geared towards Subversion repositories.\nIn early 2008, Git gained a lot of popularity among Ruby and Rails coders.\nPiston was rewritten during that period to allow many repositories and working\ncopies to be used together.\n\nThe documentation still refers to Subversion throughout, but 2.0 allows any\nrepository to be used with any working copy.\n\n\n= Installation\n\nNothing could be simpler:\n\n $ gem install piston\n\n\n= Usage\n\nFirst, you need to import the remote repository location:\n\n $ piston import http://dev.rubyonrails.org/svn/rails/trunk vendor/rails\n Exported r4720 from \'http://dev.rubyonrails.org/svn/rails/trunk\' to \'vendor/rails\'\n\n $ svn commit -m "Importing local copy of Rails"\n\nWhen you want to get the latest changes from the remote repository location:\n\n $ piston update vendor/rails\n Updated \'vendor/rails\' to r4720.\n\n $ svn commit -m "Updates vendor/rails to the latest revision"\n\nYou can prevent a local Piston-managed folder from updating by using the\n+lock+ subcommand:\n\n $ piston lock vendor/rails\n \'vendor/rails\' locked at r4720.\n\nWhen you want to update again, you unlock:\n\n $ piston unlock vendor/rails\n \'vendor/rails\' unlocked.\n\nIf the branch you are following moves, you should use the switch subcommand:\n\n $ piston import http://dev.rubyonrails.org/svn/rails/branches/1-2-pre-release vendor/rails\n $ svn commit vendor/rails\n\n # Vendor branch is renamed, let\'s follow it\n $ piston switch http://dev.rubyonrails.org/svn/rails/branches/1-2-stable vendor/rails\n\n\n= Contributions\n\n== Bash Shell Completion Script\n\nMichael Schuerig contributed a Bash shell completion script.  You should copy\n+contrib/piston+ from your gem repository to the appropriate folder.  Michael\nsaid:\n\n  I\'ve put together a bash completion function for piston. On Debian, I\n  just put it in /etc/bash_completion.d, alternatively, the contents can\n  be copied to ~/.bash_completion. I don\'t know how things are organized\n  on other Unix/Linux systems.\n\n\n= Caveats\n\n== Speed\n\nThis tool is SLOW.  The update process particularly so.  I use a brute force\napproach.  Subversion cannot merge from remote repositories, so instead I\ncheckout the folder at the initial revision, and then run svn update and\nparse the results of that to determine what changes have occured.\n\nIf a local copy of a file was changed, it\'s changes will be merged back in.\nIf that introduces a conflict, Piston will not detect it.  The commit will be\nrejected by Subversion anyway.\n\n== Copies / Renames\n\nPiston *does not* track copies.  Since Subversion does renames in two\nphases (copy + delete), that is what Piston does.\n\n== Local Operations Only\n\nPiston only works if you have a working copy.  It also never commits your\nworking copy directly.  You are responsible for reviewing the changes and\napplying any pending fixes.\n\n== Remote Repository UUID\n\nPiston caches the remote repository UUID, allowing it to know if the remote\nrepos is still the same.  Piston refuses to work against a different\nrepository than the one we checked out from originally.\n\n\n= Subversion Properties Used\n\n* <tt>piston:uuid</tt>: The remote repository\'s UUID, which we always confirm\n  before doing any operations.\n* <tt>piston:root</tt>: The repository root URL from which this Piston folder\n  was exported from.\n* <tt>piston:remote-revision</tt>: The <tt>Last Changed Rev</tt> of the remote\n  repository.\n* <tt>piston:local-revision</tt>: The <tt>Last Changed Rev</tt> of the Piston\n  managed folder, to enable us to know if we need to do any merging.\n* <tt>piston:locked</tt>: The revision at which this folder is locked.  If\n  this property is set and non-blank, Piston will skip the folder with\n  an appropriate message.\n'
 b"CRABGRASS\n=========================================================\n\nCrabgrass is a software libre web application designed for group and network organizing, and tailored to the needs of the global justice movement. The long term goal is to provide the technical tools to facilitate active, confederal, and directly democratic social change networks.  This version has been adapted for the needs of the Green Change Network.\n\nINSTALL\n=========================================================\n\ndebian/ubuntu\n--------------\n\nrequired:\n  apt-get install rubygems\n  gem install -y rails\n  gem install redcloth\n  gem install rmagick\n  gem install tzinfo\n  gem install haml\n  gem install rspec\n  gem install zentest\n\noptional for ferret:\n  apt-get install ruby1.8-dev build-essential\n  gem install ferret\n\noptional for latex rendering:\n  apt-get install graphicsmagick texlive gs-gpl\n  gem install open4\n\nthen check out the code:\n  git clone git://github.com/sethwalker/greenchange crabgrass\nmove into the newly created project\n  cd crabgrass\nand install any submodules:\n  git submodule init\n  git submodule update\n\nyou can also try the version used on we.riseup.net\n  svn co https://code.autistici.org/svn/crabgrass/trunk crabgrass\n\nset up your database:\n  edit config/database.yml\n  mysqladmin create crabgrass\n  rake db:migrate\n\nset up your /config/crabgrass.yml\n  cp config/crabgrass_example.yml config/crabgrass.yml\n  edit the default settings\n\nset up /config/democracy_in_action.yml if you want to mirror data to DIA\nDIA services are disabled in development mode.  to change this, check out config/environments/development.rb\n  cp config/democracy_in_action_example.yml config/democracy_in_action.yml\n  edit the default settings\n\t\n\nlogger:\n  By default production.rb is set to use SyslogLogger.\n  Either comment this out or 'gem install SyslogLogger'\n\n\nPLUGINS\n=========================================================\n\nacts_as_list\n------------\n\nautomatically supplies methods for reordering on tasks and polls\n\nacts_as_modified\n------------------\n\nLets you test which properties have been modified of an activerecord.\nthis feature is built in to Rails 2.1 so this plugin will be phased out\n\nacts_as_rateable\n----------------\n\nused for rating posts in discussions\n\nacts_as_state_machine\n---------------------\n\nUsed in the Approvable module, which assists in processing requests and invitations\n\nacts_as_tree\n------------\n\nUsed for groups, which can have other groups as committees\n\nacts_as_versioned\n------------------\n\nVersioning for wikis and assets.\n\nattachment_fu\n---------------\n\nUsed for assets. Makes it much easier to work with uploaded data.\n\ncalendar_date_select\n--------------------\nJavascript and css resources for choosing dates and including them into forms. Used when adding events.\n\ndemocracy_in_action\n-------------------\nUsed to mirror User, Group and Membership records to the democracy in action service\n\nexception_logger\n----------------\nUsed to spot unhandled Exceptions in production via a handy web interface at /logged_exceptions\n\nfixture_replacement2\n--------------------\nfulfills the role of fixtures in specs without all the brittle make-workiness\n\n\nfleximage\n------------------\nUsed for icon representations of Pages, Groups, and Users\nfleximage is maintained as a submodule in vendor/plugins/fleximage\n\ngeokit\n------\nhandles connections to (yahoo/google/etc) maps api for displaying events with geo-codable locations\n\nhaml\n----\nconcise language for view markup\n\nhas_finder\n----------\ninsanely handy way to specify scopes on your find commands.  this plugin has been added to the Rails 2.1 core as named_scope \n\nhas_many_polymorphs\n----------------\n\nProvides polymorphic relationships for has_many relationships. Enables tagging and other polymorphic data.\n\nmultiple_select\n---------------\n\nAdds fun helpers for has_and_belongs_to_many associations, such as\na bunch of text boxes or a selection tree.\n\nrspec\n-----\nthe spec library of awesomeness\n\nrspec_on_rails\n--------------\nthe spec library of awesomeness, with many rails-specific methods\n\nruby-svg\n--------\non-the-fly svg generation library.  used for creating groups network map\n\nspider_test\n-----------\nan integration tester that moves thru each page of your site looking for weaknesses and trying to raise exceptions\n\nstate_select\n------------\nhelper methods for selecting US states and Canadian provinces.  used in Profile::Location and Event forms.\n\ntextile_editor_helper\n---------------------\npush button textile formatting.  used on edit forms for Wiki, Blog, News, and Action Alerts\n\ntzinfo_timezone\n---------------\nrequired by tztime\n\ntztime\n------\nfor easy-ish handling of user timezones\n\nvalidates_as_email\n------------------\nsimple, thorough way to do what it says\n\nwebrat\n------\na simple dsl frontend for integration testing of user actions in a simple xml browser simulation\n\nwill_paginate\n-------------\nwidely respected pagination solution\n\n\n\n\nGEMS\n=========================================================\n\ntzinfo: required by tzinfo_timezone + tztime\n\nredcloth: greencloth derives from redcloth\n\nrmagick: used to scale avatars and build thumbnails\n\nferret: indexed full text searches.\n\nopen4: used by latex renderer (optional)\n\nSyslogLogger: improved logging (optional)\n"
FeedCache wordpress plugin for caching and displaying multiple RSS feeds on a Wordpress blog b'=== FeedCache ===\nContributors: cpjolicoeur\nDonate link: http://www.craigjolicoeur.com/feedcache\nTags: RSS, ATOM, feed, cache, Ruby, CRON\nRequires at least: 2.3\nTested up to: 2.6.*\nStable tag: 1.0.6.1\n\nCaches RSS Feeds for display on your WP sidebar. \n\n== Requirements ==\n\n* Ruby\n* Rubygems with the following gems available: active_record, feed_tools\n\t(If you are hosted with Dreamhost you have these gems already.  If you are hosted elsewhere you will need to check.  If you run a VPS or dedicated machine like me, then just install them via `sudo gem install`)\n* CRON access\n\n== Description ==\n\nFeedCache will retrieve, cache and store locally a list of RSS feeds that you can then display on your WP site. This prevents multiple HTTP requests with each page load since the feeds can be read from the cache file.\n\n== Installation ==\n\n1. Upload the feedcache directory to your wordpress wp-content/plugins directory. Make sure the feedcache directory is writeable by the web server (rw-rw-rw 666).\n\n2. Change the file permissions on the master-config.txt file to rw-rw-rw- (666)\n\n3. Activate the FeedCache plugin through your wordpress plugin menu\n\n4. Setup FeedCache options under the Options -> FeedCache Options menu\n\t(a) Choose the number of feed groups you want (1 - 99)\n  (b) Add your list of RSS feeds 1 per line and set the other options.  You can have up to 4 different groupings of RSS feeds to cache.\n      If you wish to manually override the name of the feed, place a pipe character "|" after the RSS URL and then type the name you want to use (e.g http://www.craigjolicoeur.com|Craig P Jolicoeur)\n      If you wish to manually override the number of feed items to display, place a pipe character "|" after the feed title and enter the number to display\n      If you wish to manually override the feed text formatting, place a pipe character "|" after the feed display number and put either of a true/false boolean value\n  (c) Take note of the "CRON Script Settings" section at the bottom - you will need this info\n\n5. Edit the feedcache-cron.rb file\n  (a) Copy the "feedcache directory" path from the CRON Script Settings into the "FEEDCACHE_DIR = \'\'" variable\n  (b) Set the number of characters from each RSS feed you want to display\n\n6. Add the feedcache-cron.rb ruby script to your servers CRON job (if you need help with CRON please refer\n   to the following URL: http://www.unixgeeks.org/security/newbie/unix/cron-1.html)\n  (e.g. 30 * * * * /usr/bin/ruby /path/to/your/wordpress/install/wp-content/plugins/feedcache/feedcache-cron.rb)\n\n7. Add the following code to your wordpress theme where you want the RSS feed listing to be displayed\n\n\t<?php if (function_exists(\'feedcache_display_feeds\')) { echo feedcache_display_feeds(); } ?>  \n\t\n\tfor the default (group 1) listing or you can specify a group (in this case, group 2) \n\n\t<?php if (function_exists(\'feedcache_display_feeds\')) { echo feedcache_display_feeds(2); } ?>  \n\t\n\tIf you don\'t specify a group number in the function call, then Group 1 will be used.  If you want to specify the specific\n\tgroup number to display use "feedcache_display_feeds(_GROUP_NUMBER_)" where _GROUP_NUMBER_ is the number you want to display.\n\n8. Sit back and enjoy the plugin\n\n\n\n== Upgrading ==\n\n**** IMPORTANT ************************************************************************\n\tIf you are upgrading from a version of FeedCache prior to v0.9.8, please\n\tdeactivate and delete your existing feedcache plugin directory and follow the new\n\tinstallation steps.\n***************************************************************************************\n\n1. Deactivate the previous version of FeedCache through your Wordpress plugins menu\n\n2. Upload the new feedcache-cron.rb, feedcache.php and complete lib/ directory files to your existing feedcache directory.  You do not need to overwrite your master-config.txt file.\n\n3. Enter the correct FEEDCACHE_DIR variable in the feedcache-cron.rb script\n\n4. Go to Options -> FeedCache Options and update your FeedCache settings\n\n\n== Frequently Asked Questions ==\n\n= Why would I need this plugin? =\n\nIf you are using your WP installation to display other website\'s RSS feeds, this will save HTTP requests and improve page load times for your users.  By using a CRON job to fetch and format the feeds, the user will not have to wait during page load for the feed to be updated.\n\n= Will FeedCache work with Atom feeds? = \n\nYes!  FeedCache will work with both RSS and ATOM feeds.\n\n= Can I receive error emails from the CRON process? =\n\nYes, just set CRON_EMAILS = true in the feedcache-cron.rb script.  Error emails are turned off by default.\n\n= Can I have more than 10 RSS Groups = \n\nYes, but you\'ll need to manually edit the feedcache.php file.  Find the following line:\n\n  define("MAX_GROUPSIZE", 10);\n\nand change the number 10 to whatever number you need.  (Just don\'t go overboard, :) )  Take note that when you upgrade the\nFeedCache plugin in the future, you\'ll need to update this number every time.\n\n\n== Screenshots ==\n\n1. FeedCache Options page\n\n\n'
trivial python script that scrapes the mehfil daily menu b'Prints the daily menu for my favorite place to eat (http://www.yelp.com/biz/mehfil-indian-cuisine-san-francisco)\n\nThis code is provided as-is and is released to the public domain.\n'
 b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
The Ruby on Rails wiki b'=====  Signal Wiki\n\nSignal Wiki is an easy to use wiki that was built with standards in mind.  It uses some of the more common rails plugins and practises to make sure it is easy to integrate this wiki into your suite of site offerings.  We wanted something we could tie into a shared user table so multiple apps (beast was the app at the time) could have the same login, so we used restful auth.  We had several clients asking for this, so we decided it must be a big need.  With our clients agreement, we extracted the basic wiki parts and cleaned it up and the result is this code.  \n\nEnjoy :)\n\n=====  Installation instructions\n\n#FIXME: Add these instructions\n1. Download app\n2. Copy config/database.yml.example to config/database.yml\n3. Run "rake db:migrate" from the root of the app\n4. Start your rails app (using mongrel or fcgi, or whatever crazy method you use)\n5. Input your wiki stuffs\n\n=====  Required Gems\n\n* json\n* ruby-openid\n* ruby-yadis\n* RedCloth\n\n\n'
The Ruby Implementation of SWX RPC b'= SWX Ruby 0.7\n\nPrimary Repo: http://github.com/meekish/swxruby\n\n=== What is SWX?\n\nSWX is the native data format for the Flash Platform.\n\nSWX RPC is a remote procedure call protocol encoded in SWX and a viable alternative to XML and Flash Remoting. It\'s simple enough that you can get up and running with it in about five minutes. SWX RPC is perfect for building mashups (with easy-to-use APIs for Flickr, Twitter, and others), mobile applications (Flash Lite 2.0 and 2.1), and other data-driven Flash sites and applications. Official web site at http://swxformat.org\n\n=== What is SWX Ruby?\n\nSWX Ruby is the Ruby implementation of SWX RPC. It allows Rubyists to leverage their Ruby skills to build data-driven Flash applications using the wonderfully simple SWX data format. The current beta version assembles AVM1 SWF files (compatible with Flash 8 and below). By its 1.0 release, SWX Ruby will also assemble AVM2 SWF files. Official web site at http://swxruby.org\n\n=== Installation\n\n==== Gem\n\ngem install swxruby\n\n  Note: The SWX Ruby gem declares \'json_pure\' as a dependency. json_pure\n  is the pure Ruby variant of the JSON gem. If you have a C compiler and \n  would like better performance then do \'gem install json\'\n\n==== Rails plugin\n\nAfter installing the gem, do:\n\n  swxruby --rails PATH_TO_ROOT_OF_YOUR_RAILS_APP\n\nThis will unpack a plugin into your Rails app. For further explanation of the files installed, see \'Rails Usage\' below.\n\n<b>Living on the Edge:</b> The Rails init script (init.rb) sits in the root of the SWX Ruby tree, thus you can simply throw the git HEAD into vendor/plugins/swxruby to run the plugin on edge.\n\n  git clone git://github.com/meekish/swxruby.git vendor/plugins/swxruby\n  ruby vendor/plugins/swxruby/install.rb\n\n=== Gem Usage (For Merb, Camping, Sinatra, et al.)\n\nRequire the SWX Ruby gem\n\n  require \'rubygems\'\n  require \'swxruby\'\n\nDefine a service class in the SwxServiceClasses namespace\n\n  module SwxServiceClasses\n    class Simple\n      def echo_data(data)\n        data\n      end\n    end\n  end\n  \nStart making calls to SwxGateway#process\n\n  @swx_bytecode = SwxGateway.process(:serviceClass => \'Simple\', :method => \'echo_data\', :args => \'Hello World!\', :debug => true)\n  # => Returns a binary string of SWX bytecode containing the result of SwxServiceClasses::Simple.new.echo_data(\'Hello World!\')\n  \nUse your framework\'s preferred method to wrap the swx bytecode in a file shell and send it on its way. Here\'s how Rails and Merb do it:\n\n  send_data(@swx_bytecode, :filename => \'data.swf\', :type => \'application/swf\')\n  \n==== Example of Gem Usage\n\nHere\'s a full Merb app (this and a Flash client are included in examples/standalone/)  \n\n  # standalone.rb\n  \n  require \'rubygems\'\n  require \'swxruby\'\n\n  # Service Class\n  class SwxServiceClasses::HelloMerb\n    def just_say_the_words\n      \'Hello from Merb!\'\n    end\n  end\n\n  # Merb Application\n  Merb::Router.prepare { |r| r.match(\'/\').to(:controller => \'swx_ruby\', :action =>\'gateway\') }\n\n  class SwxRuby < Merb::Controller\n    def gateway\n      send_data(SwxGateway.process(params), :filename => \'data.swf\', :type => \'application/swf\')\n    end\n  end\n  \n  # Fire it up with \'merb -I standalone.rb\' and you\'re off!\n  \n=== Rails Plugin Usage\n\nWhen running as a Rails plugin, SWX Ruby will look for your service classes in\nRAILS_ROOT/app/services. Simply create standard Ruby classes and drop them\nin this folder. SWX Ruby will instantiate your service class (while forcing\nit into the SwxServiceClasses namespace), call the specified method, and\nsend the response back to the Flash Player.\n\nTake a peek at services/hello_world.rb for a working service class example.\nAlright, alright, I\'ll just show it to you here:\n\n  # hello_world.rb----------------------------------------\n  # Class and method names follow standard Ruby convention\n  class HelloWorld\n  \t# Service class methods are instance methods.\n  \tdef just_say_the_words\n  \t\t\'Hello World!\'\n  \tend\n  end\n  #-------------------------------------------------------\n\nHere\'s an example to call HelloWorld#just_say_the_words from Flash \n(place a MovieClip on stage with an instance name of \'loader\' and\nfire up your Rails development server):\n\n  //------------------------------------------------------\n  loader.serviceClass = "HelloWorld";\n  // Method names follow ActionScript convention \n  // (converted to underscored server-side)\n  loader.method = "justSayTheWords";\n  loader.debug = true;\n  loader.loadMovie("http://localhost:3000/swx", "POST");\n\n  function onEnterFrame() {\n   // Will output \'Hello World!\' once the SWX file is loaded.\n   trace(loader.result);\n  }\n  //------------------------------------------------------\n\nWhen you\'re ready for some robust ActionScriptery, head to \nhttp://swxformat.org/download to grab the SWX ActionScript library.\n\nOh yeah, you may return ActiveRecord objects from your service classes; \nSWX Ruby will happily serialize them for you. Go ahead, give it a try!\n\nNOTE: You may notice some Security Sandbox Violations when testing the example\nabove in the Flash IDE. Rest assured, this is OK. Visit \nhttp://swxformat.org/132 for further explanation.\n\n=== Get In Touch\n\nPlease post bug reports/suggestions to http://groups.google.com/group/swxruby\n\n'
Simple Integrated Content 
Demo git repo for my presentation at ATLRUG b'Hello, world!\nhello again!\nhello one last time\nhelllo from soylentfoo\n'
Simple Facebook platform simulator, to aid in developing Facebook canvas apps offline. b'= Fakebook\n\nFakebook simulates the Facebook platform, to aid in developing Facebook canvas apps offline. \nIt takes a request and passes it to the app as a POST with the fb_sig_* params added, etc. \nThe response is returned with FBML parsed (sort of) and some chrome added.\n\nIn other words: you can work on Facebook canvas apps when you\'re on a plane.\n\nTo use, run \'fakebook\' from the command line to start up a Fakebook proxy. For example, if you \nhave an app running on port 3000, and the callback path is "/", and the canvas path \nis "myapp", you would run:\n\n  $ fakebook --callback="http://localhost:3000/" --canvas="myapp"\n\nSee "fakebook --help" for more options. By default, Fakebook will look for a config file at \n./config/fakebook.yml. The file should look like this:\n\n  callback: http://localhost:3000/\n  canvas:   myapp\n  secret:   secret\n  user:     1\n  session:  session_key\n  friends:  2, 3, 4\n  host:     0.0.0.0\n  port:     5000\n\nYou can also use the library directly with the Fakebook class, which eases testing:\n\n  require \'fakebook\'\n  app = Fakebook.new :callback  => "http://localhost:3000/",\n                     :canvas    => "myapp",\n                     :secret    => "secret",\n                     :fb_params => { :user => 1, :session_key => \'session_key\', :friends => [2, 3, 4] }\n  app.request("/")\n\nBecause Fakebook implements #call according to the Rack \nspecification[http://rack.rubyforge.org/doc/files/SPEC.html], you can create an HTTP server \nthat proxies to your application using your choice of server library (Mongrel, WEBrick, Thin, \netc.) For example:\n\n  require \'fakebook\'\n  app = Fakebook.new # etc...\n  Rack::Handler::Mongrel.run app, :Port => 5000\n\n\n== Getting started\n\nTo install via RubyGems:\n\n  $ sudo gem install sco-fakebook --source http://gems.github.com/\n\nRun the executable to see the available options:\n\n  $ fakebook --help\n\nTo install the development version from the repository:\n\n  $ wget http://github.com/sco/fakebook/tarball/master\n  $ tar -xvf sco-fakebook-master.tar.gz\n  $ cd sco-fakebook-master\n  $ sudo rake install_gem\n\n\n== Dependencies\n\nRuby\nRack >= 0.3.0\n\n\n== Author\n\nScott Raymond <sco@scottraymond.net>\n\nThanks to PackRat[http://apps.facebook.com/packrat/], from which this code was extracted.\n'
BDD for OpenLaszlo. b'= LZTestKit\n\nThis package extends lzunit with behavioral testing, asynchronous\ntest support, test case selection, and automated test sequencing.\n\n* <b>Test case selection</b> runs a single test case within a test\n  applet, without modifying the sources.  (You supply the name of the\n  test case as a query parameter in the application URL.)  It allows\n  you to use your test applet as your debugging scaffolding, without\n  running a lot of code that you aren\'t interested in.\n\n* <b>Automated test sequencing</b> runs all the test applets in a\n  directory, in series, in a single browser window, stopping if one of\n  them has an error.  It allows you to run all of a package\'s test\n  cases from the browser by visiting a single url, instead of\n  navigating to each url in turn.\n\n* <b>Behavioral testing</b> implements mocks, stubs, and expectations.\n  It allows you to *test* one class, while *stubbing* the classes that\n  it depends on.  You can even verify that the tested class makes\n  functions thatyou expect it to.  This is a loose port of rspec to\n  OpenLaszlo.\n\n* <b>Asynchronous test support</b> allows you to write a test case\n  that is only considered complete when the callback functions or\n  delegates that it defines return.  If a test case creates a callback\n  function, the test case is only complete when the callback function\n  returns.  (Except if the callback function creates a callback\n  function, etc.)\n\n== Requirements\n\nThis package requires OpenLaszlo 3.4.0 or 4.0.6.  (Other versions\nmight work, but aren\'t tested.)\n\n== Installation\n\n* Download the latest version from {download-location}.\n\n* Unpack it into your OpenLaszlo webapp directory; for example, at\n  <tt>${OPENLASZLO_HOME}/Server/lps-3.4.0/lztestkit</tt>.\n\n* Visit e.g. http://127.0.0.1:8080/openlaszlo-4.0.6/lztestkit/examples\n  and http://127.0.0.1:8080/openlaszlo-4.0.6/lztestkit/test.  (The\n  first part of the path will be different if you\'ve got a different\n  version of OpenLaszlo, or if you\'ve installed the servlet instead of\n  the server).  You should be able to click on the examples and tests\n  in order to run them.\n\n== Features\n\n=== Test case selection\n\nIf a test application is compiled with support for test case selection, you\ncan invoke it with a <tt>testCase=<em>{testCaseName}</em></tt> query parameter\nto run only the test case named <em>{testCaseName}</em>.\n\nInclude <tt>lzunit-extensions.js</tt> in your application (or include\n<tt>library.lzx</tt>, which includes this).  Then, include the\ntestCase={testCaseName} query parameter in the URL that you use to\nopen the application, where {testCaseName} is the name of the test\ncase.  Only this test case will execute.\n\nSee the example in <tt>examples/test-selection.lzx</tt>.\n\n=== Automated test sequencing\n\nCopy <tt>test/autorun/index.jsp</tt> into your test directory to run\nall the test applications in that directory within a single browser\nwindow, without user interaction.\n\nCopy <tt>test/autorun/index.jsp</tt> into your test directory, and\nupdate the includes at the top of the file to reflect the paths to the\nlztestkit <tt>src</tt> and <tt>lib</tt> subdirectories.  By default,\nthis file will run files in its directory that match /test-*.lzx/;\nthis is a configuration parameter that it should be obvious how to\nchange.\n\nEach test cases should include <tt>autorun-lz.js</tt> via <script\nsrc="autorun-lz.js"/>.  If you have a <tt>library.lzx</tt> file with\ntest scaffolding, you can place that directive there.\n\n==== Support files\n<tt>autorun-lz.js</tt>:: implements the OpenLaszlo side of automated execution\n<tt>autorun-browser.js</tt>:: implements browser support\n<tt>autorun-include.jsp</tt>:: is a JSP include that embeds the files in the current directory into the generated HTML for the index page\n<tt>jquery-1.2.1.min.js</tt>:: is the jQuery library.  I didn\'t write this! but the browser support file needs it\n<tt>swfobject.js</tt>:: is the swfobject library.  I didn\'t write this! but the browser support file needs it\n\n\n=== Behavioral testing\n\nTODO\n\nThis lets you write things like this in a test case:\n\n  myMockObject = Mock.Create(MyClass);\n  myMockObject.mock.expects.aMethod(1, \'arg\', {name:2});\n  // call a fn that invokes myMockObject.aMethod(1, \'arg\', {name:2})\n  myMockObject.mock.verify();\n\n  myMockObject.stub(\'aMethod\', \'arg1\', \'arg2\', Function)\n    .by.calling(1);\n  // call a fn that invokes myMockObject.aMethod(\'arg1\', \'arg2\', function(n) {...})\n  // and expects the funarg to be called back with n=1\n\n  calling(anObject, \'methodName\', \'arg1\')\n    .should.call(otherObject, \'method\', \'some\', \'arguments\')\n    .and.send(anObject, \'onchange\', \'data\')\n    .and.returnWith(1)\n\n  constructing(\'MyClass\', \'initarg\')\n    .should.call(otherObject, \'method\', \'some\', \'arguments\')\n\n==== Implementation\n\n<tt>lzmock.js</tt>:: TODO\n<tt>lzspec.js</tt>:: TODO\n<tt>lzunit-extensions.js</tt>:: adds <tt>assertNotEquals</tt>, <tt>assert[Not]Contains</tt>, and <tt>assertFasterThan</tt> methods to <tt>TestCase</tt>\n<tt>jsspec.js</tt>::  js-level support for lzspec (without OpenLaszlo dependencies)\n<tt>hopkit.js</tt>:: support file for jsspec and lzmock\n\n=== Asynchronous test support\n\nTODO\n\nThis features allows lzunit to run asynchronous tests, which are not\ncomplete until a delegate or callback has been called.  A typical\nusage pattern is the following test, which asserts that setTimeout\ndelays at least the requested amount of time:\n\n  <method name="testSetTimeout" args="c">\n    var interval = 1000,\n        startTime = new Date;\n    // c(function(){...}) is equivalent to function(){...}\n    // except that it re-enters the dynamic bindings of the\n    // test case.\n    setTimeout(c(function() {\n      var endTime = new Date;\n      assertTrue(endTime - startTime >= interval);\n    }), interval);\n  </method>\n\nFor now, see <tt>examples/test-lzunit-async.lzx</tt>.  The new methods are\nalso copiously documented in <tt>src/lzunit-async.lzx</tt>.\n\n== Support Files\n\nThe browser support for autorun relies on jQuery and swfobject.  I\'ve\nincluded versions of these in the <tt>src</tt> directory.\n\nThe behavioral testing files use hopkit.js to define chains.\n<tt>hopkit</tt> isn\'t otherwise ready for general release; and it\'s\nnot necessary to use this file directly.\n\n== License\n\nLzTestKit is copyright (c) 2007 Oliver Steele.  It is open-source\nsoftware, and may be redistributed under the terms of the MIT\nlicense. The text of this licence is included in the LzTestKit\ndistribution.\n'
A Gitk-like application written in RubyCocoa that looks like it belongs on a Mac.  See the wiki for downloads and screenshots. b'## GitNub\nA RubyCocoa app for getting quick information for a git repo.  Similar to GitK.\n \n### Requirements\n* Git(duh!), RubyCocoa, Leopard\n\n\n### Quick Install\n1. Move GitNub.app to /Applications\n2. Move (or symlink) nub shell file to /usr/local/bin\n\n\n\n### How to Use\nIn your shell, move to a git directory and invoke `nub`.  You always use this \nhelper to invoke the application, otherwise you get nothing.\n\n\t\t$Caged@caged:~/dev/git/gitnub% nub\n\n\t\t\n### Building from Source\n1. Open project in Xcode - press Build\n3. Move the build/Release/GitNub.app and `nub` to the proper locations \n   specified in the Quick Install directions.\n   \n### Major Contributors\n* Justin Palmer - Maintainer\n* Benjamin Stiglitz \n* Kevin Ballard\n* Dustin Sallings'
Merb Plugins: Even more modules to hook up your Merb installation 
A site to make your code lean and mean. b'codereviewr is a Django project for submitting code for code reviews and being\nable to comment on other people\'s code (OPC).  It hopes to promote coding best\npractices and learning.\n\nCurrently in very alpha and the results are part of our "1 Night 3 Hours"\neffort involving Nate Anderson. Rob Hudson, Dave Merwin, Percy Perez and Brad\nPitcher.\n'
A way to add a Google Calendar iframe as a tab in a Redmine project b'= Google Calendar Plugin For Redmine\n\nREQUIRES:  TZInfo GEM  (http://tzinfo.rubyforge.org/)\n\nA plugin to allow users to create a new Redmine tab and embed a Google Calendar using Google Embeddable Calendar iframe.\n\nhttp://www.google.com/calendar/embed/EmbedHelper_en.html\n\nTo install from git: \n\n(Git Version < 1.5.3)\n$ cd {RAILS_ROOT}/vendor/plugins \n$ git clone git://github.com/mully/redmine_google_calendar.git\n\n(Git Version >= 1.5.3 -- Because the "git-rails" gem uses Git Submodules introduced in ver. 1.5.3)\n$ sudo gem install git-rails\n$ git-rails install git://github.com/mully/redmine_google_calendar.git\n\n'
WoW addon - Track down those needy and greedy party members b'<b>This addon has been discontinued.</b>\n\nBlizzard\'s new loot history frame does everything I wanted this addon to do and more.\n\n---\n\nGreedBeacon is a simple roll-monitoring addon.  It does two things: block the "detailed loot roll" spam, and provide a chat link tooltip to pull up those blocked details.\n\n"Detailed Loot Information" must be turned on in the default config, otherwise GreedBeacon cannot get the roll details.\n\nh2. Links\n\n<b>Visit "my site":http://tekkub.net/ for more great addons<br>\nPlease report all bugs and feature requests to my "Github tracker":http://github.com/tekkub/GreedBeacon/issues<br>\nPlease direct all feedback and questions to my "Google Groups":http://groups-beta.google.com/group/tekkub-wow mailinglist.</b>\n'
Where is Britt? b'h1. Where is Britt?\n\nReports the location of Britt Selvitelle.\n\nh2. Requirements\n\n* Credulity.'
Allows creation of WoW native frames from .NET applications via InnerSpace 
Un site web qui permet d'échanger ses expériences professionelles b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
Simple fuzzy logic inference for control 
So this is Yahtzee? b'http://www.showcattlepage.com/lovrien/images/2007/11-16-07/Yahtzee-steer.jpg\n'
Super streamlined memory profiler with real time graphs for Ruby programs 
The Nu programming language.  A clone of the official repository at http://code.neontology.com. b'INTRODUCTION\n\nHello and welcome to Nu.\n\nI created Nu because I wanted a better way to write software.\n\nI wanted to write with a language as flexible and powerful as Lisp, but I \nalso wanted to be able to work with the many libraries and high-performance\nsubsystems written in C, including the ones that I write myself.  So a tight \nintegration with C was my highest priority; that ruled and drove the \nimplementation of Nu.  That\'s why Nu is "C over lambda."\n\nIt is easier to integrate with C when you have a disciplined way of structuring \nC code.  Popular scripting languages (Python, Ruby, Lua, etc.) make many \nimplementation-dependent impositions on the C code that they call.  Their\nartifacts are often called "glue code" and are usually ugly, cumbersome, and \nunpleasant to generate.\n\nObjective-C provides a proven way of structuring C code that has no scripting \nlanguage implementation dependencies.  But it can do much more than that.\nObjective-C can also serve as a platform for a powerful dynamic language.  \nNu was designed to take full advantage of that.  It was also designed to \nprovide many of the elements of successful scripting languages, notably \nRuby, while adding the syntactic simplicity and flexibility of Lisp.   \n\nLEGAL\n\nNu is copyrighted open-source software that is released under the Apache\nPublic License, version 2.0.  For details on the license, see the LICENSE file.\nIn its use to name a programming language, "Nu" is a trademark of Neon Design \nTechnology, Inc.\n\nSYSTEM REQUIREMENTS\n\nOn Macintosh systems, Nu requires Mac OS X version 10.5 or greater.\nIt is also possible to build Nu to run on Linux systems and the \nApple iPhone.\n\nINSTALLATION\n\nInstallation instructions are in the notes/INSTALL file.\n\nGOING FURTHER\n\nnotes/DEMO contains a simple tutorial exercise that can acquaint you with Nu.\n\nnotes/USAGE describes a few of the ways that you can use Nu.\n\nnotes/ERRORS contains some pitfalls that I\'ve encountered when programming \nwith Nu.\n\nnotes/TODO contains some open issues that I\'d like to address in Nu.\n\nThe examples directory contains several fun and interesting examples.\n\nTextMate users can drag and drop share/Nu.tmbundle onto the TextMate \napplication icon to add Nu-specific features to TextMate.\n\nAUTHOR\n\nTim Burks (tim@neontology.com)\nNeon Design Technology, Inc.\nLos Altos, California, USA\nhttp://www.neontology.com\n'
A dead project. Here for nostalgia and reference b'A grassroots readonly flickr wrapper - Strictly for convenience\nNot a full API, no groups, no community, who needs friends anyway?\n\nIf you want a full API, use the `flickr` gem hosted on Rubyforge, its \nold but it was nailed with its 1.0 release.\n\nCheck the specs for usage'
Masters project - online extension to local DVR/mythTV b"PVArchive - Masters Project by Chris Martin\n\nThis project is an online DVR, extending mythTV.\n\nThe web client will be written in Ruby on Rails, the scripts \nto interface with mythTV and encode/process the video files \nwill be written in Ruby.\n\nChris doesn't really know jack about Ruby, so prepare for \ninitial suckage.\n\nMisc notes etc. can be found @ wiki.roundhere.net/pvarchive\n"
SmartyPants ported to Nu. b'NuSmartyPants\n=============\n\nNuSmartyPants is an implementation of [SmartyPants][sp] in [Nu][nu].\n\n[sp]: http://daringfireball.net/projects/smartypants\n[nu]: http://programming.nu\n\nNuSmartyPants may be built as a framework using `nuke`.\n\nAuthor\n------\n[Grayson Hansard](mailto:info@fromconcentratesoftware.com)  \n[From Concentrate Software](http://www.fromconcentratesoftware.com/)\n\nMany thanks to\n--------------\n[Patrick Thomson](http://importantshock.wordpress.com/)'
My Emacs Config Files 
Ruby Tagger tools including a Rule-Based Part of Speech Tagger based on Eric Brill's Work with the BROWN corpus b"= rbtagger\n\n* http://github.com/taf2/rb-brill-tagger/tree/master\n\n== DESCRIPTION:\n\nA Simple Ruby Rule-Based Part of Speech Tagger\n\nThis work is based on the work of Eric Brill\n\nCredit for extracting Eric's work into a reusable library goes to Ken Williams as part of his work in creating the Lingua::BrillTagger perl module\n\nThis software is made available under the MIT License, see LICENSE\n\n== FEATURES/PROBLEMS:\n\n* Rule based tagger\n* Word matching tagger\n\n== SYNOPSIS:\n\n tagger = Brill::Tagger.new\n\n== INSTALL:\n\n* sudo gem install rbtagger\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Todd A. Fisher\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
MOVED! The official repo is now hobo/hobo b"The README for hobo is in hobo/README.\n\nHowever, you're probably more interested in hobo/CHANGES-1.4.txt or\nhttp://cookbook.hobocentral.net\n\n### Unit tests\n\n    export HOBODEV=`pwd`\n    for f in dryml hobo_support hobo_fields hobo ; do cd $f ; bundle install ; cd .. ; done\n    rake test\n\n### Integration tests\n\nsee README in integration_tests/agility\n\n### Smoke test\n\nThis test is not super important. It's important that this test be run\njust before gems are released, but we won't see much benefit if people\nother than the maintainer run this test.\n\nPrerequisites:  RVM, wget.   Creates and uses the hobo-smoke rvm gemset.\n\n    unset HOBODEV\n    export HOBODEV\n    cd integration_tests\n    ./smoke_test.sh"
Rails plugin to add extra searching functionality to models. b'Searchify\n=========\n\nThis is a Rails plugin which adds some search functionality to models. It also includes a javascript file and helper methods for building a dynamic search form.\n\n\nInstallation\n------------\n\nIf you are running edge rails you can install the plugin straight from the repository:\n\n\tscript/plugin install git://github.com/ryanb/searchify.git\n\nOtherwise you can install it with this command:\n\n\tgit clone --depth=1 git://github.com/ryanb/searchify.git vendor/plugins/searchify\n\nTo use the dynamic form you need to install a javascript file using this command:\n\n\tscript/generate searchify_javascript\n\n\nRequirements\n------------\n\nThis plugin uses the "paginate" method to perform a search on the model, so you need to install the will_paginate plugin/gem.\n\nCurrently only MySQL is fully supported. It may work on other database engines, just not as well.\n\n\nInstructions\n------------\n\nYou can use the "searchify" method in your model class to enable it for searching. Pass the columns you want to search to this method.\n\n\tclass Product < ActiveRecord::Base\n\t  searchify :name, :description, :price, :created_at, :discontinued\n\tend\n\nYou can then use the "search" method to search all or some of these columns. Here are some examples.\n\n\tProduct.search(:name => \'Puzzle\', :description => \'%forest%\') # use percent sign for partial search\n\tProduct.search(:all => \'blue puzzle\') # searches for partial word "blue" and "puzzle" in all columns\n\tProduct.search(:created_at_from => \'2008-01-01\', :created_at_to => \'2008-02-01\')\n\tProduct.search(:price_operator => \'<\', :price => \'40\') # changes the comparison operator\n\tProduct.search(:page => 5, :per_page => 20, :order => \'name\') # pass other options besides conditions\n\nThe searchify also allows you to include associations in the search. For example:\n\n\tclass Category < ActiveRecord::Base\n\t  has_many :products\n\t\tsearchify :name, :products => [:name, :description]\n\tend\n\nTo search the product columns you need to prefix them with "products_" like this:\n\n\tCategory.search(:products_name => \'Big Ben\') # finds all categories with a product called Big Ben\n\tCategory.search(:all => \'puzzle\') # product columns are included\n\n\n\nThe main benefit of this plugin is how easy it is to add a dynamic search. You can use the searchify_fields_for helper method to generate dynamic fields for searching. Like this:\n\n\t<% form_tag products_path, :method => \'get\' do %>\n\t  <%= searchify_fields_for Product %>\n\t  <p><%= submit_tag \'Search\', :name => nil, :onclick => \'return searchify_submit()\' %></p>\n\t<% end %>\n\nMake sure you have the prototype libraries included and it should allow you to dynamically add and remove fields. Pretty cool huh?\n\n\n---\n\nCopyright (c) 2008 Ryan Bates, released under the MIT license\n'
Treat an ActiveRecord model as a file attachment, storing its patch, size, content type, etc. b'attachment-fu\n=============\n\nattachment_fu is a plugin by Rick Olson (aka technoweenie <http://techno-weenie.net>) and is the successor to acts_as_attachment.  To get a basic run-through of its capabilities, check out Mike Clark\'s tutorial <http://clarkware.com/cgi/blosxom/2007/02/24#FileUploadFu>.\n\n\nattachment_fu functionality\n===========================\n\nattachment_fu facilitates file uploads in Ruby on Rails.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are three storage options for files uploaded through attachment_fu:\n  File system\n  Database file\n  Amazon S3\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml and the Database file storage requires an extra table.\n\n\nattachment_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the \'meta\') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # path to store the uploaded files.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 backend.  \n                      # Setting this sets the :storage to :file_system.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, and :s3.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => \'application/pdf\'\n    has_attachment :content_type => [\'application/pdf\', \'application/msword\', \'text/plain\']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => [\'application/pdf\', :image], :resize_to => \'x50\'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\'\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\', \n                   :content_type => :image, :resize_to => [50,50]\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\',\n                   :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :s3\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachment_fu migrations\n========================\n\nFields for attachment_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the \'type\' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model \'Avatar\' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => \'320x200>\',\n                            #                  :thumbnails => { :small => \'10x10>\',\n                            #                                   :thumb => \'100x100>\' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> \'small\'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachment_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachment_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachment_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include \':multipart => true\' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => "create" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system and s3 storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachment_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachment_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file \'/path/to/readme.txt\', :type => \'plain/text\', :disposition => \'inline\'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = \'Attachment was successfully created.\'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n'
Is it down for everyone, or just me? b'h1. Introduction\n\nThis code _used to_ power http://downforeveryoneorjustme.com, a "single serving site":http://isthisyourpaperonsingleservingsites.com/ that tells you whether or not a web site appears to be down. The author no longer owns or operates this domain.\n\nh1. Installation (Or, Why You\'re Probably Not Installing This)\n\nThis code is provided mostly as an example resource for other developers seeking to learn about "Google App Engine":http://code.google.com/appengine/. In the unlikely case that you want to install a clone of my site, complete with advertising and such, feel free to do so I guess. That\'s pretty weird, dude.\n\nh1. License\n\nSee the "LICENSE" file in the source code. Included libraries are licensed under their respective licenses.\n\nh1. Author\n\n"Alex Payne":http://al3x.net/\n'
A merb port of the attachment_fu Rails plugin b'attachmerb-fu\n=====================\n\nattachmerb_fu is a port of Rick Olson\'s famous attachment_fu Rails plugin to merb. It tries to be as orm-agnostic as merb while having the same functionalities as the original plugin.\n\nThis plugin is still in a very alpha state and was only tested with datamapper orm, mini_magick image processor and filesystem storage. It may or may not work for your application\n\nNote: attachmerb_fu requires Merb >= 0.5\n\n\nattachmerb_fu functionality\n===========================\n\nattachmerb_fu facilitates file uploads in Merb.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are three storage options for files uploaded through attachmerb_fu:\n  File system\n  Database file (currently not tested)\n  Amazon S3 (currently not tested)\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml and the Database file storage requires an extra table.\n\n\nattachmerb_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the \'meta\') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # path to store the uploaded files.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 backend.  \n                      # Setting this sets the :storage to :file_system.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, and :s3.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => \'application/pdf\'\n    has_attachment :content_type => [\'application/pdf\', \'application/msword\', \'text/plain\']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => [\'application/pdf\', :image], :resize_to => \'x50\'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\'\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\', \n                   :content_type => :image, :resize_to => [50,50]\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\',\n                   :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :s3\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachmerb_fu migrations\n========================\n\nFields for attachmerb_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the \'type\' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model \'Avatar\' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => \'320x200>\',\n                            #                  :thumbnails => { :small => \'10x10>\',\n                            #                                   :thumb => \'100x100>\' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> \'small\'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachmerb_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachmerb_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachmerb_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include \':multipart => true\' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => "create" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system and s3 storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachmerb_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachmerb_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file \'/path/to/readme.txt\', :type => \'plain/text\', :disposition => \'inline\'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = \'Attachment was successfully created.\'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n'
Workflow manager written in Python b'Written by Bob Briski\nASVAB is a workflow manager\n\n\nLICENSE\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2004 Sam Hocevar\n  14 rue de Plaisance, 75014 Paris, France\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO.\n\nThis program is free software. It comes without any warranty, to\nthe extent permitted by applicable law. You can redistribute it\nand/or modify it under the terms of the Do What The Fuck You Want\nTo Public License, Version 2, as published by Sam Hocevar. See\nhttp://sam.zoy.org/wtfpl/COPYING for more details.'
Git mirror of checkpassword-pam CVS repository from sf.net b"\n\n\thttp://checkpasswd-pam.sourceforge.net/\n\n\ncheckpassword-pam is an implementation of checkpassword-compatible\nauthentication program.\n\nCheckpassword is described in <URL:http://cr.yp.to/checkpwd.html>\n\n\ncheckpassword-pam was written from scratch.  There are several older\npackages called checkpassword-pam, derived from DJB's checkpassword\ncode.   This checkpassword-pam is more modern and\nadministrator-friendly.\n\n\nIf you are using Linux-PAM, make sure it is more recent than 0.59.\nIncompatibilities are in the PAM conversation function (number of\nrequests vs number of responses).  All modern Linux distribution use\nPAM newer than that.\n"
A Gitk-like application written in RubyCocoa that looks like it belongs on a Mac.  See the wiki for downloads and screenshots. b'## GitNub\nA RubyCocoa app for getting quick information for a git repo.  Similar to GitK.\n \n### Requirements\n* Git, RubyCocoa, Leopard, RubyGems, open4\n\n### Quick Install\n1. Move GitNub.app to /Applications\n2. Move (or symlink) nub shell file to /usr/local/bin\n\n\n\n### How to Use\nIn your shell, move to a git directory and invoke `nub`.  You always use this \nhelper to invoke the application, otherwise you get nothing.\n\n\t\t$Caged@caged:~/dev/git/gitnub% nub\n\n\t\t\n### Building from Source\n1. Run `git submodule init` & `git submodule update` in the root directory.\n2. Run `rake build` or open GitNub.xcodeproj in Xcode - press Build\n3. Run `rake install` to move GitNub.app to /Applications and copy nub to /usr/local/bin.\n   \n### Major Contributors\n* Justin Palmer - Maintainer\n* Benjamin Stiglitz \n* Kevin Ballard\n* Dustin Sallings\n'
web buttons for your Rakefile b'Merb Flat\n==============\n\nAn example of a small Merb application. Uses a single views directory and one\ncontroller file.\n\nStart with\n\n  merb\n  \n'
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a "normal" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n'
The spiciest of configuration files b'# Spicy Config\n\n## Long ago, in a $HOME directory mounted several servers away\n\nSo this is my pile *o* config files.   In it you will find:\n\n*ZSH shell config*\n\nOn OSX it works best with the latest ZSH (4.3.9).  You can get it via the following instructions:\n    sudo port sync\n    sudo port install zsh-devel\n    $EDITOR /etc/shells and add /opt/local/bin/zsh\n    chsh -S /opt/local/bin/zsh'
Perl Interface to many Web APIs (including AWS, RackSpace, Flickr, PayPal, Google Storage etc) b'===============================================================================\n\nAwsSum is Copyright (C) 2010, Apps Attic Ltd.\n\n===============================================================================\n\nOverview\n--------\n\nAwsSum is a set of libraries that can talk to a number of online Web\nServices. It is designed to be basic so that the hard part of talking to the\nservices is done, yet they provide a simple interface for you to build\napplications on top of them.\n\nThe main design choice for AwsSum is not modelling hundreds of classes\ndependent on what the data is going in or out, but instead to provide a basic\ninterface which takes a hash for the request and returns a hash of the\nresponse.\n\nServices\n--------\n\nThe ones I\'m currently working on are:\n\n* Flickr\n* Amazon Web Services (EC2, ELB, S3, SNS, SQS, CloudFront, etc)\n* RackspaceCloud (CloudServers, CloudFiles)\n* PayPal\n* Twitter\n* GoogleFS\n\nData Normalisation\n------------------\n\nSome web services do weird and wonderful things when returning data whereas\nothers are really nice. Some examples are:\n\n* RackspaceCloud can talk in native JSON (which is very nice)\n* Flickr can return JSON but it\'s basically already been converted from XML\n* AWS returns only XML which we have to convert ourselves\n* PayPal\'s Name-Value-Pair interface returns interesting L_BLAH# lists\n\nSometimes it\'s nice to tidy these up a little bit before returning the data to\nthe calling routine so that it looks like each service returns a clean set of\ndata.\n\nError responses are also dealt with specifically. Generally they are left as-is\nbut bits are copied to another part of the hash ($h->{_error}) along with any\nassociated code or message. Again this is useful for programs so that they\ndon\'t have to figure out where the errors are for each service and can assume\nthey are always in the same place.\n\nLicense\n-------\n\nCopyright (C) 2010, Apps Attic Ltd.\n\nThis module is free software. You can redistribute it and/or modify it under\nthe terms of the Artistic License 2.0. For details, see the full text of the\nlicense in the file LICENSE.\n\nThis program is distributed in the hope that it will be useful, but it is\nprovided "as is" and without any express or implied warranties. For details,\nsee the full text of the license in the file LICENSE.\n\n===============================================================================\n'
templatemaker is a Python library that can extract data from files with a similar format, like HTML pages. b'=============\ntemplatemaker\n=============\n\nGiven a list of text files in a similar format, templatemaker creates a\ntemplate that can extract data from files in that same format.\n\nThe underlying longest-common-substring algorithm is implemented in C\nfor performance.\n\nInstallation\n============\n\nBecause part of templatemaker is implemented in C, you\'ll need to compile the\nC portion of it. Fortunately, Python makes this easy.\n\nTo install systemwide:\n\n    sudo python setup.py install\n\nTo play around with it without having to install systemwide:\n\n    python setup.py build\n    cp build/lib*/_templatemaker.so .\n    rm -rf build\n\nOverview\n========\n\nThe templatemaker.py module provides a class, Template, that is capable of two\nthings:\n\n    * Given an arbitrary number of strings (called "Sample Strings"), it\n      determines the "least-common denominator" template -- that is, a string\n      representing all the common substrings, with placeholders ("holes") for\n      areas in the Sample Strings that differ.\n\n      For example, these three Sample Strings...\n      \n        \'<b>this and that</b>\'\n        \'<b>alex and sue</b>\'\n        \'<b>fine and dandy</b>\'\n\n      ...would produce the following template, where "!" represents a "hole."\n\n        \'<b>! and !</b>\'\n\n    * Once you have a template, you can give it data that is formatted\n      according to that template, and it will "extract" a tuple of the "hole"\n      values for that particular string.\n      \n      Following the above example, giving the template the following data:\n      \n        \'<b>larry and curly</b>\'\n\n      ...would produce the following tuple:\n      \n        (\'larry\', \'curly\')\n\n      You can interpret this as "Hole 0\'s value is \'larry\', and hole 1\'s value\n      is \'curly\'."\n\nBasic Python API\n================\n\nHere\'s how to express the above example in Python code:\n\n    # Import the Template class.\n    >>> from templatemaker import Template\n\n    # Create a Template instance.\n    >>> t = Template()\n\n    # Learn a Sample String.\n    >>> t.learn(\'<b>this and that</b>\')\n\n    # Output the template so far, using the "!" character to mark holes.\n    # We\'ve only learned a single string, so the template has no holes.\n    >>> t.as_text(\'!\')\n    \'<b>this and that</b>\'\n\n    # Learn another string. The True return value means the template gained\n    # at least one hole.\n    >>> t.learn(\'<b>alex and sue</b>\')\n    True\n\n    # Sure enough, the template now has some holes.\n    >>> t.as_text(\'!\')\n    \'<b>! and !</b>\'\n\n    # Learn another string. This time, the return value is False, which means\n    # the template didn\'t gain any holes.\n    >>> t.learn(\'<b>fine and dandy</b>\')\n    False\n\n    # The template is the same as before.\n    >>> t.as_text(\'!\')\n    \'<b>! and !</b>\'\n\n    # Now that we have a template, let\'s extract some data.\n    >>> t.extract(\'<b>red and green</b>\')\n    (\'red\', \'green\')\n    >>> t.extract(\'<b>django and stephane</b>\')\n    (\'django\', \'stephane\')\n\n    # The extract() method is very literal. It doesn\'t magically trim\n    # whitespace, nor does it have any knowledge of markup languages such as\n    # HTML.\n    >>> t.extract(\'<b>  spacy  and <u>underlined</u></b>\')\n    (\'  spacy \', \'<u>underlined</u>\')\n\n    # The extract() method will raise the NoMatch exception if the data\n    # doesn\'t match the template. In this example, the data doesn\'t have the\n    # leading and trailing "<b>" tags.\n    >>> t.extract(\'this and that\')\n    Traceback (most recent call last):\n    ...\n    NoMatch\n\n    # Use the extract_dict() method to get a dictionary instead of a tuple.\n    # extract_dict() requires that you specify a tuple of field names.\n    >>> t.extract_dict(\'<b>red and green</b>\', (\'value1\', \'value2\'))\n    {\'value1\': \'red\', \'value2\': \'green\'}\n\n    # You can specify None as one or more of the field-name values in\n    # extract_dict(). Any field whose value is None will *not* be included\n    # in the resulting dictionary.\n    >>> t.extract_dict(\'<b>red and green</b>\', (\'value1\', None))\n    {\'value1\': \'red\'}\n    >>> t.extract_dict(\'<b>red and green</b>\', (None, \'value2\'))\n    {\'value2\': \'green\'}\n\nThe as_text() method\n====================\n\nThe as_text() method displays the template as a string, with holes represented\nby a string of your choosing.\n\n    >>> t = Template()\n    >>> t.learn(\'123 and 456\')\n    >>> t.learn(\'456 and 789\')\n    True\n\n    Get the template with "!" as the hole-representing string.\n    >>> t.as_text(\'!\')\n    \'! and !\'\n\n    Get the template with "{{ var }}" as the hole-representing string.\n    >>> t.as_text(\'{{ var }}\')\n    \'{{ var }} and {{ var }}\'\n\nNote that as_text() does *not* perform any escaping if your template contains\nthe hole-representing string:\n\n    >>> t = Template()\n    >>> t.learn(\'Yes!\')\n    >>> t.learn(\'No!\')\n    True\n\n    Here, we use "!" as the hole-representing string, and the template contains\n    a literal "!" character. The literal character is not escaped, so there is\n    no way to tell apart the literal template character from the\n    hole-representing string.\n    >>> t.as_text(\'!\')\n    \'!!\'\n\n    Here, we use an underscore to demonstrate that the template contains a\n    literal "!" character. This wasn\'t detectable in the previous statement.\n    >>> t.as_text(\'_\')\n    \'_!\'\n\nWith this in mind, you should choose a string in as_text() that is highly\nunlikely to appear in your template. But, in any case, you shouldn\'t rely on\nthe output of as_text() for use in programs; it\'s solely intended to be a\nvisual aid for humans to see their templates. (The template-maker code has its\nown internal way of representing holes, and it\'s guaranteed to be unambiguous.\nSee "The marker character" below.)\n\nTolerance\n=========\n\nThis template-making algorithm can often be "too literal" for one\'s liking.\nFor example, given these three Sample Strings...\n\n    \'my favorite color is blue\'\n    \'my favorite color is violet\'\n    \'my favorite color is purple\'\n\nThe color is the only text that changes, so one would assume the template would\nbe the following:\n\n    \'my favorite color is !\'\n\nLet\'s see what actually happens:\n\n    >>> t = Template()\n    >>> t.learn(\'my favorite color is blue\')\n    >>> t.learn(\'my favorite color is violet\')\n    True\n    >>> t.learn(\'my favorite color is purple\')\n    False\n    >>> t.as_text(\'!\')\n    \'my favorite color is !l!e!\'\n\nAha, the template-maker was a bit too literal -- it noticed that the strings\n"blue", "violet" and "purple" all contain *something*, then the letter "l",\nthen *something*, then the letter "e", then *something*. Technically, that\'s\ncorrect, but for most applications, this approach misses the forest for the\ntrees.\n\nThere are two ways to solve this problem:\n\n    * Teach a template many, many Sample Strings. The more diverse your input,\n      the less likely this will happen.\n\n    * Use a feature called *tolerance*.\n\nThe template-maker algorithm lets you specify a tolerance -- the minimum\nallowed length of text between holes. This gives you control over avoiding the\nproblem.\n\nTo specify tolerance, just pass the ``tolerance`` argument to the Template\nconstructor. Here\'s the above example with a tolerance=1.\n\n    >>> t = Template(tolerance=1)\n    >>> t.learn(\'my favorite color is blue\')\n    >>> t.learn(\'my favorite color is violet\')\n    True\n    >>> t.learn(\'my favorite color is purple\')\n    False\n    >>> t.as_text(\'!\')\n    \'my favorite color is !\'\n\nAha! Now, that\'s more like it.\n\nSetting tolerance is useful for small cases like this, but note that there is a\nrisk of throwing the baby out with the bathwater, depending on how high your\ntolerance is set. If the tolerance is set too high, your output template might\nbe "watered down" -- less accurate than it possibly could be.\n\nFor example, say we have a list of HTML strings representing significant\nevents:\n\n    <p>My birthday is <span style="color: blue;">Dec. 11, 1954</span>.</p>\n    <p>My wife\'s birthday is <span style="color: red;">Jan. 3, 1957</span>.</p>\n    <p>Our wedding fell on <span style="color: green;">Sep. 24, 1982</span>.</p>\n\nSay we\'d like to extract five pieces of data from each string: the event, the\nHTML color, the month, the day and the year. Here\'s what we might do in Python:\n\n    >>> t = Template(tolerance=5)\n    >>> t.learn(\'<p>My birthday is <span style="color: blue;">Dec. 11, 1954</span>.</p>\')\n    >>> t.learn(\'<p>My wife\\\'s birthday is <span style="color: red;">Jan. 3, 1957</span>.</p>\')\n    True\n    >>> t.learn(\'<p>Our wedding fell on <span style="color: green;">Sep. 24, 1982</span>.</p>\')\n    True\n    >>> t.as_text(\'!\')\n    \'! <span style="color: !</span>.</p>\'\n\nThis resulting template is correct, but it\'s watered down.\n\nThis template is, indeed, watered down. You can tell by extracting some data:\n\n    >>> t.extract(\'<p>My sister\\\'s birthday is <span style="color: pink;">Jul. 12, 1952</span>.</p>\')\n    ("<p>My sister\'s birthday is", \'pink;">Jul. 12, 1952\')\n\nThis data is messy. Namely, the color of the <span> is in the same data field\nas the event date. Assuming we\'re interested in getting as granular as\npossible in our parsing, it would be better to set a lower tolerance.\n\n    >>> t = Template(tolerance=1)\n    >>> t.learn(\'<p>My birthday is <span style="color: blue;">Dec. 11, 1954</span>.</p>\')\n    >>> t.learn(\'<p>My wife\\\'s birthday is <span style="color: red;">Jan. 3, 1957</span>.</p>\')\n    True\n    >>> t.learn(\'<p>Our wedding fell on <span style="color: green;">Sep. 24, 1982</span>.</p>\')\n    False\n    >>> t.as_text(\'!\')\n    \'<p>! <span style="color: !;">!. !, 19!</span>.</p>\'\n    >>> t.extract(\'<p>My sister\\\'s birthday is <span style="color: pink;">Jul. 12, 1952</span>.</p>\')\n    ("My sister\'s birthday is", \'pink\', \'Jul\', \'12\', \'52\')\n\nMuch better.\n\nUsing tolerance is all about tradeoffs. To use this feature most effectively,\nyou\'ll need to experiment and consider the nature of the data you\'re parsing.\n\nVersions\n========\n\nA Template instance keeps tracks of how many Sample Strings it has learned.\nYou can access this via the ``version`` attribute.\n\n    >>> t = Template()\n    >>> t.version\n    0\n    >>> t.learn(\'My name is Paul.\')\n    >>> t.version\n    1\n    >>> t.learn(\'My name is Jonas.\')\n    True\n    >>> t.version\n    2\n\nThe marker character\n====================\n\nThe template-maker algorithm, implemented in C, works by comparing two strings\none byte at a time. Each time you call learn(some_string) on a template object,\nthe underlying C algorithm compares some_string to the *current template*.\n\nA template internally represents each hole with a *marker character* -- a\ncharacter that is guaranteed not to appear in either string. This is set to the\ncharacter "\\x1f".\n\nIn order to guarantee that the marker character doesn\'t appear in a string, the\nTemplate\'s learn() method removes any occurrence of the marker character from\nthe input string before running the comparison algorithm.\n\nThe advantage of this "dumb" approach is its simplicity: the C implementation\ndoesn\'t have to treat markers as a special case. As a result, the C code is\ncleaner and faster. Also, it was easier to write. :)\n\nHowever, there are two disadvantages:\n\n    * First, a template effectively cannot contain the literal marker\n      character.\n\n      In practice, this is *highly* unlikely to be a problem, because the\n      marker character is obscure.\n\n    * Two, in the slight chance that a template contains a multi-byte character\n      (e.g., Unicode) that contains the marker character as one of its bytes,\n      the template-maker algorithm will split that Unicode character at that\n      byte. This happens because the underlying C implementation compares\n      single bytes -- it is *not* Unicode-aware.\n\n      In practice, this is *highly* unlikely to be a problem. In order to get\n      bitten by this, you\'d need an aforementioned multi-byte character to\n      appear in your template (not just in a Sample String, but in your\n      template -- i.e., in *each* Sample String).\n\n      If it turns out there are significant multi-byte characters that contain\n      the marker character "\\x1f", you can change the MARKER value at the top\n      of templatemaker.c and recompile it. Or, suggest a better character to\n      the authors.\n\nChange log\n==========\n\n2007-09-20    0.1.1    Created HTMLTemplate\n2007-07-06    0.1      Initial release\n'
A fischy(sic) version of a friend system b'h1. Fischyfriends\n=============\n\nPre-productioon plugin released to the public.\n\nThe basic idea is that there are two classes of users.\n\nFans, and mutual fans. If two people are fans, they are mutual fans, and thereby in my definition, friends.\n\nMake sure you create a friendship model and this migration:\n\n<pre>\n  <code>\n    class CreateFriendships < ActiveRecord::Migration\n      def self.up\n        create_table :friendships do |t|\n          t.integer  "user_id",    :null => false\n          t.integer  "friend_id",  :null => false\n          t.datetime "created_at" \n          t.datetime "updated_at"\n          t.timestamps\n        end\n        add_index :friendships, :user_id\n        add_index :friendships, :friend_id\n      end\n\n      def self.down\n        drop_table :friendships\n      end\n    end\n  </code>\n</pre>\n\n\n<pre>\n  <code>\n    #friendship.rb\n    \n    class Friendship < ActiveRecord::Base\n      belongs_to :friendshipped_by_me,   :foreign_key => :user_id,   :class_name => "User"\n      belongs_to :friendshipped_for_me,  :foreign_key => :friend_id, :class_name => "User"\n    end\n  </code>\n</pre>\n\n\n\nAlso add this in your user model:\n\n<pre>\n  <code>\n    #user.rb\n    \n    acts_as_fischyfriend\n  </code>\n</pre>\n\n\n\n\nh1. RSpec Example\n=======\n\n<pre>\n  <code>\n    require File.dirname(__FILE__) + \'/../spec_helper\'\n\n    describe Friendship do\n     before(:each) do\n       @friendship = Friendship.new\n     end\n\n     it "should be valid" do\n       @friendship.should be_valid\n     end\n    end\n\n    describe Friendship, "between two users" do\n     fixtures :users\n\n     before(:each) do\n       @quentin = users(:quentin)\n       @bob = users(:aaron)\n       @wtf = User.create!(:login => \'a_user\', \n                           :password => \'password\', \n                           :password_confirmation => \'password\', \n                           :email => \'poop@poop.com\')\n     end\n\n     it "should acknowledge there is a friendship between them" do\n       @bob.add_friend @quentin\n       @bob.add_friend @wtf\n       @quentin.add_friend @bob\n\n       @bob.reload\n\n       @bob.is_a_fan_of.should include(@wtf)\n       @bob.is_a_fan_of.should_not include(@quentin)\n\n       @bob.pending_mutual_friends.should include(@wtf)\n       @bob.pending_mutual_friends.should_not include(@quentin)\n\n       @wtf.mutual_friends.should be_empty\n       @wtf.fans_of_me.should include(@bob)\n\n       @quentin.reload\n       @quentin.mutual_friends.should include(@bob)\n       @quentin.mutual_friends.should_not include(@wtf)\n\n       @quentin.destroy_friendship_with @bob\n       @quentin.reload\n       @quentin.friends_by_me.should_not include(@bob)\n\n     end\n\n     it "should be able to tell you if two people are mutual friends" do\n       @bob.add_friend @quentin\n       @bob.add_friend @wtf\n       @quentin.add_friend @bob\n       @bob.is_mutual_friends_with?(@quentin).should eql(true)\n       @bob.is_mutual_friends_with?(@wtf).should eql(false)\n     end\n    end\n  </code>\n</pre>\n\nh1. Changelog\n=======\n\n*August 3, 2008*\n*  Accepted changeset  "868bc":http://github.com/pogopuffin/fischyfriends/commit/868bc89db99fb52385028b9679eb917548a447b6 by pogopuffin\n*  Added in specs against above changeset\n* Tested against Rails 2.1.0 w/ passes\n* Updated migration example with indexes, is this wise? I\'m not a database wiz here.\n\n*March 14, 2008*\n* First Release\n\nCopyright (c) 2008 [Daniel Fischer] / http://www.danielfischer.com, released under the MIT license\n'
enjoy the splendor of textmate bundles and sass.  b'Textmate with alternative SASS Syntax\n=======================================\n\nFor those of you how prefer the alternative Sass Synatx:\n\n    .pagination\n      margin: 10px 0 10px 0\n      text-align: center\n      font-size: 14px\n      span\n        color: #000\n      span.disabled\n        display: none\n      a \n        margin: 0 1px 0 1px\n\nRegards, Kalle\n\n\nINSTALLATION\n------------------------------------\n\ncd ~/Library/"Application Support"/TextMate/Bundles/\n\nif that directory wasn\'t found, you\'ll need to create it, then:\n\ngit clone git://github.com/fluxsaas/sass-textmate-bundle.git "Ruby-Saas-Alternative-Syntax.tmbundle"\n\n\nTHANKS\n------------------------------------\n\nthis bundle is based on the excellent css bundle from minimal design http://minimaldesign.net/downloads/tools/textmate-css-bundle use both and become an efficient designer!\n\nRobert Gaal for his support http://github.com/robertgaal'
Everyone else has a private emacs world, so why not me? 
Parses International dates in texfields b'IntlDate\n========\n\nDate or DateTime Columns are usually show in forms with the date helpers. However, often you just\nwant a textfield, instead of the multiple combo boxes. This will work, but dates are displayed \nin the database format (2008-03-13 14:55:44). While that is readable, it\'s usually not what\nyour users expect.\n\nTo display dates, you can define formats used in the to_s method of the Date objects\n\n    ActiveSupport::CoreExtensions::Date::Conversions::DATE_FORMATS[:ch_dt] = "%d.%m.%Y %H:%M"\n    ActiveSupport::CoreExtensions::Date::Conversions::DATE_FORMATS[:ch_d] = "%d.%m.%Y"\n    \nWouldn\'t it be nice, if you could also enter dates in these formats?\n\nNow you can:\n\n* install the plugin\n\n    git submodule add git://github.com/jcfischer/intldatefield.git vendor/plugins/intldatefield\n    \n* add any DATE_FORMATS to your \'\'config/environment.rb\'\'\n* if you have a textfield for a date column, it will just work\n\n\nRepository\n----------\n\n[http://github.com/jcfischer/intldatefield/tree/master][1]\n\nCopyright (c) 2008 Jens-Christian Fischer, [InVisible GmbH][2], released under the MIT license\n\n\n[1]: http://github.com/jcfischer/intldatefield/tree/master\n[2]: httb://www.invisible.ch\n'
An extension that provides some useful blogging tags for the Radiant CMS b'# Repository has moved to [http://github.com/santry/blog_tags](http://github.com/santry/blog_tags)'
An extension for the Radiant CMS that provides tags for embedding Flickr slideshows b'# Repository has moved to [http://github.com/santry/flickr_tags](http://github.com/santry/flickr_tags)'
An extension for the Radiant CMS with tags for hiding web content from robots using Dan Benjamin's enkoder b'# Repository has moved to [http://github.com/santry/enkoder_tags](http://github.com/santry/enkoder_tags)'
CruiseControl.rb Campfire notifications b'h1. Smoke Signals\n\nh2. Description\n\nA plugin for CruiseControl.rb offering the following features:\n\n* Sends notifications to a Campfire room with the build status (success, failure, fixed) along with a URL to the build.\n* Detects and sends notifications of Subversion failures.\n* Supports different rooms per project. \n\nh2. Install\n\nDownload smoke_signals via git (git clone git://github.com/relevance/smoke_signals.git) or as a tarball (http://github.com/relevance/smoke_signals/tarball/master). Then, on your cruisecontrol.rb server:\n\n # sudo gem install tinder\n # cp lib/smoke_signals.rb <CRUISE_ROOT>/builder_plugins/installed\n # cp smoke_signals.yml_sample <CRUISE_ROOT>/config/smoke_signals.yml\n # edit <CRUISE_ROOT>/config/smoke_signals.yml with your campfire specifics\n # for project-specific rooms, in your build\'s specific cruise_config.rb add the following: \n #     project.smoke_signals.room_name = "Room name" # replace Room name\n # restart CruiseControl.rb\n\nh2. URLS\n\n* "Home page": http://opensource.thinkrelevance.com/wiki/smoke_signals\n* "git master": git://github.com/relevance/smoke_signals.git\n* "CC.rb plugins documentation":http://cruisecontrolrb.thoughtworks.com/documentation/plugins\n\nh2. LICENSE\n\nCopyright (c) 2007-8 Relevance Inc. (Forked from http://rubyforge.org/projects/campfire-ccrb/)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Radiant Image and Assets Extension b'= Assets\n\nAdds the ability to upload images. Other file types to be added.\n'
Zlib in Ruby b"= Zliby:  Pure Ruby Zlib \n=== Version Information\nRelease:: 0.0.5\nDescription:: A Ruby 1.8.6 Zlib compatible module.\nReference:: Zlib[http://www.zlib.net] 1.2.3\n\n== Introduction\n\nZliby is an implmention of the Zlib[http://www.zlib.net] library written in \npure Ruby.  It is meant to be API compatible with the existing Ruby Zlib \nextension library. The purpose of this library was two-fold:\n\n1. To see if it could be done\n2. To provide IronRuby[http://www.ironruby.net] with a compatible Zlib \n   implementation\n\nWhile IronRuby[http://www.ironruby.net] was the inspirition for this project,\nthe fact that it's written in pure Ruby means any Ruby implementation should\nbenefit. \n\n=== Acknowledgements\n\nThe deflate implmentation is essentially a port of puff.c from the Zlib[http://www.zlib.net]\nimplementation by Jean-loup Gailly and Mark Adler.  All due praise should be \ndirected their way.\n\n==== Author\n\nAuthor:: Michael Letterle [ theprokrammer [ a t ] prokrams.com ]\nCopyright:: 2008 by Michael Letterle\n\n== License\n:include: LICENSE\n"
A modern mud-server. b"Build instructions:\n* Install Sqlite3:\nThis can be done either through the official website (http://sqlite3.org), your distribution's package manager, or by using the Sqlite3 makefile in the UnsignedByte/Sqlite3 subdirectory. If you do, you'll need to rename the resulting libMySqlite3.a (which can then be found in UnsignedByte/lib) to libsqlite3.a, since all projects use that name.\n\n* Compile the Resources\nThis can be done by typing the following:\nmake -f makefile.resource\nThis is the makefile exported by CodeLite (see http://codelite.sf.net) and will compile the Resources, the Generator (although you won't need it) and the Initializer, which can be used to generate the sqlite3 database with the appropriate structure and some initial values.\n\n* Compile the Core\nThis can be done by typing the following:\nmake\nThis is also a makefile exported by CodeLite and will compile the core, that is, the game itself.\n\n* Run the Initializer\nYou can find the Initializer in the UnsignedByte/bin subdirectory after having compiled the Resources.\nThis can be done by typing the following:\ncd UnsignedByte\n./Initialize\n\n* Run the Core\nThe Core is located in the same directory as the Initializer.\nThis can be done by typing the following:\n./UnsignedByte\n\nThe default login is 'hp' with password 'qq'. The 'hp' name is defined in GameVersion.h (which can be found in UnsignedByte/include) and the 'qq' is defined in Initializer.cpp (which can be found in UnsignedByte/Initializer). A default character has also been created, named 'hp'.\n\nHave fun!\n"
Ruby wrapper for Yahoo!'s FireEagle b'FireEagle[http://fireeagle.yahoo.net] (FE) is a system providing centralized\nmanagement of user location information. FE allows 3rd party developers to\npdate and/or access user\'s location data.\n\nhttp://fireeagle.yahoo.net/developer/documentation\n\n== Installation\n\n gem install fireeagle\n \n== Usage\n\n  >> require \'fireeagle\'\n  >> client = FireEagle::Client.new(\n    :consumer_key        => "<consumer key>",\n    :consumer_secret     => "<consumer secret>",\n    :access_token        => "[access token]",\n    :access_token_secret => "[access token secret]")\n\n==== With a User-specific OAuth Access Token\n\n  # update your location\n  >> client.update(:q => "punta del diablo, uruguay") # I wish\n  # query your location\n  >> user = client.user\n  => #<FireEagle::User:0x1ca5e08 ... >\n  >> user.locations\n  => [#<FireEagle::Location:0x1cdd9e8 ...>, #<FireEagle::Location:0x1cc8ffc ...>, ... ]\n  >> user.best_guess\n  => #<FireEagle::Location:0x1cdd9e8 ...>\n  >> user.best_guess.name\n  => "Punta del Diablo, Uruguay"\n  # lookup a location\n  >> locations = client.lookup(:q => "30022")\n  => [#<FireEagle::Location:0x1cdd9e8 ...>, #<FireEagle::Location:0x1cc8ffc ...>, ...]\n  >> locations.first.name => "Alpharetta, GA 30022"\n  >> locations.first.place_id => "IrhZMHuYA5s1fFi4Qw"\n\n== Authorization\n\nAuthorization is handled by OAuth. For more details about the OAuth\nauthorization flow and how it differs based on your application type, please\nsee http://fireeagle.yahoo.net/developer/documentation/authorizing\n\n== Contributing\n\nhttp://github.com/jnewland/fireeagle/tree/master. You know what to do.\n\nRubyforge Project Page:: http://rubyforge.org/projects/fireeagle\nAuthor::    Jesse Newland (http://soylentfoo.jnewland.com) (jnewland@gmail.com[mailto:jnewland@gmail.com])\nCopyright:: Copyright (c) 2008 Jesse Newland. Portions[http://pastie.caboo.se/private/oevvkdzl0zrdkf8s7hetg] Copyright (c) 2008 Yahoo!\nLicense::   Distributed under the same terms as Ruby\n'
Rails plugin that will display a user's AIM status b'AimStatusHelper2\n========================================\nJon Maddox\njon@jonsthoughtsoneverything.com\nhttp://www.simplisticcomplexity.com\n\n\nThe aim status helper allows you to show if someone is online with the AOL Instant Message network. Included are a few helpers that, with the right combination, should give you everything you need.\n\nThis is a new version from my old AimStatusHelper. This one uses the crappy AIM Web API, and parses the returned XML. This allows us to have more in depth statuses. Available now are Online, Offline, Idle, and Away. \n\nI\'ve loosened up how you use the helper now and made it a bit more dynamic. With these 3 available methods, you should be able to get away with whatever format and visualization you want now. The old way was pretty gross, I know.\n\nI\'ve included some icons to get you started. The first are iChat inspired icons. The second come from the wonderful Silk icon collection by Mark James.\n\n\nThanks!\n=================\nMark James\nmjames@gmail.com\nhttp://www.famfamfam.com/lab/icons/silk/\n\n\nSome Uses:\n\naim_status \'maddox123456\' => "online"\n\naim_status_icon \'maddox123456\' => image tag with status_online.png as its path\n\naim_to \'Jon Maddox\', \'maddox123456\' => a link that will pop open an AIM window to text me\n\naim_to( aim_status_icon(\'maddox123456\'), \'maddox123456\') => the status icon corresponding to my status with a link to message me.\n'
Rails plugin that will help you embed quicktime content b'QuicktimeHelper\n===============\nJon Maddox\njon@jonsthoughtsoneverything.com\nhttp://www.simplisticcomplexity.com\n\n\nThe quicktime helper makes use of Geoff Stearns\' qtobject.js to give you a standards compliant way to embed Quicktime in your page. It also provides friendly detection.\n\nAfter including the \'qtobject.js\' file in your view, using the quicktime_tag helper is simple:\n\n<%= quicktime_tag(:path_to_video_file, :id, :width, :height, options = {} ) %>\n\nYou can also use a placeholder image by adding :placeholder to the options hash. Pass in a path to an image and you\'re \nQuicktime video will be preceded with a placeholder image, click it to start the movie. You know, just like Apple Trailers.\n\n<%= quicktime_tag(:path_to_video_file, :id, :width, :height, {:placeholder => "/images/click-to-play.gif", :loop => true, :autoplay => false} ) %>\n\n\n\nExtra parameters that are used by the quicktime embed object can be added using the options hash. For Example:\n\n<%= quicktime_tag(:path_to_video_file, :id, :width, :height, {:loop => true, :autoplay => false} ) %>\n\n\n\nuse \'rake update_quicktime_script\' if the javascript didn\'t get placed in /public/javascripts.\n\n\nqtobject.js was masterfully created by Geoff Stearns\nhttp://blog.deconcept.com/2005/01/26/web-standards-compliant-javascript-quicktime-detect-and-embed/'
Dave Thomas' proof of concept test library b"Dave Thomas's Proof of Concept Testing Library\nsee: http://pragdave.blogs.pragprog.com/pragdave/2008/03/playing-with-a.html\n\n# -*- encoding: utf-8 -*-\n# This code is a proof-of-concept of a simple testing library.\n# It comes with no warranty (and no tests) and is guaranteed to \n# be broken in more ways than a teenager's heart. Use at your own risk.\n#\n# This code is unsupported. Requests for changes, bug reports, \n# and patches will be silently but brutally ignored.\n#\n# Usage: see end of file\n#\n# Copyright (c) 2008, Dave Thomas <dave@pragprog.com> \n# All rights reserved.\n# http://pragdave.pragprog.com\n#\n# LICENSE:\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#     * Redistributions of source code must retain the above copyright\n#       notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of the Dave Thomas nor the\n#       names of its contributors may be used to endorse or promote products\n#       derived from this software without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY DAVE THOMAS \xe2\x80\x9cAS IS\xe2\x80\x9d AND ANY\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL DAVE THOMAS BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\n\n"
An improved acts_as_changed Rails plugin, inspired by others, with some extras. b"ActsAsChanged\n=============\n\nMake an ActiveRecord model keep track of it's original attributes so that changes can be detected,\nand partial saves, dirty-flag detection and other change-driven algorithms are possible.\n\nMany new methods are added to ActiveRecord::Base related to changed attributes, and even few additional goodies.\nAll of the callbacks still work, etc.\n\nThe only core ActiveRecord::Base behaviour which is *automatically* changed by this plugin is the\nupdate_attribute and update_attributes methods (see below).\n\nOnly one option is supported by the acts_as_changed method:\n\n::update_changes:: true / false\n\nIf this option evaluates to true, update_attribute(s) and friends will update any changed attributes.\nOtherwise, by default, they will update each of the specified attribute(s).\n\nAuthor::    Joe Khoobyar (mailto:joe@collectivex.com)\nCopyright:: Copyright (c) 2007-2008 CollectiveX, Inc.\nLicense::   GNU General Public License version 2\n"
Collection and visualization of kernel call graphs 
Scalable Active Record implementation: Using Alternative to Join with Emphasis on Write-Through Cache 
Community-managed fork of the Arc dialect of Lisp; for commit privileges submit a pull request. b'Anarki: a publicly modifiable \'wiki-like\' fork of Arc Lisp (http://www.paulgraham.com/arc.html)\n\nThe intention is to be extremely permissive in accepting patches. For commit\nprivileges, just submit your first pull request or ask on http://arclanguage.org/forum.\n\n*Important*: If you are already running a HN-like site, migrating to this fork\nmight mess up your site\'s data. Come [talk to us](http://arclanguage.org/forum)\nfirst, and be sure to make a backup before the migration.\n\nTo run, install Racket from http://racket-lang.org, then:\n\n    $ git clone http://github.com/arclanguage/anarki\n    $ cd anarki\n    $ ./arc  # interactive repl\n    arc> (quit)\n    $\n\nAnarki has thorough automated tests. To run them, install mercurial, then:\n\n    # start in the anarki directory\n    $ hg clone https://bitbucket.org/zck/unit-test.arc\n    $ ./arc\n    arc> (load "tests.arc")\n\nAnarki is explicitly not constrained to maintain compatibility with upstream\nreleases, and compatibility status may swing wildly from commit to commit\ndepending on who takes an interest. To see a list of what\'s different, type\n`(incompatibilities)` at the repl. If you make an incompatible change, please\nupdate this list.\n\nIf you run into trouble: http://sites.google.com/site/arclanguagewiki; http://arclanguage.org/forum\n\n---\n\nTo run the HN server, first pick your (the admin\'s) username:\n\n    $ mkdir www\n    $ echo __username__ > www/admins\n\n(You can have multiple admins. Add them all to www/admins, separated by whitespace.)\n\nNow bring up the server:\n\n    $ ./run-news\n\nThere\'ll be a pause while the server loads up, with some messages, then you\'ll\nsee the \'arc> \' prompt.\n\nGo to [http://localhost:8080](http://localhost:8080). Click on login, and\ncreate the account for your username. You should now be logged in as an admin.\n\nDon\'t worry about "user break" or "error writing" messages.\n\nTo customize News, change the variables at the top of `lib/news.arc`. To\nchange the port your server runs at, modify `lib/run-news.arc`.\n\nAny interactive changes to the prompt will be reflected immediately in the\nserver, without needing to restart it. Don\'t forget to add them to the .arc\nfiles as appropriate, otherwise they\'ll be lost when you stop the server or it\ndies for some reason.\n'
A custom capistrano deploy strategy that creates a SVN export in a shared location. b'\nCopyright 2008 Ken Collins, Decisiv Inc.\nDistributed via MIT license\nFeedback appreciated: kcollins at [nospam] decisiv dt net\n\nThis class greatly speeds up deploy times to multiple hosts by only updating your latest source code to a \nshared drive on a single host. If you have 5 app servers then the code update only happens with the primary \nor first server while all others use the shared cache to copy from. The remote cache is a SCM export \ncreated in one of the following two ways.\n\n  1) If :remote_repository_access is not set or is false, a local export is made, compressed\n     and copied to the target host and uncompressed to the remote shared cache.\n  2) If :remote_repository_access returns true, the target host will perform a direct SCM \n     export to the remote shared cache.\n\nDespite which method is used above, the creation of the remote shared cache will only target the primary \napp server using the primary_app_server() method. Again all other app targets assume that this is a \nshared directory accessbile to all. This yeilds faster deployments since capistrano does not have to \nlocally prepare/compress/copy the source to each host.\n\nThis development strategy inherets from the normal Copy deployment strategy and uses many of the same \nmetods/configurations available to that class when needing to perform local export and copy of the source.\nExamples include, :copy_compression, :copy_remote_dir, :copy_dir. Configurations specific to this strategy \nincludes, :shared_cache_dir (parent of all cached revisions) and :remote_repository_access (which determins \nwhat method is used above to create the shared cache).\n\n'
A Nu and Objective-C wrapper for John Ousterhout's Tool Command Language (Tcl). b'\nThis is a simple Objective-C wrapper around the Tcl API.\n\nCopyright 2008, Neon Design Technology, Inc.\nReleased under the Apache Public License, v. 2.0.\n\nSee the demo.nu file for usage.\n\nTested on Mac OS 10.5 and Ubuntu 7.10.\n'
Repository of Downloads for OS X b'This is a repository of all my downloads for OS X Leopard\n'
 b'h1. Django Basic\n\nhttp://wiki.mylesbraithwaite.com/projects:django_basic_social\n\nA combination of simple Django projects.\n\nh2. Third Party Applications:\n\n* "Django Basic Blog":http://code.google.com/p/django-basic-blog/\n* "Django Basic Places":http://code.google.com/p/django-basic-places/\n* "Django Basic People":http://code.google.com/p/django-basic-people/\n* "Django Basic Library":http://code.google.com/p/django-basic-library/\n* "Django Basic Profiles":http://code.google.com/p/django-basic-profiles/\n* "Beautiful Soup":http://www.crummy.com/software/BeautifulSoup/\n'
A Haml Scaffolding Generator for RSpec b"RSpec Haml Scaffold Generator\n====\n\nThis is an uber version of the RSpec Scaffold Generator, the following things have been added:\n\nSupport for Haml instead of erb\nNested routes (nested tests/migrations)\n\nExamples:\n\n  ./script generate rspec_haml_scaffold post # no attributes, view will be anemic\n  ./script generate rspec_haml_scaffold post attribute:string attribute:boolean # this is actually broken at the moment, don't do this !!! Feel free to patch it"
rails plugin for implementing rich deck behavior usable for games, banner rotation, flash cards, and possibly wizards in a future release b'DeckOfAnyThings\n===============\n\nIntroduction goes here.\n\n\nExample\n=======\n\nExample goes here.\n\n\nCopyright (c) 2008 [name of plugin creator], released under the MIT license\n'
Provides scores for NCAA tournament 
the ruby hl7 library b'=Ruby HL7 Library README\n\nA simple way to parse and create hl7 2.x messages with ruby.\nExamples can be found in HL7::Message\nThe version id can be found in the HL7::VERSION constant.\n\n* Bug tracking: http://trac.hasno.info/ruby-hl7\n* Subversion:   svn://hasno.info/ruby-hl7\n* Git:          git://github.com/segfault/ruby-hl7.git\n* Docs:         http://ruby-hl7.rubyforge.org\n* Rubyforge:    http://rubyforge.org/projects/ruby-hl7\n* Lists\n  * Developers: mailto:ruby-hl7-devel@rubyforge.org\n  * Users: mailto:ruby-hl7-users@rubyforge.org\n\n Copyright (c) 2006-2009 Mark Guzman\n\n== Download and Installation\nInstall the gem using the following command:\n gem install ruby-hl7                 \n\n\n== License\n see the LICENSE file\n'
Assorted collection of useful examples b"Examples Repository\n===================\nThis project consists of code examples for using various libraries,\nor frameworks, that I have written or may have come across while\nreading documentation. Some of these examples may be useful as starting\npoints for new projects, but for the most part they're meant as\nexploratory pieces.\n\n\nSee Also\n========\nhttp://github.com/zacheryph/examples/tree/master\n"
ruby libxml library targetting speed and ease of use. provides an hpricot-like interface to xml b'= FastXml\na simple fast xml library using libxml and libxslt with an hpricot-like api\n\n== Overview\n\nFastXml: \n\n 1) is not standalone, it *requires libxml* and *libxslt*\n 2) attempts to provide the speediest xml parsing library available for ruby\n 3) provides an hpricot-like syntax for xml parsing and xslt processing\n\n== Example\n doc = FastXml( open( \'test.xml ) )\n puts doc.root.name\n puts doc.root.content\n \n doc.root.children.each do |node|\n   puts "%s => %s" % [ node.name, node.content ]\n end\n\n (doc/"/node").each { |node| puts node.inspect } #xpath search\n doc.search( "//node" ).each { |node| puts node.inspect } \n\n\n== Copyright & Licensing\nCopyright Mark Guzman 2007-2008\n\nPlease see the LICENSE file for more details. The short version is it\'s under the same terms as Ruby.\n'
My first program written using C++ & SDL & OpenGL 
IRC Client for Mac b'# LimeChat\n\nLimeChat is an IRC client for Mac OS X.\n\n* One window for multiple servers.\n* Rich keyboard shortcuts for your comfortable operations.\n* Fast and stable.\n\n## Author\n\n* Satoshi Nakagawa http://github.com/psychs\n* ##limechat on chat.freenode.net\n\n## Thanks To\n\n* Allan Odgaard  (WebViewAutoScroll and TextMate logo)\n* Atsuhisa Shimazawa  (Badge images)\n* Dustin Voss  (AsyncSocket)\n* Eloy Duran  (RubyCocoa, crash reporter, Growl notifier, preferences patches)\n* Evan Phoenix  (Inline images support)\n* Fujimoto Hisa  (RubyCocoa)\n* Josh Goebel  (CocoaSheet, many improvements on code and UIs)\n* Jun Morimoto  (Bug fixes)\n* Keiji Yoshimi  (Growl notifier patches, hot key patches)\n* Kevin Ballard  (Theme support patches)\n* Laurent Sansonetti  (RubyCocoa, many requests and suggestions)\n* Peter Haza  (Channel name context menu patch)\n* Python Software Foundation  (Python logo)\n* Rails team  (Ruby on Rails logo)\n* Shingo Morita  (Badge images)\n* Stanley Rost  (Limelight theme)\n* Stefan Rusterholz  (Many suggestions and patches)\n* Takashi Tsugo  (Deep Ocean theme)\n* The Growl Project  (Growl framework and logo)\n* why the lucky stiff  (Syck)\n* William Thimbleby  (Syck Cocoa)\n* Yohei Endo  (Application icons)\n* Yukihiro Matsumoto  (Ruby logo)\n\n## License\n\nLimeChat is copyrighted free software by Satoshi Nakagawa (psychs AT limechat DOT net).\nYou can redistribute it and/or modify it under the terms of [the GPL version 2](https://github.com/psychs/limechat/blob/master/GPL.txt).\n'
Trails tracks b'If only technology was a wee bit easier.'
Functional Blogging b"# CrossConnector\n\nCrossConnector is a web-based collaboration program, originally designed for ministries and missionaries. \n\n * CrossConnector lets you keep all your ministry information in one place. \n * It's an easy way to publish your ministry information on the web. \n * Use CrossConnector to plan a single mission trip or all your church's ministry information.\n\nThis is pretty old code! Please give me a lot of grace when you're reading the sources. \n\nPlease feel free to branch, fork, push, pull, and use this code for your own purposes (only for good, not for evil). All I ask is that you give me credit for the idea and retain the license agreement (see LICENSE file) with my copyright info. \n\n## Support\n\nUnfortunately, I cannot provide support for this software. It's basic Ruby on Rails, so you should be able to get it running pretty easily. Other than that, you're on your own. \n\n"
A fork of CyBot (http://repo.or.cz/w/six.git) 
Ruby on Anvils ;) b'Anvil\n=====\nA desktop application framework that is GUI Toolkit Independent.'
Behaviour Driven Development framework for Ruby b'= RSpec\n\n* http://rspec.info\n* http://rspec.info/rdoc/\n* http://github.com/dchelimsky/rspec-rails/wikis\n* mailto:rspec-devel@rubyforge.org\n\n== DESCRIPTION:\n\nRSpec is a Behaviour Driven Development framework with tools to express User\nStories with Executable Scenarios and Executable Examples at the code level.\n\n== FEATURES:\n\n* Spec::Story provides a framework for expressing User Stories and Scenarios\n* Spec::Example provides a framework for expressing Isolated Examples\n* Spec::Matchers provides Expression Matchers for use with Spec::Expectations and Spec::Mocks.\n\n== SYNOPSIS:\n\nSpec::Expectations supports setting expectations on your objects so you\ncan do things like:\n\n  result.should equal(expected_result)\n  \nSpec::Mocks supports creating Mock Objects, Stubs, and adding Mock/Stub\nbehaviour to your existing objects.\n\n== INSTALL:\n\n  [sudo] gem install rspec\n\n or\n\n  git clone git://github.com/dchelimsky/rspec.git\n  cd rspec\n  rake gem\n  rake install_gem\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2005-2008 The RSpec Development Team\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
SQLAlchemy integration with Django 
Javascript library that uses the text from a textbox to automatically filter the contents of an associated block element. b"Autofilter is a javascript library that uses the value from a text field to\nautomatically filter out elements in an associated block element that don't\nmatch the search criteria."
Personal blog b'== Welcome to Rails\n\nRails is a web-application framework that includes everything needed to create \ndatabase-backed web applications according to the Model-View-Control pattern. \n\nThis pattern splits the view (also called the presentation) into "dumb" templates\nthat are primarily responsible for inserting pre-built data in between HTML tags.\nThe model contains the "smart" domain objects (such as Account, Product, Person,\nPost) that holds all the business logic and knows how to persist themselves to\na database. The controller handles the incoming requests (such as Save New Account,\nUpdate Product, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\'re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Apache .htaccess example\n\n# General Apache options\nAddHandler fastcgi-script .fcgi\nAddHandler cgi-script .cgi\nOptions +FollowSymLinks +ExecCGI\n\n# If you don\'t want Rails to look in certain directories,\n# use the following rewrite rules so that Apache won\'t rewrite certain requests\n# \n# Example:\n#   RewriteCond %{REQUEST_URI} ^/notrails.*\n#   RewriteRule .* - [L]\n\n# Redirect all requests not available on the filesystem to Rails\n# By default the cgi dispatcher is used which is very slow\n# \n# For better performance replace the dispatcher with the fastcgi one\n#\n# Example:\n#   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]\nRewriteEngine On\n\n# If your Rails application is accessed via an Alias directive,\n# then you MUST also set the RewriteBase in this htaccess file.\n#\n# Example:\n#   Alias /myrailsapp /path/to/myrailsapp/public\n#   RewriteBase /myrailsapp\n\nRewriteRule ^$ index.html [QSA]\nRewriteRule ^([^.]+)$ $1.html [QSA]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ dispatch.cgi [QSA,L]\n\n# In case Rails experiences terminal errors\n# Instead of displaying this message you can supply a file here which will be rendered instead\n# \n# Example:\n#   ErrorDocument 500 /500.html\n\nErrorDocument 500 "<h2>Application error</h2>Rails application failed to start properly"\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! \nYou need to install ruby-debug to run the server in debugging mode. With gems, use \'gem install ruby-debug\'\nExample:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n== dbconsole\n\nYou can go to the command line of your database directly through <tt>script/dbconsole</tt>.\nYou would be connected to the database with the credentials defined in database.yml.\nStarting the script without arguments will connect you to the development database. Passing an\nargument will connect you to a different database, like <tt>script/dbconsole production</tt>.\nCurrently works for mysql, postgresql and sqlite.\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  If the app has frozen rails, those gems also go here, under vendor/rails/.\n  This directory is in the load path.\n'
 b'Here  I will store puppet configurations for my machines\n'
Application configuration files 
A popular and flexible JavaScript DatePicker for RubyOnRails (and others) b"# CalendarDateSelect\n\nLegacy support as a Rails 3.1+ Engine. For support of earlier versions of Rails, check the 1.x branch.\n\nhttp://code.google.com/p/calendardateselect/\n\n## Examples\n\n[See a demo here](http://electronicholas.com/calendar)\n\n## Submitting patches\n\nPlease take care to do the following:\n\n* Clean up your patch (don't send a patch bomb with a hundred features in one)\n* Write test cases!\n* As a general rule of thumb, think of ways to make things more general purpose than specific. \n"
ActiveRecord plugin allowing you to hide and restore records without actually deleting them. b"= acts_as_paranoid\n\nOverrides some basic methods for the current model so that calling #destroy sets a 'deleted_at' field to the \ncurrent timestamp.  ActiveRecord is required.\n\n== Resources\n\nInstall\n\n* gem install acts_as_paranoid\n\nRubyforge project\n\n* http://rubyforge.org/projects/ar-paranoid\n\nRDocs\n\n* http://ar-paranoid.rubyforge.org\n\nSubversion\n\n* http://techno-weenie.net/svn/projects/acts_as_paranoid\n\nCollaboa\n\n* http://collaboa.techno-weenie.net/repository/browse/acts_as_paranoid"
A Python module to access del.icio.us via its API. b'Python-Delicious\n================\n\nPython module to access del.icio.us via its API.\n\nCopyright 2005-2008 by Paul Mucur\nBSD License\n\nTo install:\n\n    python setup.py install\n\nFor usage information and documentation, see index.html.\n\nContributors\n------------\n\n* [Morgan Craft](https://github.com/mgan59)\n'
A simple Java puzzle game written in 2004 for a university project. b"This is a simple puzzle game written in Java for the final project of my first year of university.\n\nTo play the game, simply compile and run it in your respective operating system's console:\n\n```console\n$ javac *.java\n$ java Game\n```\n\nThe object of the game is to clear the screen of coloured blocks by clicking on groups of three or more touching blocks of the same colour. As if that wasn't exciting enough, there are several game modes and it is possible to save and load games from human-readable text files.\n\nIt was written on a Mac but was demoed on Windows so it should work on both those platforms at least.\n\nIt's not provided here because I think it is a particularly fun game to play but because it was one of the first complicated things I ever developed.\n"
Rails gem/plugin that provides contextual access control to RESTful resources. b'RESTful_ACL\n===========\nRESTful_ACL is a full-stack context-based permission engine. It provides access control that is contextually aware. (If a parent is closed, a child is not editable, etc.) Permission is as simple as true or false.\n\nRails 3\n-------\nRESTful_ACL 3.1 and on are Rails 3 ready. Rails 2 will no longer be supported. Sorries.\n\nRequirements\n------------\nRESTful_ACL requires the notion of a `current_user`. Most authenticaion plugins provide this (AuthLogic, RESTful_Authentication, etc.)\n\nHow to Install\n--------------\nInstall the RESTful_ACL gem:\n\n    sudo gem install restful_acl -s http://gemcutter.org\n\nAdd the gem to your Gemfile file as thus:\n\n    gem "restful_acl"\n\nRESTful_ACL requires a named route named "denied". Add the following to your routes.rb file:\n\n    map.denied \'denied\', :controller => \'some_controller\', :action => \'denied_action\'\n\nControllers\n-----------\nAdd `before_filter :has_permission?` into any controller that you\'d like to restrict access to (or `application_controller.rb` for your entire app).\n\nModels\n------\nDefine the following five methods in the model of every resource you\'d like to restrict access to. The five methods can contain anything you\'d like so long as they return a boolean true or false. This allows you to define your User\'s roles any way you wish.\n\n    class Issue < ActiveRecord::Base\n\n      # This method checks permissions for the :index action\n      def self.is_indexable_by(user, parent = nil)\n      end\n\n      # This method checks permissions for the :create and :new action\n      def self.is_creatable_by(user, parent = nil)\n      end\n\n      # This method checks permissions for the :show action\n      def is_readable_by(user, parent = nil)\n      end\n\n      # This method checks permissions for the :update and :edit action\n      def is_updatable_by(user, parent = nil)\n      end\n\n      # This method checks permissions for the :destroy action\n      def is_deletable_by(user, parent = nil)\n      end\n\n    end\n\nParent / Child resources\n------------------------\n\nSometimes actions should only be allowable on a resource if some "parent" resource allows them. Contextual permissions FTW.\n\nLink your "child" resource with its "parent" resource by using the `logical_parent` macro and you\'ll have access to the "parent" resource in your child\'s RESTful_ACL methods.\n\n    class Child < ActiveRecord::Base\n      logical_parent :parent\n      ...\n    end\n\nIf the "child" resource is a singleton, just pass `:singleton` to the `logical_parent` macro:\n\n    class Car < ActiveRecord::Base\n      logical_parent :owner, :singleton\n      ...\n    end\n\nView Helper\n-----------\n\nRESTful_ACL adds a view helper called `allowed?`. Simply pass this method a block containing the URL you\'d like to check permission on and it will do the rest.\nThe link will appear if the `current_user` is allowed to access the passed-in link\'s action.\n\n    = allowed?{ link_to \xe2\x80\x98Foo Index\xe2\x80\x99, foos_path }\n    = allowed?{ link_to \'Edit Foo\', edit_foo_path(@foo) }\n    = allowed?{ link_to \'Create Foo\', new_foo_path }\n    = allowed?{ link_to \'View Foo\', foo_path(@foo) }\n    = allowed?{ link_to \'Delete Foo\', foo_path(@foo), :method => :delete }\n\n\nHuh? Here\'s an example\n----------------------\nLet\'s say that you have two resources: `Project` and `Issue`. A Project has many Issues, an Issue belongs to a Project. I\'d like to make sure that the current user is a member of the Project before they can create a new Issue in that Project:\n\n    class Issue < ActiveRecord::Base\n      logical_parent :project\n\n      belongs_to :author\n      belongs_to :project\n\n      def self.is_indexable_by(user, parent = nil)\n        user.projects.include?(parent)\n      end\n\n      def self.is_creatable_by(user, parent = nil)\n        user.projects.include?(parent)\n      end\n\n      def is_updatable_by(user, parent = nil)\n        user == author && parent.is_active?\n      end\n\n      def is_deletable_by(user, parent = nil)\n        user == author\n      end\n\n      def is_readable_by(user, parent = nil)\n        user.projects.include?(parent)\n      end\n    end\n\nIf you still have questions, please checkout the [test app](http://github.com/mdarby/restful_acl_app)\n\nAdmins RULE!\n------------\nRESTful_ACL grants global access to all actions to site administrators. To enable this, make sure that your User model defines an `is_admin?` method *and/or* an `is_admin` attribute. If the `current_user.is_admin?` returns true, access will be granted automatically.\n\nHow to Test\n-----------\nI normally do something along these lines in RSpec:\n\n    describe "Issue" do\n      before do\n        @project = mock_model(:project)\n        @author  = mock_model(:user, :projects => [@project])\n        @issue   = Factory(:issue, :author => @author, :project => @project)\n      end\n\n      it "should be modifiable by the author when the Project is active" do\n        @project.stub!(:is_active? => true)\n        @issue.is_updatable_by(@author, @project).should be_true\n      end\n\n      it "should be deletable by the author" do\n        @issue.is_deletable_by(@author, @project).should be_true\n      end\n\n      it "should be readable by those assigned to the Project" do\n        Issue.is_readable_by(@author, @project).should be_true\n      end\n\n      it "should be creatable by those assigned to the Project" do\n        Issue.is_creatable_by(@author, @project).should be_true\n      end\n    end\n\nAbout the Author\n----------------\nMy name is [Matt Darby.](http://blog.matt-darby.com) I\xe2\x80\x99m an IT Manager and pro-web-dev at for [Dynamix Engineering](http://dynamix-ltd.com) and hold a Master\xe2\x80\x99s Degree in Computer Science from [Franklin University](http://www.franklin.edu) in sunny [Columbus, OH.](http://en.wikipedia.org/wiki/Columbus,_Ohio)\n\nFeel free to check out my [site](http://matt-darby.com) or [recommend me](http://www.workingwithrails.com/person/10908-matt-darby)\n'
Rails plugin for automating migrations b'== AutoMigrations\n\nForget migrations, auto-migrate!\n\n\n== Usage\n\nWrite out your schema (or use an existing one)\n\n  $ cat db/schema.rb\n\n  ActiveRecord::Schema.define do\n\n    create_table :posts do |t|\n      t.string   :title\n      t.text     :body\n      t.timestamps\n    end\n  \n  end\n\n  $ rake db:auto:migrate\n\n  Created posts table\n\n...a few days later\n\n  $ cat db/schema.rb\n\n  ActiveRecord::Schema.define do\n\n    create_table :posts do |t|\n      t.string   :title\n      t.text     :content\n      t.timestamps\n    end\n  \n  end\n\n  $ rake db:auto:migrate\n  -- add_column("posts", :content, :text)\n     -> 0.0307s\n  -- remove_column("posts", "body")\n     -> 0.0311s\n\n* PJ Hyett [ pjhyett@gmail.com ]\n'
Ruby library for consuming Google, Yahoo!, Flickr and Windows Live contact APIs b"== Basic usage instructions\n\nFetch users' contact lists from your web application without asking them to\nprovide their passwords.\n\nFirst, register[http://code.google.com/apis/accounts/docs/RegistrationForWebAppsAuto.html]\nyour application's domain. Then make users follow this URL:\n\n  Contacts::Google.authentication_url('http://mysite.com/invite')\n\nThey will authenticate on Google and it will send them back to the URL\nprovided. Google will add a token GET parameter to the query part of the URL.\nUse that token in the next step:\n\n  gmail = Contacts::Google.new(params[:token])\n  gmail.contacts\n  # => [#<Contact 1>, #<Contact 2>, ...]\n\nThe resulting Contacts::Contact objects have `name` and `email` properties.\n\nRead more in Contacts::Google. I plan to support more APIs (Microsoft Live, for\nstarters); feel free to contribute.\n\nAuthor: <b>Mislav Marohni\xc4\x87</b> (mislav.marohnic@gmail.com)\n\n== Documentation auto-generated from specifications\n\nContacts::Google.authentication_url\n- generates a URL for target with default parameters\n- should handle boolean parameters\n- skips parameters that have nil value\n- should be able to exchange one-time for session token\n\nContacts::Google\n- fetches contacts feed via HTTP GET\n- handles a normal response body\n- handles gzipped response\n- raises a FetchingError when something goes awry\n- parses the resulting feed into name/email pairs\n- parses a complex feed into name/email pairs\n- makes modification time available after parsing\n\nContacts::Google GET query parameter handling\n- abstracts ugly parameters behind nicer ones\n- should have implicit :descending with :order\n- should have default :limit of 200\n- should skip nil values in parameters\n"
A media caching filesystem written using FUSE b'What is vcachefs?\n-----------------\n\nVideo/Audio Caching Filesystem (vcachefs) is a FUSE-based filesystem for *nix\nand Mac OS X that is designed to mirror a remote filesystem while caching a\ncertain number of files locally. Essentially, its goal is to solve the "iTunes\nsucks balls over 802.11" problem. \n\nThe idea is that you will give it a target directory to mirror and a mountpoint,\nand you point media apps toward the mountpoint instead of the net filesystem\nitself. I am planning to implement two kinds of caches:\n\n\t* A file-atomic cache\n\t* A block-based cache for the first 1k of the file and the STAT struct\n\nThe latter allows media apps who are only querying tag information / file stats\nto run quickly without requiring the entire file to be on-disk.\n\n\nTo build:\n----------\n \n# If MacFuse\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/local/lib/pkgconfig  \n\n./autogen.sh --prefix=/usr/local\nmake && sudo make install\n\nRequires:\n\t* pkg-config, autotools\n\t* glib >= 2.9\n\t* A recent version of FUSE (API >= v27)\n\n\nTo run\n--------\n\n./vcachefs /target/mount/point\n\n\nKnown Issues\n--------------\n\n* vcachefs doesn\'t do very smart things wrt permissions in the cache folder -\n  we\'ll probably have to fix this in the future (but for music/video caching, it\n  doesn\'t matter much\n'
Cheating is fun! b'== Cheat\n\nCheat is a simple command line reference utility.  Use it to retrieve handy\ninformation from the cheat sheet repository.\n\n$ cheat sheets\n$ cheat cheat\n$ cheat recent\n\nTo freshen your local cache, supply the --new edit.\n\n$ cheat sheets --new\n\nTo edit a cheat sheet, use the --edit switch.\n\n$ cheat markaby --edit\n\nTo add a cheat sheet, use the --add switch.\n\n$ cheat readme --add\n\nSpecial Thanks To:\n- Evan Weaver\n- Kevin Marsh\n- Jeremy Apthorp\n\nThe Cheat Sheet Repository:\n- http://cheat.errtheblog.com/\n\nEnjoy.\n\n>> Chris Wanstrath\n=> chris[at]ozmm[dot]org\n'
Much better than real Google b'Google Total V 0.1\n\t- Much better than real Google\n\t- Improved Google Interface'
A staticmatic helper to obfuscate mailto links using javascript. 
 b'ExceptionLogger\n===============\n\nThe Exception Logger (forgive the horrible name) logs your Rails exceptions in the database and provides a funky web interface to manage them.\n\nFirst you need to generate the migration:\n\n  ./script/generate exception_migration\n\nNext, you\'ll need to include the ExceptionLoggable module into ApplicationController.  Once that\'s done you might want to modify key methods to customize the logging:\n\n  render_404(exception) - Shows the 404 template.\n  \n  render_500(exception) - Shows the 500 template.\n  \n  log_exception(exception) - Logs the actual exception in the database.\n  \n  rescue_action_in_public(exception) - Does not log these exceptions: ActiveRecord::RecordNotFound, ActionController::UnknownController, ActionController::UnknownAction\n\nAfter that, visit /logged_exceptions in your application to manage the exceptions.\n\nIt\'s understandable that you may want to require authentication.  Add this to your config/environments/production.rb:\n\n  # config/environments/production.rb\n  config.after_initialize do\n    require \'application\' unless Object.const_defined?(:ApplicationController)\n    LoggedExceptionsController.class_eval do\n      # set the same session key as the app\n      session :session_key => \'_beast_session_id\'\n      \n      # include any custom auth modules you need\n      include AuthenticationSystem\n      \n      before_filter :login_required\n      \n      # optional, sets the application name for the rss feeds\n      self.application_name = "Beast"\n      \n      protected\n        # only allow admins\n        # this obviously depends on how your auth system works\n        def authorized?\n          current_user.is_a?(Admin)\n        end\n        \n        # assume app\'s login required doesn\'t use http basic\n        def login_required_with_basic\n          respond_to do |accepts|\n            # alias_method_chain will alias the app\'s login_required to login_required_without_basic\n            accepts.html { login_required_without_basic }\n            \n            # access_denied_with_basic_auth is defined in LoggedExceptionsController\n            # get_auth_data returns back the user/password pair\n            accepts.rss do\n              access_denied_with_basic_auth unless self.current_user = User.authenticate(*get_auth_data)\n            end\n          end\n        end\n        \n        alias_method_chain :login_required, :basic\n    end\n  end\n\nThe exact code of course depends on the specific needs of your application.\n\nCREDITS\n\nJamis Buck  - original exception_notification plugin\nRick Olson  - model/controller code\nJosh Goebel - design'
ROpenLaszo is a Ruby interface to the OpenLaszlo compiler. It allows you to compile OpenLaszlo programs from within Ruby, in order to integrate OpenLaszlo development into Rake or Rails applications. b'= ROpenLaszlo: Interface to the OpenLaszlo compiler\n\nROpenLaszo is a Ruby interface to the OpenLaszlo[openlaszlo.org] compiler.  It allows you to compile Open<tt></tt>Laszlo programs from within Ruby, in order to integrate Open<tt></tt>Laszlo development into Rake files or Rails applications.\n\nIf you are using Open<tt></tt>Laszlo with Ruby on Rails, you want the {OpenLaszlo Rails plugin}[laszlo-plugin.rubyforge.org] too.  That page contains instructions for installing both the gem and the plugin; you can read those instructions instead of these.\n\n== Overview\n\nOpen<tt></tt>Laszlo programs are written in XML with embedded JavaScript, and compiled into either Flash (swf) binary files, or DHTML.  The APIs in this library make it easy for Ruby code to invoke the Open<tt></tt>Laszlo compiler.  For example, if hello.lzx contains the following text:\n  <canvas>\n    <window>\n      <button>Hello, World!</button>\n    </window>\n  </canvas>\nthen the following Ruby code can be used to create a file \'hello.swf\' which can be executed in a browser or placed on a web site:\n  require \'rubygems\'\n  require \'openlaszlo\'\n  OpenLaszlo::compile \'hello.lzx\' # creates hello.swf\n\nYou can turn this snippet into a Rake task that will compile any Open<tt></tt>Laszlo source file:\n  rule \'.swf\' => \'.lzx\' do |t|\n    puts "Compiling #{t.source} => #{t.name}" if verbose\n    OpenLaszlo::compile t.source, :output => t.name\n  end\n\nThe following includes such a task:\n  require \'openlaszlo\'\n  load \'tasks/openlaszlo.rake\'\n  # defines a pattern *.lzx -> *.swf\n\n== Requirements\n\n* {OpenLaszlo 3.1 or later}[openlaszlo.org]\n* Ruby -v 1.8.2 or later (untested in earlier versions)\n* RubyGems[rubygems.rubyforge.org]\n\n== Installation\n\n0:: Download and install the {OpenLaszlo SDK}[openlaszlo.org]\n\n1: Install this gem\n  $ sudo gem install ropenlaszlo\n\n2:: Set your +OPENLASZLO_HOME+ environment variable to the directory that contains the {OpenLaszlo SDK}[openlaszlo.org].  If the following prints something, you\'ve got it right:\n  $ grep Laszlo "$OPENLASZLO_HOME/README.txt"\n\n3:: (Optional)  Set your +OPENLASZLO_URL+ environment variable to the web location of the Open<tt></tt>Laszlo server; for example, <tt>http</tt><tt>://localhost:8080/lps-3.1</tt>.  If you omit this step, the module will use the command line compiler, which is slower but is not limited to compiling files inside of +OPENLASZLO_HOME+.\n\n<b>Note:</b> The command-line compiler is broken in the Windows version of Open<tt></tt>Laszlo 3.1.1.  If you are running Windows, step (3) is required.  ({OpenLaszlo bug 1428}[http://www.openlaszlo.org/jira/browse/LPP-1428])\n\n== Tips\n\nThe Ruby front end to the compiler uses two compilation methods.  If OPENLASZLO_URL is set, and the source file is in a subdirectory of the OpenLaszlo servlet directory, then the compiler will request the URL that corresponds to the source location.  Otherwise, the OpenLaszlo command-line compiler is used.\n\nIf the compiler is going to be invoked more than once (because several files are being compiled, or because the compiler is being used in an edit/compile/run cycle), the compile server is faster.\n\nYou can place a symbolic link to a source directory in the OpenLaszlo servlet directory thus:\n  require \'openlaszlo/utils\'\n  OpenLaszlo::symlink_to \'.\'\n\n\n== Additional Resources\n\n* The {OpenLaszlo Rails plugin}[laszlo-plugin.rubyforge.org] provides generators, view tasks, and rake tasks for using Open<tt></tt>Laszlo with Ruby on Rails.\n\n* The {OpenLaszlo web site}[openlaszlo.org] is a rich source of information about the Open<tt></tt>Laszlo platform.  It includes links to the wiki, mailing lists, and forums.\n\n* {This OpenLaszlo Blog entry}[weblog.openlaszlo.org/archives/2006/01/deploying-openlaszlo-applications-with-rake/] has additional information and some examples of using ROpenLaszlo in a Rakefile.\n\n* {ROpenLaszlo RubyForge project page}[http://rubyforge.org/projects/ropenlaszlo/]\n\n* {ROpenLaszlo git repository}[http://github.com/osteele/ropenlaszlo]\n\n\n== Author\n\nOliver Steele <steele@osteele.com>\n\n\n== License\n\nROpenLaszlo is copyright (C) 2006 - 2009 by Oliver Steele.  It is\nopen-source software, and may be redistributed under the terms of the\nMIT license. The text of this license is included in the ROpenLaszlo\ndistribution.\n'
The OpenLaszlo Rails plugin makes it easy to use OpenLaszlo client-side applications with Rails. b'= OpenLaszlo Rails Plugin\n\nThe Open<tt></tt>Laszlo Rails plugin makes it easy to use\nOpenLaszlo[openlaszlo.org] client-side applications with Rails.  It\nincludes a generator and helper for creating Open<tt></tt>Laszlo applications\nand displaying them within Rails views.\n\nFor example, the following shell command will create an Open<tt></tt>Laszlo application named +applet+, and a view named <tt>controller/index</tt>.  Requesting the view will recompile the applet.\n  $ ./script/generate applet contact applet\n\n\n=== View Helper\n\nThe plugin introduces two view helpers.  +swfobject_tag+ generates\ncode that embeds a flash object in the page (using the\nswfobject[http://code.google.com/p/swfobject/] JavaScript library).\n+applet_tag+ additionally recompiles the applet if it is out of date,\nand swaps in a version of the applet compiled with the debug flag set\nif the +debug+ query parameter is present in the request that resulted\nin the call -- both of these additional features are available only in\ndevelopment mode.\n\n\n=== Generators\n\nThe plugin defines the following generators, that can be used to\nquickly create an Open<tt></tt>Laszlo stub application and a view that displays\nit.\n\nThis generates an Open<tt></tt>Laszlo source file in <tt>app/applets/my-app</tt>:\n  $ ./script/generate applet my-app\n\nThis also creates a model and view at <tt>/my-controller/index</tt>\nthat displays the applet.  When the app\'s source changes, requesting\nthe view recompiles the app.\n  $ ./script/generate applet my-app my-controller index\n\n\n=== Rails Tasks\n\nThe plugin defines the following tasks:\n  # Recompile any applets in the app/applets directory\n  rake openlaszlo:build:applets\n\n  # Clean the applets directory\n  rake openlaszlo:clobber:applets\n\n  # Copies the swfobject javascripts to public/javascripts\n  rake openlaszlo:install:javascripts\n\n\n== Requirements\n\n* Rails 2.0 or later.  (Might work with earlier versions, but is untested with them.)\n* {OpenLaszlo 3.1 or later}[openlaszlo.org]\n* The {OpenLaszlo ruby gem}[github.com/osteele/ropenlaszlo]\n\n\n== Installation (using templates; for Rails 2.3 or later)\n\nIn Rails 2.3 or later, you can use the Rails template mechanism to install\nthe Open<tt></tt>Laszlo plugin and the gem that it depends on.\n\nThe template requires that you give it <tt>sudo</tt> access, in order\nto run <tt>sudo rake gems:install</tt>.  If you don\'t want to or can\'t\ndo this, you can use the instructions for previous versions of Rails\nbelow.\n\nTo create a new Rails app:\n  rails webapp -m http://gist.github.com/83809.txt\n\nTo upgrade an existing app:\n  rake rails:template LOCATION=http://gist.github.com/83809.txt\n\nTo create a new Rails app, or upgrade an existing one, *and* create\na starter applet that\'s served from <tt>/home/applet</tt>, do one of:\n  generate=myapp rails webapp -m http://gist.github.com/83809.txt\n  generate=myapp rake rails:template LOCATION=http://gist.github.com/83809.txt\n\n\n== Installation (Rails 2.1 or later)\n\n0: Install Open<tt></tt>Laszlo, Ruby, and Ruby on Rails.\n\n1: In <tt>config/environment</tt>, place the following code inside the <tt>Rails::Initializer.run</tt> block:\n  config.gem \'ropenlaszlo\', :lib => \'openlaszlo\', :version => \'>= 0.6.3\'\n\n2: Install the {ropenlaszlo}[github.com/osteele/ropenlaszlo] gem:\n  $ sudo rake gems:install\n\n3: Install this plugin:\n  $ ./script/plugin install git://github.com/osteele/openlaszlo_plugin.git\n\n4: Set the +OPENLASZLO_HOME+ environment variable to the directory that contains the Open<tt></tt>Laszlo SDK.  The first line below is an example of this in bash (although\nyou will probably want to put this in your <tt>.bashrc</tt> or <tt>.profile</tt> too).\nIf you\'re not using Windows, the second line of shell script will tell you whether you\'ve set it right.\n  $ export OPENLASZLO_HOME="/Applications/OpenLaszlo Server 4.2.0.2"\n  $ grep -qs Laszlo "$OPENLASZLO_HOME/README.txt" && echo yes || echo no\n\n\n== Usage\n\nIn your RAILS application directory:\n\n1: Create an applet, and a view that displays it:\n  $ ./script/generate applet my-applet controller index\n\n2: Compile the applet (this step is optional):\n  $ rake openlaszlo:build:applets\n\nNow launch the server (<tt>script/server</tt>), and you can view your applet at <tt>ht</tt><tt>tp:127.0.0.1:3000/controller/index</tt>.\n\n\n== Using the Compile Server\n\nThe steps described above use the Open<tt></tt>Laszlo command-line compiler to compile applications.  A faster technique, although one that requires more configuration, is to leave the Open<tt></tt>Laszlo server running as a compile server.\n\nThe instructions for setting up an Open<tt></tt>Laszlo compile server are {here}[http://wiki.github.com/osteele/openlaszlo_plugin/using-the-compile-server].\n\n\n\n== Resources\n\n* {OpenLaszlo Plugin Rubyforge project page}[rubyforge.org/projects/laszlo-plugin]\n* {OpenLaszlo Plugin Github repository}[github.com/osteele/openlaszlo_plugin]\n* {OpenLaszlo Plugin Wiki}[wiki.github.com/osteele/openlaszlo_plugin]\n* {OpenLaszlo Site}[openlaszlo.org]\n* {OpenLaszlo Gem project page}[github.com/osteele/ropenlaszlo]\n* {swfobject}[http://code.google.com/p/swfobject/]\n\n\n== Authors\n\n* {Oliver Steele}[osteele.com]\n* Max Carlson\n'
A ruby script that merge benefits from wget with find b'WAZZA?\n======\n\nnetfind is a Ruby script that permits the same sexy things that find do, but for web sites. Better description pendind.\n\nLICENSE\n=======\n\nCertainly GPL v2, will be at least an OSL. Will be precised later.\n\nProject site: http://redmine.lecavelier.name\n'
A mirror of the mephisto code-base with my personalizations b"= Installation\n\nSee public/install.html for setup instructions.\n\n= Timezones\n\nYou MUST export the environment variable TZ=UTC, or else the article dates\nand times will be invalid.\n\nThis would not be needed if rails used UTC for everything, but\nunfortunately it doesn't... eg: action_view/helpers/date_helper.rb uses\nTime::now instead of Timer::now.utc, and Time::mktime instead of\nTime::utc.\n\nXXX oh, we can't depend on the rails helpers at all, because they don't\n    translate the time from UTC (assuming the TZ env var is correctly\n    set) to site time, you've to roll our own, or monkey patch rails :/\n\n= License\n\nMephisto is distributed under the same license as Ruby on Rails. See\nhttp://www.opensource.org/licenses/mit-license.php\n"
A simple Erlang IRC bot b'Introduction\n============\n\nThis project implements a basic IRC bot in Erlang. This code can be used as a\nstarting point for developing a more sophisticated bot.\n\nThe irc_numerics, irc_parser and irc_commands modules, and the irc.hrl and\nlogging.hrl headers are modified versions of those found in Geoff Cant\'s\n"erlirc", which can be found at\n\n\thttp://git.erlang.geek.nz/?p=erlirc.git\n\t\n\nStarting\n========\n\n\t$ erl -sname bot -pa ebin -pa /path/to/eunit/ebin/\n\t(bot@node)1> make:all([load]).\n\t(bot@node)2> irc_bot:start_link("irc.example.com", 6667, "#general", "bot", "", "IRC Bot").\n\t\nLicense\n=======\n\nI release this source code into the public domain. Do with it what you will.\n\n\t- Michael Melanson <michael+erlbot@codeshack.ca>'
vocabulary 
Whip up a javascript stub for implementing an XPCOM service, by drag-and-drop of IDL files. 
FF Extension for MashUp of Amazon and Twitter, Supports Price Watching and Stock Notifications 
Discontinued, please see captproton / caboo-se-sample-app-v3 b'Caboose Sample App\n==================\n\nThis is a sample application containing a bunch of useful plugins and code to help you get started quicker.  \nIt is intended to be an example of "better practices", but with the intention of ultimately being\n"best practice" through collaboration and iterative improvement.\n\nNOTE : this requires at least rails 2.0PR\n\nThe application implements many of the basic and advanced features I find myself using in every new project:\n\n  - a user model with a few extra fields (last login, timezones)\n  - restful authentication.\n  - full timezone support\n  - basic views implemented with Yahoo! YUI CSS grids.\n  - behavioral testing with rspec, including good example of mocking in controller specs.\n  - exception notification\n  - nested resources (user/assets)\n  - polymorphic asset model\n  - basic authorization\n  - around_filters\n  \nPlease note, however, that much of the code is targeted at an intermediate/advanced level, so if you\ndon\'t understand the code, don\'t fret.\n\nINSTALL:\n\n  Quickstart: \n    Install Ruby, RubyGems, Rails with all its dependencies, a database package (MySQL, Postgresql, sqlite etc) and the appropriate bindings.\n      You will need the latest versions of all of these.  If you already have a working stack you might try\n        gem update --system\n        gem update rails\n\n    Install a few required gems: tzinfo, tztime, rspec\n    Create config/database.yml; if you don\'t know how to do this, then you probably won\'t learn anything from this app.\n    Import the database with rake db:migrate\n    \n\n  It\'s strongly advised that you check out the stable version of any caboose sample app (it will have tags/v00x where x is a number).\n  You can do this with piston (jfgi) if you want to keep up to date.  Once a version is released, we aim to back-port bugfixes to\n  stable, but new features will go into the next version.\n\nTODO:\n\n  Sample controllers and models\n  More useful plugins\n  Good examples of ajax\n  Better list of requirements\n  Update to Rails 2.0\n  \nTODONE:\n\n  x Polymorphic Image model using attachment_fu\n'
The simplest and most pointless rails plugin ever. b'Find-Param\n==========\n\nThis is a simple plugin to let you easily define a parameter to use for\n#to_param, and also define a finder to access that same parameter.\n\nThis plugin is most useful for situations where you want to override the usage\nof ID as the default parameter value. Using a slug creates URLs that can be\nfriendlier for humans and bots alike.\n\n\nGetting Started\n---------------\n\nHere we define the find param to be a slug:\n\n  class Post < ActiveRecord::Base\n    find_param :slug\n  end\n\nThis will set the #to_param to be #slug and add a finder to the model called\n#find_by_param that can be used in your controllers to fetch records using\nparams[:id].\n\n  class PostController\n    before_filter :find_post, :only => %(show edit update destroy)\n\n    def find_post\n      find_by_param(params[:id])\n    end\n  end\n\n\nOptions\n-------\n\nTo have your find param automatically populated on record creation, use the\n:initialize_with option.\n\n  class Post < ActiveRecord::Base\n    find_param :slug, :initialize_with => :title\n  end\n\nThis will use the title property to populate the slug. By default this value is\nlowercased and all whitespace and special characters are replaced by hyphens.\nTo specify your own formatted for the find param, there a :using option that\naccepts a proc.\n\n  class Post < ActiveRecord::Base\n    find_param :slug, :initialize_with => :title, :using => Proc.new { |value| value.upcase }\n  end\n\nYou can also pass :raise_on_not_found => true to have it raise an\nActiveRecord::RecordNotFound erorr when the result set is empty.\n'
XmlReader for GObject b'XmlReader - Cursor based XML reader API\n\nXmlReader is a XML reader library using a cursor based API based on\nthe equivalent API available in high level language frameworks like\n.Net or Java.\n\nXmlReader uses the GObject C library to provide object orientation\non top of the C programming language.\n\nXmlReader aims at being a easy to use, predictable and low footprint\nAPI for iterating and extracting data from a XML data stream coming\nfrom files or memory buffers.\n\nXmlReader is cursor based: the main object maintains an internal state\nabout the current position in the XML document object model loaded\nby libxml-2.0; data is extracted from the XML data stream by advancing\nthe internal cursor and asking for the value of an XML node as referenced\nby its name.\n\nRequirements:\n------------\nXmlReader depends on:\n* gobject-2.0 >= 2.16\n* libxml-2.0 >= 2.6.30\n\nCopyright and License\n------------\nCopyright (C) 2008 Emmanuele Bassi <ebassi@gnome.org>\nXmlReader is released under the terms of the GNU Lesser General Public\nLicense version 2.1 or later. See the file COPYING for details.\n'
Ruby code implementing the Google Authentication for Web Applications API (AuthSub) b'GoogleAuthSub\n=======\n\nNOTE: This is still in very alpha stages of development. \nIt passes all the mocked specs but has no live testing specs yet. \n\nOverview:\n\nThe GoogleAuthSub class handles interaction with Google via the \nAccount Authentication API (AuthSub). This is for web applications to get data from \nGoogle with the user signing in.\n\nFor details on the Account Authentication API refer to:\nhttp://code.google.com/apis/accounts/docs/AuthForWebApps.html\n\nThe Google Group can provide some help also: \nhttp://groups.google.com/group/Google-Accounts-API\n\nThe OAuth protocol has taken over much of the role of Authsub. \nOauth does not provide access to non registered apps as Authsub does.\n\nRequirements:\n    For testing you will need the rspec and fake_web gems\n    \nTo use:\n\nNon-signed access, single request.\n    1. Create your GoogleAuthSub object.\n            auth = GoogleAuthSub.new(:next_url => "www.example.com/next", \n                    :scope_url => "http://www.google.com/calendar/feeds")\n    \n    2. Redirect the user to the Google sign in page. request_url gives us the correct url to go to.\n            In rails: \n                redirect_to auth.request_url\n\n    3. Once the user has successfully logged in they will then be redirected back to the url specified\n        as the :next_url in step 1. In the handler for this the token needs to be extracted.\n        To do this call: \n            auth.receive_token(url) \n        or in rails just do: \n            auth.token=params[:token]\n \n    4. Now everything should be set to make a single request with:\n        auth.get(url), auth.post(url), auth.put(url) or auth.delete(url)\n       The url will automagically have the :scope_url prepended to it if not included. \n       These calls return a Net::HTTPResponse object\n       \n     Once a request has been made the token will no longer be valid and you will have to start from step 2 in \n     order to make another request.\n       \nNon-signed access with session token.\n    1. Create your GoogleAuthSub object with :session => true.\n         auth = GoogleAuthSub.new(:next_url => "www.example.com/next", \n            :scope_url => "http://www.google.com/calendar/feeds", \n            :session => true)\n \n    2,3 as per previous example\n    \n    4. Exchange the single use token for a session token.\n        auth.request_session_token\n        NOTE: this has changed from the previous version, which was confusingly named session_token.\n        \n    5. Make requests with auth.get and auth.put.\n    \nSecure access with session token.\n    0. Call GoogleAuthSub.set_private_key(key)\n        key can be a certificate file, string or OpenSSL::Pkey::RSA object.\n        This should be the key that the site has registered with Goggle.\n        For details on the registration process see: \n        http://code.google.com/apis/accounts/docs/RegistrationForWebAppsAuto.html\n        \n    1. Create your GoogleAuthSub object with :session => true.\n        auth = GoogleAuthSub.new(:next_url => "www.example.com/next", \n            :scope_url => "http://www.google.com/calendar/feeds", \n            :session => true, :secure=>true)\n    \n    2,3,4,5 as per previous examples\n    \n    The private key is stored as a class variable so there is one instance per app.\n\nTokens can be revoked with:\n    auth.revoke_token\n\nToken information can be received from Google with:\n    auth.token_info\n    This returns a hash with the keys: :target, :scope and :secure\n    \n    \nTODO:\n    Live tests. Currently getting errors with encrypted tokens.\n    Storage of session tokens: ActiveRecord\n    Encryption of tokens.\n    Session token revocation\n    Rails plugin\n    \nContact the author via stuart.coyle@gmail.com\n\nCopyright (c) 2008-2009 Stuart Coyle, released under the MIT license\n'
Facebook-style lightbox, built in jQuery b'Please visit http://famspam.com/facebox/ or open index.html in your favorite browser.\n\nNeed help?  Join our Google Groups mailing list:\n  http://groups.google.com/group/facebox/\n'
flag content as inappropriate b'Can Flag\n=================\nStrongly inspired by acts_as_flaggable.\nIntended to allow your users to flag content as inappropriate, and set up some ways for you \nto deal with the content.\n\n== Resources\n\nInstall\n\n1. Download the tarball from github, or, clone the repository and symlink it into your application.\n   Yes, I\'m serious.\n  \n2. $ script/generate can_flag flags\n\n   This will create the following files:\n     app/controllers/flags_controller.rb\n     spec/helpers/flags_controller_spec.rb\n     app/helpers/flags_helper\n     db/migrate/flags_migration.rb\n\n3. Modify any content model with\n  \n   class Article < ActiveRecord::Base\n     can_be_flagged\n   end\n   \n   You can also add a callback\n   \n   class Article\n     can_be_flagged\n     def after_flagged\n       # send an email\n       # delete this post\n       # suspend the owner of the post if the flags.size > 3\n       # suspend the owner of the post if their total flags count > 5\n     end\n   end\n\n4. Modify your user model with\n \n   class User < ActiveRecord::Base\n     can_flag     \n   end\n\n5. Usage\n\n   article = Article.find(4)\n   current_user.flags.create :flaggable => article\n\n \n\n * When a flag is added via add_flag, flagged(flag, flag_count) is called\n   on the flaggable model.  This allows the model to perform certain\n   operations if the number of flags reaches a certain point.  For example,\n   you may want to mark a Post as deleted if a Post receives too many "spam"\n   flags\n \n * Each flag reference flaggable object\n \n model = Model.find(1)\n model.flags.get(0).commtable == model\n'
Piston is a utility that eases vendor branch management.  This repository is a complete reimplementation of Piston to provide different backends, depending on the repositories and working copies you pistonize from. b'Piston is a utility that eases vendor branch management.\nThis is similar to <tt>svn:externals</tt>, except you have a local copy of\nthe files, which you can modify at will.  As long as the changes are\nmergeable, you should have no problems.\n\nPiston is Ruby 1.9.1 compatible.\n\nThis tool has a similar purpose than svnmerge.py which you can find in the\ncontrib/client-side folder of the main Subversion repository at\nhttp://svn.collab.net/repos/svn/trunk/contrib/client-side/svnmerge.py.\nThe main difference is that Piston is designed to work with remote\nrepositories.  Another tool you might want to look at, SVK, which you can find\nat http://svk.elixus.org/.\n\nFrom Wikipedia\'s Piston page (http://en.wikipedia.org/wiki/Piston):\n  In general, a piston is a sliding plug that fits closely inside the bore\n  of a cylinder.\n\n  Its purpose is either to change the volume enclosed by the cylinder, or\n  to exert a force on a fluid inside the cylinder.\n\nFor this utility, I retain the second meaning, "to exert a force on a fluid\ninside the cylinder."  Piston forces the content of a remote repository\nlocation back into our own.\n\n\n= Notes on 2.0\n\nIn the 1.0 era, Piston was exclusively geared towards Subversion repositories.\nIn early 2008, Git gained a lot of popularity among Ruby and Rails coders.\nPiston was rewritten during that period to allow many repositories and working\ncopies to be used together.\n\nThe documentation still refers to Subversion throughout, but 2.0 allows any\nrepository to be used with any working copy.\n\n\n= Installation\n\nNothing could be simpler:\n\n $ gem install piston\n\n\n= Usage\n\nFirst, you need to import the remote repository location:\n\n $ piston import http://dev.rubyonrails.org/svn/rails/trunk vendor/rails\n Exported r4720 from \'http://dev.rubyonrails.org/svn/rails/trunk\' to \'vendor/rails\'\n\n $ svn commit -m "Importing local copy of Rails"\n\nWhen you want to get the latest changes from the remote repository location:\n\n $ piston update vendor/rails\n Updated \'vendor/rails\' to r4720.\n\n $ svn commit -m "Updates vendor/rails to the latest revision"\n\nYou can prevent a local Piston-managed folder from updating by using the\n+lock+ subcommand:\n\n $ piston lock vendor/rails\n \'vendor/rails\' locked at r4720.\n\nWhen you want to update again, you unlock:\n\n $ piston unlock vendor/rails\n \'vendor/rails\' unlocked.\n\nIf the branch you are following moves, you should use the switch subcommand:\n\n $ piston import http://dev.rubyonrails.org/svn/rails/branches/1-2-pre-release vendor/rails\n $ svn commit vendor/rails\n\n # Vendor branch is renamed, let\'s follow it\n $ piston switch http://dev.rubyonrails.org/svn/rails/branches/1-2-stable vendor/rails\n\n\n= Contributions\n\n== Bash Shell Completion Script\n\nMichael Schuerig contributed a Bash shell completion script.  You should copy\n+contrib/piston+ from your gem repository to the appropriate folder.  Michael\nsaid:\n\n  I\'ve put together a bash completion function for piston. On Debian, I\n  just put it in /etc/bash_completion.d, alternatively, the contents can\n  be copied to ~/.bash_completion. I don\'t know how things are organized\n  on other Unix/Linux systems.\n\n\n= Caveats\n\n== Speed\n\nThis tool is SLOW.  The update process particularly so.  I use a brute force\napproach.  Subversion cannot merge from remote repositories, so instead I\ncheckout the folder at the initial revision, and then run svn update and\nparse the results of that to determine what changes have occured.\n\nIf a local copy of a file was changed, it\'s changes will be merged back in.\nIf that introduces a conflict, Piston will not detect it.  The commit will be\nrejected by Subversion anyway.\n\n== Copies / Renames\n\nPiston *does not* track copies.  Since Subversion does renames in two\nphases (copy + delete), that is what Piston does.\n\n== Local Operations Only\n\nPiston only works if you have a working copy.  It also never commits your\nworking copy directly.  You are responsible for reviewing the changes and\napplying any pending fixes.\n\n== Remote Repository UUID\n\nPiston caches the remote repository UUID, allowing it to know if the remote\nrepos is still the same.  Piston refuses to work against a different\nrepository than the one we checked out from originally.\n\n\n= Subversion Properties Used\n\n* <tt>piston:uuid</tt>: The remote repository\'s UUID, which we always confirm\n  before doing any operations.\n* <tt>piston:root</tt>: The repository root URL from which this Piston folder\n  was exported from.\n* <tt>piston:remote-revision</tt>: The <tt>Last Changed Rev</tt> of the remote\n  repository.\n* <tt>piston:local-revision</tt>: The <tt>Last Changed Rev</tt> of the Piston\n  managed folder, to enable us to know if we need to do any merging.\n* <tt>piston:locked</tt>: The revision at which this folder is locked.  If\n  this property is set and non-blank, Piston will skip the folder with\n  an appropriate message.\n'
get oakland crime data from oakland.crimespotting.org rss feed b'Just a little bit of code to pull incidents from the oakland.crimespotting.org\natom feed and put it into a sqlite database.\n\nYou should cron the pull-data.py script to run once a day.\n'
Documentation coverage analyzer for Ruby code 
Sake repository served fresh by the guys at Barefoot. 
Chronic is a pure Ruby natural language date parser. b'Chronic\n\thttp://chronic.rubyforge.org/\n\tby Tom Preston-Werner\n\n== DESCRIPTION:\n\nChronic is a natural language date/time parser written in pure Ruby. See below for the wide variety of formats Chronic will parse.\n\n== INSTALLATION:\n\nChronic can be installed via RubyGems:\n\n  $ sudo gem install chronic\n  \n== CODE:\n\nBrowse the code and get an RSS feed of the commit log at:\n\n  http://github.com/mojombo/chronic.git\n\nYou can grab the code (and help with development) via git:\n\n  $ git clone git://github.com/mojombo/chronic.git\n\n== USAGE:\n\nYou can parse strings containing a natural language date using the Chronic.parse method.\n\n  require \'rubygems\'\n  require \'chronic\'\n\n  Time.now   #=> Sun Aug 27 23:18:25 PDT 2006\n\n  #---\n\n  Chronic.parse(\'tomorrow\')       \n    #=> Mon Aug 28 12:00:00 PDT 2006\n\n  Chronic.parse(\'monday\', :context => :past)\n    #=> Mon Aug 21 12:00:00 PDT 2006\n\n  Chronic.parse(\'this tuesday 5:00\')\n    #=> Tue Aug 29 17:00:00 PDT 2006\n\n  Chronic.parse(\'this tuesday 5:00\', :ambiguous_time_range => :none)\n    #=> Tue Aug 29 05:00:00 PDT 2006\n\n  Chronic.parse(\'may 27th\', :now => Time.local(2000, 1, 1))\n    #=> Sat May 27 12:00:00 PDT 2000\n\n  Chronic.parse(\'may 27th\', :guess => false)\n    #=> Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007\n\nSee Chronic.parse for detailed usage instructions.\n\n== EXAMPLES:\n\nChronic can parse a huge variety of date and time formats. Following is a small sample of strings that will be properly parsed. Parsing is case insensitive and will handle common abbreviations and misspellings.\n\nSimple\n\n  thursday\n  november\n  summer\n  friday 13:00\n  mon 2:35\n  4pm\n  6 in the morning\n  friday 1pm\n  sat 7 in the evening\n  yesterday\n  today\n  tomorrow\n  this tuesday\n  next month\n  last winter\n  this morning\n  last night\n  this second\n  yesterday at 4:00\n  last friday at 20:00\n  last week tuesday\n  tomorrow at 6:45pm\n  afternoon yesterday\n  thursday last week\n\nComplex\n\n  3 years ago\n  5 months before now\n  7 hours ago\n  7 days from now\n  1 week hence\n  in 3 hours\n  1 year ago tomorrow\n  3 months ago saturday at 5:00 pm\n  7 hours before tomorrow at noon\n  3rd wednesday in november\n  3rd month next year\n  3rd thursday this september\n  4th day last week\n\nSpecific Dates\n\n  January 5\n  dec 25\n  may 27th\n  October 2006\n  oct 06\n  jan 3 2010\n  february 14, 2004\n  3 jan 2000\n  17 april 85\n  5/27/1979\n  27/5/1979\n  05/06\n  1979-05-27\n  Friday\n  5\n  4:00\n  17:00\n  0800\n\nSpecific Times (many of the above with an added time)\n\n  January 5 at 7pm\n  1979-05-27 05:00:00\n  etc\n\n== LIMITATIONS:\n  \nChronic uses Ruby\'s built in Time class for all time storage and computation. Because of this, only times that the Time class can handle will be properly parsed. Parsing for times outside of this range will simply return nil. Support for a wider range of times is planned for a future release.\n\nTime zones other than the local one are not currently supported. Support for other time zones is planned for a future release.\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Tom Preston-Werner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
URITemplate is a parser for URI Templates as defined in the URI Template specification (http://bitworking.org/projects/URI-Templates). b'= URI-Templates\n\nhttp://juretta.github.com/uri-templates/\n\nThis release implements version 0.3 of the URI Template specification.\n\nSee: http://bitworking.org/projects/URI-Templates/spec/draft-gregorio-uritemplate-03.txt\n\n== DESCRIPTION:\n\nURI Templates are strings that contain embedded variables that are transformed into URIs after embedded variables are substituted. \n\nThis specification defines the structure and syntax of URI Templates. \n\nRead more:\n* http://bitworking.org/projects/URI-Templates/\n* http://www.ibm.com/developerworks/web/library/wa-uri/\n* http://code.google.com/p/uri-templates/\n\nBug-Tracker:\n* http://github.com/juretta/uri-templates/issues\n\nSource:\n  git clone git://github.com/juretta/uri-templates\n\n== SYNOPSIS:\n  require \'rubygems\'\n  require \'uri/templates\'\n  uri = UriTemplate::URI.new("http://example.org/{userid}").replace("userid" => "stefan")\n  print uri # => http://example.org/stefan\n  \n  ut = UriTemplate::URI.new("http://example.org/?d={-listjoin|,|points}&{-join|&|a,b}")\n  print ut.replace({\n    \'a\' => \'foo\',\n    \'b\' => \'bar\',\n    \'points\' => ["10","20","30"]\n  }) # => http://example.org/?d=10,20,30&a=foo&b=bar\n   \n== INSTALL:\n\n sudo gem install uri-templates\n\n== Known issues\n\n * Encoding does not work properly (See test/test_uri_template_grammar.rb#test_draft_0_3)\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Stefan Saasen\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
Slides for talk: Distributed revision control with Git b'Slides for talk: Distributed revision control with Git\n\nDescribe the basic usage of Git and some of the principles behind\ndistributed revision control and development.\n\nCompiling this document requires make utility, LaTeX, and Beamer\npresentation package.'
Custom Resource Name Plugin adds in your Ruby on Rails project the feature to create aliases for your named routes. This is extremely important for those who are developing software to a non-English public and wants all URLs in native language. b"Custom Resource Name 1.2\n========================\n\nThe Custom Resource Name Plugin lets you add aliases for your routes. This is very useful if you are developing a software to a country that does not speak English and wants all URLs in the native language.\n\nTo install the plugin is very simple. The plugin is on the GitHub. If you have Git installed, take the plugin using the command:\n\ngit clone git://github.com/carlosbrando/custom_resource_name.git custom_resource_name\n\nIf you don\xe2\x80\x99t use Git (should\xe2\x80\xa6) you can download the plugin and then copy the files into the folder vendor/plugins of your project.\nTo download: http://github.com/carlosbrando/custom_resource_name/tarball/master\n\nTo use it is simpler yet. Open the file routes.rb of your project and include the following lines BEFORE the routes that should be translated:\n\n# translate resources\nmap.aliases :resources, :posts => \xe2\x80\x98artigos\xe2\x80\x98, :comments => \xe2\x80\x98comentarios\xe2\x80\x98\n\n# translate singleton resources\nmap.aliases :resource, :comment => 'comentario'\n\n# translate actions\nmap.aliases :actions, :new => \xe2\x80\x98novo\xe2\x80\x98, :edit => \xe2\x80\x98editar\xe2\x80\x98, :logout => \xe2\x80\x98sair\xe2\x80\x98\n\n# translate namespaces\nmap.aliases :namespaces, :admin => \xe2\x80\x98administrativo\xe2\x80\x98\n\nIf you have any english route that should stay untouched, put it before the aliases definition.\n\nReady!\n\nYou can add aliases for all its resources and actions.\n\n\nNew feature\n===========\n\nAdded one more feature to plugin. Imagine the following case:\n\nActionController::Routing::Routes.draw do |map|\n  map.aliases :resources, :houses => 'casas'\n  map.aliases :actions, :new => 'novo'\n\n  map.resources :houses\nend\n\nSee that all actions :new will be replaced by 'novo', but this does not fit properly in resource :casas, which would correct be 'nova' and not 'novo' (is just one example).\n\nIn this case we can use the option :actions_as in the resources, like this:\n\nmap.resources :houses, :actions_as => {:new => 'nova'}\n\nProblem solved. In all other cases the action :new will be called 'novo', but only in the resource :casas it will be 'nova'.\n\nIn addition we also have the option :as those who do the same thing with the name of the resource.\n\n\n\n\n\nMore info: http://www.nomedojogo.com/custom-resource-name-plugin/\n\nIf this plugin is interesting to you, be sure to recommend me on Working with Rails.\n\nThis plugin has been created by Carlos Brando, a developer of Surgeworks LLC.\n\nCopyright (c) 2008 Carlos Brando, released under the MIT license"
Rebuilding the pre-crash history from tarballs 
FF Extension for MashUp of Amazon and Twitter, Supports Price Watching and Stock Notifications 
ToDo Tracking & Integration Application 
A quick & dirty git-powered Sinatra wiki b'h1. git-wiki\n\n_because who needs cool names when you use git?_\n\nh2. Requirements\n\n* rubygems\n* sinatra\n* grit\n* redcloth\n* rubypants\n* ultraviolet (uv) - requires "Oniguruma":http://www.geocities.jp/kosako3/oniguruma/\n\nh2. Changes\n\n* Uv disabled (Oniguruma doesn\'t work on my Leopard see error:http://p.caboo.se/pastes/153337)\n* fix: default layout set from git-wiki.rb - it was not working for me\n* fix: _style.css added to git-wiki.rb'
A mirror of the WordPress SVN into GIT b'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml">\n<head>\n\t<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\n\t<title>WordPress &rsaquo; ReadMe</title>\n\t<link rel="stylesheet" href="wp-admin/css/install.css" type="text/css" />\n</head>\n<body>\n<h1 id="logo" style="text-align: center">\n\t<img alt="WordPress" src="wp-admin/images/wordpress-logo.png" />\n\t<br /> Version 2.5\n</h1>\n<p style="text-align: center">Semantic Personal Publishing Platform</p>\n\n<h1>First Things First</h1>\n<p>Welcome. WordPress is a very special project to me. Every developer and contributor adds something unique to the mix, and together we create something beautiful that I\'m proud to be a part of. Thousands of hours have gone into WordPress, and we\'re dedicated to making it better every day. Thank you for making it part of your world.</p>\n<p style="text-align: right;">&#8212; Matt Mullenweg</p>\n\n<h1>Installation: Famous 5-minute install</h1>\n<ol>\n\t<li>Unzip the package in an empty directory.</li>\n\t<li>Open up <code>wp-config-sample.php</code> with a text editor like WordPad or similar and fill in your database connection details.</li>\n\t<li>Save the file as <code>wp-config.php</code></li>\n\t<li>Upload everything.</li>\n\t<li>Open <span class="file"><a href="wp-admin/install.php">/wp-admin/install.php</a></span> in your browser. This should setup the tables needed for your blog. If there is an error, double check your <span class="file">wp-config.php</span> file, and try again. If it fails again, please go to the <a href="http://wordpress.org/support/">support forums</a> with as much data as you can gather.</li>\n\t<li><strong>Note the password given to you.</strong></li>\n\t<li> The install script should then send you to the <a href="wp-login.php">login page</a>. Sign in with the username <code>admin</code> and the password generated during the installation. You can then click on \'Profile\' to change the password.</li>\n</ol>\n\n<h1>Upgrading</h1>\n<p>Before you upgrade anything, make sure you have backup copies of any files you may have modified such as <code>index.php</code>.</p>\n<h2>Upgrading from any previous WordPress to 2.5:</h2>\n<ol>\n\t<li>Delete your old WP files, saving ones you\'ve modified.</li>\n\t<li>Upload the new files.</li>\n\t<li>Point your browser to <span class="file"><a href="wp-admin/upgrade.php">/wp-admin/upgrade.php</a>.</span></li>\n\t<li>You wanted more, perhaps? That\'s it!</li>\n</ol>\n<h2>Template Changes</h2>\n<p>If you have customized your templates you will probably have to make some changes to them. If you\'re converting your 1.2 or earlier templates, <a href="http://codex.wordpress.org/Upgrade_1.2_to_1.5">we\'ve created a special guide for you</a>. </p>\n\n<h1>Online Resources</h1>\n<p>If you have any questions that aren\'t addressed in this document, please take advantage of WordPress\' numerous online resources:</p>\n<dl>\n\t<dt><a href="http://codex.wordpress.org/">The WordPress Codex </a></dt>\n\t\t<dd>The Codex is the encyclopedia of all things WordPress. It is the most comprehensive source of information for WordPress available.</dd>\n\t<dt><a href="http://wordpress.org/development/">The Development Blog</a></dt>\n\t\t<dd>This is where you\'ll find the latest updates and news related to WordPress. Bookmark and check often.</dd>\n\t<dt><a href="http://planet.wordpress.org/">WordPress Planet </a></dt>\n\t\t<dd>The WordPress Planet is a news aggregator that brings together posts from WordPress blogs around the web.</dd>\n\t<dt><a href="http://wordpress.org/support/">WordPress Support Forums</a></dt>\n\t\t<dd>If you\'ve looked everywhere and still can\'t find an answer, the support forums are very active and have a large community ready to help. To help them help you be sure to use a descriptive thread title and describe your question in as much detail as possible.</dd>\n\t<dt><a href="http://codex.wordpress.org/IRC">WordPress IRC Channel</a></dt>\n\t\t<dd>Finally, there is an online chat channel that is used for discussion among people who use WordPress and occasionally support topics. The above wiki page should point you in the right direction. (<a href="irc://irc.freenode.net/wordpress">irc.freenode.net #wordpress</a>)</dd>\n</dl>\n\n<h1>System Recommendations</h1>\n<ul>\n\t<li>PHP version <strong>4.3</strong> or higher.</li>\n\t<li>MySQL version <strong>4.0</strong> or higher.</li>\n\t<li>... and a link to <a href="http://wordpress.org/">http://wordpress.org</a> on your site.</li>\n</ul>\n<p>WordPress is the official continuation of <a href="http://cafelog.com/">b2/caf&eacute;log</a>, which came from Michel V. The work has been continued by the <a href="http://wordpress.org/about/">WordPress developers</a>. If you would like to support WordPress, please consider <a href="http://wordpress.org/donate/">donating</a>.</p>\n\n<h1>Upgrading from another system</h1>\n<p>WordPress can <a href="http://codex.wordpress.org/Importing_Content">import from a number of systems</a>. First you need to get WordPress installed and working as described above.</p>\n\n<h1>XML-RPC and Atom Interface</h1>\n<p>You can now post to your WordPress blog with tools like <a href="http://windowslivewriter.spaces.live.com/">Windows Live Writer</a>, <a href="http://ecto.kung-foo.tv/">Ecto</a>, <a href="http://bloggar.com/">Bloggar</a>, <a href="http://radio.userland.com">Radio Userland</a> (which means you can use Radio\'s email-to-blog feature), <a href="http://www.newzcrawler.com/">NewzCrawler</a>, and other tools that support the Blogging APIs! :) You can read more about <a href="http://codex.wordpress.org/XML-RPC_Support">XML-RPC support on the Codex</a>.</p>\n\n<h1>Post via Email</h1>\n<p>You can post from an email client! To set this up go to your &quot;Writing&quot; options screen and fill in the connection details for your secret POP3 account. Then you need to set up <code>wp-mail.php</code> to execute periodically to check the mailbox for new posts. You can do it with Cron-jobs, or if your host doesn\'t support it you can look into the various website-monitoring services, and make them check your <code>wp-mail.php</code> URL.</p>\n<p>Posting is easy: Any email sent to the address you specify will be posted, with the subject as the title. It is best to keep the address discrete. The script will <em>delete</em> emails that are successfully posted.</p>\n\n<h1>User Roles</h1>\n<p>We\'ve eliminated user levels in order to make way for the much more flexible roles system introduced in 2.0. You can <a href="http://codex.wordpress.org/Roles_and_Capabilities">read more about Roles and Capabilities on the Codex</a>.</p>\n\n<h1> Final notes</h1>\n<ul>\n\t<li>If you have any suggestions, ideas, comments, or if you (gasp!) found a bug, join us in the <a href="http://wordpress.org/support/">Support Forums</a>.</li>\n\t<li>WordPress now has a robust plugin API that makes extending the code easy. If you are a developer interested in utilizing this see the <a href="http://codex.wordpress.org/Plugin_API">plugin documentation in the Codex</a>. In most all cases you shouldn\'t modify any of the core code.</li>\n</ul>\n\n<h1>Share the Love</h1>\n<p>WordPress has no multi-million dollar marketing campaign or celebrity sponsors, but we do have something even better&#8212;you. If you enjoy WordPress please consider telling a friend, setting it up for someone less knowledgable than yourself, or writing the author of a media article that overlooks us.</p>\n\n<h1>Copyright</h1>\n<p>WordPress is released under the <abbr title="GNU Public License">GPL</abbr> (see <a href="license.txt">license.txt</a>).</p>\n\n</body>\n</html>\n'
Vault b'libsvnruby-1.8\ngrit\n'
Experimenting with Ruby 
Open decentralized payment network software 
A simple, indirect-threaded Forth, written in C; for target compiling; runs on Linux, BSD, OSX, and Cygwin b"This file is part of muFORTH: http://muforth.nimblemachines.com/\n\nCopyright (c) 2002-2015 David Frech. (Read the LICENSE for details.)\n\n\nmuFORTH README\n==============\n\nSadly, there isn't an up-to-date README about the current indirect-threaded\nimplementation of muFORTH.\n\nFor now you can read the old, obsolete README (now in doc/README.obsolete)\nwhich documents the original form of muFORTH: a simple subroutine-threaded (ie,\nnative) Forth with a tiny built-in x86 compiler. While attempting to port this\nversion of muFORTH to the PowerPC I ran into trouble and decided that a\ntraditional threaded Forth might be a better choice.\n\nMany, but not all, of the concepts in the original README still apply, so\nskimming thru it wouldn't necessarily be a waste of time. ;-)\n\nStay tuned for a real, up-to-date README.\n"
FactoryLoader is intended to help scale object creation with less pain and less refactoring. b"= Factory\n\n* http://github.com/zdennis/factory/wikis (url)\n\n== DESCRIPTION:\n\nFactory is intended to help scale object creation with less pain and less refactoring.\n\nPublic git repository: \tgit://github.com/zdennis/factory.git\n\n== FEATURES/PROBLEMS:\n\n== SYNOPSIS:\n\nSee RDOC\n\n== REQUIREMENTS:\n\n* active_support\n\n== INSTALL:\n\nFrom github:\n\n* gem install zdennis-factory\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2008 Zach Dennis, Mutually Human Software\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
The second generation core framework for Pixelpost. b'Ultralite2\n==========\n\nThe second generation core framework for Pixelpost.\n\nRequirements\n------------\n\n* Web Server\n\t* Optimally with rewrite support such as Apache.\n* PHP 5.2+\n* Database\n\t* SQLite 3 (via PDO)\n\t* mySQL\n\nSetup & Configuration\n---------------------\n\n1. Modify and rename `sample_htaccess` to `.htaccess`.\n2. Modify and rename `application/sample_config.php` to `application/config.php`.\n\nLicense & Copyright\n-------------------\n\n(c) 2010 Jay Williams, Licensed under the [GNU General Public License v2](http://opensource.org/licenses/gpl-2.0.php).\n'
Piston is a utility that eases vendor branch management.  This repository is a complete reimplementation of Piston to provide different backends, depending on the repositories and working copies you pistonize from. b'Piston is a utility that eases vendor branch management.\nThis is similar to <tt>svn:externals</tt>, except you have a local copy of\nthe files, which you can modify at will.  As long as the changes are\nmergeable, you should have no problems.\n\nThis tool has a similar purpose than svnmerge.py which you can find in the\ncontrib/client-side folder of the main Subversion repository at\nhttp://svn.collab.net/repos/svn/trunk/contrib/client-side/svnmerge.py.\nThe main difference is that Piston is designed to work with remote\nrepositories.  Another tool you might want to look at, SVK, which you can find\nat http://svk.elixus.org/.\n\nFrom Wikipedia\'s Piston page (http://en.wikipedia.org/wiki/Piston):\n  In general, a piston is a sliding plug that fits closely inside the bore\n  of a cylinder.\n\n  Its purpose is either to change the volume enclosed by the cylinder, or\n  to exert a force on a fluid inside the cylinder.\n\nFor this utility, I retain the second meaning, "to exert a force on a fluid\ninside the cylinder."  Piston forces the content of a remote repository\nlocation back into our own.\n\n\n= Notes on 2.0\n\nIn the 1.0 era, Piston was exclusively geared towards Subversion repositories.\nIn early 2008, Git gained a lot of popularity among Ruby and Rails coders.\nPiston was rewritten during that period to allow many repositories and working\ncopies to be used together.\n\nThe documentation still refers to Subversion throughout, but 2.0 allows any\nrepository to be used with any working copy.\n\n\n= Installation\n\nNothing could be simpler:\n\n $ gem install piston\n\n\n= Usage\n\nFirst, you need to import the remote repository location:\n\n $ piston import http://dev.rubyonrails.org/svn/rails/trunk vendor/rails\n Exported r4720 from \'http://dev.rubyonrails.org/svn/rails/trunk\' to \'vendor/rails\'\n\n $ svn commit -m "Importing local copy of Rails"\n\nWhen you want to get the latest changes from the remote repository location:\n\n $ piston update vendor/rails\n Updated \'vendor/rails\' to r4720.\n\n $ svn commit -m "Updates vendor/rails to the latest revision"\n\nYou can prevent a local Piston-managed folder from updating by using the\n+lock+ subcommand:\n\n $ piston lock vendor/rails\n \'vendor/rails\' locked at r4720.\n\nWhen you want to update again, you unlock:\n\n $ piston unlock vendor/rails\n \'vendor/rails\' unlocked.\n\nIf the branch you are following moves, you should use the switch subcommand:\n\n $ piston import http://dev.rubyonrails.org/svn/rails/branches/1-2-pre-release vendor/rails\n $ svn commit vendor/rails\n\n # Vendor branch is renamed, let\'s follow it\n $ piston switch http://dev.rubyonrails.org/svn/rails/branches/1-2-stable vendor/rails\n\n\n= Contributions\n\n== Bash Shell Completion Script\n\nMichael Schuerig contributed a Bash shell completion script.  You should copy\n+contrib/piston+ from your gem repository to the appropriate folder.  Michael\nsaid:\n\n  I\'ve put together a bash completion function for piston. On Debian, I\n  just put it in /etc/bash_completion.d, alternatively, the contents can\n  be copied to ~/.bash_completion. I don\'t know how things are organized\n  on other Unix/Linux systems.\n\n\n= Caveats\n\n== Speed\n\nThis tool is SLOW.  The update process particularly so.  I use a brute force\napproach.  Subversion cannot merge from remote repositories, so instead I\ncheckout the folder at the initial revision, and then run svn update and\nparse the results of that to determine what changes have occured.\n\nIf a local copy of a file was changed, it\'s changes will be merged back in.\nIf that introduces a conflict, Piston will not detect it.  The commit will be\nrejected by Subversion anyway.\n\n== Copies / Renames\n\nPiston *does not* track copies.  Since Subversion does renames in two\nphases (copy + delete), that is what Piston does.\n\n== Local Operations Only\n\nPiston only works if you have a working copy.  It also never commits your\nworking copy directly.  You are responsible for reviewing the changes and\napplying any pending fixes.\n\n== Remote Repository UUID\n\nPiston caches the remote repository UUID, allowing it to know if the remote\nrepos is still the same.  Piston refuses to work against a different\nrepository than the one we checked out from originally.\n\n\n= Subversion Properties Used\n\n* <tt>piston:uuid</tt>: The remote repository\'s UUID, which we always confirm\n  before doing any operations.\n* <tt>piston:root</tt>: The repository root URL from which this Piston folder\n  was exported from.\n* <tt>piston:remote-revision</tt>: The <tt>Last Changed Rev</tt> of the remote\n  repository.\n* <tt>piston:local-revision</tt>: The <tt>Last Changed Rev</tt> of the Piston\n  managed folder, to enable us to know if we need to do any merging.\n* <tt>piston:locked</tt>: The revision at which this folder is locked.  If\n  this property is set and non-blank, Piston will skip the folder with\n  an appropriate message.\n'
Euchre Playing HTML Page 
Configure Rails To Use Gmail's SMTP 
A simple Nu/Objective-C interface to MySQL databases. b'\nNuMySQL is a small portable wrapper for the MySQL C interface. \n\n\t\nREQUIREMENTS\n\nNuMySQL requires Nu and nuke, the Nu build tool. To obtain\nNu, please visit http://programming.nu or get the source\nfrom the Nu git repository on github:\n\thttp://github.com/timburks/nu\n\t\nNuMySQL requires mysql. Before building NuMySQL, please \nbe sure that mysql is installed on your system. The\ndefault build configuration expects mysql to be installed\nin /usr/local/mysql.\n\t\nThe primary NuMySQL repository is on github:\n\thttp://github.com/timburks/numysql\n\n\t\nINSTALLATION\n\nAfter installing all prerequisites, build the NuMySQL framework\nby typing "nuke" in the top-level NuMySQL directory.\n\n\nAUTHOR\n\nNuMySQL was written by Tim Burks.\n\nNuMySQL is released under the Apache License, version 2.0.\n\nCopyright 2008, Neon Design Technology, Inc.\n'
A simple Nu/Objective-C interface to PostgreSQL databases. b'\nNuPostgreSQL is a small portable wrapper for the PostgreSQL C interface. \n\n\t\nREQUIREMENTS\n\nNuPostgreSQL requires Nu and nuke, the Nu build tool. To obtain\nNu, please visit http://programming.nu or get the source\nfrom the Nu git repository on github:\n\thttp://github.com/timburks/nu\n\t\nNuPostgreSQL requires PostgreSQL. Before building NuPostgreSQL, please \nbe sure that PostgreSQL is installed on your system. The\ndefault build configuration expects PostgreSQL to be installed\nin /usr/local/pgsql.\n\t\nThe primary NuPostgreSQL repository is on github:\n\thttp://github.com/timburks/nupostgresql\n\n\t\nINSTALLATION\n\nAfter installing all prerequisites, build the NuPostgreSQL framework\nby typing "nuke" in the top-level NuPostgreSQL directory.\n\n\nAUTHOR\n\nNuPostgreSQL was written by Tim Burks.\n\nNuPostgreSQL is released under the Apache License, version 2.0.\n\nCopyright 2008, Neon Design Technology, Inc.\n'
numbr5 is alive - our friendly #roro bot 
Website for the Mama Doll TV show. b'Mama Doll\n=========\n\nhttp://www.mamadoll.tv/\n'
Web notepad, like a wiki, saves at every key stroke b"Edith\n=====\n\nA quick small wiki, perfect for pasting quick texts or code between friends.\n\nDon't worry about saving, it saves at every key stroke. Paste and forget! Think of it as a magic web notepad.\n\nTry it out at [http://edit.sunfox.org/any-page-name](http://edit.sunfox.org/any-page-name).\n\n\nUsage\n-----\n\n- `/any-page-name`: type what you want, it's saved automagically!\n- `/any-page-name.txt`: raw text version.\n- `/any-page-name.html`: HTML version through the [Markdown](http://daringfireball.net/projects/markdown/) syntax.\n- `/any-page-name.remark`: Slideshow version using [Remark](https://github.com/gnab/remark).\n- `/any-page-name.graphviz`: Graph version of the dot syntax using [Viz](https://github.com/mdaines/viz.js/), see [WebGraphViz](http://www.webgraphviz.com/) for examples.\n\nKeyboard shortcut `cltr-e` switches from edit mode to HTML mode.\n\n\n### Concurrent Access\n\nSo that multiple users can see live changes at the same time and hopefully not overwrite each other's stuff Edith uses [Google Mobwrite](http://code.google.com/p/google-mobwrite/).\n\n### Favicon\n\n![Magic Favicon changing as the page updates](http://sunny.github.io/edith/favicon.gif)\n\nThe favicon changes as the page updates and is also an indicator that the page is currently saving or not.\n\n### REST\n\nEdith is also a RESTful API. So go ahead and try to `PUT` or `DELETE` on these URLs.\n\n\nInstall it yourself\n-------------------\n\nDownload the files. For example, using git:\n\n```sh\n$ git clone https://github.com/sunny/edith.git\n$ cd edith\n```\n\nMake the `data` directory writeable:\n\n```sh\n$ chmod a+w data\n```\n\nTell your HTTP server to redirect pages not found to `index.php`. If you are using Apache:\n\n```sh\n$ cp htaccess.example .htaccess\n```\n\nFinally, you will need [Node](http://nodejs.org/download/) to build the JavaScript. Install CoffeeScript and UglifyJS:\n\n```sh\n$ npm install -g coffee-script uglify-js\n```\n\nYou can now compile, compress and generate JavaScript source maps:\n\n```sh\n$ cake build\n```\n\n\n### Further use\n\nThis section is only for ninjas and such.\n\n#### Configuration\n\nCopy `config.example.php` to `config.php` and read the examples to use your own configuration file.\n\n#### Concurrent Access\n\nYou can activate Google Mobwrite and define your own endpoint in `config.php`.\n\n#### Read-only pages\n\nTo make pages read-only, just make them non-writeable on disk:\n\n```sh\n$ chmod -w data/foo.txt\n```\n\nThey will then be shown using the HTML representation through Markdown instead.\n\nAlso, if you make the `data` directory itself non-writeable you can deactivate the creation of new pages.\n\n#### URLs\n\nYou may use any file name you like as long as it doesn't end like a representation (`.txt` or `.html`).\n\nIf you prefer `/page.js/txt` URLs instead of `/page.js.txt`, the config file has a setting for you.\n\n#### Development\n\nYou can use PHP's built-in server in development if you don't want to use Apache:\n\n```sh\n$ php -S localhost:3000 index.php\n```\n\nOr if you would prefer to serve the app using Rack, a `config.ru` is created, using the `rack-legacy` and `rack-rewrite` gems.\n\n\nContributing\n------------\n\nYou are welcome to contribute by adding issues and [forking the code on Github](https://github.com/sunny/edith).\n\n\nLicence\n-------\n\nEdith is released under the [MIT License](http://www.opensource.org/licenses/MIT).\n"
My blog engine b'= Nex3 Blogging Engine\n\nYes, I named it after my own alias.\nI didn\'t anticipate that other people would want to use it.\nIn fact, as far as I know, only one other person _does_ want to use it.\nIf I\'m wrong and you\'re not that person (you\'ll know if you are),\nshoot me an email at nex342@gmail.com.\nI\'m always interested to know if people are using my stuff.\n\nAssuming that only a few people are using this, though,\nI\'m not going to be very keen on making UI improvements\nfor nitty-gritty administrative stuff.\nI mean, I want to streamline posting and such,\nbut getting it set up will require mucking around in script/console.\nIf you want to change the behavior, hack the source.\nThat sort of thing.\n\nSo what\'s cool about this engine? I really don\'t know.\nI pretty much made it for fun.\nI haven\'t used other blogging frameworks,\nbut to the best of my knowledge this doesn\'t have any features they don\'t.\nI guess you could call it minimalistic,\nbut I\'m not really going out of my way to keep it simple.\nI pretty much just add features as I want them.\n\nAt the moment I\'m writing this, it does comes with a few reasonably useful features.\nFor those curious for a brief rundown, I\'ll list them here,\nalthough I don\'t by any means guarantee that this list will be kept up-to-date.\n\n* You can post posts, or articles, or whatever you want to call them.\n  Shoving stuff up on the front page in an orderly manner.\n  This is a pretty important one for a blog.\n\n* Other people (and you) can comment on your shoved stuff.\n  Start up a conversation of sorts.\n  Not as important, I guess, but still lots of fun.\n\n* You and your commenty buddies can preview your text.\n  Definitely useful if you use the built-in textile formatting for your text.\n  It\'s nice that it\'s human-readable and stuff,\n  but you can never really tell how the parser\'ll do on those edge cases.\n\n* Folks can get updated when you post something.\n  Well, it\'s Atom-based, so really they can update themselves.\n  But it all looks the same to the user.\n\n* There\'s this sleek-looking live search.\n  All AJAXy and stuff. Or non-AJAXy if you don\'t have Javascript.\n  Anyway, you can look through your posts for stuff.\n\n* You can use Akismet to beat off the spam.\n  This is a new one. I don\'t really know how well it works yet,\n  but Akismet\'s supposed to be good.\n  We\'ll see.\n\n== Setting Up\n\nYeah, it\'s a bit of a pain to set up.\nBut hey, it\'s O(1).\nYou\'ll live.\n\nSo, first of all, get all the gems you need.\nIf I\'m remembering everything,\nthis means redcloth, rcov, and coderay at the moment.\nEverything else comes in plugins.\n\nNext up, set up config/database.yml.\nThis should be pretty straightforward.\nMake the databases, set the right socket location, etc.\n\nThen run +rake db:migrate+.\nGet all those tables set up.\n\nYou might want to run the specs.\nI encourage it.\nJust do +rake rspec+.\nEverything should pass, or maybe be marked as "pending."\nIf something fails, let me know.\n\nFinally, you need to set up the admin user.\nThere\'s no way to do this with a GUI,\nso fire up script/console.\nEnter the following,\nwith the appropriate replacements:\n\n  u = User.new\n  u.name = <username>\n  u.password = <password>\n  u.password_confirm = <password>\n  u.admin = true\n\nAfter this, the site should be up and running.\nOn my layout, which I suppose will be the default,\nyou can sign in by clicking that character in the upper right-hand corner.\n\nOnce you sign in, you\'ll notice a few more links on the sidebar.\nThese allow you to do fun administrative stuff,\nlike create new posts and muck with users and log out.\n\nAt this point, you might want to click the users icon\nand give yourself a link and an email.\n\nOnce that\'s all done, start posting.\nIf you\'re feeling particularly generous, link back to me.\nIf not, well, at least enjoy the engine.\n\n== Configuration\n\nMost of the configuration is done by getting your hands dirty.\nMess with the code, change up the layout, that sort of thing.\n\nHowever, for common stuff, there\'s config/nex3.yml.\nThis contains some variables you can set.\nIt should be pretty self-explanitory.\n'
Add tasks from GNOME Evolution to Tasque (live.gnome.org/Tasque) b'Add tasks from GNOME Evolution to Tasque (live.gnome.org/Tasque)\n\n- Johnny Jacob'
 b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ncomponents\n  Self-contained mini-applications that can bundle together controllers, models, and views.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
Script to use against an HTTP log to find out who points directly towards your files b"Die, damn hotlinkers!\n=====================\n\nby Sunny Ripert - sunfox.org\n\nUse it against an HTTP log to find out who points directly towards your files\n\nUsage\n------\n\n    $ ruby damn_hotlinkers.rb [--days=DAYS_AGO] [--html] file.log [file2.log ...]\n\nExamples\n--------\n\n    $ ruby damn_hotlinkers.rb http.log\n    http://yourdomain.com/images/longcat.jpg\n      -> http://evil.org/hotlinkingpagebooh.html\n      -> http://catimages.com/\n    \n    $ ruby damn_hotlinkers.rb --days=2 --html http.log\n    <ul>\n      <li>\n        <a href='http://yourdomain.com/images/longcat.jpg'>\n          http://yourdomain.com/images/longcat.jpg\n        </a>\n        <ul>\n          <li>\n            <a href='http://catimages.com/'>\n            http://catimages.com/\n            </a>\n          </li>\n        </ul>\n      </li>\n    </ul>\n\n"
Makes a feed of the new and deleted files in a path 
Random Rails stuff that I've cribbed from other places and improved upon, mostly to bootstrap a new Rails project quickly b"= foo_tools\n\nRandom Rails stuff that I've cribbed from other places and improved upon, mostly\nto bootstrap a new Rails project quickly.\n\n== Inspirations and Sources\n\n* ar_fixtures from Geoffrey Grosenbach <boss [at] topfunky [dot] com>\n* annotate_models from Dave Thomas"
a GTK+ based frontend to git-annotate/git-blame 
Application to monitor desktop usage (& more) to find trends/patterns b'Application to monitor desktop usage (&amp; more) to find trends/patterns.\n\n- Johnny Jacob <johnnyjacob@gmail.com>'
Ruby port of Programming Collective Intelligence b"Project Layout\n--------------\n\nbin/\t-- Any top-level scripts\nlib/\t-- The meat 'n' taters of the code\nspec/\t-- RSpec cases"
Resource-oriented open source Ruby framework for Web apps. b'This respository is no longer in use will be removed shortly. Please use the waves/stable and waves/edge repositories.\n'
A minimalist Ruby web application framework used to demonstrate Rack usage b'DialTone\n========\n\nA minimalist (and relatively useless) Ruby web application framework used to \ndemonstrate Rack (http://rack.rubyforge.org). Use the Rackup script to \nlaunch the sample application:\n\nruby time_checker_app.ru -p 8080\n\nnap -at- zerosum -dot- org\n'
Superators add new operators to Ruby b'superators\n    by Jay Phillips\n    http://jicksta.com\n\n== DESCRIPTION:\n  \nSuperators are a superset of new Ruby operators you can create and use.\n\n== FEATURES/PROBLEMS:\n  \n* Presently a superator operand must support having a singleton class. Because true, false, nil, Symbols, and Fixnums are all specially optimized for in MRI and cannot have singleton classes, they can\'t be given to a superator. There are ways this can be potentially accounted for, but nothing is in place at the moment, causing this to be classified as a bug.\n\n* When defining a superator in a class, any operators overloaded after the superator definition will override a superator definition. For example, if you create the superator "<---" and then define the <() operator, the superator will not work. In this case, the superator\'s definition should be somewhere after the <() definition.\n\n* Superators work by handling a binary Ruby operator specially and then building a chain of unary operators after it. For this reason, a superator must match the regexp /^(\\*\\*|\\*|\\/|%|\\+|\\-|<<|>>|&|\\||\\^|<=>|>=|<=|<|>|===|==|=~)(\\-|~|\\+)+$/.\n\n== SYNOPSIS:\n\nBelow is a simple example monkey patch which adds the "<---" operator to all Ruby Arrays.\n\n  class Array\n    superator "<---" do |operand|\n      if operand.kind_of? Array\n        self + operand.map { |x| x.inspect }\n      else\n        operand.inspect\n      end\n    end\n  end\n\n== REQUIREMENTS:\n\n* Only requirement is Ruby.\n\n== INSTALL:\n\n* sudo gem install superators\n* require \'superators\'\n\n== LICENSE:\n\nThis software is licensed in the public domain. You may do whatever you wish with it.\n\nYou are allowed to use this library during dodo poaching as well.'
The Methodphitamine! Creates the implied block argument "it" which makes the refining and enumerating of collections much simpler. For example, User.find(:all).collect &its.contacts.map(&its.last_name.capitalize) b'Methodphitamine\n===============\n\nThe Methodphitamine is a library for syntactically cleaner list comprehensions and an interesting approach to monads in Ruby.\n\nFor more information, read my [blog post](http://jicksta.com/posts/the-methodphitamine) covering the Methodphitamine.\n\nCleaner Symbol#to_proc\n----------------------\n\nOne of the beautiful things the Ruby community has informally built into the language is Symbol#to_proc. The Methodphitamine takes beauty one step further.\n\nBelow are code examples which show the Methodphitamine\'s syntactical improvements over vanilla Ruby and Symbol#to_proc:\n\nFirst, the pure-Ruby way:\n\n    User.find(:all).map{|x| x.contacts.map{|y| y.last_name.capitalize }}\n\nAnd now with Symbol#to_proc:\n\n    User.find(:all).map{|x|x.contacts.map(&:last_name).map(&:capitalize)}\n\nAnd now with the Methodphitamine once more:\n\n    User.find(:all).map &its.contacts.map(&its.last_name.capitalize)\n\nNotice how even with Symbol#to_proc a block literal is still necessary because it simply can\xe2\x80\x99t do nested arguments. The Methodphitamine fixes this by preserving all arguments and being more readable to boot.\n\nNew: Monads\n-----------\n\nYou can now do something like this:\n\n    my_array.maybe &it.first.reverse.upcase\n\nIf the `my_array` variable were equal to `["foo", "bar", "qaz"]`, the result of the expression above would be `"OOF"`. However, if `my_array` were equal to `[]`, the result of the expression would be `nil`. This `maybe` method will execute the chain of methods if and only if all were successful. If one failed, `nil` is returned.\n\nSo how does The Methodphitamine work?\n-------------------------------------\n\nThe `it()` and `its()` protected methods are added to `Kernel` so it can be called from anywhere in a Ruby script but not on any particular `Object` instance. They each simply return a new `It` instance.\n\nThe `It` class has all instance methods stripped from it (except the ones Ruby complains about) to ensure `method_missing()` catches everything. In the example `[1,"2",3].map &its.class.name`, the `It` object first receives the `class()` method with no arguments via `method_missing()`. This gets enqueued in the `@methods` `Array` and it returns itself to receive any more methods. It then receives the next method, namely `name()`, and enqueues that alongside the previous method. When no more methods exist, Ruby determines if the `It` instance has a `to_proc()` method by calling `respond_to?(:to_proc)` so this has to be ignored and self suffices as a Ruby true boolean.\n\nThen the magic happens. Because `map()` takes a block (essentially a `Proc` argument), this can be substituted with a variable or method that returns a block as long as an ampersand prepends it to let the Ruby interpreter know to call `to_proc()` on it. The `It#to_proc()` method is invoked, building a custom, dynamic `Proc`. Because these enumerations yield a variable, the dynamic `Proc` is executed for each item in the collection and `obj` consequentially becomes a reference to the current item in the collection. We then run through the enqueued methods with `inject()`, passing along the return value of executing each method in the order received with arguments intact. When `inject()` is done, it simply returns the grand product which becomes the return value of the `Proc` itself. Simple, right? :)\n\nI chose to define both `it()` and `its()` since methods in Ruby can semantically either mean \xe2\x80\x9cthe result of this action\xe2\x80\x9d or the possessive \xe2\x80\x9cthis attribute.\xe2\x80\x9d For example, `it.to_s` and `it.sort_by` are both conceptual actions and `its.class.name` and `its.last` are both conceptual attributes.\n\nThe idea of an it implied block argument comes from the Groovy guys. For example, this is valid Groovy:\n\n    [1,2,3,4].each { println it }\n\nFrom the Groovy documentation on closures, \xe2\x80\x9cA closure always has at least one argument, which will be available within the body of the closure via the implicit parameter it if no explicit parameters are defined. The developer never has to declare the it variable \xe2\x80\x93 like the this parameter within objects, it is implicitly available.\xe2\x80\x9d\n'
my mephisto comment email plugin, notification when a comment is posted b'comment email notification for Mephisto\n==================================================\n\nWhen someone posts a comment, an email will be sent to the article author.\n\n\nInstall\n==========\n   ruby script/install svn://hasno.info/mephisto/plugins/mephisto_comment_email\n\n   There are a few options availible:\n     * mail prefix - Will be prepended to the email subject: \n        (blog) segfault posted a comment on "my best blog post"\n        To change the "(blog)" portion, add the following to\n        the end of environment.rb:\n          CommentNotifier.mail_prefix = "(myblogname)"\n     \n     * mail_from_name - The "full-name" for the sender:\n        If you\'d like to change it, append the following to environment.rb:\n          CommentNotifier.mail_from_name = "My Blog"\n\n     * mail_from - If you\'d like mail to come from some address other than\n        the site-owner\'s address add the following in the usual place:\n          CommentNotifier.mail_from = "segyblog@hasno.dot.info"\n\n     * only_approved - If you\'d only like to receive email regarding approved\n        comments add the following to environment.rb:\n          CommentNotifier.only_approved = true\n\n   If you would like to see links to the article and the article\'s admin page\n   in the email sent to the author, then make sure to set an akismet_url in\n   the site\'s settings.\n\n\nUsage\n==========\n   setup the basic actionmailer parameters, and post a comment...\n\n\n(C) Mark Guzman 2006, under an MIT license.\n'
A camping app for band names b"BandNamed\n=========\n\nA camping microapp for listing silly band names.\n\n**CURRENTLY BROKEN**\nThe redirect url in the new OpenID code is wrong and will go to the proxied host (if that's how you roll)\n## Contributors ##\n  * [Erik Kastner](http://metaatem.net)"
An experimental P2P system in Erlang 
extreme playing b'Welcome to Towel development!\n\nGems\n- image_science (1.1.3) (FreeImage), or RMagick (ImageMagick/GraphicsMagick) on Windows ;-)\n- mongrel (1.1.3)\n- mongrel_cluster (1.0.5)\n- rake (0.8.1)\n- RubyInline (3.6.6)\n-\n- \n\nInteresting Links:\nFlash-Graphen: http://www.pullmonkey.com/projects/open_flash_chart\n'
Git based distributed ticketing system, including a command line client and web viewer b'Note: the original TicGit author has pulled all the TicGit-ng changes into his repository, creating a potentially confusing situation. The schacon TicGit repo, this one, is not consistently maintained. For up to date TicGit-ng info and code, check the canonical TicGit-ng repository at  \nhttps://github.com/jeffWelling/ticgit\n\n## TicGit-ng ##\n\nThis project provides a ticketing system built on Git that is kept in a\nseparate branch in your projects Git repository. Originally called TicGit,\nit is now known as TicGit-ng to continue development and avoid namespace\nclashes.\n\n### About ###\n\nTicGit-ng is a simple ticketing system, roughly similar to the Lighthouse model, that is based in git. It provides a command line client that uses the \xe2\x80\x98git\xe2\x80\x99 gem to keep its ticketing information in a separate branch (called \xe2\x80\x98ticgit-ng\xe2\x80\x99) within your existing git repository. All the data is file based and rarely changing, decreasing the likelihood of a merge issue. Right now, ticket branch merges need to be done manually and separately, but work is being done on a `ti sync` command to make this easier and more intuitive.\n\nThe idea is that it keeps your tickets in the same repository, but without mucking up your working tree. By using its own seperate branch to store its information it keeps the working trees in all your other branches untouched.\n\nThere are two interfaces available, the command line `ti` command and the `ticgitweb` web interface, though `ticgitweb` has many more prerequisites than `ti`.\n\nIt will automatically create the new branch the first time you use it, and it caches all the data (another working directory and index file) in your ~/.ticgit-ng directory by default. If you delete that directory, it will just create it again the next time, you will lose no data (except some of your saved preferences).\n\nTicGit-ng is currently using itself to store its feature requests and bug reports.\n\n### Prerequisites ###\n\nThere are two sets of prerequisites, those for people who intend to just run `ti`, and another set for those who wish to run `ticgitweb` as well. `ticgitweb` has additional dependancies that aren\'t required for `ti`\'s use.\n\n**ti**\n\nRequired Packages: git, ruby, rubygems\n\nRequired Ruby Gems: git\n\nTo install these packages on a Debian system, or a Debian based system like Ubuntu, do\n\n    sudo aptitude install git ruby rubygems\n    sudo gem install git\n\n**ticgitweb**\n\nRequired Packages: git, ruby, rubygems\n\nRequired Ruby Gems: git, sinatra, haml, sass\n\nTo install these packages on a Debian system, or a Debian based system like Ubuntu, do\n\n    sudo aptitude install git ruby rubygems\n    sudo gem install git sinatra haml sass\n\n\n\n\n**A Note about rubygems**\n\nWhile the version of rubygems available from the repositories on Debian 5.0.5 stable will work just fine for using the command line `ti` program, using `ticgitweb` requires some extra effort.\nOlder versions of rubygems, such as the one available on Debian 5.0.5, will not work out of the box with the new gem repositories because the .deb in stable relies on rubyforge rather than rubygems for its operations. See [this bug](http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=558251) for an example. If you are running an older version of rubygems, you may need to get the latest rubygems package from http://rubygems.org/ or [apt](http://jaqque.sbih.org/kplug/apt-pinning.html) [pinning](http://jeffwelling.github.com//2010/09/05/Apt-Pinning.html) before being able to properly install the git and ticgit gems.\n\n**A Note about the git gem**\n\nThe git gem requires a git version of 1.6.0.0 or later, but on Debian stable, git-core is currently (Sept 6th 2010) at 1.5.6.5.  This isn\'t a fatal problem and we can continue using version 1.5.6.5 with the git gem, but you will see notices like this if you do\n\n    [WARNING] The git gem requires git 1.6.0.0 or later, but only found 1.5.6.5. You should probably upgrade.\n    Please specify at least one action to execute.\n\nIf these annoy you as they do me and you\'ve set up [apt](http://jaqque.sbih.org/kplug/apt-pinning.html) [pinning](http://jeffwelling.github.com//2010/09/05/Apt-Pinning.html), you can do\n\n    $ sudo aptitude -t testing install git-core\n\nAnd those notices should go away.\n\n\n\n\n### Installing ##\nInstallation on a Debian stable system.  Note that the command line interface for TicGit-ng can be run from Debian stable, but some of the gems required for the web interface may require you to use [apt](http://jaqque.sbih.org/kplug/apt-pinning.html) [pinning](http://jeffwelling.github.com//2010/09/05/Apt-Pinning.html) to run without errors.  See below\n\nTo install TicGit-ng on your system, you can go one of two ways,\n\n    $ gem install TicGit-ng\n\nor, you can install it from source by downloading this repository building your own gem (see below).\n\n### Usage ###\n\nTo get a list of all commands with short description:\n\n    > ti --help\n    Usage: ti COMMAND [FLAGS] [ARGS]\n     \n    Options for help command:\n     \n    The available TicGit-ng commands are:\n        recent                           List recent activities\n        checkout                         Checkout a ticket\n        tag                              Modify tags of a ticket\n        comment                          Comment on a ticket\n        milestone                        List and modify milestones\n        assign                           Assings a ticket to someone\n        points                           Assign points to a ticket\n        state                            Change state of a ticket\n        show                             Show a ticket\n        new                              Create a new ticket\n        attach                           Attach file to ticket\n        list                             List tickets\n     \n    Common options:\n        -v, --version                    Show the version number\n        -h, --help                       Display this help\n    "help" is not a command\n\n\nTo get help about a specific command:\n\n    > ti <command> --help\n    ## for example\n    > ti assign --help\n    Usage: ti assign [options] [ticket_id]\n     \n    Options for assign command:\n        -c, --checkout TICKET            Checkout this ticket\n        -u, --user USER                  Assign the ticket to this user\n     \n    Common options:\n        -v, --version                    Show the version number\n        -h, --help                       Display this help\n\n\nThe available commands are:\n\n    ti list     - show all tickets\n    ti show     - show details of a specific ticket\n    ti new      - create a new ticket\n    ti checkout - checkout a ticket\n    ti state    - change a ticket state (open, resolved, invalid, hold)\n    ti comment  - add a comment to a ticket\n    ti tag      - add or delete a tag from a ticket\n    ti assign   - change to whom a ticket is assigned\n\n\n### Usage Examples ###\n\nThe first time you use any command in Ticgit-ng, it will create a new branch in your repo called \xe2\x80\x98ticgit-ng\xe2\x80\x99 and setup a caching area in ~/.ticgit-ng.\n\nIf you run it without arguments, it will tell you what is available to run\n\n    $ ti\n    Please specify at least one action to execute.\n\n    Usage: ti COMMAND [FLAGS] [ARGS]\n     \n    The available TicGit-ng commands are:\n        recent                           List recent activities\n        checkout                         Checkout a ticket\n        tag                              Modify tags of a ticket\n        comment                          Comment on a ticket\n        milestone                        List and modify milestones\n        assign                           Assings a ticket to someone\n        points                           Assign points to a ticket\n        state                            Change state of a ticket\n        show                             Show a ticket\n        new                              Create a new ticket\n        attach                           Attach file to ticket\n        list                             List tickets\n     \n    Common options:\n        -v, --version                    Show the version number\n        -h, --help                       Display this help\n\nThe first time you run `ti list`, it will show an empty list.\n\n    $ ti list\n    I, [2010-09-06T15:47:52.075485 #4820]  INFO -- : creating ticgit repo branch\n\n       TicId  Title                             State Date  Assgn    Tags                \n    -----------------------------------------------------------------------------------------\n\nTo add a new ticket you can use `ti new -t \'Title of ticket\'` and give it a title in one command line.\n\n    $ ti new -t \'my new ticket\'\n    $ ti list\n\n       TicId  Title                             State Date  Assgn    Tags                \n    -----------------------------------------------------------------------------------------\n       d7f2d8 my new ticket                     open  09/06 \n\nFor the \xe2\x80\x98comment\xe2\x80\x99 and \xe2\x80\x98new\xe2\x80\x99 commands, if you don\xe2\x80\x99t specify a \xe2\x80\x98-m\xe2\x80\x99 for the message, it puts you into $EDITOR  to write it. The \xe2\x80\x98new\xe2\x80\x99 action is especially useful with this, because you can also tag it and give it an initial comment when you create it this way:\n\n    \n    # ---\n    # tags:\n    # # first line will be the title of the tic, the rest will be the first comment\n    # # if you would like to add initial tags, put them on the \'tags:\' line, comma delim\n    #\n\nTo edit a ticket, such as assigning a tag to the new ticket we created, we first checkout the ticket and then use `ti tag`.\nAlways checkout the ticket you intend to edit.  Some commands allow you to include a tic_id argument but that can get confusing to keep track of and most of the time several edits will be done to the same ticket anyway, so it is suggested you use `ti checkout` for convenience if nothing else.\n\n    #ti checkout can checkout tickets based on the TicId or based on it\'s place in the list\n    $ ti checkout 1\n    #checks out the first ticket, or to do the same thing by using the TicId\n    $ ti checkout d7f2d8\n    #then assign the tag\n    $ ti tag \'bug\'\n    #and view the result..\n    $ ti list\n\n       TicId  Title                                           State Date  Assgn    Tags                \n    -------------------------------------------------------------------------------------------------------\n    *  d7f2d8 my new ticket                                   open  09/06          bug               \n\n\nTo assign the ticket to someone, use the `ti assign` command.  I assign the ticket to myself below.\n\n    $ ti assign -u \'jeff.welling@gmail.com\'\n    $ ti list\n\n       TicId  Title                                              State Date  Assgn    Tags                \n    ----------------------------------------------------------------------------------------------------------\n    *  d7f2d8 my new ticket                                      open  09/06 jeff.we\xe2\x80\xa6 bug  \n\n\nTo change the state of a ticket, such as to change it from \'open\' to \'hold\' or \'resolved\', use `ti state`. There are 4 valid states: hold, invalid, open, and resolved.\n\n    $ ti state hold\n    $ ti list\n\n       TicId  Title                                              State Date  Assgn    Tags                \n    ----------------------------------------------------------------------------------------------------------\n\n*Dramatic Gasp!*\nWhere did all of our tickets go?  Don\'t worry, this isn\'t a bug and your tickets aren\'t gone.  \n\n    $ ti list --states open,hold\n\n       TicId  Title                                              State Date  Assgn    Tags                \n    ----------------------------------------------------------------------------------------------------------\n    *  d7f2d8 my new ticket                                      hold  09/06 jeff.we\xe2\x80\xa6 bug                 \n\nBy default `ti list` doesn\'t show tickets with a state of \'hold\', so we have to specify that we want to see those tickets with an argument.  Now you can see, out `ti state hold` command changed the state of that ticket to on hold. This can also be done without checking out the ticket by using `ti state 1 hold`.\n\nWhere ticgit expects a ticket id, it will take either the number of the ticket on the last \xe2\x80\x98list\xe2\x80\x99 you did, or it will take the partial sha each ticket is assigned when it is created \xe2\x80\x93 that number never changes for the life of the ticket, even across repositories, so you can email that number to someone else working on the project so they can identify it. If nothing is specified, it will use the currently checked out ticket.\n\n    $ ti comment -m "I\'m a new comment"\n    $ ti show\n    Title: my new ticket\n    TicId: d7f2d8f6d6ec3da1a1800a33fb090d590a533bac\n\n    Assigned: jeff.welling@gmail.com\n    Opened: Mon Sep 06 15:52:03 -0700 2010 (0 days)\n    State: OPEN\n    Points: no estimate\n    Tags: bug\n\n    Comments (1):\n      * Added 09/06 18:34 by jeff.welling@gmail.com\n      I\'m a new comment\n\n`ti show` also has a \'-f\' argument to be able to see comments that are longer than 3 lines, which would normally be truncated.\n\nThe `ti list` command can also be sorted and filtered.\n\n    $ ti list --help\n    Usage: ti list [options]\n     \n    Options for list command:\n        -l, --list                       Show the saved queries\n        -S, --saveas SAVENAME            Save this list as a saved name\n        -a, --assigned ASSIGNED          List only tickets assigned to someone\n        -s, --states STATE[,STATE]       List only tickets in a specific state(s)\n                                         Prefix the state with \'-\' to negate\n        -t, --tags TAG[,TAG]             List only tickets with specific tag(s)\n                                         Prefix the tag with \'-\' to negate\n        -o, --order ORDER                Field to order by - one of : assigned,state,date,title\n     \n    Common options:\n        -v, --version                    Show the version number\n        -h, --help                       Display this help\n\nSo if you wanted to see a list of all your tickets that have the \xe2\x80\x98feature\xe2\x80\x99 tag, assigned to \xe2\x80\x98jeff.welling@gmail.com\xe2\x80\x99 and are \xe2\x80\x98open\xe2\x80\x99, ordered by date opened descending, and save that view as \xe2\x80\x98not_mine\xe2\x80\x99, you can run this:\n\n    $ ti list -t feature -s open -a jeff.welling@gmail.com -o date.desc -S not_mine\n\nThen if you want to later list tickets with the same options as you used above, use\n\n    $ ti list not_mine\n\n## Collaboration ##\n\nIf you have cloned a repository and would like to get the ticgit-ng branch for that repo (presuming they have one), do this.\n\n    $git branch ticgit-ng origin/ticgit-ng\n\nThis will create a ticgit-ng branch in your local repo based on the ticgit-ng branch in origin.  Now you can run `ti list` and it will show you the ticgit-ng tickets for that repository.\n\n### Getting the TicGit-ng ticgit-ng branch ##\n\nTo download your own copy of the TicGit-ng ticgit branch after cloning the repo, so that you can add or alter a bug yourself, follow these instructions.\n\nThis will checkout a ticgit-ng branch and set it to track the ticgit-ng branch upstream in origin, and then checks out the master branch.  You must checkout the master branch because TicGit-ng gets confused if you are already in the ticgit-ng branch when running TicGit-ng.\n\n    $ git checkout origin/ticgit-ng\n    $ git checkout -b ticgit-ng\n    $ git checkout master\n\nThis will show you all of the bugs in TicGit-ng\'s ticgit-ng branch.\n\n    $ ti list\n\nTo submit your changes back to the upstream maintainer, push the bugs in your ticgit-ng branch to your public repo on Github\n    \n    $ git push origin ticgit-ng\n\nThen contact the upstream maintainer by sending a Pull Request or Email and ask them to review and accept your bug changes.\n\n### Sharing your tickets with others ###\n\nSharing your ticgit tickets with other people is as easy as asking them either creating their ticgit-ng branch based on yours if they haven\'t already started their own ticgit-ng branch, or pulling your ticgit-ng branch into theirs.\n\nIf you host your repositories on [Github](http://www.github.com) as I do then this process is simplified some because you don\'t have to worry about hosting your repository somewhere where other people can access it to pull your ticgit-ng branch.\n\nFor example, when I want my friend wnight to have the changes I made to my tickets in my ticgit-ng repository, I do a\n\n    $ git push origin\n\nto update all my remote branches with my current ones, and then I ask him to do a\n\n    $ git checkout ticgit-ng\n    $ git pull git@github.com:jeffWelling/ticgit.git ticgit-ng\n    $ git checkout master\n\nto pull my changes into his ticgit-ng branch and then switch back to his master branch.  Now when he does `ti list` it will show the changes I made to the tickets on my system.\n\n\n### Incorporating other peoples changes into your ticgit-ng branch ###\n\nThe process is much the same as above, except the rolls are reversed.  Once you know they have published their changes and you have a URL to do a git pull from, you simply do\n\n    $ git checkout ticgit-ng\n    $ git pull SOURCE_URL ticgit-ng\n    $ git checkout master\n\nReplacing SOURCE_URL with the URL you were told to pull from, now you can see the changes they made, in your ticgit-ng branch.  You can easily publish these changes with a `git push origin` so anyone following your work can also see these changes.\n\n\n### Next generation collaboration ###\n\nChanges made by [Bruno Santos](http://github.com/pheres) to add a [`ti sync`](http://github.com/jeffWelling/ticgit/commit/7388386fab4fb12c36e6eeb7d19eaa4e4b16b853) command were integrated on February 15th 2011.  You can now use the `ti sync [options]` command to sync your tickets with anyone else you\'ve added with `git remote add`.  To use `ti sync`, all you need to do is first make sure you\'ve already added the remote source with `git remote add`, and then do\n\n    $ ti sync --repo REMOTE_SOURCE\n\nif you want to pull their tickets into your ticgit-ng branch *and* push your tickets to their ticgit-ng branch, or\n\n    $ ti sync --repo REMOTE_SOURCE --no-push\n\nif you want to pull their tickets into your ticgit-ng branch without pushing your tickets to their branch.\n\nMore information on using ti sync can be gleemed from reviewing the [merge specs](https://github.com/jeffWelling/ticgit/blob/deving/spec/merging_spec.rb)\n\n### Ticgitweb ###\n\nTo run the Sinatra enabled web UI for your TicGit-ng repo, simply cd to your repository and run \'ticgitweb\', or \'ticgitweb -p 3456\' to change the port to something other than \'4567\', which is the Sinatra default.\n\nHere is what the Ticket listing looks like:\n\n<a href="http://www.flickr.com/photos/chacon/2359042481/" title="TicGitWeb Ticket List by schacon, on Flickr"><img src="http://farm4.static.flickr.com/3289/2359042481_065867a92e.jpg" width="500" height="258" alt="TicGitWeb Ticket List" /></a>\n\nAnd here is an individual ticket:\n\n<a href="http://www.flickr.com/photos/chacon/2359042513/" title="TicGitWeb Ticket by schacon, on Flickr"><img src="http://farm4.static.flickr.com/3240/2359042513_6d4bd069d0.jpg" width="500" height="275" alt="TicGitWeb Ticket" /></a>\n\n\n## Development ##\n\nThe original author had used rspec to write specs for ticgit-ng, but one of the maintainers since then switched it over to bacon[[1](http://www.ruby-forum.com/topic/137928)][[2](http://www.ruby-forum.com/topic/172139)][[3](http://testanything.org/wiki/index.php/Testing_with_Ruby)] and I haven\'t been too inclined to switch it back.\n\n### Prerequisites ###\n\nTo install the prerequisites on Debian stable for testing ticgit-ng, you will need [apt](http://jaqque.sbih.org/kplug/apt-pinning.html) [pinning](http://jeffwelling.github.com//2010/09/05/Apt-Pinning.html).\n\n    $ sudo aptitude -t testing install rubygems rake\n    $ sudo gem install yard bacon\n\nI pull rubygems from testing to avoid a problem with gherkin creating a syntactically incorrect gemspec which makes a lot of noise whenever `gem` is called. I ran into a problem when gem was installing yard, it had a problem with the documentation but thankfully the error wasn\'t fatal and was only about not being able to compile the documentation which I don\'t use, so it continued without trouble.\n\n\n### How To Test ###\n\nTo test your version of ticgit-ng, go to your ticgit-ng directory and run\n\n    rake bacon\n\n### How to generate a gem from your development copy of ticgit-ng ###\n\nTo create a gem from your development copy of ticgit-ng, go to your ticgit-ng directory and do\n\n    rake gem\n\nThis will create a pkg/ directory, which will contain a newly created ticgit-ng gem for you to install.\n\nMore information on developing TicGit-ng and collaborating with other TicGit-ng developers at [here](https://github.com/jeffWelling/ticgit/wiki/Development)\n\nMore information on developing TicGit-ng and collaborating with other TicGit-ng developers at [here](https://github.com/jeffWelling/ticgit/wiki/Development)\n\n### Alternatives ###\n\nditz \nbugs everywhere\ngit-issues\n\n\n## Authors ##\n\nOriginal Author:\nScott Chacon                (schacon@gmail.com)\n\nCurrent Active Maintainer:\nJeff Welling                (jeff.welling@gmail.com)\n\nFor a detailed list of contributors, use `git log`.\n'
Sample Application for use while I'm writing the active_scaffold_extjs bridge and front end b'h1. Active Scaffold Ext.JS Sample App\n\nA rails application to build, test and demonstrate integration between Active Scaffold and a new Ext.JS based front-end.\n\nh2. To install and run:\n\n<pre>\n# Clone the application \ngit clone git://github.com/activescaffold/active_scaffold_demo.git\ncd active_scaffold_demo\ngit submodule init && git submodule update  \nrake db:migrate\nscript/server\n</pre>\n\nh2. Project Goal:\n\np. The goal of this project is to create a complete active_scaffold front-end including all of AS\'s features (and hopefully more) with Ext.JS UI elements.  I chose Ext.JS because of the large number of UI elements to choose from.  I forsee a scaffolding that I can configure the "ui_type" (window, tab, tree, accordion, editor_grid, etc.) for each action (list, create, update, etc.) in my controllers.\n\np. Right now, I\'m just working on getting all the features of AS working: basic CRUD, nested, search, validations...\n\nh2. Project Status:\n\np. Currently, I have basic CRUD operations, and live search working (finally), and am working on nested and validations.  Next on the list will probably be associated columns and supporting more column form_ui...'
MountainWest RubyConf 2008 Presentation b'h1. Chunky Bacon - Using Amazon\'s Webservices From Ruby\n\nh2. Description:\n\nChunkyBacon is a suite of applications that use Amazon\'s Webservice APIs to produce bacon. Chunky bacon\nto be exact. Cartoon foxes then package up this chunky bacon.\n\nh2. Requirements:\n\n* Merb 0.9+\n* merb_sequel\x10\n* right_aws\n* kato\n* god\n\nh2. Installation:\n\n<pre><code>\n  $ git clone http://github.com/daikini/chunky_bacon.git\n</code></pre>\n\nh2. Getting Started:\n\nh3. Configure Database\n\n  # Edit the chunky_bacon/factory/config/database.yml file\n  # Edit the chunky_bacon/ec2/config/database.yml file (need not be the same as the factory config)\n\nh3. Start Up the Processes\n  \n  # <pre><code>$ cd chunky_bacon/factory && merb</code></pre>\n  # <pre><code>$ cd chunky_bacon/ec2 && merb -p 4001</code></pre>\n  # <pre><code>$ cd chunky_bacon/factory && merb -r \'CartoonFox.get_packaged_bacon!\'</code></pre>\n  # <pre><code>$ cd chunky_bacon/factory && merb -r \'CartoonFox.supervise!\'</code></pre>\n  \nh2. Producing Chunky Bacon:\n  \n  * Open browser to "http://localhost:4000/":http://localhost:4000/\n  * Startup an interactive merb session\n    <pre><code>$ cd chunky_bacon/factory && merb -i</code></pre>\n    <pre><code>>> Slice.package!</code></pre>\n    <pre><code>>> loop { Slice.package!; sleep 1.5 }</code></pre>\n\nHave fun creating as much bacon as you want!\n\nh3. License:\n\n  chunky_bacon is licensed under the MIT License. Copyright (c) 2008 Jonathan Younger\n'
Escape the hell of `rake rdoc` .. edit .. `rake rdoc` .. edit .. etc. b"\n= LivelyDocs!\n\nEscape the hell of:\n<tt>rake rdoc</tt>..edit..<tt>rake rdoc</tt>..edit..etc..\n\nUse LivelyDocs for auto-reloading docs!\n\nYou should use it because it's a freaking loop!!! .. and the README has lots of !!!!\n\n== Install\n\n<tt>gem install livelydocs</tt>\n\n== Run\n  \n<tt>~$ livelydocs</tt>\n\n<tt>** Running LivelyDocs!</tt>\n\n=== Custom Task\n\n<tt>~$ livelydocs another_rdoc</tt>\n\n== Open, edit, refresh, edit, refresh, etc..\n\n<tt>open doc/index.html</tt>\n"
stuff for my site b'This is the code for the Django apps on thescoop.org, including the Database of CAR Stories and a long-planned but undeveloped blog app.\n\n=== TO-DO  ===\n\n* Use links from WP blog for base templates (re-work Link model in blog app to point to that table).\n* Add Everyblock-style bar graphs for yearly story counts to source_detail pages.\n'
A Rails Plugin to allow for drop-in ticket creation from a Rails application to the Lighthouse issue tracking system b'QuickTicket\n===========\n\nQuickTicket is a Rails plugin that utilizes the Lighthouse API to provide ticket creation within a Rails application. This will create a little icon on the bottom right of the application screen (which scrolls) that will display a pane when clicked. This will allow the user to provide their comments/issues/bug into  the pane which is then submitted to your Lighthouse account for the project.\n\nWhat gets installed\n===================\n\nOnce you have the plugin installed, you will find the following two new assets created into your application\n\n* ./public/stylesheets/quickticket.css - This holds the default (and configurable) styling for the application, update it as you see fit or configure it not to be loaded.\n* ./public/javascripts/quickticket.js  - This holds the necessary javascript, written to work with the Prototype library. You can enhance or modify it (switch to jQuery) but keep the namespace and methods the same.\n\nAlso new parameters have been added to your environment.rb file which will allow you to configure QuickTicket. You should probably go update those now, otherwise it will act like its working, but fail.\n\nWhat you need to do\n===================\n\nIt feels dirty adding routes to your application, so we are just going to make you do it. This route will just allow the app to call back into the lighthouse ticket controller, which IF the environment is correct, will execute, otherwise it will redirect back. Essentially said, if someone tries to access the route when not in the right environment, the system will block it (p0wn3d). So make sure you add this line to your routes.rb file:\n\nmap.create\\_ticket "create\\_ticket", :controller=>"quick_tickets", :action=>"create"'
The fleet little web framework in Ruby. 
my mephisto comment email plugin, rest/ws pings to notification services when you post b'weblog ping for Mephisto\n==================================================\n\nUpon posting an article, a ping will be sent\n\n\nInstall\n==========\n   ruby script/install svn://hasno.info/mephisto/plugins/mephisto_post_ping\n   Set the akismet url using the admin section. The url will be sent as the\n   base url for your site.\n\n\nUsage\n==========\n   Post an article. The plugin defaults to pinging ping-o-matic (http://pingomatic.com).\n   If you would like to change what sites the plugin pings or the ping method, edit lib/config.rb:\n\nArticlePingObserver::SERVICES << { :url => "http://my.ping.site", :type => :xmlrpc }\n\nArticlePingObserver::SERVICES << { :url => "http://my.rest.ping.site", :type => :rest }\n\n   The plugin can filter based on section or tag, add :section => \'my_section_name\' or :tag => \'my_tag_name\'\n   to enable it for a specific posting service.\n\n\n\n(C) Mark Guzman 2006, under an MIT license.\n'
Treat an ActiveRecord model as a file attachment, storing its patch, size, content type, etc. b'attachment-fu\n=============\n\nattachment_fu is a plugin by Rick Olson (aka technoweenie <http://techno-weenie.net>) and is the successor to acts_as_attachment.  To get a basic run-through of its capabilities, check out Mike Clark\'s tutorial <http://clarkware.com/cgi/blosxom/2007/02/24#FileUploadFu>.\n\n\nattachment_fu functionality\n===========================\n\nattachment_fu facilitates file uploads in Ruby on Rails.  There are a few storage options for the actual file data, but the plugin always at a minimum stores metadata for each file in the database.\n\nThere are three storage options for files uploaded through attachment_fu:\n  File system\n  Database file\n  Amazon S3\n\nEach method of storage many options associated with it that will be covered in the following section.  Something to note, however, is that the Amazon S3 storage requires you to modify config/amazon_s3.yml and the Database file storage requires an extra table.\n\n\nattachment_fu models\n====================\n\nFor all three of these storage options a table of metadata is required.  This table will contain information about the file (hence the \'meta\') and its location.  This table has no restrictions on naming, unlike the extra table required for database storage, which must have a table name of db_files (and by convention a model of DbFile).\n  \nIn the model there are two methods made available by this plugins: has_attachment and validates_as_attachment.\n\nhas_attachment(options = {})\n  This method accepts the options in a hash:\n    :content_type     # Allowed content types.\n                      # Allows all by default.  Use :image to allow all standard image types.\n    :min_size         # Minimum size allowed.\n                      # 1 byte is the default.\n    :max_size         # Maximum size allowed.\n                      # 1.megabyte is the default.\n    :size             # Range of sizes allowed.\n                      # (1..1.megabyte) is the default.  This overrides the :min_size and :max_size options.\n    :resize_to        # Used by RMagick to resize images.\n                      # Pass either an array of width/height, or a geometry string.\n    :thumbnails       # Specifies a set of thumbnails to generate.\n                      # This accepts a hash of filename suffixes and RMagick resizing options.\n                      # This option need only be included if you want thumbnailing.\n    :thumbnail_class  # Set which model class to use for thumbnails.\n                      # This current attachment class is used by default.\n    :path_prefix      # path to store the uploaded files.\n                      # Uses public/#{table_name} by default for the filesystem, and just #{table_name} for the S3 backend.  \n                      # Setting this sets the :storage to :file_system.\n    :storage          # Specifies the storage system to use..\n                      # Defaults to :db_file.  Options are :file_system, :db_file, and :s3.\n    :processor        # Sets the image processor to use for resizing of the attached image.\n                      # Options include ImageScience, Rmagick, and MiniMagick.  Default is whatever is installed.\n    \n\n  Examples:\n    has_attachment :max_size => 1.kilobyte\n    has_attachment :size => 1.megabyte..2.megabytes\n    has_attachment :content_type => \'application/pdf\'\n    has_attachment :content_type => [\'application/pdf\', \'application/msword\', \'text/plain\']\n    has_attachment :content_type => :image, :resize_to => [50,50]\n    has_attachment :content_type => [\'application/pdf\', :image], :resize_to => \'x50\'\n    has_attachment :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\'\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\', \n                   :content_type => :image, :resize_to => [50,50]\n    has_attachment :storage => :file_system, :path_prefix => \'public/files\',\n                   :thumbnails => { :thumb => [50, 50], :geometry => \'x50\' }\n    has_attachment :storage => :s3\n\nvalidates_as_attachment\n  This method prevents files outside of the valid range (:min_size to :max_size, or the :size range) from being saved.  It does not however, halt the upload of such files.  They will be uploaded into memory regardless of size before validation.\n  \n  Example:\n    validates_as_attachment\n\n\nattachment_fu migrations\n========================\n\nFields for attachment_fu metadata tables...\n  in general:\n    size,         :integer  # file size in bytes\n    content_type, :string   # mime type, ex: application/mp3\n    filename,     :string   # sanitized filename\n  that reference images:\n    height,       :integer  # in pixels\n    width,        :integer  # in pixels\n  that reference images that will be thumbnailed:\n    parent_id,    :integer  # id of parent image (on the same table, a self-referencing foreign-key).\n                            # Only populated if the current object is a thumbnail.\n    thumbnail,    :string   # the \'type\' of thumbnail this attachment record describes.  \n                            # Only populated if the current object is a thumbnail.\n                            # Usage:\n                            # [ In Model \'Avatar\' ]\n                            #   has_attachment :content_type => :image, \n                            #                  :storage => :file_system, \n                            #                  :max_size => 500.kilobytes,\n                            #                  :resize_to => \'320x200>\',\n                            #                  :thumbnails => { :small => \'10x10>\',\n                            #                                   :thumb => \'100x100>\' }\n                            # [ Elsewhere ]\n                            # @user.avatar.thumbnails.first.thumbnail #=> \'small\'\n  that reference files stored in the database (:db_file):\n    db_file_id,   :integer  # id of the file in the database (foreign key)\n    \nField for attachment_fu db_files table:\n  data, :binary # binary file data, for use in database file storage\n\n\nattachment_fu views\n===================\n\nThere are two main views tasks that will be directly affected by attachment_fu: upload forms and displaying uploaded images.\n\nThere are two parts of the upload form that differ from typical usage.\n  1. Include \':multipart => true\' in the html options of the form_for tag.\n    Example:\n      <% form_for(:attachment_metadata, :url => { :action => "create" }, :html => { :multipart => true }) do |form| %>\n      \n  2. Use the file_field helper with :uploaded_data as the field name.\n    Example:\n      <%= form.file_field :uploaded_data %>\n\nDisplaying uploaded images is made easy by the public_filename method of the ActiveRecord attachment objects using file system and s3 storage.\n\npublic_filename(thumbnail = nil)\n  Returns the public path to the file.  If a thumbnail prefix is specified it will return the public file path to the corresponding thumbnail.\n  Examples:\n    attachment_obj.public_filename          #=> /attachments/2/file.jpg\n    attachment_obj.public_filename(:thumb)  #=> /attachments/2/file_thumb.jpg\n    attachment_obj.public_filename(:small)  #=> /attachments/2/file_small.jpg\n\nWhen serving files from database storage, doing more than simply downloading the file is beyond the scope of this document.\n\n\nattachment_fu controllers\n=========================\n\nThere are two considerations to take into account when using attachment_fu in controllers.\n\nThe first is when the files have no publicly accessible path and need to be downloaded through an action.\n\nExample:\n  def readme\n    send_file \'/path/to/readme.txt\', :type => \'plain/text\', :disposition => \'inline\'\n  end\n  \nSee the possible values for send_file for reference.\n\n\nThe second is when saving the file when submitted from a form.\nExample in view:\n <%= form.file_field :attachable, :uploaded_data %>\n\nExample in controller:\n  def create\n    @attachable_file = AttachmentMetadataModel.new(params[:attachable])\n    if @attachable_file.save\n      flash[:notice] = \'Attachment was successfully created.\'\n      redirect_to attachable_url(@attachable_file)     \n    else\n      render :action => :new\n    end\n  end\n'
Mozilla JavaScript Engine (SpiderMonkey) bindings for Ruby 
my mephisto feed reader plugin, allows for the display of rss feeds in your layout b'rss feed display plugin for Mephisto\n==================================================\n\nYou can display feeds in your templates\n\n\nInstall\n==========\n   ruby script/install svn://hasno.info/mephisto/plugins/feedreader\n   ruby script/runner -e production \'Mephisto::Plugins::Feedreader.install\'\n\n\n\nUsage\n==========\n\nThe plugin makes a new liquid template tag \'feedreader\':\n\n   <ul>\n   {% feedreader url: \'http://digg.com/\', max: 15 as link %}\n     <li><a href="{{ link.href }}">{{ link.description }}</a> {{ link.extended }}</li>\n   {% endfeedreader %}\n   </ul>\n\nOther Liquid variables that may be available depending on what a feed item named \'link\'\nmay provide:\n\nlink.title (same as description)\nlink.summary (used if the feed provides a summary or excerpt)\nlink.author_name\nlink.author_email \nlink.author_href\n\n\n(C) Mark Guzman 2006-2007, under an MIT license.\n'
Groovy contributions to the Wicket project 
A servlet class used to serve django+jython sites. 
Aggregate semantic data. b"## About graphpipes\n\ngraphpipes is a simple and easy way to aggregate semantic data.\n      \nBy using drag'n'dropin a web-based application you are able to create\nSPARQL-queries and reuse them later in your networked graphs.\n\ngraphpipes is a proof of concept, developed at \nUniversity of Koblenz-Landau, Germany\n\n### Requirements\n  * Ruby 1.8.6+\n  * Rails 2.2.2\n  * Linux / Windows may work but has not been tested\n  * A well written Browser like Firefox - Safari and Opera are currently now supported\n\n### Quick Install\n  0. Download and install all needed gems\n      - git://github.com/pjlegato/ruby-sesame.git\n      - hoe\n      - curb\n      using % sudo gem install %name\n  1. Download graphpipes (master branch on github: http://github.com/tomfarm/graphpipes/tree/master )\n  2. cd into the graphpipes directory\n  3. Rename config/database.sample.yml to database.yml (you may want to change to config to your needs)\n  4. rake db:migrate \n  5. ./script/server -e production  \n  6. visit http://localhost:3000\n  7. You may login using 'admin/secret'\n\n\nThomas Winkler - Koblenz, 03/30/2008 \ntomfarm@gmail.com"
planning game b'Welcome to Towel development!\n\nGems\n- image_science (1.1.3) (FreeImage), or RMagick (ImageMagick/GraphicsMagick) on Windows ;-)\n- mongrel (1.1.3)\n- mongrel_cluster (1.0.5)\n- rake (0.8.1)\n- RubyInline (3.6.6)\n'
 b'This is Perl module FormValidator::Assets.\n\nINSTALLATION\n\nFormValidator::Assets installation is straightforward. If your CPAN shell is set up,\nyou should just be able to do\n\n    % cpan FormValidator::Assets\n\nDownload it, unpack it, then build it as per the usual:\n\n    % perl Makefile.PL\n    % make && make test\n\nThen install it:\n\n    % make install\n\nDOCUMENTATION\n\nFormValidator::Assets documentation is available as in POD. So you can do:\n\n    % perldoc FormValidator::Assets\n\nto read the documentation online with your favorite pager.\n\nDaisuke Murase\n'
A randomizer for persons 
Configuration files for Linux, such as bashrc.  Mostly things I've collected from other people over the years. b'# Mah Dotfilez #\n\nMy collection of configuration files for Linux (bashrc, screenrc, etc.).  Most of these things I have collected from various people smarter than me over the years.  Feel free to use anything you find useful.\n\n## Installation ##\n\n    cd ~\n    git clone git://github.com/mileszs/dotfiles.git\n    cd dotfiles\n    ./install\n'
A Markup White Lister b'Whistler \n==============\n\nWhistler is a white listing markup filter based on the specifications of the rails plugin by Rick Olson, aka technoweenie.\nhttp://techno-weenie.net/\nWhistler relies on the Hpricot library http://code.whytheluckystiff.net/hpricot\n\nThis is very alpha at the moment.  Please help make it great.\n \nWhistler strips, and or sanitizes arbitrary XML/HTML style markup of any tags not explicitly\nincluded in the white list.  It doesn\'t try to play catch-up with possible exploites such as black-listing systems do.\n\nUsage is very simple.\n\n=== Example\n# Applies the normal white list defaults\n\nWhistler.white_list( dodgy_markup ) \n\n\n# Adds custom tags to allow\nWhistler.white_list(dodgy_markup, :add_tags => %w(news_tag my_tag other_tag))\n\nIf Whistler is unable to read tags as "tags" it will instead sanitize potential XSS attempts in the text.\nNormal, non-malicious text should still appear correctly.\n\n'
Pretty url support for Ruby on Rails applications b'ActsAsUrlParam\n==============\n\nThis plugin allows restful resources to be automatically exposed with human readable urls\nbased on another method on the resource.\n\nThe URL parameter value that is computed will be unique within the model. If the model is\nusing inheritance, it\'s recommended to define acts_as_url_param on the base class.\n\nDefines one public class methods on your model:\nMyResource.url_param_available?(candidate,id=nil)\n# => true\n# if the candidate value does not exist for the model\n\nDefines one public instance method on your model:\nmy_resource.compute_url_param\n# => "unique-url-parameter-2"\n\nContributors\n============\n"Chris Eppstein"<chris@eppsteins.net>\n"Joshua Bates"<joshuabates@gmail.com>\n\nExample\n=======\n\n# use the url_param column as the model\'s url. It will be set and/or modified whenever the default method changes.\n# The default methods, in order of precedence, are: :name, :label, :title\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param\nend\n\n# use the url_name column as the model\'s url. It will be set and/or modified whenever title changes\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :url_name, :from => :title\nend\n\n# use the url_param column as the model\'s url. It will be set and/or modified whenever title changes\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :from => :title\nend\n\n# use the url_param column as the model\'s url. It will be set and/or modified whenever the :on event occurs.\n# Allowed events are: :create, :save, :update. Default is :create so that your permalinks stay permanent.\n# May also be a Proc that accepts the model instance and returns true if url_param should change.\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :from => :title, :on => :create\nend\n\n# use the url_name column as the model\'s url. It will be set and/or modified whenever the :on event(s) occur.\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :url_name, :from => :title, :on => :create\nend\n\n# Passing a block allows you to approve candidate url parameters.\n# This enables definition of a url space across that spans several models. This is easiest if all\n# models are acts_as_url_param.\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :url_name, :from => :title do |candidate|\n    MyResource.url_param_available?(candidate,self.id) &&\n    MyOtherResource.url_param_available?(candidate)\n  end\nend\n\nCopyright (c) 2007 Chris Eppstein, released under the MIT license'
A Rails plugin to create tests for you when your app throws an unhandled exception b'Laziness\n========\n\nLaziness does one thing: if your application throws an unhandled error, it will automatically create a failing test for you to copy into the appropriate test file - or if you\'re using RSpec, it\'ll write the appropriate spec for you.\n\nInstallation\n============\n\nIf you\'re running ExceptionNotifier, you\'ll need to make sure that vendor/plugins/laziness/views/_laziness.rhtml is copied into vendor/plugins/exception_notification/views/exception_notifier - that will allow your exception notifier emails to include the generated test (or spec). The file is normally copied over by the plugin installation process, but if it doesn\'t make it there you can move it by hand.\n\nExample\n=======\n\nSay you\'re browsing your site and you get a 500 error on /users/new, which is rendering the UsersController#new action. In the error page (or exception email, if you\'re using ExceptionNotifier), Laziness adds something like the following:\n\ndef test_get_users_new_should_not_raise_nameerror_exception\n  assert_nothing_raised(NameError) do\n    get :new, {[params from request]}, {[session from request]}, {[flash from request]}\n  end\nend\n\nThe exact exception asserted (in this case, NameError) will depend on what caused the 500 error in the first place.\n\nIf you\'re using RSpec, the generated code will look like this:\n\ndescribe "Handling GET users new" do\n  it "should not raise NameError" do\n    lambda { \n      get :new, {[params from request]}, {[session from request]}, {[flash from request]}\n    }.should_not raise_error(NameError)\n  end\nend\n\nCatching Specific Exceptions\n============================\n\nYou can customize the tests to be generated on an exception-by-exception basis; just add the appropriate file to lib/exceptions/what/ever.rb and make sure it defines ++test++ and ++spec++ methods; look at lib/exceptions/action_controller/unknown_view.rb for an example.\n\n\nCopyright (c) 2008 Ben Scofield, released under the MIT license\n'
Pretty url support for Ruby on Rails applications b'ActsAsUrlParam\n==============\n\nThis plugin allows restful resources to be automatically exposed with human readable urls\nbased on another method on the resource.\n\nThe URL parameter value that is computed will be unique within the model. If the model is\nusing inheritance, it\'s recommended to define acts_as_url_param on the base class.\n\nDefines one public class methods on your model:\nMyResource.url_param_available?(candidate,id=nil)\n# => true\n# if the candidate value does not exist for the model\n\nDefines one public instance method on your model:\nmy_resource.compute_url_param\n# => "unique-url-parameter-2"\n\nContributors\n============\n"Chris Eppstein"<chris@eppsteins.net>\n"Joshua Bates"<joshuabates@gmail.com>\n\nExample\n=======\n\n# use the url_param column as the model\'s url. It will be set and/or modified whenever the default method changes.\n# The default methods, in order of precedence, are: :name, :label, :title\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param\nend\n\n# use the url_name column as the model\'s url. It will be set and/or modified whenever title changes\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :url_name, :from => :title\nend\n\n# use the url_param column as the model\'s url. It will be set and/or modified whenever title changes\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :from => :title\nend\n\n# use the url_param column as the model\'s url. It will be set and/or modified whenever the :on event occurs.\n# Allowed events are: :create, :save, :update. Default is :create so that your permalinks stay permanent.\n# May also be a Proc that accepts the model instance and returns true if url_param should change.\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :from => :title, :on => :create\nend\n\n# use the url_name column as the model\'s url. It will be set and/or modified whenever the :on event(s) occur.\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :url_name, :from => :title, :on => :create\nend\n\n# Passing a block allows you to approve candidate url parameters.\n# This enables definition of a url space across that spans several models. This is easiest if all\n# models are acts_as_url_param.\nclass MyResource < ActiveRecord::Base\n  acts_as_url_param :url_name, :from => :title do |candidate|\n    MyResource.url_param_available?(candidate,self.id) &&\n    MyOtherResource.url_param_available?(candidate)\n  end\nend\n\nCopyright (c) 2007 Chris Eppstein, released under the MIT license'
A Rails plugin that makes assigning a UUID to your models a breeze. b'has_uuid\n========\n\n[has_uuid](http://github.com/norbert/has_uuid) provides basic [UUID](http://en.wikipedia.org/wiki/Universally_Unique_Identifier) assignment methods for ActiveRecord objects.\n\nIt depends on the [uuidtools](http://uuidtools.rubyforge.org/) gem.\n\n\nInstallation\n------------\n\n\tscript/plugin install git://github.com/norbert/has_uuid.git\n\n\nUsage\n-----\n\n\tclass Post < ActiveRecord::Base\n\t  # automatically assign a UUID to the "uuid" column on create\n\t  has_uuid\n\tend\n\n\tclass Comment < ActiveRecord::Base\n\t  # skip assignment on create\n\t  has_uuid :auto => false\n\tend\n\n\tclass User < ActiveRecord::Base\n\t  # store the UUID in the "token" column, generate version 1 UUIDs\n\t  has_uuid :column => :token, :generator => :timestamp\n\tend\n\n\t# assign a UUID if a valid one is not already present\n\t@post.assign_uuid\n\n\t# assign a UUID, replacing whatever is already there\n\t@post.assign_uuid(:force => true)\n\n\t# assign a UUID and save, replacing whatever is there\n\t@post.assign_uuid!\n\n\t# check if the current UUID is valid\n\t@post.uuid_valid?\n\n\nCredits\n-------\n\n* Norbert Crombach\n* Todd Eichel\n* Joerg Batterman\n'
A Rails plugin for sweeping the entire page cache. b'LazySweeper\n===========\n\nThis is certainly one of the easiest solutions for the second hardest thing in computer science. It is based on a [post by Thijs at Fingertips][1].\n\nHave fun sweeping your entire page cache.\n\nAdd models by calling `LazySweeper.observe` in an initializer. You can also call `LazySweeper.run` manually if needed.\n\nFor more information, you can check the [Rails Envy article on page caching][2] that also ripped the original code.\n\n[1]: http://www.fngtps.com/2006/01/lazy-sweeping-the-rails-page-cache "Lazily sweeping the whole Rails page cache"\n[2]: http://www.railsenvy.com/2007/2/28/rails-caching-tutorial#clearing "Ruby on Rails Caching Tutorial"\n'
A basic accounting software, written in Ruby, using the Rails framework.  UI in French. b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in \nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in \nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting started\n\n1. Run the WEBrick servlet: <tt>ruby script/server</tt> (run with --help for options)\n   ...or if you have lighttpd installed: <tt>ruby script/lighttpd</tt> (it\'s faster)\n2. Go to http://localhost:3000/ and get "Congratulations, you\'ve put Ruby on Rails!"\n3. Follow the guidelines on the "Congratulations, you\'ve put Ruby on Rails!" screen\n\n\n== Example for Apache conf\n\n  <VirtualHost *:80>\n    ServerName rails\n    DocumentRoot /path/application/public/\n    ErrorLog /path/application/log/server.log\n  \n    <Directory /path/application/public/>\n      Options ExecCGI FollowSymLinks\n      AllowOverride all\n      Allow from all\n      Order allow,deny\n    </Directory>\n  </VirtualHost>\n\nNOTE: Be sure that CGIs can be executed in that directory as well. So ExecCGI\nshould be on and ".cgi" should respond. All requests from 127.0.0.1 go\nthrough CGI, so no Apache restart is necessary for changes. All other requests\ngo through FCGI (or mod_ruby), which requires a restart to show changes.\n\n\n== Debugging Rails\n\nHave "tail -f" commands running on both the server.log, production.log, and\ntest.log files. Rails will automatically display debugging and runtime\ninformation to these files. Debugging info will also be shown in the browser\non requests from 127.0.0.1.\n\n\n== Breakpoints\n\nBreakpoint support is available through the script/breakpointer client. This\nmeans that you can break out of execution at any point in the code, investigate\nand change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find_all\n      breakpoint "Breaking out from the list"\n    end\n  end\n  \nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the breakpointer window. Here you can do things like:\n\nExecuting breakpoint "Breaking out from the list" at .../webrick_server.rb:16 in \'breakpoint\'\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>, \n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a breakpoint"\n  => "hello from a breakpoint"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first \n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you press CTRL-D\n\n\n== Console\n\nYou can interact with the domain model by starting the console through script/console. \nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>console production</tt>.\n\n\n== Description of contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblog_controller.rb for\n  automated URL mapping. All controllers should descend from\n  ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n  \napp/views\n  Holds the template files for the view that should be named like\n  weblog/index.rhtml for the WeblogController#index action. All views use eRuby\n  syntax. This directory can also be used to keep stylesheets, images, and so on\n  that can be symlinked to public.\n  \napp/helpers\n  Holds view helpers that should be named like weblog_helper.rb.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ncomponents\n  Self-contained mini-applications that can bundle together controllers, models, and views.\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n    \npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
A RESTful CouchDB client based on Heroku's RestClient and Couch.js - you want the version at http://github.com/couchrest/couchrest b'## Please use the copy of CouchRest found at [http://github.com/couchrest/couchrest](http://github.com/couchrest/couchrest)\n'
merb plugin for filtering Markdown or Textile to HTML (also does syntax highlighting via coderay). b"= merb_can_filter\n\nhttp://rubyforge.org/projects/sintaxi/\n\n== DESCRIPTION:\n\nFilters from your choice of Markdown, Textile or Plain HTML into\nHTML and gives appropriate markup for syntax highlighting on code.\n\n== FEATURES/PROBLEMS:\n\n* Formats Textile or Markdown\n* Applies markup to code for syntax highlighting.\n* requires a filter(string) column\n\n== SYNOPSIS:\n\nIn any model specify what columns to filter and how it should\nbe filtered using a 'filter' column with a value of Markdown, \nTextile or Plain HTML.\n\n  merb_can_filter :body, :excerpt\n\nIn this case the filtered(html) data will be saved to body_html \nand excerpt_html (be sure those columns exist in your database.\n\nAll instances of <code></code> will have markup for syntax \nhighlighting. Specify your markup language eg. <code:ruby></code>\nor <code:javascript></code>\n\n== REQUIREMENTS:\n\n* RedCloth\n* BlueCloth\n* CodeRay\n\n== INSTALL:\n\n* sudo gem install merb_can_filter\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) Brock Whitten 2008\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
The WordPress tree for http://ianloic.com/ b'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml">\n<head>\n\t<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\n\t<title>WordPress &rsaquo; ReadMe</title>\n\t<link rel="stylesheet" href="wp-admin/css/install.css" type="text/css" />\n</head>\n<body>\n<h1 id="logo" style="text-align: center">\n\t<img alt="WordPress" src="wp-admin/images/wordpress-logo.png" />\n\t<br /> Version 2.5\n</h1>\n<p style="text-align: center">Semantic Personal Publishing Platform</p>\n\n<h1>First Things First</h1>\n<p>Welcome. WordPress is a very special project to me. Every developer and contributor adds something unique to the mix, and together we create something beautiful that I\'m proud to be a part of. Thousands of hours have gone into WordPress, and we\'re dedicated to making it better every day. Thank you for making it part of your world.</p>\n<p style="text-align: right;">&#8212; Matt Mullenweg</p>\n\n<h1>Installation: Famous 5-minute install</h1>\n<ol>\n\t<li>Unzip the package in an empty directory.</li>\n\t<li>Open up <code>wp-config-sample.php</code> with a text editor like WordPad or similar and fill in your database connection details.</li>\n\t<li>Save the file as <code>wp-config.php</code></li>\n\t<li>Upload everything.</li>\n\t<li>Open <span class="file"><a href="wp-admin/install.php">/wp-admin/install.php</a></span> in your browser. This should setup the tables needed for your blog. If there is an error, double check your <span class="file">wp-config.php</span> file, and try again. If it fails again, please go to the <a href="http://wordpress.org/support/">support forums</a> with as much data as you can gather.</li>\n\t<li><strong>Note the password given to you.</strong></li>\n\t<li> The install script should then send you to the <a href="wp-login.php">login page</a>. Sign in with the username <code>admin</code> and the password generated during the installation. You can then click on \'Profile\' to change the password.</li>\n</ol>\n\n<h1>Upgrading</h1>\n<p>Before you upgrade anything, make sure you have backup copies of any files you may have modified such as <code>index.php</code>.</p>\n<h2>Upgrading from any previous WordPress to 2.5:</h2>\n<ol>\n\t<li>Delete your old WP files, saving ones you\'ve modified.</li>\n\t<li>Upload the new files.</li>\n\t<li>Point your browser to <span class="file"><a href="wp-admin/upgrade.php">/wp-admin/upgrade.php</a>.</span></li>\n\t<li>You wanted more, perhaps? That\'s it!</li>\n</ol>\n<h2>Template Changes</h2>\n<p>If you have customized your templates you will probably have to make some changes to them. If you\'re converting your 1.2 or earlier templates, <a href="http://codex.wordpress.org/Upgrade_1.2_to_1.5">we\'ve created a special guide for you</a>. </p>\n\n<h1>Online Resources</h1>\n<p>If you have any questions that aren\'t addressed in this document, please take advantage of WordPress\' numerous online resources:</p>\n<dl>\n\t<dt><a href="http://codex.wordpress.org/">The WordPress Codex </a></dt>\n\t\t<dd>The Codex is the encyclopedia of all things WordPress. It is the most comprehensive source of information for WordPress available.</dd>\n\t<dt><a href="http://wordpress.org/development/">The Development Blog</a></dt>\n\t\t<dd>This is where you\'ll find the latest updates and news related to WordPress. Bookmark and check often.</dd>\n\t<dt><a href="http://planet.wordpress.org/">WordPress Planet </a></dt>\n\t\t<dd>The WordPress Planet is a news aggregator that brings together posts from WordPress blogs around the web.</dd>\n\t<dt><a href="http://wordpress.org/support/">WordPress Support Forums</a></dt>\n\t\t<dd>If you\'ve looked everywhere and still can\'t find an answer, the support forums are very active and have a large community ready to help. To help them help you be sure to use a descriptive thread title and describe your question in as much detail as possible.</dd>\n\t<dt><a href="http://codex.wordpress.org/IRC">WordPress IRC Channel</a></dt>\n\t\t<dd>Finally, there is an online chat channel that is used for discussion among people who use WordPress and occasionally support topics. The above wiki page should point you in the right direction. (<a href="irc://irc.freenode.net/wordpress">irc.freenode.net #wordpress</a>)</dd>\n</dl>\n\n<h1>System Recommendations</h1>\n<ul>\n\t<li>PHP version <strong>4.3</strong> or higher.</li>\n\t<li>MySQL version <strong>4.0</strong> or higher.</li>\n\t<li>... and a link to <a href="http://wordpress.org/">http://wordpress.org</a> on your site.</li>\n</ul>\n<p>WordPress is the official continuation of <a href="http://cafelog.com/">b2/caf&eacute;log</a>, which came from Michel V. The work has been continued by the <a href="http://wordpress.org/about/">WordPress developers</a>. If you would like to support WordPress, please consider <a href="http://wordpress.org/donate/">donating</a>.</p>\n\n<h1>Upgrading from another system</h1>\n<p>WordPress can <a href="http://codex.wordpress.org/Importing_Content">import from a number of systems</a>. First you need to get WordPress installed and working as described above.</p>\n\n<h1>XML-RPC and Atom Interface</h1>\n<p>You can now post to your WordPress blog with tools like <a href="http://windowslivewriter.spaces.live.com/">Windows Live Writer</a>, <a href="http://ecto.kung-foo.tv/">Ecto</a>, <a href="http://bloggar.com/">Bloggar</a>, <a href="http://radio.userland.com">Radio Userland</a> (which means you can use Radio\'s email-to-blog feature), <a href="http://www.newzcrawler.com/">NewzCrawler</a>, and other tools that support the Blogging APIs! :) You can read more about <a href="http://codex.wordpress.org/XML-RPC_Support">XML-RPC support on the Codex</a>.</p>\n\n<h1>Post via Email</h1>\n<p>You can post from an email client! To set this up go to your &quot;Writing&quot; options screen and fill in the connection details for your secret POP3 account. Then you need to set up <code>wp-mail.php</code> to execute periodically to check the mailbox for new posts. You can do it with Cron-jobs, or if your host doesn\'t support it you can look into the various website-monitoring services, and make them check your <code>wp-mail.php</code> URL.</p>\n<p>Posting is easy: Any email sent to the address you specify will be posted, with the subject as the title. It is best to keep the address discrete. The script will <em>delete</em> emails that are successfully posted.</p>\n\n<h1>User Roles</h1>\n<p>We\'ve eliminated user levels in order to make way for the much more flexible roles system introduced in 2.0. You can <a href="http://codex.wordpress.org/Roles_and_Capabilities">read more about Roles and Capabilities on the Codex</a>.</p>\n\n<h1> Final notes</h1>\n<ul>\n\t<li>If you have any suggestions, ideas, comments, or if you (gasp!) found a bug, join us in the <a href="http://wordpress.org/support/">Support Forums</a>.</li>\n\t<li>WordPress now has a robust plugin API that makes extending the code easy. If you are a developer interested in utilizing this see the <a href="http://codex.wordpress.org/Plugin_API">plugin documentation in the Codex</a>. In most all cases you shouldn\'t modify any of the core code.</li>\n</ul>\n\n<h1>Share the Love</h1>\n<p>WordPress has no multi-million dollar marketing campaign or celebrity sponsors, but we do have something even better&#8212;you. If you enjoy WordPress please consider telling a friend, setting it up for someone less knowledgable than yourself, or writing the author of a media article that overlooks us.</p>\n\n<h1>Copyright</h1>\n<p>WordPress is released under the <abbr title="GNU Public License">GPL</abbr> (see <a href="license.txt">license.txt</a>).</p>\n\n</body>\n</html>\n'
A simple Radiant extension that provides a method to easily re-render text within a Radius tag b'= Rerender Tags\n\nThis extension adds two methods to Radiant\'s Page model that allows you to easily define tags that can render their contents twice.  The primary use for this is to add support for tags that occur before the necessary information to render them is available.\n\n== Example\n\nSay we want to add have a tag that creates a link to every header in a page.  This would be simple if the tag occurred at the end of the page.  However, most pages want this at the beginning.  The solution is to do something like this:\n\n<tt>\n<r:capture_headers>\n  <rr:table_of_contents/>\n  \n<r:h1>Foo</r:h1>\n\n...\n\n<r:h2>Bar</r:h2>\n\n...\n\n</r:capture_headers>\n</tt>\n\n(A fuller example of this same tag is laid out in spec/models/page_with_rerender_text_spec.rb.)\n\nThe <tt><rr:toc/></tt> tag is in a separate namespace than the others and thus won\'t be evaluated until afterward.  In the <tt><r:capture_headers/></tt> tag we call\n\n<tt>rerender_text(tag.expand, :headers => headers)</tt>\n\nwhich sets up a new Radius context and parser to expand tags in the "rr" namespace.\n\n== Using other namespaces\n\nIf you need to render more than twice, you can change the namespace used for a particular parser and context using the <tt>rerender_with_namespace(text, namespace, options)</tt> method.\n\n== <r:rerender>\n\nThis extension includes one tag that acts as a basic rerenderer.  Sometimes the tag that contains a rerenderable tag doesn\'t need to do anything but call it with the correct namespace due to the fact that tags may have side-effects.  For example, the example above can be\n\n<tt>\n<r:rerender>\n  <rr:table_of_contents/>\n  \n<r:h1>Foo</r:h1>\n\n...\n\n<r:h2>Bar</r:h2>\n\n...\n\n</r:rerender>\n</tt>\n\n...as long as the <r:hx> tags add effect an instance variable of the page that\'s accessible to tag.globals.page.'
WoW Addon - Addon Management Panel b'Ampere is a small addon designed to mirror the functionality of the login screen "Addons" button in-game.\nIt\'s designed to fit inside the config GUI introduced in patch 2.4.\nAmpere lets you quickly enable and disable addons, reload the UI, and load LoadOnDemand addons.\n\nh2. Links\n\n<b>Visit "my site":http://tekkub.net/ for more great addons<br>\nPlease report all bugs and feature requests to my "Github tracker":http://github.com/tekkub/Ampere/issues<br>\nPlease direct all feedback and questions to my "Google Groups":http://groups-beta.google.com/group/tekkub-wow mailinglist</b>\n'
Hemingway is a template for Wordpress b'# Hemingway\n\nHemingway is a template for Wordpress.\n\nPlease see <http://warpspire.com/hemingway> for more information.'
A MySpace parser written in Ruby that uses Hpricot b'DEPRECATED: DO NOT USE - this is old and pointless\n\nh1. MySpace Parser\n\nThis library is a really simple parser built using the excellent Hpricot library for Ruby.\n\nI\'m publishing it because people have asked me for it. Here. Have it. It\'s free software[1]!\n\nh2. How you can help\n\n* Extend it to support more of MySpace\'s terrible markup abominations\n* Write test cases[2] so we can make this thing not fail.\n\nfn1. It\'s licensed under the <a href="http://www.gnu.org/copyleft/gpl.html" rev="vote-for">GNU Public License</a>. You are free, but not free to make others unfree[3].\n\nfn2. Yes, I know it\'s not really a unit test since it\'s having to poll the network. And, no, I don\'t really care.\n\nfn3. Yes, I use a Mac. I know that makes me a hypocrite on subjects related to free software.\n'
Simple REST client for Ruby, inspired by microframework syntax for specifying actions. b'= REST Client -- simple DSL for accessing REST resources\n\nA simple REST client for Ruby, inspired by the Sinatra\'s microframework style\nof specifying actions: get, put, post, delete.\n\n== Usage: Raw URL\n\n  require \'rest_client\'\n\n  xml = RestClient.get \'http://example.com/resource\'\n  jpg = RestClient.get \'http://example.com/resource\', :accept => \'image/jpg\'\n\n  private_resource = RestClient.get \'https://user:password@example.com/private/resource\'\n\n  RestClient.put \'http://example.com/resource\', File.read(\'my.pdf\'), :content_type => \'application/pdf\'\n\n  RestClient.post \'http://example.com/resource\', xml, :content_type => \'application/xml\'\n\n  RestClient.delete \'http://example.com/resource\'\n\nSee RestClient module docs for details.\n\n== Usage: ActiveResource-Style\n\n  resource = RestClient::Resource.new \'http://example.com/resource\'\n  resource.get\n\n  private_resource = RestClient::Resource.new \'http://example.com/private/resource\', \'user\', \'pass\'\n  private_resource.put File.read(\'pic.jpg\'), :content_type => \'image/jpg\'\n\nSee RestClient::Resource module docs for details.\n\n== Usage: Resource Nesting\n\n  site = RestClient::Resource.new(\'http://example.com\')\n  site[\'posts/1/comments\'].post \'Good article.\', :content_type => \'text/plain\'\n\nSee RestClient::Resource docs for details.\n\n== Shell\n\nRun: \nrestclient resource_url [username] [password] \n\nor require the gem from within your ~/.rush/env.rb and have instant access to it from within your rush (http://rush.heroku.com) sessions.\n\nYou can also create a ~/.restclient file and store named sessions as:\n\nname:\n  :url: http://mydomain.com\n  :username: myusername\n  :password: supersecret\n\nanothername:\n  ...\n  \nThe use like:\n\nmycpu:~ adamwiggins$ restclient anothername\n>>r\n=> #<RestClient::Resource:0x557bac @password="supersecret", @user="myusername", @url="http://mydomain.com">\n>>get \'/\'\n=> Hey!\n\n== Meta\n\nWritten by Adam Wiggins (adam at heroku dot com)\n\nPatches contributed by: Chris Anderson, Greg Borenstein, Ardekantur, Pedro Belo, Rafael Souza, Rick Olson, and Aman Gupta\n\nReleased under the MIT License: http://www.opensource.org/licenses/mit-license.php\n\nhttp://rest-client.heroku.com\n\nhttp://github.com/adamwiggins/rest-client\n\n'
 b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
Radiant Extension for multiple language support b'= Site Language\n\nAdds the translation of the pages and snippets to Radiant, using the globalize plugin.\n\n- First, install globalize.\n- Second, install this extension, and enable it\n- Third, navigate to the "Site-Language" in the admin, and add some language-codes (en-UK, nl-BE,...)\n\nYou\'re done.'
The Curies library implements the CURIE syntax for expressing Compact URIs.  See http://www.w3.org/TR/curie/ for more information on the CURIE specification. b'= Curies\n\n* http://curies.rubyforge.org\n\n== DESCRIPTION:\n\nThe Curies library implements the CURIE syntax for expressing Compact URIs.  \n\nIn a nutshell, a CURIE is a compact way of representing a URI.  For example, suppose you\'ve got an XML document in which \nyou\'ll be writing many attributes of the form "http://www.amazon.com/?isbn=123478753".  With a CURIE, you can represent those as\n"[amazon:123478753]" where "amazon" is a registered prefix in your document.\n\nThis library is small, but useful if you\'re writing a parser for a language that uses CURIEs.  \nI wrote it because I\'m implementing an RDF/JSON library and, because the RDF/JSON spec isn\'t \nfinalized yet, I\'ve taken the liberty of using CURIEs rather than QNAMEs.\n\nSee http://www.w3.org/TR/curie/ for more information on the CURIE specification.\n\n== FEATURES:\n\n== 0.5.0 2008-03-19\n\n* Initial release:\n  * Should fully implement the W3C spec [http://www.w3.org/TR/curie/]\n  * Allows the creation of CURIEs\n  * Allows the parsing of a string as a putative CURIE\n  * Allows prefixes/namespaces to be added and removed\n  * Parses both safe and unsafe CURIEs but only outputs safe CURIEs\n  * Includes the FOAF namespace loaded by default\n\n== SYNOPSIS:\n\n<pre syntax="ruby">require \'curies\'</pre>\n<pre syntax="ruby">c = Curie.new("foaf", "person")</pre>\n\n<pre syntax="ruby">c.to_s</pre>\n<pre syntax="ruby">=>"[foaf:person]"</pre>\n\n<pre syntax="ruby">Curie.parse "[foaf:name]"</pre>\n<pre syntax="ruby">"http://xmlns.com/foaf/0.1/person"</pre>\n\n<pre syntax="ruby">Curie.parse "[foo:bar]"</pre>\n<pre syntax="ruby">"RuntimeError: Sorry, no namespace or prefix registered for curies with the prefix foo"</pre>\n<pre syntax="ruby">Curie.add_prefixes! :foo => "http://www.example.com/ns/foo/"</pre>\n<pre syntax="ruby">=> {"foo"=>"http://www.example.com/ns/foo/", "foaf"=>"http://xmlns.com/foaf/0.1/"}</pre>\n<pre syntax="ruby">Curie.parse "[foo:bar]"</pre>\n<pre syntax="ruby">=> "http://www.example.com/ns/foo/bar"</pre>\n\n== INSTALL:\n\nsudo gem install curies\n\n== LICENSE:\n\n(The MIT License)\n\nCopyright (c) 2009 Pius A. Uzamere II, The Uyiosa Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'
NetNewsWire Stylesheets repository (rails app) b'nnwstyle\nKevin Ballard\n\nnnwstyle is a rails app that provides a repository for NetNewsWire stylesheets.\nIt supports uploading and downloading stylesheets and rendering previews.\nThe interface is still extremely rough.\n'
Alan's Homedir 
Merb Core: All you need. None you don't. b'merb-core is a new branch of Merb (also referred to as merb-next or the 0.9 series) which aims to provide a stable, stripped down API for a future Merb 1.0 release.\n\nThis branch is based off the 0.5 release series but with significant rewrites.\n\nGoals of this release:\n\n  * Stabilize the @public interface methods to provide for a more consistent application development experience.\n  * Remove features until nothing except a central application API is left\n  * Improve comments on methods using a standard documentation methodology as described in DOCUMENTATION_STANDARDS\n  * Separate the tests into two sections... "private" and "public"\n    * Public methods are methods tagged with @public that will be part of the standard, stable Merb API\n    * Private methods are implementation methods that might \n  * Implement a new render API\n  * Build more extensions to regain selected features when needed\n  \nTo familiarize yourself with how a merb-core application might look,\nuse merb-gen (from merb-more) to generate a few apps:\n$ merb-gen myapp                   # a "normal" merb app\n$ merb-gen myapp --flat            # a flattened app\n$ merb-gen myapp --very-flat       # a single-file app\n\n'
Merb More: The Full Stack. Take what you need; leave what you don't. 
Merb Plugins: Even more modules to hook up your Merb installation 
Race Tracks Galore! 
Some Ruby scripts, which are useful for all kind of different tasks. b'h1. Some useful Ruby scripts\n\nh2. @textile2html@\n\nConverts files in textile-format to HTML\n\nbq. \n# Just install Ruby \n# and the RedCloth gem (@gem install redcloth@)\n# Call this file\n\nh2. @textile2plain@\n\nConverts files in textile-format to Plain text (useful for e.g. README.textile from Github)\n\nh2. @build_icon_list@\n\nGenerates a HTML-file which displays all icons in a directory (and sub-directories)\n\nh2. @image_converter@\n\nUses ImageMagick to convert e.g. PNG-files to GIF-files\n'
This plugin provides a flexible way to add authorization to Rails. This fork adds support for Merb 0.9  
[UNMAINTAINED] Ruby library for minifying CSS. 
Store translation strings in the database allowing you to update text without requiring a code deploy. b'GibberishDb\n===========\nThis plugin adds database support to Gibberish (http://errtheblog.com/posts/55-ya-talkin-gibberish) allowing\nyou to store (and change) your strings in your database. This probably is a bad idea unless you have a copy-editor\nwho is always bugging you to change the text on your website. Strings are cached using acts_as_cached to minimize the\ndatabase impact.\n\nAuthor:: Chris Eppstein (chris@eppsteins.net)\nCopyright:: (c) Copyright 2008 Caring, Inc. All Rights Reserved.\nLicense:: Released under the same licensing terms as Gibberish\n\n== Installation\nMigrate your database like so:\n  def self.up\n    create_table "languages" do |t|\n      t.column :name, :string, :null => false, :limit => 15, :unique => true\n    end\n    create_table "translations" do |t|\n      t.column :language_id, :integer, :null => false\n      t.column :key, :string, :null => false, :limit => 100 #max length for a column used in an index in mysql\n      t.column :value, :text\n      t.column, :format, :string, :null => false, :default => "inline"\n    end\n    add_index :translations, [:language_id, :key], :name => :one_translation_per_language, :unique => true\n  end\n  \n  def self.down\n    drop_table "languages"\n    drop_table "translations"\n  end\n\nAdd this to your environment.rb:\n  config.after_initialize do\n    Gibberish.load_languages! rescue nil #if you don\'t rescue, you\'ll crash during migrations\n  end\n  \n== Dependencies\n* Gibberish (duh!)\n* acts_as_cached (or cache_fu)\n\n== Usage\nUse is the same as before only the strings will come from your database now.\n\nYou can now use the following models:\n* +Gibberish::Language+\n* +Gibberish::Translation+\n\nTranslation cache is automatically expired after save, but if you add a new language, you\'ll need\nto call +Gibberish.load_languages!+ again.\n\n'
A jQuery powered Quicktime Interface Controller b'jQuery QT Controller 0.9.1\n======================================\n\njQuery Quicktime Controller is a quicktime movie controller interface powered by jQuery.\n\nIt\'s still in it\'s early phases of being a clean, bug-free plugin. I\'m waiting on Karl Swedberg to send me his SVN diff file to merge his new changes into the repository.\n\nIf you have been on the lookout for a jQuery plugin to help you build a better UI for your Quicktime movies, you may want to check out this plugin.\n\nIf you are a JavaScript Ninja, please get involved and help improve the plugin or add new features that everyone can use.\n\n\nBasic usage revolves around the use of this simple `markup` like so:\n\n\t<div class="qtc_movie_container">\n\t\t<noscript><p>Please enable JavaScript to view this page properly.</p></noscript>\n\t\t<a class="qtc_movie {width:448,height:252,autoplay:true,bgcolor:#fff}" href="http://www.image202.com/files/media/TG_Homeless_J.mov">TG_Homeless_J.mov</a>\n\t</div>\n\nThis will then populate the DOM with the proper Quicktime embed code.\n\nFunction\n---------\n\njQuery Quicktime Controller should:\n\n* Build the quicktime embed in the DOM using a class hook.\n* If JavaScript is not enabled fall back on an image if possible, or at least fall back on the "noscript" tag in the markup. Also would like to create new markup in the DOM just inside the body tag indicating to "Please enable JavaScript to view this page properly."\n* If Quicktime is not installed, insert alternate markup with class hooks to style a "Quicktime is required" box and provide a link to Apple.com/quicktime\n* Build the controller markup by referencing a div with the class "qtc_controller"\n* qtc_play_head should be click-drag-able to jog through the video\n* The "track" should be click-able to jump the video to the clicked point\n* The control button should toggle from pause to play respectively updating the class from play to pause to allow for CSS styling to alter the representative graphic of play or pause.\n* Allow the user to set the width and height from the markup level. If the width and height isn\'t given the plugin must set it for the user (if possible).\n* Allow setting the quicktime movie\'s background color.\n\nCompatibility\n-------------\n\nThis plugin has been tested with jQuery 1.2.1 and newer and should work in all browsers supported by jQuery itself (it has been tested with Safari 3 and newer, Mozilla Firefox 2 and newer, Opera 9.26 and Internet Explorer 6).\n\nLicensing\n---------\n\nCopyright (c) 2008 Adam Stacoviak - http://www.adamstacoviak.com/\n\nLicensed under the MIT (MIT-LICENSE.txt) License.\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the MIT-LICENSE.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nMIT License for more details.'
Pass the same parameters to many urls DRYly b'WithUrlScope\n============\n\nDescription goes here'
browser-based version of ultima used for a dhtml demo b"h1. ULTIMAte DHTML Demo\n\n!http://farm3.static.flickr.com/2257/2365875650_93ff35a02e.jpg?v=0!\n\nThis was just something I threw together in about 10 hours to demonstrate\nmy DHTML skills and to test a hypothesis that such a thing was possible.\nThis isn't much more than an engine for toddling around a map and getting\nyour butt kicked, but its a proof-of-concept that could be extended or\nmunged around by someone with more free time than myself.\n\n--Brendan"
The application creates airport invoices for companies using airport services. It also generates custom reports and statistics on a number of variables. 
Erste Version der Rails Referenzhandbuch Anwendung des Buches "Rails in der Praxis" b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting started\n\n1. At the command prompt, start a new rails application using the rails command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use the WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C-component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nHave "tail -f" commands running on the server.log and development.log. Rails will\nautomatically display debugging and runtime information to these files. Debugging\ninfo will also be shown in the browser on requests from 127.0.0.1.\n\n\n== Breakpoints\n\nBreakpoint support is available through the script/breakpointer client. This\nmeans that you can break out of execution at any point in the code, investigate\nand change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      breakpoint "Breaking out from the list"\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the breakpointer window. Here you can do things like:\n\nExecuting breakpoint "Breaking out from the list" at .../webrick_server.rb:16 in \'breakpoint\'\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a breakpoint"\n  => "hello from a breakpoint"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you press CTRL-D\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n\n== Description of contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.rhtml for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.rhtml. Inside default.rhtml,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ncomponents\n  Self-contained mini-applications that can bundle together controllers, models, and views.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
Rails Referenz Anwendung, zweiter Anlauf, für das Buch "Rails in der Praxis" b'== Welcome to Rails\n\nRails is a web-application and persistence framework that includes everything\nneeded to create database-backed web-applications according to the\nModel-View-Control pattern of separation. This pattern splits the view (also\ncalled the presentation) into "dumb" templates that are primarily responsible\nfor inserting pre-built data in between HTML tags. The model contains the\n"smart" domain objects (such as Account, Product, Person, Post) that holds all\nthe business logic and knows how to persist themselves to a database. The\ncontroller handles the incoming requests (such as Save New Account, Update\nProduct, Show Post) by manipulating the model and directing data to the view.\n\nIn Rails, the model is handled by what\'s called an object-relational mapping\nlayer entitled Active Record. This layer allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods. You can read more about Active Record in\nlink:files/vendor/rails/activerecord/README.html.\n\nThe controller and view are handled by the Action Pack, which handles both\nlayers by its two parts: Action View and Action Controller. These two layers\nare bundled in a single package due to their heavy interdependence. This is\nunlike the relationship between the Active Record and Action Pack that is much\nmore separate. Each of these packages can be used independently outside of\nRails.  You can read more about Action Pack in\nlink:files/vendor/rails/actionpack/README.html.\n\n\n== Getting Started\n\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\n   and your application name. Ex: rails myapp\n   (If you\'ve downloaded Rails in a complete tgz or zip, this step is already done)\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\n3. Go to http://localhost:3000/ and get "Welcome aboard: You\xe2\x80\x99re riding the Rails!"\n4. Follow the guidelines to start developing your application\n\n\n== Web Servers\n\nBy default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise\nRails will use WEBrick, the webserver that ships with Ruby. When you run script/server,\nRails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures\nthat you can always get up and running quickly.\n\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\nMore info at: http://mongrel.rubyforge.org\n\nIf Mongrel is not installed, Rails will look for lighttpd. It\'s considerably faster than\nMongrel and WEBrick and also suited for production use, but requires additional\ninstallation and currently only works well on OS X/Unix (Windows users are encouraged\nto start with Mongrel). We recommend version 1.4.11 and higher. You can download it from\nhttp://www.lighttpd.net.\n\nAnd finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby\nweb server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not\nfor production.\n\nBut of course its also possible to run Rails on any platform that supports FCGI.\nApache, LiteSpeed, IIS are just a few. For more information on FCGI,\nplease visit: http://wiki.rubyonrails.com/rails/pages/FastCGI\n\n\n== Debugging Rails\n\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\nwill help you debug it and get it back on the rails.\n\nFirst area to check is the application log files.  Have "tail -f" commands running\non the server.log and development.log. Rails will automatically display debugging\nand runtime information to these files. Debugging info will also be shown in the\nbrowser on requests from 127.0.0.1.\n\nYou can also log your own messages directly into the log file from your code using\nthe Ruby logger class from inside your controllers. Example:\n\n  class WeblogController < ActionController::Base\n    def destroy\n      @weblog = Weblog.find(params[:id])\n      @weblog.destroy\n      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")\n    end\n  end\n\nThe result will be a message in your log file along the lines of:\n\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\n\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\n\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\n\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\n\nThese two online (and free) books will bring you up to speed on the Ruby language\nand also on programming in general.\n\n\n== Debugger\n\nDebugger support is available through the debugger command when you start your Mongrel or\nWebrick server with --debugger. This means that you can break out of execution at any point\nin the code, investigate and change the model, AND then resume execution! Example:\n\n  class WeblogController < ActionController::Base\n    def index\n      @posts = Post.find(:all)\n      debugger\n    end\n  end\n\nSo the controller will accept the action, run the first line, then present you\nwith a IRB prompt in the server window. Here you can do things like:\n\n  >> @posts.inspect\n  => "[#<Post:0x14a6be8 @attributes={\\"title\\"=>nil, \\"body\\"=>nil, \\"id\\"=>\\"1\\"}>,\n       #<Post:0x14a6620 @attributes={\\"title\\"=>\\"Rails you know!\\", \\"body\\"=>\\"Only ten..\\", \\"id\\"=>\\"2\\"}>]"\n  >> @posts.first.title = "hello from a debugger"\n  => "hello from a debugger"\n\n...and even better is that you can examine how your runtime objects actually work:\n\n  >> f = @posts.first\n  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>\n  >> f.\n  Display all 152 possibilities? (y or n)\n\nFinally, when you\'re ready to resume execution, you enter "cont"\n\n\n== Console\n\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\nHere you\'ll have all parts of the application configured, just like it is when the\napplication is running. You can inspect domain models, change values, and save to the\ndatabase. Starting the script without arguments will launch it in the development environment.\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\n\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\n\n\n== Description of Contents\n\napp\n  Holds all the code that\'s specific to this particular application.\n\napp/controllers\n  Holds controllers that should be named like weblogs_controller.rb for\n  automated URL mapping. All controllers should descend from ApplicationController\n  which itself descends from ActionController::Base.\n\napp/models\n  Holds models that should be named like post.rb.\n  Most models will descend from ActiveRecord::Base.\n\napp/views\n  Holds the template files for the view that should be named like\n  weblogs/index.erb for the WeblogsController#index action. All views use eRuby\n  syntax.\n\napp/views/layouts\n  Holds the template files for layouts to be used with views. This models the common\n  header/footer method of wrapping views. In your views, define a layout using the\n  <tt>layout :default</tt> and create a file named default.erb. Inside default.erb,\n  call <% yield %> to render the view using this layout.\n\napp/helpers\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\n  for you automatically when using script/generate for controllers. Helpers can be used to\n  wrap functionality for your views into methods.\n\nconfig\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\n\ndb\n  Contains the database schema in schema.rb.  db/migrate contains all\n  the sequence of Migrations for your schema.\n\ndoc\n  This directory is where your application documentation will be stored when generated\n  using <tt>rake doc:app</tt>\n\nlib\n  Application specific libraries. Basically, any kind of custom code that doesn\'t\n  belong under controllers, models, or helpers. This directory is in the load path.\n\npublic\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\n  set as the DOCUMENT_ROOT of your web server.\n\nscript\n  Helper scripts for automation and generation.\n\ntest\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\n  test files will be generated for you and placed in this directory.\n\nvendor\n  External libraries that the application depends on. Also includes the plugins subdirectory.\n  This directory is in the load path.\n'
Open Source Social Network written in Ruby on Rail by Less Everything b'How to get LovdByLess up and running\n\nUSERS WHO ARE UPGRADING READ THE UPGRADE NOTES\n\nWINDOWS USERS READ THIS: http://www.gamutworks.net/blog/?p=17\nUBUNTO USERS READ THIS: http://groups.google.com/group/lovdbyless/browse_thread/thread/d29043342c47f06?hl=en\n\nSTART BY MAKING SURE your ruby gems are version 1.2.0 or greater:\n* (sudo) gem update --system\nThen add the github repo to your gems:\n* gem sources -a http://gems.github.com\n\n\n    * Lovd runs on Ruby on Rails, so first you need to get rails running. Go download rails (http://rubyonrails.org/down) and follow it\'s instructions to get rails running.\n    * The directions in this README file assume some knowledge of rails, but I\'ll go through it a bit here first.\n    * The first thing to do is install the ruby gems that are required. For each gem listed in the README, at the command line, do something like "gem install [gem name]" or "sudo gem install [gem name]".\n    * The next thing to do is set up your database (steps 1-4 in the README). Lovd is setup to use MySQL by default, so just follow the instructions in the README and configure the files for your computer.\n    * Skip step 5.\n    * Now setup global variable (site name and url and stuff) (steps 6-13) and change the (r)html and css to suit your taste.\n    * In dev mode, search (steps 14-16) should work right out of the box (assuming you install the gems). The search instructions are really for a production environment.\n    * Start lovd with the typical "./script/server" and point your browser to "http://localhost:3000".\n\n\n\n\nInstructions:\n\nQuick Setup (currently for non-Windows users only - due to ferret gem issues):\n\n  1. Edit config/database.yml.tmp to reflect the database names you would like to use.\n  2. Edit config/environments/production.rb so asset_host reflects the name of the production asset server\n  3. cp config/database.yml.tmp config/database.yml\n  4. MAKE SURE YOU UPGRADE TO GEMS 1.3.\n  5. RUN gem sources -a http://gems.github.com\n  6. rake lovdbyless:getting_started\n  7. rake test\n  8. See step #6 below to continue setup (near "Setup default values")\n\nThe getting_started rake task will install all required gems, create the databases in database.yml, \nand migrate the development and test databases.\n\nManual Setup:\n\nInstall the Required Gems:\n\n1. Install these gems:\n- rflickr\n- RedCloth\n- rmagick (will require ImageMagick, which is not a gem)\n- win32console (windows only)\n(The other gems are already provided in the vendor gems dir.)\n2. Run "rake gems:build" to build the gems that need building\n\n\nTIPS:\nInstalling ImageMagick and RMagick\nSee these posts for tips:\nhttp://b.lesseverything.com/2007/9/26/installing-imagemagick-and-rmagick-on-mac-os-x\nhttp://www.randycullom.com/chatterbox/archives/2006/12/installing_imag.html\n\nSetup the databases:\n\n1. Edit config/database.yml.tmp to reflect the database names you would like to use.\n2. cp config/database.yml.tmp config/database.yml\n3. rake db:create:all\n4. rake mig a=no\n\nAll tests pass:\n\n5. rake\n\nSetup default values:\n\n6. Edit config/initializers/exception_notifier.rb\n7. Edit the config/environment.rb file and change the config.action_controller.session data\n8. Edit config/environments/development.rb and production.rb to suit your tastes. (Specifically config.action_mailer.delivery_method)\n9. Change the values in config/initializers/global_variables.rb to match your site and domain. (Specifically SITE_NAME, SITE, MAILER_TO_ADDRESS, MAILER_FROM_ADDRESS, REGISTRATION_RECIPIENTS)\n10. Go to the section "About flickr integration" and follow the steps to either use flickr or not.\n\n11. Edit public/404.html, public/500.html, app/views/account_mailer/*\n12. Edit application.css to suite your tastes.\n13. Edit app/views/home/terms.\n\nInstall Sphinx:\n\n14. Go here and get the latest sphinx: http://sphinxsearch.com/downloads.html\n15. You can follow these commands:\n  wget http://sphinxsearch.com/downloads/sphinx-0.9.8.1.tar.gz\n  tar zxvf sphinx-0.9.8.1.tar.gz\n  cd sphinx-0.9.8.1\n  ./configure\n  make\n  sudo make install\n\nConfigure Thinking Sphinx:\n\n16. rake ts:start\n17. rake ts:in\n18. Rake ts:start again in sphinx is not running.\n19. Create a cron job that will rake ts:in every hour. This will make any changes made in the last hour searchable. It should look something like this: 0 * * * * cd /var/rails/lovdbyless/current/ && rake ts:in RAILS_ENV=production\nNote: remember that to call rails vi cron you have to make sure your crontab has a PATH variable set up. Include something like this at the top of your crontab: PATH=/usr/bin:/bin:/sbin:/usr/sbin:/sbin:/usr/local/bin\n\nStart Lovd By Less:\n\n20. ./script/server\n21. Go to the home page http://localhost:3000\n22. Go to the signup page and create an account.\n23. Go into the database and turn the is_admin flag to true on your new account.\n\n\n\nAbout flickr integration\n\nIf you WANT to have flickr integration in your Lovd By Less project, follow these setup instructions:\n1. Go http://flickr.com/services/api/keys/apply/ to apply for a flickr api key.\n2. Copy the Key and Secret into config/initializers/flickr.rb\n3. From the command line, run "ruby script/authorize_flickr.rb" and follow the instructions.\n  This stores the flickr auth stuff into config/flickr.cache. If you add this cache file to your source control, then you shouldn\'t have to repeat this in production. Alternatively, you can get a different key for production, if you\'d like.\n\nIf you DO NOT WANT to have flickr integration in your Lovd By Less project, follow these setup instructions:\n1. Delete line 15 from app/controllers/profiles_controller.rb [@flickr = @profile.flickr_username.blank? ? [] : flickr_images(flickr.people.findByUsername(@profile.flickr_username))]\n2. Delete lines 22-35 in app/views/profiles/_public.html.erb\n\n\n\n\n\n\n\n\nIs there a google group for this project?\n\nYes. It can be found here: http://groups.google.com/group/lovdbyless\n\n\n\n\nHow to change the page a user is redirected to after login or signup:\n\nIn AccountController.rb, look for lines that contain: redirect_back_or_default home_path and change either home_path to the path you want to send them to, or change redirect_back_or_default to redirect_to, or both.\n\n\n\n\nWhy is public/javascripts/less_routes.js always modified and needing to be checked in? I swear I didn\'t touch it.\n\nless_routes.js is automatically generate when your app starts. Any changes to this app will be lost the next time it\'s generated.\n\n\n\n\nHey, I get some mysql errors when installing the mysql gem. What the funk?\n\nIf you get errors that look something like "dlsym(0x10ef660, Init_mysql): symbol not found" when installing your mysql gem, it may be due to an inconsistency in the build architecture of mysql, ruby, the mysql gem or all three. Reinstall the aforementioned components as necessary using the i386 build.\n\n'
ipfw ruleset and launchd configuration for Mac OS X. b'\nNAME\n        OSXfw - IPFW firewall configuration with launchd files and script.\n\nSYNOPSIS\n        vi ipfw.conf\n        sudo make install restart\n\nDESCRIPTION\n        OSXfw includes:\n          - a sample firewall ruleset; functional yet tweakable\n          - plist file for use as SystemStarter service\n          - script to start/stop the service\n\n        During installation, the relevant files are placed under\n        /Library/StartupItems for use by SystemStarter.\n\n        The \'start\', \'stop\', \'restart\' targets in the Makefile are\n        shortcuts for the related SystemStarter calls.\n\nUSAGE\n        Just untar it somewhere. You can tweak the ipfw.conf file to\n        taste.  The script (titled simply "OSXfw") also sets some\n        sysctls that you may want to adjust.\n        \n        When done, simply run\n\n            sudo make install\n\n        and enter your password to authenticate; the files are\n        installed to the /Library/StartupItems/OSXfw directory to be\n        processed automatically at startup.\n        \n        To test:\n\n            sudo /sbin/SystemStarter start OSXfw\n\n        or simply\n\n            sudo make start\n\n        You should get a few messages as the script is processed.\n        If all appears well, type\n\n            sudo ipfw list\n\n        to make sure the ruleset was loaded.\n\n        After installation, a new ruleset file can be installed thus:\n\n            sudo make install restart\n\n\nMAKEFILE TARGETS\n        install:\n            Copies the plist XML file, the OSXfw script, and\n            ipfw.conf to the StartupItems folder where it will be\n            launched at startup.\n\n        uninstall:\n            TODO\n\n        start:\n            Loads installed ruleset and sets sysctls.\n\n        stop:\n            Flushes all rules, leaving only the default allow rule.\n\n        restart:\n            Calls the \'stop\' and \'start\' targets sequentially.\n\n\nFILES\n        OSXfw                     SystemStarter script to load/flush rules\n        StartupParameters.plist   XML file used to configure the service\n        ipfw.conf                 Sample, user-modifiable ruleset\n\n\nSEE ALSO\n        SystemStarter(8), launchd(8), ipfw(8), sysctl(8)\n\n\nBUGS\n        The Makefile could use better error-checking.\n\n\nHISTORY\n        This product was developed to make maintenance and loading of my\n        personal firewall easier.  However, its modularity and design\n        make it suitable for others to adapt and use as they wish.\n\n\nAUTHOR\n        Tim Hammerquist <penryu@gmail.com>\n\n\n'
ActionView helpers for showing relative time spans like "Jan 1 - 5" or "Jan 1 - Feb 5" 
Simple rpsec matcher for testing ActionController's filters presence b"== HaveFilter matcher\n\nHaveFilter matcher is a custom matcher for rspec suite. It's purpose is a testing of ActionController filters presense.\nIf you want to test presence of filters today, you have to do something like\n\n@controller.before_filters.should include(:filter_name)\n\nAs for me, it just looks ugly. No, really.\nI've spent some time thinking about it and made this filter. Sample usage could be found in spec/rails/matchers/have_filter_spec.rb\nI'll post some here:\n\n    @controller.should have_filter(:before_filter_method)\n    @controller.should have_filter(:before_filter_method).before(:any_action)\n    @controller.should have_filter(:after_some_actions_filter).after([:action_1, :action_2])\n\n== Thanks\n\nI would like to say 'thank you' to Yurii Rashkovskii (http://rashkovskii.com) and Michael Klishin (http://novemberain.com). Without them I would never get even a half of Ruby/Rails experience that I have now.\nAlso, thanks goes to my lovely wife and my family. They keep me turning.\n"
Accessing Google AJAX APIs from server code b'Google AJAX APIs from a server:\n\nHere\'s a little example code for doing Google AJAX API calls from a server.\nRight now it\'s just a proof of concept using Rhino.\n\nHere\'s what we\'ve got:\n  env.js - John Resig\'s "good enough browser/DOM environment"\n  ajax-environment.js - My additional bits of browser/DOM that were needed\n  language-api.js, feeds-api.js, search-api.js - examples\n  js.jar - Rhino 1.7R1\n\nTo run them you do something like this:\n  java -jar js.jar -debug language-api.js\n\njs.jar is part of Rhino, under the GPL and LGPL I think\nenv.js is copyright John Resig and MIT licensed\nthe reset are copyright Ian McKellar and MIT licensed\n'
Service to provide an ical format for a school timetable provided in HTML 
Quick & Dirty Folder Action to import downloaded Movies and TV-Shows into iTunes b'MovieHandler\n============\n\nAbout\n------------\n\nMovieHandler is a ruby / apple script that automatically imports tv shows into iTunes, assigns a cover and other information like episode number and title.\n\nRequirements\n------------\n\n- QuickTime Pro\n- Ruby\n- rubyosa gem (rubyosa.rubyforge.org)\n\nInstallation\n------------\n\nSince ruby and ruby gems come with Leopard with Mac OS 10.5 you\'ll just have to install rubyosa to get the script running. To do that open a Terminal and type:\n\n*sudo gem install rubyosa*\n\nIf you\'re running Tiger or older you can get rubygems at www.rubygems.org\n\nNot that you\'re all set:\n\n1. Place the movie_handler.scpt file in "~/Library/Scripts/Folder Action Scripts" and edit the location of the .rb file. For that just open the scpt file with the Apple Script Editor and edit the path\n\n2. Add the Folder Action to a Folder of your choice. Right click within the folder, choose more -> Configure Folder Actions and add the scpt file.\n\n3. you can add covers as a .pict file by creating a Cover subfolder in /Users/yourname/Pictures and placing them there\n\nenjoy\n\nKnown Issues\n------------\n\nSince MovieHandler deletes the original files after conversion please make sure that you checked the "Copy files to iTunes Music folder when adding to library" option in iTunes -> Preferences -> Advanced ( on by default )'
A copy of the functionality of the mongrel_proctitle plugin for Rails apps hosted with the Thin server. b"thin-proctitle\n\nhomepage:    http://github.com/grempe/thin-proctitle/tree/master\ngit repo :   git clone git://github.com/grempe/thin-proctitle.git\n\nConcept:\nDisplay as the *NIX process title what each of your Thin servers are doing.\n\nThe idea for this was shamelessly stolen from:\nhttp://purefiction.net/mongrel_proctitle/\n\nYou should be able to run 'ps' or 'top' on your *nix like system and see process output for your\nThin servers that looks something like this:\n\nthin [10010/2/358]: handling 127.0.0.1: HEAD /feed/calendar/global/91/6de4\n|     |     | |     |        |          |\n|     |     | |     |        |          The current request (method and path)\n|     |     | |     |        The client IP\n|     |     | |     What it's doing\n|     |     | The number of requests processed during the server's lifetime\n|     |     The number of requests currently queued/being processed concurrently\n|     The port that Mongrel is serving\nThe process name\n\n\nUsage:\n\n  Copy the thin_proctitle.ru file to RAILS_ROOT/config/thin_proctitle.ru\n\n  Modify the following variables in this file to fit your setup:\n\n    :root => '/your/rails/root/dir'\n    :environment => 'production'\n\n  Start your Thin server passing in the '--rackup' parameter which should look something like:\n\n    'thin start --rackup thin_proctitle.ru'\n\n    Tip:\n      See http://macournoyer.wordpress.com/2008/02/09/the-flexible-thin-anorexic-gymnast-that-democratized-deployment/\n\n  If you are using a Thin .yaml file for configuration you can also specify the rackup command there:\n\n    ...\n    rackup: config/thin_proctitle.ru\n    ...\n\nThanks:\n\nThanks to Marc-Andr\xc3\xa9 Cournoyer (macournoyer) for writing Thin and for providing the sample code behind this.\nhttp://macournoyer.wordpress.com/2008/02/09/the-flexible-thin-anorexic-gymnast-that-democratized-deployment/\nhttp://groups.google.com/group/thin-ruby/browse_thread/thread/760efc9c7e33d717\n\nAuthors:\nMarc-Andr\xc3\xa9 Cournoyer (github: macournoyer)\nGlenn Rempe (github: grempe)\n"
#tampa.rb irc log browser b'ok:\n- navigation broken down by date.\n- text search.\n- user tracking (frequent posts, etc).\n- redisplay link logs\n- schema\n \xe2\x9c\x93 lines\n  \xe2\x9c\x93 spoken_at\n  \xe2\x9c\x93 body\n  \xe2\x9c\x93 nick\n  \xe2\x9c\x93 message_type\n\nno:\n- geolocators.\n\nimplementation:\n\n\xe2\x9c\x93 merb w/ AR\n\n'
Erlectricity exposes Ruby to Erlang and vice versa. b'README for erlectricity\n=======================\n\n'
 b'Simple flight plan calculator.\n\nflight-plan.xls was my first attempt, using an excel spreadsheet\n\nruby example.rb\n\nwill print out an example.'
This plugin is an assortment of classes and patches to classes that are considered useful by us to be added to most/all projects b'CommonPlugin\n============\n\nThis plugin is an assortment of classes and patches to classes that are considered useful to be added to most/all projects\n\n\nInstallation\n============\n\ngit-rails install git@github.com:bwyrosdick/common-plugin.git common_plugin\n\n\nRequirements\n============\n\nYou must have the xml-magic gem installed\n\nsudo gem install xml-magic'
